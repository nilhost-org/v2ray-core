!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20201018.0/
.DEFAULT_GOAL	Makefile	/^.DEFAULT_GOAL := build$/;"	m
0	bin/config/config-client-prod.json	/^    {$/;"	o	array:inbounds
0	bin/config/config-client-prod.json	/^    {$/;"	o	array:outbounds
0	bin/config/config-client.json	/^    {$/;"	o	array:inbounds
0	bin/config/config-client.json	/^    {$/;"	o	array:outbounds
0	bin/config/ss-client.json	/^          {$/;"	o	array:outbounds.0.settings.servers
0	bin/config/ss-client.json	/^    {$/;"	o	array:inbounds
0	bin/config/ss-client.json	/^    {$/;"	o	array:outbounds
0	bin/config/ss-server.json	/^      {$/;"	o	array:p2p.seedlist
0	bin/config/ss-server.json	/^    {$/;"	o	array:inbounds
0	bin/config/ss-server.json	/^    {$/;"	o	array:outbounds
0	release/config/vpoint_socks_vmess.json	/^      "0": {"uplinkOnly": 0}$/;"	o	object:policy.levels
0	release/config/vpoint_socks_vmess.json	/^  "inbounds": [{$/;"	o	array:inbounds
0	release/config/vpoint_socks_vmess.json	/^  "outbounds": [{$/;"	o	array:outbounds
0	release/config/vpoint_vmess_freedom.json	/^        "ip": ["geoip:private"],$/;"	s	array:routing.rules.0.ip
0	release/config/vpoint_vmess_freedom.json	/^        {$/;"	o	array:inbounds.0.settings.clients
0	release/config/vpoint_vmess_freedom.json	/^      {$/;"	o	array:routing.rules
0	release/config/vpoint_vmess_freedom.json	/^  "inbounds": [{$/;"	o	array:inbounds
0	release/config/vpoint_vmess_freedom.json	/^  "outbounds": [{$/;"	o	array:outbounds
1	app/dispatcher/config.proto	/^  reserved 1;$/;"	f	message:v2ray.core.app.dispatcher.SessionConfig	typeref:typename:reserved
1	release/config/vpoint_vmess_freedom.json	/^  },{$/;"	o	array:outbounds
1	transport/internet/tcp/config.proto	/^  reserved 1;$/;"	f	message:v2ray.core.transport.internet.tcp.Config	typeref:typename:reserved
1	transport/internet/websocket/config.proto	/^  reserved 1;$/;"	f	message:v2ray.core.transport.internet.websocket.Config	typeref:typename:reserved
3	config.proto	/^  reserved 3;$/;"	f	message:v2ray.core.Config	typeref:typename:reserved
6	app/proxyman/config.proto	/^  reserved 6;$/;"	f	message:v2ray.core.app.proxyman.ReceiverConfig	typeref:typename:reserved
9	transport/internet/kcp/config.proto	/^  reserved 9;$/;"	f	message:v2ray.core.transport.internet.kcp.Config	typeref:typename:reserved
A	app/dns/dnscommon.go	/^	A    *IPRecord$/;"	m	struct:dns.record	typeref:typename:*IPRecord
AAAA	app/dns/dnscommon.go	/^	AAAA *IPRecord$/;"	m	struct:dns.record	typeref:typename:*IPRecord
ACTIVE	app/reverse/config.proto	/^    ACTIVE = 0;$/;"	e	enum:v2ray.core.app.reverse.Control.State
AEAD	common/crypto/auth.go	/^	cipher.AEAD$/;"	M	struct:crypto.AEADAuthenticator	typeref:typename:cipher.AEAD
AEADAuthCreator	proxy/shadowsocks/config.go	/^	AEADAuthCreator func(key []byte) cipher.AEAD$/;"	m	struct:shadowsocks.AEADCipher	typeref:typename:func(key []byte) cipher.AEAD
AEADAuthenticator	common/crypto/auth.go	/^type AEADAuthenticator struct {$/;"	s	package:crypto
AEADChunkSizeParser	common/crypto/chunk.go	/^type AEADChunkSizeParser struct {$/;"	s	package:crypto
AEADCipher	proxy/shadowsocks/config.go	/^type AEADCipher struct {$/;"	s	package:shadowsocks
AES128_GCM	common/protocol/headers.proto	/^  AES128_GCM = 3;$/;"	e	enum:v2ray.core.common.protocol.SecurityType
AES_128_CFB	proxy/shadowsocks/config.proto	/^  AES_128_CFB = 1;$/;"	e	enum:v2ray.core.proxy.shadowsocks.CipherType
AES_128_GCM	proxy/shadowsocks/config.proto	/^  AES_128_GCM = 5;$/;"	e	enum:v2ray.core.proxy.shadowsocks.CipherType
AES_256_CFB	proxy/shadowsocks/config.proto	/^  AES_256_CFB = 2;$/;"	e	enum:v2ray.core.proxy.shadowsocks.CipherType
AES_256_GCM	proxy/shadowsocks/config.proto	/^  AES_256_GCM = 6;$/;"	e	enum:v2ray.core.proxy.shadowsocks.CipherType
ALPN	infra/conf/transport_internet.go	/^	ALPN                     *StringList       `json:"alpn"`$/;"	m	struct:conf.XTLSConfig	typeref:typename:*StringList
ALPN	infra/conf/transport_internet.go	/^	ALPN                     *StringList      `json:"alpn"`$/;"	m	struct:conf.TLSConfig	typeref:typename:*StringList
API	annotations.go	/^	API string$/;"	m	struct:core.Annotation	typeref:typename:string
AS_IS	proxy/freedom/config.proto	/^    AS_IS = 0;$/;"	e	enum:v2ray.core.proxy.freedom.Config.DomainStrategy
AUTHORITY_ISSUE	transport/internet/tls/config.proto	/^    AUTHORITY_ISSUE = 2;$/;"	e	enum:v2ray.core.transport.internet.tls.Certificate.Usage
AUTHORITY_ISSUE	transport/internet/xtls/config.proto	/^    AUTHORITY_ISSUE = 2;$/;"	e	enum:v2ray.core.transport.internet.xtls.Certificate.Usage
AUTHORITY_VERIFY	transport/internet/tls/config.proto	/^    AUTHORITY_VERIFY = 1;$/;"	e	enum:v2ray.core.transport.internet.tls.Certificate.Usage
AUTHORITY_VERIFY	transport/internet/xtls/config.proto	/^    AUTHORITY_VERIFY = 1;$/;"	e	enum:v2ray.core.transport.internet.xtls.Certificate.Usage
AUTO	common/protocol/headers.proto	/^  AUTO = 2;$/;"	e	enum:v2ray.core.common.protocol.SecurityType
Abstract	infra/conf/transport_internet.go	/^	Abstract            bool   `json:"abstract"`$/;"	m	struct:conf.DomainSocketConfig	typeref:typename:bool
Abstract	transport/internet/domainsocket/config.pb.go	/^	Abstract bool `protobuf:"varint,2,opt,name=abstract,proto3" json:"abstract,omitempty"`$/;"	m	struct:domainsocket.Config	typeref:typename:bool
Accept	app/commander/outbound.go	/^func (l *OutboundListener) Accept() (net.Conn, error) {$/;"	f	struct:commander.OutboundListener	typeref:typename:(net.Conn, error)
AcceptProxyProtocol	infra/conf/transport_internet.go	/^	AcceptProxyProtocol bool              `json:"acceptProxyProtocol"`$/;"	m	struct:conf.WebSocketConfig	typeref:typename:bool
AcceptProxyProtocol	infra/conf/transport_internet.go	/^	AcceptProxyProtocol bool            `json:"acceptProxyProtocol"`$/;"	m	struct:conf.TCPConfig	typeref:typename:bool
AcceptProxyProtocol	infra/conf/transport_internet.go	/^	AcceptProxyProtocol bool   `json:"acceptProxyProtocol"`$/;"	m	struct:conf.DomainSocketConfig	typeref:typename:bool
AcceptProxyProtocol	transport/internet/domainsocket/config.pb.go	/^	AcceptProxyProtocol bool `protobuf:"varint,4,opt,name=acceptProxyProtocol,proto3" json:"acceptP/;"	m	struct:domainsocket.Config	typeref:typename:bool
AcceptProxyProtocol	transport/internet/tcp/config.pb.go	/^	AcceptProxyProtocol bool                 `protobuf:"varint,3,opt,name=accept_proxy_protocol,jso/;"	m	struct:tcp.Config	typeref:typename:bool
AcceptProxyProtocol	transport/internet/websocket/config.pb.go	/^	AcceptProxyProtocol bool      `protobuf:"varint,4,opt,name=accept_proxy_protocol,json=acceptPro/;"	m	struct:websocket.Config	typeref:typename:bool
AccessAccepted	common/log/access.go	/^	AccessAccepted = AccessStatus("accepted")$/;"	c	package:log
AccessLog	infra/conf/log.go	/^	AccessLog string `json:"access"`$/;"	m	struct:conf.LogConfig	typeref:typename:string
AccessLogPath	app/log/config.pb.go	/^	AccessLogPath string       `protobuf:"bytes,5,opt,name=access_log_path,json=accessLogPath,proto/;"	m	struct:log.Config	typeref:typename:string
AccessLogType	app/log/config.pb.go	/^	AccessLogType LogType      `protobuf:"varint,4,opt,name=access_log_type,json=accessLogType,prot/;"	m	struct:log.Config	typeref:typename:LogType
AccessMessage	common/log/access.go	/^type AccessMessage struct {$/;"	s	package:log
AccessMessageFromContext	common/log/access.go	/^func AccessMessageFromContext(ctx context.Context) *AccessMessage {$/;"	f	package:log	typeref:typename:*AccessMessage
AccessRejected	common/log/access.go	/^	AccessRejected = AccessStatus("rejected")$/;"	c	package:log
AccessStatus	common/log/access.go	/^type AccessStatus string$/;"	t	package:log	typeref:typename:string
Account	app/p2p/account/account.go	/^type Account struct {$/;"	s	package:account
Account	common/protocol/account.go	/^type Account interface {$/;"	i	package:protocol
Account	common/protocol/user.go	/^	Account Account$/;"	m	struct:protocol.MemoryUser	typeref:typename:Account
Account	common/protocol/user.pb.go	/^	Account *serial.TypedMessage `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempt/;"	m	struct:protocol.User	typeref:typename:*serial.TypedMessage
Account	proxy/http/config.pb.go	/^type Account struct {$/;"	s	package:http
Account	proxy/http/config.proto	/^message Account {$/;"	m	package:v2ray.core.proxy.http
Account	proxy/mtproto/config.pb.go	/^type Account struct {$/;"	s	package:mtproto
Account	proxy/mtproto/config.proto	/^message Account {$/;"	m	package:v2ray.core.proxy.mtproto
Account	proxy/shadowsocks/config.pb.go	/^type Account struct {$/;"	s	package:shadowsocks
Account	proxy/shadowsocks/config.proto	/^message Account {$/;"	m	package:v2ray.core.proxy.shadowsocks
Account	proxy/socks/config.pb.go	/^type Account struct {$/;"	s	package:socks
Account	proxy/socks/config.proto	/^message Account {$/;"	m	package:v2ray.core.proxy.socks
Account	proxy/trojan/config.pb.go	/^type Account struct {$/;"	s	package:trojan
Account	proxy/trojan/config.proto	/^message Account {$/;"	m	package:v2ray.core.proxy.trojan
Account	proxy/trojan/protocol.go	/^	Account    *MemoryAccount$/;"	m	struct:trojan.ConnWriter	typeref:typename:*MemoryAccount
Account	proxy/vless/account.pb.go	/^type Account struct {$/;"	s	package:vless
Account	proxy/vless/account.proto	/^message Account {$/;"	m	package:v2ray.core.proxy.vless
Account	proxy/vmess/account.pb.go	/^type Account struct {$/;"	s	package:vmess
Account	proxy/vmess/account.proto	/^message Account {$/;"	m	package:v2ray.core.proxy.vmess
Accounts	infra/conf/http.go	/^	Accounts    []*HttpAccount `json:"accounts"`$/;"	m	struct:conf.HttpServerConfig	typeref:typename:[]*HttpAccount
Accounts	infra/conf/socks.go	/^	Accounts   []*SocksAccount `json:"accounts"`$/;"	m	struct:conf.SocksServerConfig	typeref:typename:[]*SocksAccount
Accounts	proxy/http/config.pb.go	/^	Accounts         map[string]string `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,/;"	m	struct:http.ServerConfig	typeref:typename:map[string]string
Accounts	proxy/socks/config.pb.go	/^	Accounts   map[string]string `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitem/;"	m	struct:socks.ServerConfig	typeref:typename:map[string]string
AckList	transport/internet/kcp/receiving.go	/^type AckList struct {$/;"	s	package:kcp
AckSegment	transport/internet/kcp/segment.go	/^type AckSegment struct {$/;"	s	package:kcp
Acquire	transport/internet/domainsocket/listener.go	/^func (fl *fileLocker) Acquire() error {$/;"	f	struct:domainsocket.fileLocker	typeref:typename:error
Action	app/p2p/wire/seedlist.pb.go	/^	Action               ActionType `protobuf:"varint,1,opt,name=action,proto3,enum=wire.ActionType/;"	m	struct:wire.HelloSeedList	typeref:typename:ActionType
ActionType	app/p2p/wire/seedlist.pb.go	/^type ActionType int32$/;"	t	package:wire	typeref:typename:int32
ActionType	app/p2p/wire/seedlist.proto	/^enum ActionType {$/;"	g	package:wire
ActionType_SEED_OFFLINE	app/p2p/wire/seedlist.pb.go	/^	ActionType_SEED_OFFLINE ActionType = 1$/;"	c	package:wire	typeref:type:ActionType
ActionType_SEED_ONLINE	app/p2p/wire/seedlist.pb.go	/^	ActionType_SEED_ONLINE  ActionType = 0$/;"	c	package:wire	typeref:type:ActionType
ActionType_SEED_SUSPEND	app/p2p/wire/seedlist.pb.go	/^	ActionType_SEED_SUSPEND ActionType = 2$/;"	c	package:wire	typeref:type:ActionType
ActionType_SEED_UPDATE	app/p2p/wire/seedlist.pb.go	/^	ActionType_SEED_UPDATE  ActionType = 3$/;"	c	package:wire	typeref:type:ActionType
ActionType_name	app/p2p/wire/seedlist.pb.go	/^var ActionType_name = map[int32]string{$/;"	v	package:wire
ActionType_value	app/p2p/wire/seedlist.pb.go	/^var ActionType_value = map[string]int32{$/;"	v	package:wire
ActiveConnections	common/mux/client.go	/^func (m *ClientWorker) ActiveConnections() uint32 {$/;"	f	struct:mux.ClientWorker	typeref:typename:uint32
ActiveConnections	common/mux/server.go	/^func (w *ServerWorker) ActiveConnections() uint32 {$/;"	f	struct:mux.ServerWorker	typeref:typename:uint32
ActiveConnections	transport/internet/kcp/listener.go	/^func (l *Listener) ActiveConnections() int {$/;"	f	struct:kcp.Listener	typeref:typename:int
ActivityTimer	common/signal/timer.go	/^type ActivityTimer struct {$/;"	s	package:signal
ActivityUpdater	common/signal/timer.go	/^type ActivityUpdater interface {$/;"	i	package:signal
Add	app/dispatcher/stats_test.go	/^func (c *TestCounter) Add(v int64) int64 {$/;"	f	type:dispatcher_test.TestCounter	typeref:typename:int64
Add	app/router/condition.go	/^func (v *ConditionChan) Add(cond Condition) *ConditionChan {$/;"	f	type:router.ConditionChan	typeref:typename:*ConditionChan
Add	app/router/condition_geoip.go	/^func (c *GeoIPMatcherContainer) Add(geoip *GeoIP) (*GeoIPMatcher, error) {$/;"	f	struct:router.GeoIPMatcherContainer	typeref:typename:(*GeoIPMatcher, error)
Add	app/stats/counter.go	/^func (c *Counter) Add(delta int64) int64 {$/;"	f	struct:stats.Counter	typeref:typename:int64
Add	common/mux/session.go	/^func (m *SessionManager) Add(s *Session) {$/;"	f	struct:mux.SessionManager
Add	common/strmatcher/domain_matcher.go	/^func (g *DomainMatcherGroup) Add(domain string, value uint32) {$/;"	f	struct:strmatcher.DomainMatcherGroup
Add	common/strmatcher/full_matcher.go	/^func (g *FullMatcherGroup) Add(domain string, value uint32) {$/;"	f	struct:strmatcher.FullMatcherGroup
Add	common/strmatcher/strmatcher.go	/^func (g *MatcherGroup) Add(m Matcher) uint32 {$/;"	f	struct:strmatcher.MatcherGroup	typeref:typename:uint32
Add	features/stats/stats.go	/^	Add(int64) int64$/;"	n	interface:stats.Counter	typeref:typename:int64
Add	proxy/trojan/validator.go	/^func (v *Validator) Add(u *protocol.MemoryUser) error {$/;"	f	struct:trojan.Validator	typeref:typename:error
Add	proxy/vless/validator.go	/^func (v *Validator) Add(u *protocol.MemoryUser) error {$/;"	f	struct:vless.Validator	typeref:typename:error
Add	proxy/vmess/inbound/inbound.go	/^func (v *userByEmail) Add(u *protocol.MemoryUser) bool {$/;"	f	struct:inbound.userByEmail	typeref:typename:bool
Add	proxy/vmess/validator.go	/^func (v *TimedUserValidator) Add(u *protocol.MemoryUser) error {$/;"	f	struct:vmess.TimedUserValidator	typeref:typename:error
Add	transport/internet/kcp/receiving.go	/^func (l *AckList) Add(number uint32, timestamp uint32) {$/;"	f	struct:kcp.AckList
AddFeature	v2ray.go	/^func (s *Instance) AddFeature(feature features.Feature) error {$/;"	f	struct:core.Instance	typeref:typename:error
AddHandler	app/proxyman/inbound/inbound.go	/^func (m *Manager) AddHandler(ctx context.Context, handler inbound.Handler) error {$/;"	f	struct:inbound.Manager	typeref:typename:error
AddHandler	app/proxyman/outbound/outbound.go	/^func (m *Manager) AddHandler(ctx context.Context, handler outbound.Handler) error {$/;"	f	struct:outbound.Manager	typeref:typename:error
AddHandler	features/inbound/inbound.go	/^	AddHandler(ctx context.Context, handler Handler) error$/;"	n	interface:inbound.Manager	typeref:typename:error
AddHandler	features/outbound/outbound.go	/^	AddHandler(ctx context.Context, handler Handler) error$/;"	n	interface:outbound.Manager	typeref:typename:error
AddHandler	testing/mocks/outbound.go	/^func (m *OutboundManager) AddHandler(arg0 context.Context, arg1 outbound.Handler) error {$/;"	f	struct:mocks.OutboundManager	typeref:typename:error
AddHandler	testing/mocks/outbound.go	/^func (mr *OutboundManagerMockRecorder) AddHandler(arg0, arg1 interface{}) *gomock.Call {$/;"	f	struct:mocks.OutboundManagerMockRecorder	typeref:typename:*gomock.Call
AddInbound	app/proxyman/command/command.go	/^func (s *handlerServer) AddInbound(ctx context.Context, request *AddInboundRequest) (*AddInbound/;"	f	struct:command.handlerServer	typeref:typename:(*AddInboundResponse, error)
AddInbound	app/proxyman/command/command.proto	/^  rpc AddInbound(AddInboundRequest) returns (AddInboundResponse) {}$/;"	r	service:v2ray.core.app.proxyman.command.HandlerService	typeref:typename:AddInboundResponse
AddInbound	app/proxyman/command/command_grpc.pb.go	/^	AddInbound(context.Context, *AddInboundRequest) (*AddInboundResponse, error)$/;"	n	interface:command.HandlerServiceServer	typeref:typename:(*AddInboundResponse, error)
AddInbound	app/proxyman/command/command_grpc.pb.go	/^	AddInbound(ctx context.Context, in *AddInboundRequest, opts ...grpc.CallOption) (*AddInboundRes/;"	n	interface:command.HandlerServiceClient	typeref:typename:(*AddInboundResponse, error)
AddInbound	app/proxyman/command/command_grpc.pb.go	/^func (UnimplementedHandlerServiceServer) AddInbound(context.Context, *AddInboundRequest) (*AddIn/;"	f	struct:command.UnimplementedHandlerServiceServer	typeref:typename:(*AddInboundResponse, error)
AddInbound	app/proxyman/command/command_grpc.pb.go	/^func (c *handlerServiceClient) AddInbound(ctx context.Context, in *AddInboundRequest, opts ...gr/;"	f	struct:command.handlerServiceClient	typeref:typename:(*AddInboundResponse, error)
AddInboundHandler	v2ray.go	/^func AddInboundHandler(server *Instance, config *InboundHandlerConfig) error {$/;"	f	package:core	typeref:typename:error
AddInboundRequest	app/proxyman/command/command.pb.go	/^type AddInboundRequest struct {$/;"	s	package:command
AddInboundRequest	app/proxyman/command/command.proto	/^message AddInboundRequest {$/;"	m	package:v2ray.core.app.proxyman.command
AddInboundResponse	app/proxyman/command/command.pb.go	/^type AddInboundResponse struct {$/;"	s	package:command
AddInboundResponse	app/proxyman/command/command.proto	/^message AddInboundResponse {}$/;"	m	package:v2ray.core.app.proxyman.command
AddOutbound	app/proxyman/command/command.go	/^func (s *handlerServer) AddOutbound(ctx context.Context, request *AddOutboundRequest) (*AddOutbo/;"	f	struct:command.handlerServer	typeref:typename:(*AddOutboundResponse, error)
AddOutbound	app/proxyman/command/command.proto	/^  rpc AddOutbound(AddOutboundRequest) returns (AddOutboundResponse) {}$/;"	r	service:v2ray.core.app.proxyman.command.HandlerService	typeref:typename:AddOutboundResponse
AddOutbound	app/proxyman/command/command_grpc.pb.go	/^	AddOutbound(context.Context, *AddOutboundRequest) (*AddOutboundResponse, error)$/;"	n	interface:command.HandlerServiceServer	typeref:typename:(*AddOutboundResponse, error)
AddOutbound	app/proxyman/command/command_grpc.pb.go	/^	AddOutbound(ctx context.Context, in *AddOutboundRequest, opts ...grpc.CallOption) (*AddOutbound/;"	n	interface:command.HandlerServiceClient	typeref:typename:(*AddOutboundResponse, error)
AddOutbound	app/proxyman/command/command_grpc.pb.go	/^func (UnimplementedHandlerServiceServer) AddOutbound(context.Context, *AddOutboundRequest) (*Add/;"	f	struct:command.UnimplementedHandlerServiceServer	typeref:typename:(*AddOutboundResponse, error)
AddOutbound	app/proxyman/command/command_grpc.pb.go	/^func (c *handlerServiceClient) AddOutbound(ctx context.Context, in *AddOutboundRequest, opts .../;"	f	struct:command.handlerServiceClient	typeref:typename:(*AddOutboundResponse, error)
AddOutboundHandler	v2ray.go	/^func AddOutboundHandler(server *Instance, config *OutboundHandlerConfig) error {$/;"	f	package:core	typeref:typename:error
AddOutboundRequest	app/proxyman/command/command.pb.go	/^type AddOutboundRequest struct {$/;"	s	package:command
AddOutboundRequest	app/proxyman/command/command.proto	/^message AddOutboundRequest {$/;"	m	package:v2ray.core.app.proxyman.command
AddOutboundResponse	app/proxyman/command/command.pb.go	/^type AddOutboundResponse struct {$/;"	s	package:command
AddOutboundResponse	app/proxyman/command/command.proto	/^message AddOutboundResponse {}$/;"	m	package:v2ray.core.app.proxyman.command
AddServer	common/protocol/server_picker.go	/^func (sl *ServerList) AddServer(server *ServerSpec) {$/;"	f	struct:protocol.ServerList
AddUser	common/protocol/server_spec.go	/^func (s *ServerSpec) AddUser(user *MemoryUser) {$/;"	f	struct:protocol.ServerSpec
AddUser	proxy/proxy.go	/^	AddUser(context.Context, *protocol.MemoryUser) error$/;"	n	interface:proxy.UserManager	typeref:typename:error
AddUser	proxy/vless/inbound/inbound.go	/^func (h *Handler) AddUser(ctx context.Context, u *protocol.MemoryUser) error {$/;"	f	struct:inbound.Handler	typeref:typename:error
AddUser	proxy/vmess/aead/authid.go	/^func (a *AuthIDDecoderHolder) AddUser(key [16]byte, ticket interface{}) {$/;"	f	struct:aead.AuthIDDecoderHolder
AddUser	proxy/vmess/inbound/inbound.go	/^func (h *Handler) AddUser(ctx context.Context, user *protocol.MemoryUser) error {$/;"	f	struct:inbound.Handler	typeref:typename:error
AddUserOperation	app/proxyman/command/command.pb.go	/^type AddUserOperation struct {$/;"	s	package:command
AddUserOperation	app/proxyman/command/command.proto	/^message AddUserOperation {$/;"	m	package:v2ray.core.app.proxyman.command
AddWorker	app/reverse/portal.go	/^func (p *StaticMuxPicker) AddWorker(worker *PortalWorker) {$/;"	f	struct:reverse.StaticMuxPicker
AdditionalDataGenerator	common/crypto/auth.go	/^	AdditionalDataGenerator BytesGenerator$/;"	m	struct:crypto.AEADAuthenticator	typeref:typename:BytesGenerator
AdditionalPrimes	common/protocol/tls/cert/privateKey.go	/^	AdditionalPrimes []pkcs1AdditionalRSAPrime `asn1:"optional,omitempty"`$/;"	m	struct:cert.pkcs1PrivateKey	typeref:typename:[]pkcs1AdditionalRSAPrime
Addons	proxy/vless/encoding/addons.pb.go	/^type Addons struct {$/;"	s	package:encoding
Addons	proxy/vless/encoding/addons.proto	/^message Addons {$/;"	m	package:v2ray.core.proxy.vless.encoding
Addr	app/commander/outbound.go	/^func (l *OutboundListener) Addr() net.Addr {$/;"	f	struct:commander.OutboundListener	typeref:typename:net.Addr
Addr	common/net/system.go	/^type Addr = net.Addr$/;"	a	package:net	typeref:typename:net.Addr
Addr	transport/internet/domainsocket/listener.go	/^func (ln *Listener) Addr() net.Addr {$/;"	f	struct:domainsocket.Listener	typeref:typename:net.Addr
Addr	transport/internet/http/hub.go	/^func (l *Listener) Addr() net.Addr {$/;"	f	struct:http.Listener	typeref:typename:net.Addr
Addr	transport/internet/kcp/listener.go	/^func (l *Listener) Addr() net.Addr {$/;"	f	struct:kcp.Listener	typeref:typename:net.Addr
Addr	transport/internet/quic/hub.go	/^func (l *Listener) Addr() net.Addr {$/;"	f	struct:quic.Listener	typeref:typename:net.Addr
Addr	transport/internet/tcp/hub.go	/^func (v *Listener) Addr() net.Addr {$/;"	f	struct:tcp.Listener	typeref:typename:net.Addr
Addr	transport/internet/tcp_hub.go	/^	Addr() net.Addr$/;"	n	interface:internet.Listener	typeref:typename:net.Addr
Addr	transport/internet/udp/hub.go	/^func (h *Hub) Addr() net.Addr {$/;"	f	struct:udp.Hub	typeref:typename:net.Addr
Addr	transport/internet/websocket/hub.go	/^func (ln *Listener) Addr() net.Addr {$/;"	f	struct:websocket.Listener	typeref:typename:net.Addr
AddrError	common/net/system.go	/^type AddrError = net.AddrError$/;"	a	package:net	typeref:typename:net.AddrError
Address	app/dns/config.pb.go	/^	Address           *net.Endpoint                `protobuf:"bytes,1,opt,name=address,proto3" json/;"	m	struct:dns.NameServer	typeref:typename:*net.Endpoint
Address	app/proxyman/outbound/handler.go	/^func (h *Handler) Address() net.Address {$/;"	f	struct:outbound.Handler	typeref:typename:net.Address
Address	common/net/address.go	/^type Address interface {$/;"	i	package:net
Address	common/net/address.pb.go	/^	Address isIPOrDomain_Address `protobuf_oneof:"address"`$/;"	m	struct:net.IPOrDomain	typeref:typename:isIPOrDomain_Address
Address	common/net/destination.go	/^	Address Address$/;"	m	struct:net.Destination	typeref:typename:Address
Address	common/net/destination.pb.go	/^	Address *IPOrDomain `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`$/;"	m	struct:net.Endpoint	typeref:typename:*IPOrDomain
Address	common/protocol/headers.go	/^	Address  net.Address$/;"	m	struct:protocol.RequestHeader	typeref:typename:net.Address
Address	common/protocol/server_spec.pb.go	/^	Address *net.IPOrDomain `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`$/;"	m	struct:protocol.ServerEndpoint	typeref:typename:*net.IPOrDomain
Address	infra/conf/common.go	/^	net.Address$/;"	M	struct:conf.Address	typeref:typename:net.Address
Address	infra/conf/common.go	/^type Address struct {$/;"	s	package:conf
Address	infra/conf/dns.go	/^	Address   *Address$/;"	m	struct:conf.NameServerConfig	typeref:typename:*Address
Address	infra/conf/dns_proxy.go	/^	Address *Address `json:"address"`$/;"	m	struct:conf.DnsOutboundConfig	typeref:typename:*Address
Address	infra/conf/http.go	/^	Address *Address          `json:"address"`$/;"	m	struct:conf.HttpRemoteConfig	typeref:typename:*Address
Address	infra/conf/shadowsocks.go	/^	Address  *Address `json:"address"`$/;"	m	struct:conf.ShadowsocksServerTarget	typeref:typename:*Address
Address	infra/conf/socks.go	/^	Address *Address          `json:"address"`$/;"	m	struct:conf.SocksRemoteConfig	typeref:typename:*Address
Address	infra/conf/trojan.go	/^	Address  *Address `json:"address"`$/;"	m	struct:conf.TrojanServerTarget	typeref:typename:*Address
Address	infra/conf/vless.go	/^	Address *Address          `json:"address"`$/;"	m	struct:conf.VLessOutboundVnext	typeref:typename:*Address
Address	infra/conf/vmess.go	/^	Address *Address          `json:"address"`$/;"	m	struct:conf.VMessOutboundTarget	typeref:typename:*Address
Address	proxy/dokodemo/config.pb.go	/^	Address *net.IPOrDomain `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`$/;"	m	struct:dokodemo.Config	typeref:typename:*net.IPOrDomain
Address	proxy/socks/config.pb.go	/^	Address    *net.IPOrDomain   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempt/;"	m	struct:socks.ServerConfig	typeref:typename:*net.IPOrDomain
Address	transport/internet/dialer.go	/^	Address() net.Address$/;"	n	interface:internet.Dialer	typeref:typename:net.Address
AddressFamily	common/net/address.go	/^type AddressFamily byte$/;"	t	package:net	typeref:typename:byte
AddressFamilyByte	common/protocol/address.go	/^func AddressFamilyByte(b byte, f net.AddressFamily) AddressOption {$/;"	f	package:protocol	typeref:typename:AddressOption
AddressFamilyDomain	common/net/address.go	/^	AddressFamilyDomain = AddressFamily(2)$/;"	c	package:net
AddressFamilyIPv4	common/net/address.go	/^	AddressFamilyIPv4 = AddressFamily(0)$/;"	c	package:net
AddressFamilyIPv6	common/net/address.go	/^	AddressFamilyIPv6 = AddressFamily(1)$/;"	c	package:net
AddressOption	common/protocol/address.go	/^type AddressOption func(*option)$/;"	t	package:protocol	typeref:typename:func(*option)
AddressSerializer	common/protocol/address.go	/^type AddressSerializer interface {$/;"	i	package:protocol
AddressType	common/protocol/payload.go	/^type AddressType byte$/;"	t	package:protocol	typeref:typename:byte
AddressTypeDomain	common/protocol/payload.go	/^	AddressTypeDomain AddressType = 2$/;"	c	package:protocol	typeref:type:AddressType
AddressTypeIPv4	common/protocol/payload.go	/^	AddressTypeIPv4   AddressType = 1$/;"	c	package:protocol	typeref:type:AddressType
AddressTypeIPv6	common/protocol/payload.go	/^	AddressTypeIPv6   AddressType = 3$/;"	c	package:protocol	typeref:type:AddressType
AddressTypeParser	common/protocol/address.go	/^type AddressTypeParser func(byte) byte$/;"	t	package:protocol	typeref:typename:func(byte) byte
Adjust	common/buf/readv_reader.go	/^func (s *allocStrategy) Adjust(n uint32) {$/;"	f	struct:buf.allocStrategy
Advance	common/buf/buffer.go	/^func (b *Buffer) Advance(from int32) {$/;"	f	struct:buf.Buffer
AesCfb	proxy/shadowsocks/config.go	/^type AesCfb struct {$/;"	s	package:shadowsocks
Af	transport/internet/sockopt_freebsd.go	/^	Af        uint8$/;"	m	struct:internet.pfiocNatlook	typeref:typename:uint8
After	release/config/systemd/system/v2ray.service	/^After=network.target nss-lookup.target$/;"	k	section:Unit
After	release/config/systemd/system/v2ray@.service	/^After=network.target nss-lookup.target$/;"	k	section:Unit
Algo	common/protocol/tls/cert/privateKey.go	/^	Algo       pkix.AlgorithmIdentifier$/;"	m	struct:cert.pkcs8	typeref:typename:pkix.AlgorithmIdentifier
Alloc	app/stats/command/command.pb.go	/^	Alloc        uint64 `protobuf:"varint,3,opt,name=Alloc,proto3" json:"Alloc,omitempty"`$/;"	m	struct:command.SysStatsResponse	typeref:typename:uint64
Alloc	app/stats/command/command.proto	/^  uint64 Alloc = 3;$/;"	f	message:v2ray.core.app.stats.command.SysStatsResponse	typeref:typename:uint64
Alloc	common/buf/readv_reader.go	/^func (s *allocStrategy) Alloc() []*Buffer {$/;"	f	struct:buf.allocStrategy	typeref:typename:[]*Buffer
Alloc	common/bytespool/pool.go	/^func Alloc(size int32) []byte {$/;"	f	package:bytespool	typeref:typename:[]byte
Allocate	common/mux/session.go	/^func (m *SessionManager) Allocate() *Session {$/;"	f	struct:mux.SessionManager	typeref:typename:*Session
Allocation	infra/conf/v2ray.go	/^	Allocation     *InboundDetourAllocationConfig `json:"allocate"`$/;"	m	struct:conf.InboundDetourConfig	typeref:typename:*InboundDetourAllocationConfig
AllocationStrategy	app/proxyman/config.pb.go	/^	AllocationStrategy         *AllocationStrategy    `protobuf:"bytes,3,opt,name=allocation_strate/;"	m	struct:proxyman.ReceiverConfig	typeref:typename:*AllocationStrategy
AllocationStrategy	app/proxyman/config.pb.go	/^type AllocationStrategy struct {$/;"	s	package:proxyman
AllocationStrategy	app/proxyman/config.proto	/^message AllocationStrategy {$/;"	m	package:v2ray.core.app.proxyman
AllocationStrategyConcurrency	app/proxyman/config.proto	/^  message AllocationStrategyConcurrency {$/;"	m	message:v2ray.core.app.proxyman.AllocationStrategy
AllocationStrategyRefresh	app/proxyman/config.proto	/^  message AllocationStrategyRefresh {$/;"	m	message:v2ray.core.app.proxyman.AllocationStrategy
AllocationStrategy_AllocationStrategyConcurrency	app/proxyman/config.pb.go	/^type AllocationStrategy_AllocationStrategyConcurrency struct {$/;"	s	package:proxyman
AllocationStrategy_AllocationStrategyRefresh	app/proxyman/config.pb.go	/^type AllocationStrategy_AllocationStrategyRefresh struct {$/;"	s	package:proxyman
AllocationStrategy_Always	app/proxyman/config.pb.go	/^	AllocationStrategy_Always AllocationStrategy_Type = 0$/;"	c	package:proxyman	typeref:type:AllocationStrategy_Type
AllocationStrategy_External	app/proxyman/config.pb.go	/^	AllocationStrategy_External AllocationStrategy_Type = 2$/;"	c	package:proxyman	typeref:type:AllocationStrategy_Type
AllocationStrategy_Random	app/proxyman/config.pb.go	/^	AllocationStrategy_Random AllocationStrategy_Type = 1$/;"	c	package:proxyman	typeref:type:AllocationStrategy_Type
AllocationStrategy_Type	app/proxyman/config.pb.go	/^type AllocationStrategy_Type int32$/;"	t	package:proxyman	typeref:typename:int32
AllocationStrategy_Type_name	app/proxyman/config.pb.go	/^	AllocationStrategy_Type_name = map[int32]string{$/;"	v	package:proxyman
AllocationStrategy_Type_value	app/proxyman/config.pb.go	/^	AllocationStrategy_Type_value = map[string]int32{$/;"	v	package:proxyman
AllowInsecure	transport/internet/tls/config.pb.go	/^	AllowInsecure bool `protobuf:"varint,1,opt,name=allow_insecure,json=allowInsecure,proto3" json:/;"	m	struct:tls.Config	typeref:typename:bool
AllowInsecure	transport/internet/xtls/config.pb.go	/^	AllowInsecure bool `protobuf:"varint,1,opt,name=allow_insecure,json=allowInsecure,proto3" json:/;"	m	struct:xtls.Config	typeref:typename:bool
AllowInsecureCiphers	transport/internet/tls/config.pb.go	/^	AllowInsecureCiphers bool `protobuf:"varint,5,opt,name=allow_insecure_ciphers,json=allowInsecur/;"	m	struct:tls.Config	typeref:typename:bool
AllowInsecureCiphers	transport/internet/xtls/config.pb.go	/^	AllowInsecureCiphers bool `protobuf:"varint,5,opt,name=allow_insecure_ciphers,json=allowInsecur/;"	m	struct:xtls.Config	typeref:typename:bool
AllowTransparent	proxy/http/config.pb.go	/^	AllowTransparent bool              `protobuf:"varint,3,opt,name=allow_transparent,json=allowTra/;"	m	struct:http.ServerConfig	typeref:typename:bool
Alpn	infra/conf/trojan.go	/^	Alpn string          `json:"alpn"`$/;"	m	struct:conf.TrojanInboundFallback	typeref:typename:string
Alpn	infra/conf/vless.go	/^	Alpn string          `json:"alpn"`$/;"	m	struct:conf.VLessInboundFallback	typeref:typename:string
Alpn	proxy/trojan/config.pb.go	/^	Alpn string `protobuf:"bytes,1,opt,name=alpn,proto3" json:"alpn,omitempty"`$/;"	m	struct:trojan.Fallback	typeref:typename:string
Alpn	proxy/vless/inbound/config.pb.go	/^	Alpn string `protobuf:"bytes,1,opt,name=alpn,proto3" json:"alpn,omitempty"`$/;"	m	struct:inbound.Fallback	typeref:typename:string
AltName	common/platform/platform.go	/^	AltName string$/;"	m	struct:platform.EnvFlag	typeref:typename:string
AlterID	proxy/vmess/vmessCtxInterface.go	/^const AlterID = "VMessCtxInterface_AlterID"$/;"	c	package:vmess
AlterIDs	infra/conf/vmess.go	/^	AlterIDs uint16 `json:"alterId"`$/;"	m	struct:conf.VMessDefaultConfig	typeref:typename:uint16
AlterIDs	proxy/vmess/account.go	/^	AlterIDs []*protocol.ID$/;"	m	struct:vmess.MemoryAccount	typeref:typename:[]*protocol.ID
AlterId	proxy/vmess/account.pb.go	/^	AlterId uint32 `protobuf:"varint,2,opt,name=alter_id,json=alterId,proto3" json:"alter_id,omitem/;"	m	struct:vmess.Account	typeref:typename:uint32
AlterId	proxy/vmess/inbound/config.pb.go	/^	AlterId uint32 `protobuf:"varint,1,opt,name=alter_id,json=alterId,proto3" json:"alter_id,omitem/;"	m	struct:inbound.DefaultConfig	typeref:typename:uint32
AlterIds	common/protocol/headers.go	/^	AlterIds uint16$/;"	m	struct:protocol.CommandSwitchAccount	typeref:typename:uint16
AlterIds	infra/conf/vmess.go	/^	AlterIds uint16 `json:"alterId"`$/;"	m	struct:conf.VMessAccount	typeref:typename:uint16
AlterInbound	app/proxyman/command/command.go	/^func (s *handlerServer) AlterInbound(ctx context.Context, request *AlterInboundRequest) (*AlterI/;"	f	struct:command.handlerServer	typeref:typename:(*AlterInboundResponse, error)
AlterInbound	app/proxyman/command/command.proto	/^  rpc AlterInbound(AlterInboundRequest) returns (AlterInboundResponse) {}$/;"	r	service:v2ray.core.app.proxyman.command.HandlerService	typeref:typename:AlterInboundResponse
AlterInbound	app/proxyman/command/command_grpc.pb.go	/^	AlterInbound(context.Context, *AlterInboundRequest) (*AlterInboundResponse, error)$/;"	n	interface:command.HandlerServiceServer	typeref:typename:(*AlterInboundResponse, error)
AlterInbound	app/proxyman/command/command_grpc.pb.go	/^	AlterInbound(ctx context.Context, in *AlterInboundRequest, opts ...grpc.CallOption) (*AlterInbo/;"	n	interface:command.HandlerServiceClient	typeref:typename:(*AlterInboundResponse, error)
AlterInbound	app/proxyman/command/command_grpc.pb.go	/^func (UnimplementedHandlerServiceServer) AlterInbound(context.Context, *AlterInboundRequest) (*A/;"	f	struct:command.UnimplementedHandlerServiceServer	typeref:typename:(*AlterInboundResponse, error)
AlterInbound	app/proxyman/command/command_grpc.pb.go	/^func (c *handlerServiceClient) AlterInbound(ctx context.Context, in *AlterInboundRequest, opts ./;"	f	struct:command.handlerServiceClient	typeref:typename:(*AlterInboundResponse, error)
AlterInboundRequest	app/proxyman/command/command.pb.go	/^type AlterInboundRequest struct {$/;"	s	package:command
AlterInboundRequest	app/proxyman/command/command.proto	/^message AlterInboundRequest {$/;"	m	package:v2ray.core.app.proxyman.command
AlterInboundResponse	app/proxyman/command/command.pb.go	/^type AlterInboundResponse struct {$/;"	s	package:command
AlterInboundResponse	app/proxyman/command/command.proto	/^message AlterInboundResponse {}$/;"	m	package:v2ray.core.app.proxyman.command
AlterOutbound	app/proxyman/command/command.go	/^func (s *handlerServer) AlterOutbound(ctx context.Context, request *AlterOutboundRequest) (*Alte/;"	f	struct:command.handlerServer	typeref:typename:(*AlterOutboundResponse, error)
AlterOutbound	app/proxyman/command/command.proto	/^  rpc AlterOutbound(AlterOutboundRequest) returns (AlterOutboundResponse) {}$/;"	r	service:v2ray.core.app.proxyman.command.HandlerService	typeref:typename:AlterOutboundResponse
AlterOutbound	app/proxyman/command/command_grpc.pb.go	/^	AlterOutbound(context.Context, *AlterOutboundRequest) (*AlterOutboundResponse, error)$/;"	n	interface:command.HandlerServiceServer	typeref:typename:(*AlterOutboundResponse, error)
AlterOutbound	app/proxyman/command/command_grpc.pb.go	/^	AlterOutbound(ctx context.Context, in *AlterOutboundRequest, opts ...grpc.CallOption) (*AlterOu/;"	n	interface:command.HandlerServiceClient	typeref:typename:(*AlterOutboundResponse, error)
AlterOutbound	app/proxyman/command/command_grpc.pb.go	/^func (UnimplementedHandlerServiceServer) AlterOutbound(context.Context, *AlterOutboundRequest) (/;"	f	struct:command.UnimplementedHandlerServiceServer	typeref:typename:(*AlterOutboundResponse, error)
AlterOutbound	app/proxyman/command/command_grpc.pb.go	/^func (c *handlerServiceClient) AlterOutbound(ctx context.Context, in *AlterOutboundRequest, opts/;"	f	struct:command.handlerServiceClient	typeref:typename:(*AlterOutboundResponse, error)
AlterOutboundRequest	app/proxyman/command/command.pb.go	/^type AlterOutboundRequest struct {$/;"	s	package:command
AlterOutboundRequest	app/proxyman/command/command.proto	/^message AlterOutboundRequest {$/;"	m	package:v2ray.core.app.proxyman.command
AlterOutboundResponse	app/proxyman/command/command.pb.go	/^type AlterOutboundResponse struct {$/;"	s	package:command
AlterOutboundResponse	app/proxyman/command/command.proto	/^message AlterOutboundResponse {}$/;"	m	package:v2ray.core.app.proxyman.command
Always	app/proxyman/config.proto	/^    Always = 0;$/;"	e	enum:v2ray.core.app.proxyman.AllocationStrategy.Type
AlwaysOnInboundHandler	app/proxyman/inbound/always.go	/^type AlwaysOnInboundHandler struct {$/;"	s	package:inbound
AlwaysValid	common/protocol/server_spec.go	/^func AlwaysValid() ValidationStrategy {$/;"	f	package:protocol	typeref:typename:ValidationStrategy
AmbientCapabilities	release/config/systemd/system/v2ray.service	/^AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE$/;"	k	section:Service
AmbientCapabilities	release/config/systemd/system/v2ray@.service	/^AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE$/;"	k	section:Service
Annotation	annotations.go	/^type Annotation struct {$/;"	s	package:core
AntiReplayTime	common/antireplay/antireplay.go	/^	AntiReplayTime int64$/;"	m	struct:antireplay.AntiReplayWindow	typeref:typename:int64
AntiReplayWindow	common/antireplay/antireplay.go	/^type AntiReplayWindow struct {$/;"	s	package:antireplay
AnyIP	common/net/address.go	/^	AnyIP = IPAddress([]byte{0, 0, 0, 0})$/;"	v	package:net
AnyIPv6	common/net/address.go	/^	AnyIPv6 = IPAddress([]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})$/;"	v	package:net
AnyValidID	proxy/vmess/account.go	/^func (a *MemoryAccount) AnyValidID() *protocol.ID {$/;"	f	struct:vmess.MemoryAccount	typeref:typename:*protocol.ID
Api	infra/conf/v2ray.go	/^	Api             *ApiConfig             `json:"api"`$/;"	m	struct:conf.Config	typeref:typename:*ApiConfig
ApiCommand	infra/control/api.go	/^type ApiCommand struct{}$/;"	s	package:control
ApiConfig	infra/conf/api.go	/^type ApiConfig struct {$/;"	s	package:conf
App	config.pb.go	/^	App []*serial.TypedMessage `protobuf:"bytes,4,rep,name=app,proto3" json:"app,omitempty"`$/;"	m	struct:core.Config	typeref:typename:[]*serial.TypedMessage
Apply	app/router/condition.go	/^	Apply(ctx routing.Context) bool$/;"	n	interface:router.Condition	typeref:typename:bool
Apply	app/router/condition.go	/^func (m *AttributeMatcher) Apply(ctx routing.Context) bool {$/;"	f	struct:router.AttributeMatcher	typeref:typename:bool
Apply	app/router/condition.go	/^func (m *DomainMatcher) Apply(ctx routing.Context) bool {$/;"	f	struct:router.DomainMatcher	typeref:typename:bool
Apply	app/router/condition.go	/^func (m *MultiGeoIPMatcher) Apply(ctx routing.Context) bool {$/;"	f	struct:router.MultiGeoIPMatcher	typeref:typename:bool
Apply	app/router/condition.go	/^func (m *ProtocolMatcher) Apply(ctx routing.Context) bool {$/;"	f	struct:router.ProtocolMatcher	typeref:typename:bool
Apply	app/router/condition.go	/^func (v *ConditionChan) Apply(ctx routing.Context) bool {$/;"	f	type:router.ConditionChan	typeref:typename:bool
Apply	app/router/condition.go	/^func (v *InboundTagMatcher) Apply(ctx routing.Context) bool {$/;"	f	struct:router.InboundTagMatcher	typeref:typename:bool
Apply	app/router/condition.go	/^func (v *PortMatcher) Apply(ctx routing.Context) bool {$/;"	f	struct:router.PortMatcher	typeref:typename:bool
Apply	app/router/condition.go	/^func (v *UserMatcher) Apply(ctx routing.Context) bool {$/;"	f	struct:router.UserMatcher	typeref:typename:bool
Apply	app/router/condition.go	/^func (v NetworkMatcher) Apply(ctx routing.Context) bool {$/;"	f	struct:router.NetworkMatcher	typeref:typename:bool
Apply	app/router/config.go	/^func (r *Rule) Apply(ctx routing.Context) bool {$/;"	f	struct:router.Rule	typeref:typename:bool
Apply	transport/config.go	/^func (c *Config) Apply() error {$/;"	f	unknown:transport.Config	typeref:typename:error
ApplyDomain	app/router/condition.go	/^func (m *DomainMatcher) ApplyDomain(domain string) bool {$/;"	f	struct:router.DomainMatcher	typeref:typename:bool
ApplyGlobalTransportSettings	transport/internet/config.go	/^func ApplyGlobalTransportSettings(settings []*TransportConfig) error {$/;"	f	package:internet	typeref:typename:error
ApplyInbound	app/proxyman/command/command.go	/^	ApplyInbound(context.Context, inbound.Handler) error$/;"	n	interface:command.InboundOperation	typeref:typename:error
ApplyInbound	app/proxyman/command/command.go	/^func (op *AddUserOperation) ApplyInbound(ctx context.Context, handler inbound.Handler) error {$/;"	f	unknown:command.AddUserOperation	typeref:typename:error
ApplyInbound	app/proxyman/command/command.go	/^func (op *RemoveUserOperation) ApplyInbound(ctx context.Context, handler inbound.Handler) error /;"	f	unknown:command.RemoveUserOperation	typeref:typename:error
ApplyOutbound	app/proxyman/command/command.go	/^	ApplyOutbound(context.Context, outbound.Handler) error$/;"	n	interface:command.OutboundOperation	typeref:typename:error
ApplySecret	proxy/mtproto/auth.go	/^func (a *Authentication) ApplySecret(b []byte) {$/;"	f	struct:mtproto.Authentication
Arg	common/cmdarg/cmdarg.go	/^type Arg []string$/;"	t	package:cmdarg	typeref:typename:[]string
AsAccount	common/protocol/account.go	/^	AsAccount() (Account, error)$/;"	n	interface:protocol.AsAccount	typeref:typename:(Account, error)
AsAccount	common/protocol/account.go	/^type AsAccount interface {$/;"	i	package:protocol
AsAccount	proxy/http/config.go	/^func (a *Account) AsAccount() (protocol.Account, error) {$/;"	f	unknown:http.Account	typeref:typename:(protocol.Account, error)
AsAccount	proxy/shadowsocks/config.go	/^func (a *Account) AsAccount() (protocol.Account, error) {$/;"	f	unknown:shadowsocks.Account	typeref:typename:(protocol.Account, error)
AsAccount	proxy/socks/config.go	/^func (a *Account) AsAccount() (protocol.Account, error) {$/;"	f	unknown:socks.Account	typeref:typename:(protocol.Account, error)
AsAccount	proxy/trojan/config.go	/^func (a *Account) AsAccount() (protocol.Account, error) {$/;"	f	unknown:trojan.Account	typeref:typename:(protocol.Account, error)
AsAccount	proxy/vless/account.go	/^func (a *Account) AsAccount() (protocol.Account, error) {$/;"	f	unknown:vless.Account	typeref:typename:(protocol.Account, error)
AsAccount	proxy/vmess/account.go	/^func (a *Account) AsAccount() (protocol.Account, error) {$/;"	f	unknown:vmess.Account	typeref:typename:(protocol.Account, error)
AsAddress	common/net/address.go	/^func (d *IPOrDomain) AsAddress() Address {$/;"	f	unknown:net.IPOrDomain	typeref:typename:Address
AsDestination	common/net/destination.go	/^func (p *Endpoint) AsDestination() Destination {$/;"	f	unknown:net.Endpoint	typeref:typename:Destination
AsIs	app/router/config.proto	/^    AsIs = 0;$/;"	e	enum:v2ray.core.app.router.Config.DomainStrategy
AsIs	transport/internet/config.proto	/^    AsIs = 0;$/;"	e	enum:v2ray.core.transport.internet.SocketConfig.TCPFastOpenState
AsProtobufMessage	app/router/command/config.go	/^func AsProtobufMessage(fieldSelectors []string) func(routing.Route) *RoutingContext {$/;"	f	package:command	typeref:typename:func(routing.Route) *RoutingContext
AsRoutingContext	app/router/command/config.go	/^func AsRoutingContext(r *RoutingContext) routing.Context {$/;"	f	package:command	typeref:typename:routing.Context
AsRoutingContext	features/routing/session/context.go	/^func AsRoutingContext(ctx context.Context) routing.Context {$/;"	f	package:session	typeref:typename:routing.Context
AsRoutingRoute	app/router/command/config.go	/^func AsRoutingRoute(r *RoutingContext) routing.Route {$/;"	f	package:command	typeref:typename:routing.Route
AtDebug	common/errors/errors.go	/^func (err *Error) AtDebug() *Error {$/;"	f	struct:errors.Error	typeref:typename:*Error
AtError	common/errors/errors.go	/^func (err *Error) AtError() *Error {$/;"	f	struct:errors.Error	typeref:typename:*Error
AtInfo	common/errors/errors.go	/^func (err *Error) AtInfo() *Error {$/;"	f	struct:errors.Error	typeref:typename:*Error
AtWarning	common/errors/errors.go	/^func (err *Error) AtWarning() *Error {$/;"	f	struct:errors.Error	typeref:typename:*Error
Attribute	app/router/config.pb.go	/^	Attribute []*Domain_Attribute `protobuf:"bytes,3,rep,name=attribute,proto3" json:"attribute,omi/;"	m	struct:router.Domain	typeref:typename:[]*Domain_Attribute
Attribute	app/router/config.proto	/^  message Attribute {$/;"	m	message:v2ray.core.app.router.Domain
Attribute	common/session/session.go	/^func (c *Content) Attribute(name string) string {$/;"	f	struct:session.Content	typeref:typename:string
AttributeList	infra/conf/router.go	/^type AttributeList struct {$/;"	s	package:conf
AttributeMatcher	app/router/condition.go	/^type AttributeMatcher struct {$/;"	s	package:router
AttributeMatcher	infra/conf/router.go	/^type AttributeMatcher interface {$/;"	i	package:conf
Attributes	app/router/command/command.pb.go	/^	Attributes        map[string]string `protobuf:"bytes,10,rep,name=Attributes,proto3" json:"Attri/;"	m	struct:command.RoutingContext	typeref:typename:map[string]string
Attributes	app/router/command/command.proto	/^  map<string, string> Attributes = 10;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:map<string,string>
Attributes	app/router/config.pb.go	/^	Attributes     string        `protobuf:"bytes,15,opt,name=attributes,proto3" json:"attributes,o/;"	m	struct:router.RoutingRule	typeref:typename:string
Attributes	common/session/session.go	/^	Attributes map[string]string$/;"	m	struct:session.Content	typeref:typename:map[string]string
Attribution	.github/CODE_OF_CONDUCT.md	/^## Attribution$/;"	s	chapter:Contributor Covenant Code of Conduct
Auth	common/crypto/chunk.go	/^	Auth *AEADAuthenticator$/;"	m	struct:crypto.AEADChunkSizeParser	typeref:typename:*AEADAuthenticator
AuthIDDecoder	proxy/vmess/aead/authid.go	/^type AuthIDDecoder struct {$/;"	s	package:aead
AuthIDDecoderHolder	proxy/vmess/aead/authid.go	/^type AuthIDDecoderHolder struct {$/;"	s	package:aead
AuthIDDecoderItem	proxy/vmess/aead/authid.go	/^type AuthIDDecoderItem struct {$/;"	s	package:aead
AuthMethod	infra/conf/socks.go	/^	AuthMethod string          `json:"auth"`$/;"	m	struct:conf.SocksServerConfig	typeref:typename:string
AuthMethodNoAuth	infra/conf/socks.go	/^	AuthMethodNoAuth   = "noauth"$/;"	c	package:conf
AuthMethodUserPass	infra/conf/socks.go	/^	AuthMethodUserPass = "password"$/;"	c	package:conf
AuthType	proxy/socks/config.pb.go	/^	AuthType   AuthType          `protobuf:"varint,1,opt,name=auth_type,json=authType,proto3,enum=v/;"	m	struct:socks.ServerConfig	typeref:typename:AuthType
AuthType	proxy/socks/config.pb.go	/^type AuthType int32$/;"	t	package:socks	typeref:typename:int32
AuthType	proxy/socks/config.proto	/^enum AuthType {$/;"	g	package:v2ray.core.proxy.socks
AuthType_NO_AUTH	proxy/socks/config.pb.go	/^	AuthType_NO_AUTH AuthType = 0$/;"	c	package:socks	typeref:type:AuthType
AuthType_PASSWORD	proxy/socks/config.pb.go	/^	AuthType_PASSWORD AuthType = 1$/;"	c	package:socks	typeref:type:AuthType
AuthType_name	proxy/socks/config.pb.go	/^	AuthType_name = map[int32]string{$/;"	v	package:socks
AuthType_value	proxy/socks/config.pb.go	/^	AuthType_value = map[string]int32{$/;"	v	package:socks
Authenticate	proxy/vmess/encoding/auth.go	/^func Authenticate(b []byte) uint32 {$/;"	f	package:encoding	typeref:typename:uint32
AuthenticateMessage	app/p2p/protocol/seedlist/message.go	/^func AuthenticateMessage(message proto.Message, data *wire.MessageData) bool {$/;"	f	package:seedlist	typeref:typename:bool
Authentication	proxy/mtproto/auth.go	/^type Authentication struct {$/;"	s	package:mtproto
AuthenticationReader	common/crypto/auth.go	/^type AuthenticationReader struct {$/;"	s	package:crypto
AuthenticationWriter	common/crypto/auth.go	/^type AuthenticationWriter struct {$/;"	s	package:crypto
Authenticator	common/crypto/auth.go	/^type Authenticator interface {$/;"	i	package:crypto
Authority	common/protocol/tls/cert/cert.go	/^func Authority(isCA bool) Option {$/;"	f	package:cert	typeref:typename:Option
AverageLatency	common/peer/latency.go	/^type AverageLatency struct {$/;"	s	package:peer
BITSPERKEY	store/leveldb.go	/^const BITSPERKEY = 10$/;"	c	package:store
Balancer	app/router/balancing.go	/^type Balancer struct {$/;"	s	package:router
Balancer	app/router/config.go	/^	Balancer  *Balancer$/;"	m	struct:router.Rule	typeref:typename:*Balancer
BalancerTag	infra/conf/router.go	/^	BalancerTag string `json:"balancerTag"`$/;"	m	struct:conf.RouterRule	typeref:typename:string
Balancers	infra/conf/router.go	/^	Balancers      []*BalancingRule   `json:"balancers"`$/;"	m	struct:conf.RouterConfig	typeref:typename:[]*BalancingRule
BalancingRule	app/router/config.pb.go	/^	BalancingRule  []*BalancingRule      `protobuf:"bytes,3,rep,name=balancing_rule,json=balancingR/;"	m	struct:router.Config	typeref:typename:[]*BalancingRule
BalancingRule	app/router/config.pb.go	/^type BalancingRule struct {$/;"	s	package:router
BalancingRule	app/router/config.proto	/^message BalancingRule {$/;"	m	package:v2ray.core.app.router
BalancingRule	infra/conf/router.go	/^type BalancingRule struct {$/;"	s	package:conf
BalancingStrategy	app/router/balancing.go	/^type BalancingStrategy interface {$/;"	i	package:router
BalancingTag	app/router/config.pb.go	/^	BalancingTag string `protobuf:"bytes,12,opt,name=balancing_tag,json=balancingTag,proto3,oneof"`$/;"	m	struct:router.RoutingRule_BalancingTag	typeref:typename:string
Base	common/errors/errors.go	/^func (err *Error) Base(e error) *Error {$/;"	f	struct:errors.Error	typeref:typename:*Error
BatchCommit	store/leveldb.go	/^func (self *LevelDBStore) BatchCommit() error {$/;"	f	struct:store.LevelDBStore	typeref:typename:error
BatchDelete	store/leveldb.go	/^func (self *LevelDBStore) BatchDelete(key []byte) {$/;"	f	struct:store.LevelDBStore
BatchPut	store/leveldb.go	/^func (self *LevelDBStore) BatchPut(key []byte, value []byte) {$/;"	f	struct:store.LevelDBStore
BeforeTime	common/protocol/server_spec.go	/^func BeforeTime(t time.Time) ValidationStrategy {$/;"	f	package:protocol	typeref:typename:ValidationStrategy
BenchmarkAESDecryption	common/crypto/benchmark_test.go	/^func BenchmarkAESDecryption(b *testing.B) {$/;"	f	package:crypto_test
BenchmarkAESEncryption	common/crypto/benchmark_test.go	/^func BenchmarkAESEncryption(b *testing.B) {$/;"	f	package:crypto_test
BenchmarkAddressReadingDomain	common/protocol/address_test.go	/^func BenchmarkAddressReadingDomain(b *testing.B) {$/;"	f	package:protocol_test
BenchmarkAddressReadingIPv4	common/protocol/address_test.go	/^func BenchmarkAddressReadingIPv4(b *testing.B) {$/;"	f	package:protocol_test
BenchmarkAddressReadingIPv6	common/protocol/address_test.go	/^func BenchmarkAddressReadingIPv6(b *testing.B) {$/;"	f	package:protocol_test
BenchmarkAddressWritingDomain	common/protocol/address_test.go	/^func BenchmarkAddressWritingDomain(b *testing.B) {$/;"	f	package:protocol_test
BenchmarkAddressWritingIPv4	common/protocol/address_test.go	/^func BenchmarkAddressWritingIPv4(b *testing.B) {$/;"	f	package:protocol_test
BenchmarkAddressWritingIPv6	common/protocol/address_test.go	/^func BenchmarkAddressWritingIPv6(b *testing.B) {$/;"	f	package:protocol_test
BenchmarkCertificateIssuing	transport/internet/tls/config_test.go	/^func BenchmarkCertificateIssuing(b *testing.B) {$/;"	f	package:tls_test
BenchmarkCertificateIssuing	transport/internet/xtls/config_test.go	/^func BenchmarkCertificateIssuing(b *testing.B) {$/;"	f	package:xtls_test
BenchmarkChaCha20	common/crypto/benchmark_test.go	/^func BenchmarkChaCha20(b *testing.B) {$/;"	f	package:crypto_test
BenchmarkChaCha20IETF	common/crypto/benchmark_test.go	/^func BenchmarkChaCha20IETF(b *testing.B) {$/;"	f	package:crypto_test
BenchmarkConcat	common/serial/string_test.go	/^func BenchmarkConcat(b *testing.B) {$/;"	f	package:serial_test
BenchmarkCopy	common/buf/copy_test.go	/^func BenchmarkCopy(b *testing.B) {$/;"	f	package:buf_test
BenchmarkDomainMatcherGroup	common/strmatcher/benchmark_test.go	/^func BenchmarkDomainMatcherGroup(b *testing.B) {$/;"	f	package:strmatcher_test
BenchmarkExecuteOne	common/task/task_test.go	/^func BenchmarkExecuteOne(b *testing.B) {$/;"	f	package:task_test
BenchmarkExecuteTwo	common/task/task_test.go	/^func BenchmarkExecuteTwo(b *testing.B) {$/;"	f	package:task_test
BenchmarkFrameWrite	common/mux/frame_test.go	/^func BenchmarkFrameWrite(b *testing.B) {$/;"	f	package:mux_test
BenchmarkFullMatcherGroup	common/strmatcher/benchmark_test.go	/^func BenchmarkFullMatcherGroup(b *testing.B) {$/;"	f	package:strmatcher_test
BenchmarkGeoIPMatcher4CN	app/router/condition_geoip_test.go	/^func BenchmarkGeoIPMatcher4CN(b *testing.B) {$/;"	f	package:router_test
BenchmarkGeoIPMatcher6US	app/router/condition_geoip_test.go	/^func BenchmarkGeoIPMatcher6US(b *testing.B) {$/;"	f	package:router_test
BenchmarkIntn1	common/dice/dice_test.go	/^func BenchmarkIntn1(b *testing.B) {$/;"	f	package:dice_test
BenchmarkIntn20	common/dice/dice_test.go	/^func BenchmarkIntn20(b *testing.B) {$/;"	f	package:dice_test
BenchmarkMarchGroup	common/strmatcher/benchmark_test.go	/^func BenchmarkMarchGroup(b *testing.B) {$/;"	f	package:strmatcher_test
BenchmarkMultiGeoIPMatcher	app/router/condition_test.go	/^func BenchmarkMultiGeoIPMatcher(b *testing.B) {$/;"	f	package:router_test
BenchmarkNewBuffer	common/buf/buffer_test.go	/^func BenchmarkNewBuffer(b *testing.B) {$/;"	f	package:buf_test
BenchmarkNewBufferStack	common/buf/buffer_test.go	/^func BenchmarkNewBufferStack(b *testing.B) {$/;"	f	package:buf_test
BenchmarkParseAddressDomain	common/net/address_test.go	/^func BenchmarkParseAddressDomain(b *testing.B) {$/;"	f	package:net_test
BenchmarkParseAddressIPv4	common/net/address_test.go	/^func BenchmarkParseAddressIPv4(b *testing.B) {$/;"	f	package:net_test
BenchmarkParseAddressIPv6	common/net/address_test.go	/^func BenchmarkParseAddressIPv6(b *testing.B) {$/;"	f	package:net_test
BenchmarkPipeReadWrite	transport/pipe/pipe_test.go	/^func BenchmarkPipeReadWrite(b *testing.B) {$/;"	f	package:pipe_test
BenchmarkReadUint16	common/serial/serial_test.go	/^func BenchmarkReadUint16(b *testing.B) {$/;"	f	package:serial_test
BenchmarkReadUsernamePassword	proxy/socks/protocol_test.go	/^func BenchmarkReadUsernamePassword(b *testing.B) {$/;"	f	package:socks_test
BenchmarkRoll1	common/dice/dice_test.go	/^func BenchmarkRoll1(b *testing.B) {$/;"	f	package:dice_test
BenchmarkRoll20	common/dice/dice_test.go	/^func BenchmarkRoll20(b *testing.B) {$/;"	f	package:dice_test
BenchmarkSplitBytes	common/buf/multi_buffer_test.go	/^func BenchmarkSplitBytes(b *testing.B) {$/;"	f	package:buf_test
BenchmarkUserValidator	proxy/vmess/validator_test.go	/^func BenchmarkUserValidator(b *testing.B) {$/;"	f	package:vmess_test
BenchmarkWrite2	common/buf/buffer_test.go	/^func BenchmarkWrite2(b *testing.B) {$/;"	f	package:buf_test
BenchmarkWrite32	common/buf/buffer_test.go	/^func BenchmarkWrite32(b *testing.B) {$/;"	f	package:buf_test
BenchmarkWrite8	common/buf/buffer_test.go	/^func BenchmarkWrite8(b *testing.B) {$/;"	f	package:buf_test
BenchmarkWriteByte2	common/buf/buffer_test.go	/^func BenchmarkWriteByte2(b *testing.B) {$/;"	f	package:buf_test
BenchmarkWriteByte8	common/buf/buffer_test.go	/^func BenchmarkWriteByte8(b *testing.B) {$/;"	f	package:buf_test
BenchmarkWriteUint64	common/serial/serial_test.go	/^func BenchmarkWriteUint64(b *testing.B) {$/;"	f	package:serial_test
BindAddress	transport/internet/config.pb.go	/^	BindAddress                []byte `protobuf:"bytes,5,opt,name=bind_address,json=bindAddress,pro/;"	m	struct:internet.SocketConfig	typeref:typename:[]byte
BindPort	transport/internet/config.pb.go	/^	BindPort                   uint32 `protobuf:"varint,6,opt,name=bind_port,json=bindPort,proto3" /;"	m	struct:internet.SocketConfig	typeref:typename:uint32
BlackholeConfig	infra/conf/blackhole.go	/^type BlackholeConfig struct {$/;"	s	package:conf
Blocking	app/stats/config.pb.go	/^	Blocking        bool  `protobuf:"varint,1,opt,name=Blocking,proto3" json:"Blocking,omitempty"`$/;"	m	struct:stats.ChannelConfig	typeref:typename:bool
Blocking	app/stats/config.proto	/^  bool Blocking = 1;$/;"	f	message:v2ray.core.app.stats.ChannelConfig	typeref:typename:bool
BoolValue	app/router/config.pb.go	/^	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`$/;"	m	struct:router.Domain_Attribute_BoolValue	typeref:typename:bool
BooleanMatcher	infra/conf/router.go	/^type BooleanMatcher string$/;"	t	package:conf	typeref:typename:string
Bootstrap	app/p2p/api.go	/^func (this *P2PNode) Bootstrap() {$/;"	f	struct:p2p.P2PNode
Bridge	app/reverse/bridge.go	/^type Bridge struct {$/;"	s	package:reverse
BridgeConfig	app/reverse/config.pb.go	/^	BridgeConfig []*BridgeConfig `protobuf:"bytes,1,rep,name=bridge_config,json=bridgeConfig,proto3/;"	m	struct:reverse.Config	typeref:typename:[]*BridgeConfig
BridgeConfig	app/reverse/config.pb.go	/^type BridgeConfig struct {$/;"	s	package:reverse
BridgeConfig	app/reverse/config.proto	/^message BridgeConfig {$/;"	m	package:v2ray.core.app.reverse
BridgeConfig	infra/conf/reverse.go	/^type BridgeConfig struct {$/;"	s	package:conf
BridgeWorker	app/reverse/bridge.go	/^type BridgeWorker struct {$/;"	s	package:reverse
Bridges	infra/conf/reverse.go	/^	Bridges []BridgeConfig `json:"bridges"`$/;"	m	struct:conf.ReverseConfig	typeref:typename:[]BridgeConfig
Buffer	app/policy/config.pb.go	/^	Buffer  *Policy_Buffer  `protobuf:"bytes,3,opt,name=buffer,proto3" json:"buffer,omitempty"`$/;"	m	struct:policy.Policy	typeref:typename:*Policy_Buffer
Buffer	app/policy/config.proto	/^  message Buffer {$/;"	m	message:v2ray.core.app.policy.Policy
Buffer	common/buf/buffer.go	/^type Buffer struct {$/;"	s	package:buf
Buffer	common/buf/reader.go	/^	Buffer MultiBuffer$/;"	m	struct:buf.BufferedReader	typeref:typename:MultiBuffer
Buffer	features/policy/policy.go	/^	Buffer   Buffer$/;"	m	struct:policy.Session	typeref:typename:Buffer
Buffer	features/policy/policy.go	/^	Buffer Buffer$/;"	m	struct:policy.System	typeref:typename:Buffer
Buffer	features/policy/policy.go	/^type Buffer struct {$/;"	s	package:policy
Buffer	proxy/trojan/protocol.go	/^	Buffer buf.MultiBuffer$/;"	m	struct:trojan.PacketPayload	typeref:typename:buf.MultiBuffer
BufferPolicyFromContext	features/policy/policy.go	/^func BufferPolicyFromContext(ctx context.Context) Buffer {$/;"	f	package:policy	typeref:typename:Buffer
BufferSize	app/stats/config.pb.go	/^	BufferSize      int32 `protobuf:"varint,3,opt,name=BufferSize,proto3" json:"BufferSize,omitempt/;"	m	struct:stats.ChannelConfig	typeref:typename:int32
BufferSize	app/stats/config.proto	/^  int32 BufferSize = 3;$/;"	f	message:v2ray.core.app.stats.ChannelConfig	typeref:typename:int32
BufferSize	infra/conf/policy.go	/^	BufferSize        *int32  `json:"bufferSize"`$/;"	m	struct:conf.Policy	typeref:typename:*int32
BufferToBytesWriter	common/buf/writer.go	/^type BufferToBytesWriter struct {$/;"	s	package:buf
BufferedBytes	common/buf/reader.go	/^func (r *BufferedReader) BufferedBytes() int32 {$/;"	f	struct:buf.BufferedReader	typeref:typename:int32
BufferedReader	common/buf/reader.go	/^type BufferedReader struct {$/;"	s	package:buf
BufferedWriter	common/buf/writer.go	/^type BufferedWriter struct {$/;"	s	package:buf
Build	app/router/config.go	/^func (br *BalancingRule) Build(ohm outbound.Manager) (*Balancer, error) {$/;"	f	unknown:router.BalancingRule	typeref:typename:(*Balancer, error)
Build	infra/conf/api.go	/^func (c *ApiConfig) Build() (*commander.Config, error) {$/;"	f	struct:conf.ApiConfig	typeref:typename:(*commander.Config, error)
Build	infra/conf/blackhole.go	/^func (*HttpResponse) Build() (proto.Message, error) {$/;"	f	struct:conf.HttpResponse	typeref:typename:(proto.Message, error)
Build	infra/conf/blackhole.go	/^func (*NoneResponse) Build() (proto.Message, error) {$/;"	f	struct:conf.NoneResponse	typeref:typename:(proto.Message, error)
Build	infra/conf/blackhole.go	/^func (v *BlackholeConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.BlackholeConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/buildable.go	/^	Build() (proto.Message, error)$/;"	n	interface:conf.Buildable	typeref:typename:(proto.Message, error)
Build	infra/conf/common.go	/^func (list *PortList) Build() *net.PortList {$/;"	f	struct:conf.PortList	typeref:typename:*net.PortList
Build	infra/conf/common.go	/^func (v *Address) Build() *net.IPOrDomain {$/;"	f	struct:conf.Address	typeref:typename:*net.IPOrDomain
Build	infra/conf/common.go	/^func (v *NetworkList) Build() []net.Network {$/;"	f	type:conf.NetworkList	typeref:typename:[]net.Network
Build	infra/conf/common.go	/^func (v *PortRange) Build() *net.PortRange {$/;"	f	struct:conf.PortRange	typeref:typename:*net.PortRange
Build	infra/conf/common.go	/^func (v *User) Build() *protocol.User {$/;"	f	struct:conf.User	typeref:typename:*protocol.User
Build	infra/conf/common.go	/^func (v Network) Build() net.Network {$/;"	f	type:conf.Network	typeref:typename:net.Network
Build	infra/conf/dns.go	/^func (c *DnsConfig) Build() (*dns.Config, error) {$/;"	f	struct:conf.DnsConfig	typeref:typename:(*dns.Config, error)
Build	infra/conf/dns.go	/^func (c *NameServerConfig) Build() (*dns.NameServer, error) {$/;"	f	struct:conf.NameServerConfig	typeref:typename:(*dns.NameServer, error)
Build	infra/conf/dns_proxy.go	/^func (c *DnsOutboundConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.DnsOutboundConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/dokodemo.go	/^func (v *DokodemoConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.DokodemoConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/freedom.go	/^func (c *FreedomConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.FreedomConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/http.go	/^func (c *HttpServerConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.HttpServerConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/http.go	/^func (v *HttpAccount) Build() *http.Account {$/;"	f	struct:conf.HttpAccount	typeref:typename:*http.Account
Build	infra/conf/http.go	/^func (v *HttpClientConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.HttpClientConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/log.go	/^func (v *LogConfig) Build() *log.Config {$/;"	f	struct:conf.LogConfig	typeref:typename:*log.Config
Build	infra/conf/mtproto.go	/^func (a *MTProtoAccount) Build() (*mtproto.Account, error) {$/;"	f	struct:conf.MTProtoAccount	typeref:typename:(*mtproto.Account, error)
Build	infra/conf/mtproto.go	/^func (c *MTProtoClientConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.MTProtoClientConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/mtproto.go	/^func (c *MTProtoServerConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.MTProtoServerConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/p2p.go	/^func (v *P2PConfig) Build() *p2p.Config {$/;"	f	struct:conf.P2PConfig	typeref:typename:*p2p.Config
Build	infra/conf/policy.go	/^func (c *PolicyConfig) Build() (*policy.Config, error) {$/;"	f	struct:conf.PolicyConfig	typeref:typename:(*policy.Config, error)
Build	infra/conf/policy.go	/^func (p *SystemPolicy) Build() (*policy.SystemPolicy, error) {$/;"	f	struct:conf.SystemPolicy	typeref:typename:(*policy.SystemPolicy, error)
Build	infra/conf/policy.go	/^func (t *Policy) Build() (*policy.Policy, error) {$/;"	f	struct:conf.Policy	typeref:typename:(*policy.Policy, error)
Build	infra/conf/reverse.go	/^func (c *BridgeConfig) Build() (*reverse.BridgeConfig, error) {$/;"	f	struct:conf.BridgeConfig	typeref:typename:(*reverse.BridgeConfig, error)
Build	infra/conf/reverse.go	/^func (c *PortalConfig) Build() (*reverse.PortalConfig, error) {$/;"	f	struct:conf.PortalConfig	typeref:typename:(*reverse.PortalConfig, error)
Build	infra/conf/reverse.go	/^func (c *ReverseConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.ReverseConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/router.go	/^func (c *RouterConfig) Build() (*router.Config, error) {$/;"	f	struct:conf.RouterConfig	typeref:typename:(*router.Config, error)
Build	infra/conf/router.go	/^func (r *BalancingRule) Build() (*router.BalancingRule, error) {$/;"	f	struct:conf.BalancingRule	typeref:typename:(*router.BalancingRule, error)
Build	infra/conf/shadowsocks.go	/^func (v *ShadowsocksClientConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.ShadowsocksClientConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/shadowsocks.go	/^func (v *ShadowsocksServerConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.ShadowsocksServerConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/socks.go	/^func (v *SocksAccount) Build() *socks.Account {$/;"	f	struct:conf.SocksAccount	typeref:typename:*socks.Account
Build	infra/conf/socks.go	/^func (v *SocksClientConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.SocksClientConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/socks.go	/^func (v *SocksServerConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.SocksServerConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/transport.go	/^func (c *TransportConfig) Build() (*transport.Config, error) {$/;"	f	struct:conf.TransportConfig	typeref:typename:(*transport.Config, error)
Build	infra/conf/transport_authenticators.go	/^func (DTLSAuthenticator) Build() (proto.Message, error) {$/;"	f	struct:conf.DTLSAuthenticator	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_authenticators.go	/^func (NoOpAuthenticator) Build() (proto.Message, error) {$/;"	f	struct:conf.NoOpAuthenticator	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_authenticators.go	/^func (NoOpConnectionAuthenticator) Build() (proto.Message, error) {$/;"	f	struct:conf.NoOpConnectionAuthenticator	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_authenticators.go	/^func (SRTPAuthenticator) Build() (proto.Message, error) {$/;"	f	struct:conf.SRTPAuthenticator	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_authenticators.go	/^func (UTPAuthenticator) Build() (proto.Message, error) {$/;"	f	struct:conf.UTPAuthenticator	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_authenticators.go	/^func (WechatVideoAuthenticator) Build() (proto.Message, error) {$/;"	f	struct:conf.WechatVideoAuthenticator	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_authenticators.go	/^func (WireguardAuthenticator) Build() (proto.Message, error) {$/;"	f	struct:conf.WireguardAuthenticator	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_authenticators.go	/^func (v *HTTPAuthenticator) Build() (proto.Message, error) {$/;"	f	struct:conf.HTTPAuthenticator	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_authenticators.go	/^func (v *HTTPAuthenticatorRequest) Build() (*http.RequestConfig, error) {$/;"	f	struct:conf.HTTPAuthenticatorRequest	typeref:typename:(*http.RequestConfig, error)
Build	infra/conf/transport_authenticators.go	/^func (v *HTTPAuthenticatorResponse) Build() (*http.ResponseConfig, error) {$/;"	f	struct:conf.HTTPAuthenticatorResponse	typeref:typename:(*http.ResponseConfig, error)
Build	infra/conf/transport_internet.go	/^func (c *DomainSocketConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.DomainSocketConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_internet.go	/^func (c *HTTPConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.HTTPConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_internet.go	/^func (c *KCPConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.KCPConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_internet.go	/^func (c *QUICConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.QUICConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_internet.go	/^func (c *SocketConfig) Build() (*internet.SocketConfig, error) {$/;"	f	struct:conf.SocketConfig	typeref:typename:(*internet.SocketConfig, error)
Build	infra/conf/transport_internet.go	/^func (c *StreamConfig) Build() (*internet.StreamConfig, error) {$/;"	f	struct:conf.StreamConfig	typeref:typename:(*internet.StreamConfig, error)
Build	infra/conf/transport_internet.go	/^func (c *TCPConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.TCPConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_internet.go	/^func (c *TLSCertConfig) Build() (*tls.Certificate, error) {$/;"	f	struct:conf.TLSCertConfig	typeref:typename:(*tls.Certificate, error)
Build	infra/conf/transport_internet.go	/^func (c *TLSConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.TLSConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_internet.go	/^func (c *WebSocketConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.WebSocketConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_internet.go	/^func (c *XTLSCertConfig) Build() (*xtls.Certificate, error) {$/;"	f	struct:conf.XTLSCertConfig	typeref:typename:(*xtls.Certificate, error)
Build	infra/conf/transport_internet.go	/^func (c *XTLSConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.XTLSConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/transport_internet.go	/^func (p TransportProtocol) Build() (string, error) {$/;"	f	type:conf.TransportProtocol	typeref:typename:(string, error)
Build	infra/conf/transport_internet.go	/^func (v *ProxyConfig) Build() (*internet.ProxyConfig, error) {$/;"	f	struct:conf.ProxyConfig	typeref:typename:(*internet.ProxyConfig, error)
Build	infra/conf/trojan.go	/^func (c *TrojanClientConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.TrojanClientConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/trojan.go	/^func (c *TrojanServerConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.TrojanServerConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/v2ray.go	/^func (c *Config) Build() (*core.Config, error) {$/;"	f	struct:conf.Config	typeref:typename:(*core.Config, error)
Build	infra/conf/v2ray.go	/^func (c *InboundDetourAllocationConfig) Build() (*proxyman.AllocationStrategy, error) {$/;"	f	struct:conf.InboundDetourAllocationConfig	typeref:typename:(*proxyman.AllocationStrategy, error)
Build	infra/conf/v2ray.go	/^func (c *InboundDetourConfig) Build() (*core.InboundHandlerConfig, error) {$/;"	f	struct:conf.InboundDetourConfig	typeref:typename:(*core.InboundHandlerConfig, error)
Build	infra/conf/v2ray.go	/^func (c *OutboundDetourConfig) Build() (*core.OutboundHandlerConfig, error) {$/;"	f	struct:conf.OutboundDetourConfig	typeref:typename:(*core.OutboundHandlerConfig, error)
Build	infra/conf/v2ray.go	/^func (c *SniffingConfig) Build() (*proxyman.SniffingConfig, error) {$/;"	f	struct:conf.SniffingConfig	typeref:typename:(*proxyman.SniffingConfig, error)
Build	infra/conf/v2ray.go	/^func (c *StatsConfig) Build() (*stats.Config, error) {$/;"	f	struct:conf.StatsConfig	typeref:typename:(*stats.Config, error)
Build	infra/conf/v2ray.go	/^func (m *MuxConfig) Build() *proxyman.MultiplexingConfig {$/;"	f	struct:conf.MuxConfig	typeref:typename:*proxyman.MultiplexingConfig
Build	infra/conf/vless.go	/^func (c *VLessInboundConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.VLessInboundConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/vless.go	/^func (c *VLessOutboundConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.VLessOutboundConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/vmess.go	/^func (a *VMessAccount) Build() *vmess.Account {$/;"	f	struct:conf.VMessAccount	typeref:typename:*vmess.Account
Build	infra/conf/vmess.go	/^func (c *VMessDefaultConfig) Build() *inbound.DefaultConfig {$/;"	f	struct:conf.VMessDefaultConfig	typeref:typename:*inbound.DefaultConfig
Build	infra/conf/vmess.go	/^func (c *VMessDetourConfig) Build() *inbound.DetourConfig {$/;"	f	struct:conf.VMessDetourConfig	typeref:typename:*inbound.DetourConfig
Build	infra/conf/vmess.go	/^func (c *VMessInboundConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.VMessInboundConfig	typeref:typename:(proto.Message, error)
Build	infra/conf/vmess.go	/^func (c *VMessOutboundConfig) Build() (proto.Message, error) {$/;"	f	struct:conf.VMessOutboundConfig	typeref:typename:(proto.Message, error)
BuildCertificates	transport/internet/tls/config.go	/^func (c *Config) BuildCertificates() []tls.Certificate {$/;"	f	unknown:tls.Config	typeref:typename:[]tls.Certificate
BuildCertificates	transport/internet/xtls/config.go	/^func (c *Config) BuildCertificates() []xtls.Certificate {$/;"	f	unknown:xtls.Config	typeref:typename:[]xtls.Certificate
BuildCondition	app/router/config.go	/^func (rr *RoutingRule) BuildCondition() (Condition, error) {$/;"	f	unknown:router.RoutingRule	typeref:typename:(Condition, error)
BuildV2Ray	testing/scenarios/common_coverage.go	/^func BuildV2Ray() error {$/;"	f	package:scenarios	typeref:typename:error
BuildV2Ray	testing/scenarios/common_regular.go	/^func BuildV2Ray() error {$/;"	f	package:scenarios	typeref:typename:error
Buildable	infra/conf/buildable.go	/^type Buildable interface {$/;"	i	package:conf
BurnTaintFuse	proxy/vmess/validator.go	/^func (v *TimedUserValidator) BurnTaintFuse(userHash []byte) error {$/;"	f	struct:vmess.TimedUserValidator	typeref:typename:error
Byte	common/bitmask/byte.go	/^type Byte byte$/;"	t	package:bitmask	typeref:typename:byte
Byte	common/buf/buffer.go	/^func (b *Buffer) Byte(index int32) byte {$/;"	f	struct:buf.Buffer	typeref:typename:byte
ByteSize	transport/internet/kcp/segment.go	/^	ByteSize() int32$/;"	n	interface:kcp.Segment	typeref:typename:int32
ByteSize	transport/internet/kcp/segment.go	/^func (*CmdOnlySegment) ByteSize() int32 {$/;"	f	struct:kcp.CmdOnlySegment	typeref:typename:int32
ByteSize	transport/internet/kcp/segment.go	/^func (s *AckSegment) ByteSize() int32 {$/;"	f	struct:kcp.AckSegment	typeref:typename:int32
ByteSize	transport/internet/kcp/segment.go	/^func (s *DataSegment) ByteSize() int32 {$/;"	f	struct:kcp.DataSegment	typeref:typename:int32
Bytes	common/buf/buffer.go	/^func (b *Buffer) Bytes() []byte {$/;"	f	struct:buf.Buffer	typeref:typename:[]byte
Bytes	common/protocol/id.go	/^func (id *ID) Bytes() []byte {$/;"	f	struct:protocol.ID	typeref:typename:[]byte
Bytes	common/uuid/uuid.go	/^func (u *UUID) Bytes() []byte {$/;"	f	type:uuid.UUID	typeref:typename:[]byte
BytesFrom	common/buf/buffer.go	/^func (b *Buffer) BytesFrom(from int32) []byte {$/;"	f	struct:buf.Buffer	typeref:typename:[]byte
BytesGenerator	common/crypto/auth.go	/^type BytesGenerator func() []byte$/;"	t	package:crypto	typeref:typename:func() []byte
BytesRange	common/buf/buffer.go	/^func (b *Buffer) BytesRange(from, to int32) []byte {$/;"	f	struct:buf.Buffer	typeref:typename:[]byte
BytesTo	common/buf/buffer.go	/^func (b *Buffer) BytesTo(to int32) []byte {$/;"	f	struct:buf.Buffer	typeref:typename:[]byte
CHACHA20	proxy/shadowsocks/config.proto	/^  CHACHA20 = 3;$/;"	e	enum:v2ray.core.proxy.shadowsocks.CipherType
CHACHA20_IETF	proxy/shadowsocks/config.proto	/^  CHACHA20_IETF = 4;$/;"	e	enum:v2ray.core.proxy.shadowsocks.CipherType
CHACHA20_POLY1305	common/protocol/headers.proto	/^  CHACHA20_POLY1305 = 4;$/;"	e	enum:v2ray.core.common.protocol.SecurityType
CHACHA20_POLY1305	proxy/shadowsocks/config.proto	/^  CHACHA20_POLY1305 = 7;$/;"	e	enum:v2ray.core.proxy.shadowsocks.CipherType
CHANNEL_MAX_SIXE	app/p2p/wire/init.go	/^const CHANNEL_MAX_SIXE uint16 = 256$/;"	c	package:wire	typeref:typename:uint16
CIDR	app/router/config.pb.go	/^type CIDR struct {$/;"	s	package:router
CIDR	app/router/config.proto	/^message CIDR {$/;"	m	package:v2ray.core.app.router
CIDRList	app/router/config.go	/^type CIDRList []*CIDR$/;"	t	package:router	typeref:typename:[]*CIDR
CIDRMask	common/net/system.go	/^var CIDRMask = net.CIDRMask$/;"	v	package:net
CRLF	transport/internet/headers/http/http.go	/^	CRLF = "\\r\\n"$/;"	c	package:http
Cache	app/dispatcher/default.go	/^func (r *cachedReader) Cache(b *buf.Buffer) {$/;"	f	struct:dispatcher.cachedReader
CancelAfterInactivity	common/signal/timer.go	/^func CancelAfterInactivity(ctx context.Context, cancel context.CancelFunc, timeout time.Duration/;"	f	package:signal	typeref:typename:*ActivityTimer
CapabilityBoundingSet	release/config/systemd/system/v2ray.service	/^CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE$/;"	k	section:Service
CapabilityBoundingSet	release/config/systemd/system/v2ray@.service	/^CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE$/;"	k	section:Service
Cause	common/errors/errors.go	/^func Cause(err error) error {$/;"	f	package:errors	typeref:typename:error
CertFile	infra/conf/transport_internet.go	/^	CertFile string   `json:"certificateFile"`$/;"	m	struct:conf.TLSCertConfig	typeref:typename:string
CertFile	infra/conf/transport_internet.go	/^	CertFile string   `json:"certificateFile"`$/;"	m	struct:conf.XTLSCertConfig	typeref:typename:string
CertStr	infra/conf/transport_internet.go	/^	CertStr  []string `json:"certificate"`$/;"	m	struct:conf.TLSCertConfig	typeref:typename:[]string
CertStr	infra/conf/transport_internet.go	/^	CertStr  []string `json:"certificate"`$/;"	m	struct:conf.XTLSCertConfig	typeref:typename:[]string
Certificate	common/protocol/tls/cert/cert.go	/^	Certificate []byte$/;"	m	struct:cert.Certificate	typeref:typename:[]byte
Certificate	common/protocol/tls/cert/cert.go	/^type Certificate struct {$/;"	s	package:cert
Certificate	common/protocol/tls/cert/cert_test.go	/^	Certificate []string `json:"certificate"`$/;"	m	struct:cert.jsonCert	typeref:typename:[]string
Certificate	infra/control/cert.go	/^	Certificate []string `json:"certificate"`$/;"	m	struct:control.jsonCert	typeref:typename:[]string
Certificate	transport/internet/tls/config.pb.go	/^	Certificate []*Certificate `protobuf:"bytes,2,rep,name=certificate,proto3" json:"certificate,om/;"	m	struct:tls.Config	typeref:typename:[]*Certificate
Certificate	transport/internet/tls/config.pb.go	/^	Certificate []byte `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"/;"	m	struct:tls.Certificate	typeref:typename:[]byte
Certificate	transport/internet/tls/config.pb.go	/^type Certificate struct {$/;"	s	package:tls
Certificate	transport/internet/tls/config.proto	/^  bytes Certificate = 1;$/;"	f	message:v2ray.core.transport.internet.tls.Certificate	typeref:typename:bytes
Certificate	transport/internet/tls/config.proto	/^message Certificate {$/;"	m	package:v2ray.core.transport.internet.tls
Certificate	transport/internet/xtls/config.pb.go	/^	Certificate []*Certificate `protobuf:"bytes,2,rep,name=certificate,proto3" json:"certificate,om/;"	m	struct:xtls.Config	typeref:typename:[]*Certificate
Certificate	transport/internet/xtls/config.pb.go	/^	Certificate []byte `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"/;"	m	struct:xtls.Certificate	typeref:typename:[]byte
Certificate	transport/internet/xtls/config.pb.go	/^type Certificate struct {$/;"	s	package:xtls
Certificate	transport/internet/xtls/config.proto	/^  bytes Certificate = 1;$/;"	f	message:v2ray.core.transport.internet.xtls.Certificate	typeref:typename:bytes
Certificate	transport/internet/xtls/config.proto	/^message Certificate {$/;"	m	package:v2ray.core.transport.internet.xtls
CertificateCommand	infra/control/cert.go	/^type CertificateCommand struct {$/;"	s	package:control
Certificate_AUTHORITY_ISSUE	transport/internet/tls/config.pb.go	/^	Certificate_AUTHORITY_ISSUE  Certificate_Usage = 2$/;"	c	package:tls	typeref:type:Certificate_Usage
Certificate_AUTHORITY_ISSUE	transport/internet/xtls/config.pb.go	/^	Certificate_AUTHORITY_ISSUE  Certificate_Usage = 2$/;"	c	package:xtls	typeref:type:Certificate_Usage
Certificate_AUTHORITY_VERIFY	transport/internet/tls/config.pb.go	/^	Certificate_AUTHORITY_VERIFY Certificate_Usage = 1$/;"	c	package:tls	typeref:type:Certificate_Usage
Certificate_AUTHORITY_VERIFY	transport/internet/xtls/config.pb.go	/^	Certificate_AUTHORITY_VERIFY Certificate_Usage = 1$/;"	c	package:xtls	typeref:type:Certificate_Usage
Certificate_ENCIPHERMENT	transport/internet/tls/config.pb.go	/^	Certificate_ENCIPHERMENT     Certificate_Usage = 0$/;"	c	package:tls	typeref:type:Certificate_Usage
Certificate_ENCIPHERMENT	transport/internet/xtls/config.pb.go	/^	Certificate_ENCIPHERMENT     Certificate_Usage = 0$/;"	c	package:xtls	typeref:type:Certificate_Usage
Certificate_Usage	transport/internet/tls/config.pb.go	/^type Certificate_Usage int32$/;"	t	package:tls	typeref:typename:int32
Certificate_Usage	transport/internet/xtls/config.pb.go	/^type Certificate_Usage int32$/;"	t	package:xtls	typeref:typename:int32
Certificate_Usage_name	transport/internet/tls/config.pb.go	/^	Certificate_Usage_name = map[int32]string{$/;"	v	package:tls
Certificate_Usage_name	transport/internet/xtls/config.pb.go	/^	Certificate_Usage_name = map[int32]string{$/;"	v	package:xtls
Certificate_Usage_value	transport/internet/tls/config.pb.go	/^	Certificate_Usage_value = map[string]int32{$/;"	v	package:tls
Certificate_Usage_value	transport/internet/xtls/config.pb.go	/^	Certificate_Usage_value = map[string]int32{$/;"	v	package:xtls
Certs	infra/conf/transport_internet.go	/^	Certs                    []*TLSCertConfig `json:"certificates"`$/;"	m	struct:conf.TLSConfig	typeref:typename:[]*TLSCertConfig
Certs	infra/conf/transport_internet.go	/^	Certs                    []*XTLSCertConfig `json:"certificates"`$/;"	m	struct:conf.XTLSConfig	typeref:typename:[]*XTLSCertConfig
ChaCha20	proxy/shadowsocks/config.go	/^type ChaCha20 struct {$/;"	s	package:shadowsocks
ChaCha20Block	common/crypto/internal/chacha_core.generated.go	/^func ChaCha20Block(s *[16]uint32, out []byte, rounds int) {$/;"	f	package:internal
ChaCha20Stream	common/crypto/internal/chacha.go	/^type ChaCha20Stream struct {$/;"	s	package:internal
ChainedClosable	common/interfaces.go	/^type ChainedClosable []Closable$/;"	t	package:common	typeref:typename:[]Closable
Channel	app/stats/channel.go	/^type Channel struct {$/;"	s	package:stats
Channel	features/stats/stats.go	/^type Channel interface {$/;"	i	package:stats
ChannelConfig	app/stats/config.pb.go	/^type ChannelConfig struct {$/;"	s	package:stats
ChannelConfig	app/stats/config.proto	/^message ChannelConfig {$/;"	m	package:v2ray.core.app.stats
Check	common/antireplay/antireplay.go	/^func (aw *AntiReplayWindow) Check(sum []byte) bool {$/;"	f	struct:antireplay.AntiReplayWindow	typeref:typename:bool
ChunkSizeDecoder	common/crypto/chunk.go	/^type ChunkSizeDecoder interface {$/;"	i	package:crypto
ChunkSizeEncoder	common/crypto/chunk.go	/^type ChunkSizeEncoder interface {$/;"	i	package:crypto
ChunkStreamReader	common/crypto/chunk.go	/^type ChunkStreamReader struct {$/;"	s	package:crypto
ChunkStreamWriter	common/crypto/chunk.go	/^type ChunkStreamWriter struct {$/;"	s	package:crypto
Cidr	app/router/config.pb.go	/^	Cidr        []*CIDR `protobuf:"bytes,2,rep,name=cidr,proto3" json:"cidr,omitempty"`$/;"	m	struct:router.GeoIP	typeref:typename:[]*CIDR
Cidr	app/router/config.pb.go	/^	Cidr []*CIDR `protobuf:"bytes,3,rep,name=cidr,proto3" json:"cidr,omitempty"`$/;"	m	struct:router.RoutingRule	typeref:typename:[]*CIDR
Cipher	infra/conf/shadowsocks.go	/^	Cipher      string       `json:"method"`$/;"	m	struct:conf.ShadowsocksServerConfig	typeref:typename:string
Cipher	infra/conf/shadowsocks.go	/^	Cipher   string   `json:"method"`$/;"	m	struct:conf.ShadowsocksServerTarget	typeref:typename:string
Cipher	proxy/shadowsocks/config.go	/^	Cipher Cipher$/;"	m	struct:shadowsocks.MemoryAccount	typeref:typename:Cipher
Cipher	proxy/shadowsocks/config.go	/^type Cipher interface {$/;"	i	package:shadowsocks
CipherType	proxy/shadowsocks/config.pb.go	/^	CipherType CipherType `protobuf:"varint,2,opt,name=cipher_type,json=cipherType,proto3,enum=v2ra/;"	m	struct:shadowsocks.Account	typeref:typename:CipherType
CipherType	proxy/shadowsocks/config.pb.go	/^type CipherType int32$/;"	t	package:shadowsocks	typeref:typename:int32
CipherType	proxy/shadowsocks/config.proto	/^enum CipherType {$/;"	g	package:v2ray.core.proxy.shadowsocks
CipherType_AES_128_CFB	proxy/shadowsocks/config.pb.go	/^	CipherType_AES_128_CFB       CipherType = 1$/;"	c	package:shadowsocks	typeref:type:CipherType
CipherType_AES_128_GCM	proxy/shadowsocks/config.pb.go	/^	CipherType_AES_128_GCM       CipherType = 5$/;"	c	package:shadowsocks	typeref:type:CipherType
CipherType_AES_256_CFB	proxy/shadowsocks/config.pb.go	/^	CipherType_AES_256_CFB       CipherType = 2$/;"	c	package:shadowsocks	typeref:type:CipherType
CipherType_AES_256_GCM	proxy/shadowsocks/config.pb.go	/^	CipherType_AES_256_GCM       CipherType = 6$/;"	c	package:shadowsocks	typeref:type:CipherType
CipherType_CHACHA20	proxy/shadowsocks/config.pb.go	/^	CipherType_CHACHA20          CipherType = 3$/;"	c	package:shadowsocks	typeref:type:CipherType
CipherType_CHACHA20_IETF	proxy/shadowsocks/config.pb.go	/^	CipherType_CHACHA20_IETF     CipherType = 4$/;"	c	package:shadowsocks	typeref:type:CipherType
CipherType_CHACHA20_POLY1305	proxy/shadowsocks/config.pb.go	/^	CipherType_CHACHA20_POLY1305 CipherType = 7$/;"	c	package:shadowsocks	typeref:type:CipherType
CipherType_NONE	proxy/shadowsocks/config.pb.go	/^	CipherType_NONE              CipherType = 8$/;"	c	package:shadowsocks	typeref:type:CipherType
CipherType_UNKNOWN	proxy/shadowsocks/config.pb.go	/^	CipherType_UNKNOWN           CipherType = 0$/;"	c	package:shadowsocks	typeref:type:CipherType
CipherType_name	proxy/shadowsocks/config.pb.go	/^	CipherType_name = map[int32]string{$/;"	v	package:shadowsocks
CipherType_value	proxy/shadowsocks/config.pb.go	/^	CipherType_value = map[string]int32{$/;"	v	package:shadowsocks
ClassicNameServer	app/dns/udpns.go	/^type ClassicNameServer struct {$/;"	s	package:dns
Cleanup	app/dns/dohdns.go	/^func (s *DoHNameServer) Cleanup() error {$/;"	f	struct:dns.DoHNameServer	typeref:typename:error
Cleanup	app/dns/udpns.go	/^func (s *ClassicNameServer) Cleanup() error {$/;"	f	struct:dns.ClassicNameServer	typeref:typename:error
Cleanup	common/signal/pubsub/pubsub.go	/^func (s *Service) Cleanup() error {$/;"	f	struct:pubsub.Service	typeref:typename:error
Clear	common/bitmask/byte.go	/^func (b *Byte) Clear(bb Byte) {$/;"	f	type:bitmask.Byte
Clear	common/buf/buffer.go	/^func (b *Buffer) Clear() {$/;"	f	struct:buf.Buffer
Clear	common/buf/readv_posix.go	/^func (r *posixReader) Clear() {$/;"	f	struct:buf.posixReader
Clear	common/buf/readv_reader.go	/^	Clear()$/;"	n	interface:buf.multiReader
Clear	common/buf/readv_unix.go	/^func (r *unixReader) Clear() {$/;"	f	struct:buf.unixReader
Clear	common/buf/readv_windows.go	/^func (r *windowsReader) Clear() {$/;"	f	struct:buf.windowsReader
Clear	transport/internet/kcp/receiving.go	/^func (l *AckList) Clear(una uint32) {$/;"	f	struct:kcp.AckList
Clear	transport/internet/kcp/sending.go	/^func (sw *SendingWindow) Clear(una uint32) {$/;"	f	struct:kcp.SendingWindow
Client	app/dns/nameserver.go	/^type Client interface {$/;"	i	package:dns
Client	features/dns/client.go	/^type Client interface {$/;"	i	package:dns
Client	features/dns/localdns/client.go	/^type Client struct{}$/;"	s	package:localdns
Client	proxy/http/client.go	/^type Client struct {$/;"	s	package:http
Client	proxy/mtproto/client.go	/^type Client struct {$/;"	s	package:mtproto
Client	proxy/shadowsocks/client.go	/^type Client struct {$/;"	s	package:shadowsocks
Client	proxy/socks/client.go	/^type Client struct {$/;"	s	package:socks
Client	proxy/trojan/client.go	/^type Client struct {$/;"	s	package:trojan
Client	transport/internet/header.go	/^	Client(net.Conn) net.Conn$/;"	n	interface:internet.ConnectionAuthenticator	typeref:typename:net.Conn
Client	transport/internet/headers/http/http.go	/^func (a HttpAuthenticator) Client(conn net.Conn) net.Conn {$/;"	f	struct:http.HttpAuthenticator	typeref:typename:net.Conn
Client	transport/internet/headers/noop/noop.go	/^func (NoOpConnectionHeader) Client(conn net.Conn) net.Conn {$/;"	f	struct:noop.NoOpConnectionHeader	typeref:typename:net.Conn
Client	transport/internet/tls/tls.go	/^func Client(c net.Conn, config *tls.Config) net.Conn {$/;"	f	package:tls	typeref:typename:net.Conn
Client	transport/internet/xtls/xtls.go	/^func Client(c net.Conn, config *xtls.Config) net.Conn {$/;"	f	package:xtls	typeref:typename:net.Conn
ClientConfig	proxy/http/config.pb.go	/^type ClientConfig struct {$/;"	s	package:http
ClientConfig	proxy/http/config.proto	/^message ClientConfig {$/;"	m	package:v2ray.core.proxy.http
ClientConfig	proxy/mtproto/config.pb.go	/^type ClientConfig struct {$/;"	s	package:mtproto
ClientConfig	proxy/mtproto/config.proto	/^message ClientConfig {}$/;"	m	package:v2ray.core.proxy.mtproto
ClientConfig	proxy/shadowsocks/config.pb.go	/^type ClientConfig struct {$/;"	s	package:shadowsocks
ClientConfig	proxy/shadowsocks/config.proto	/^message ClientConfig {$/;"	m	package:v2ray.core.proxy.shadowsocks
ClientConfig	proxy/socks/config.pb.go	/^type ClientConfig struct {$/;"	s	package:socks
ClientConfig	proxy/socks/config.proto	/^message ClientConfig {$/;"	m	package:v2ray.core.proxy.socks
ClientConfig	proxy/trojan/config.pb.go	/^type ClientConfig struct {$/;"	s	package:trojan
ClientConfig	proxy/trojan/config.proto	/^message ClientConfig {$/;"	m	package:v2ray.core.proxy.trojan
ClientHandshake	proxy/socks/protocol.go	/^func ClientHandshake(request *protocol.RequestHeader, reader io.Reader, writer io.Writer) (*prot/;"	f	package:socks	typeref:typename:(*protocol.RequestHeader, error)
ClientIP	infra/conf/dns.go	/^	ClientIP *Address            `json:"clientIp"`$/;"	m	struct:conf.DnsConfig	typeref:typename:*Address
ClientIp	app/dns/config.pb.go	/^	ClientIp    []byte                `protobuf:"bytes,3,opt,name=client_ip,json=clientIp,proto3" j/;"	m	struct:dns.Config	typeref:typename:[]byte
ClientManager	common/mux/client.go	/^type ClientManager struct {$/;"	s	package:mux
ClientSession	proxy/vmess/encoding/client.go	/^type ClientSession struct {$/;"	s	package:encoding
ClientStart	app/p2p/grpc/client.go	/^func ClientStart(seed *wire.HelloSeedList) {$/;"	f	package:grpc
ClientStrategy	common/mux/client.go	/^type ClientStrategy struct {$/;"	s	package:mux
ClientStream	app/router/command/command_grpc.pb.go	/^	grpc.ClientStream$/;"	M	struct:command.routingServiceSubscribeRoutingStatsClient	typeref:typename:grpc.ClientStream
ClientType	features/dns/client.go	/^func ClientType() interface{} {$/;"	f	package:dns	typeref:typename:interface{}
ClientVersion	app/p2p/protocol/seedlist/seedlist.go	/^const ClientVersion = "go-p2p-node\/0.0.1"$/;"	c	package:seedlist
ClientVersion	app/p2p/wire/seedlist.pb.go	/^	ClientVersion        string   `protobuf:"bytes,1,opt,name=clientVersion,proto3" json:"clientVer/;"	m	struct:wire.MessageData	typeref:typename:string
ClientWorker	common/mux/client.go	/^type ClientWorker struct {$/;"	s	package:mux
ClientWorkerFactory	common/mux/client.go	/^type ClientWorkerFactory interface {$/;"	i	package:mux
Clients	infra/conf/trojan.go	/^	Clients   []*TrojanUserConfig      `json:"clients"`$/;"	m	struct:conf.TrojanServerConfig	typeref:typename:[]*TrojanUserConfig
Clients	infra/conf/vless.go	/^	Clients    []json.RawMessage       `json:"clients"`$/;"	m	struct:conf.VLessInboundConfig	typeref:typename:[]json.RawMessage
Clients	proxy/vless/inbound/config.pb.go	/^	Clients []*protocol.User `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`$/;"	m	struct:inbound.Config	typeref:typename:[]*protocol.User
Closable	common/interfaces.go	/^type Closable interface {$/;"	i	package:common
Close	app/commander/commander.go	/^func (c *Commander) Close() error {$/;"	f	struct:commander.Commander	typeref:typename:error
Close	app/commander/outbound.go	/^func (co *Outbound) Close() error {$/;"	f	struct:commander.Outbound	typeref:typename:error
Close	app/commander/outbound.go	/^func (l *OutboundListener) Close() error {$/;"	f	struct:commander.OutboundListener	typeref:typename:error
Close	app/dispatcher/default.go	/^func (*DefaultDispatcher) Close() error { return nil }$/;"	f	struct:dispatcher.DefaultDispatcher	typeref:typename:error
Close	app/dispatcher/stats.go	/^func (w *SizeStatWriter) Close() error {$/;"	f	struct:dispatcher.SizeStatWriter	typeref:typename:error
Close	app/dns/server.go	/^func (s *Server) Close() error {$/;"	f	struct:dns.Server	typeref:typename:error
Close	app/log/log.go	/^func (g *Instance) Close() error {$/;"	f	struct:log.Instance	typeref:typename:error
Close	app/p2p/account/account.go	/^func (this *SocksDB) Close() {$/;"	f	struct:account.SocksDB
Close	app/p2p/p2p.go	/^func (g *Instance) Close() error {$/;"	f	struct:p2p.Instance	typeref:typename:error
Close	app/policy/manager.go	/^func (m *Instance) Close() error {$/;"	f	struct:policy.Instance	typeref:typename:error
Close	app/proxyman/inbound/always.go	/^func (h *AlwaysOnInboundHandler) Close() error {$/;"	f	struct:inbound.AlwaysOnInboundHandler	typeref:typename:error
Close	app/proxyman/inbound/dynamic.go	/^func (h *DynamicInboundHandler) Close() error {$/;"	f	struct:inbound.DynamicInboundHandler	typeref:typename:error
Close	app/proxyman/inbound/inbound.go	/^func (m *Manager) Close() error {$/;"	f	struct:inbound.Manager	typeref:typename:error
Close	app/proxyman/inbound/worker.go	/^	Close() error$/;"	n	interface:inbound.worker	typeref:typename:error
Close	app/proxyman/inbound/worker.go	/^func (c *udpConn) Close() error {$/;"	f	struct:inbound.udpConn	typeref:typename:error
Close	app/proxyman/inbound/worker.go	/^func (w *tcpWorker) Close() error {$/;"	f	struct:inbound.tcpWorker	typeref:typename:error
Close	app/proxyman/inbound/worker.go	/^func (w *udpWorker) Close() error {$/;"	f	struct:inbound.udpWorker	typeref:typename:error
Close	app/proxyman/outbound/handler.go	/^func (h *Handler) Close() error {$/;"	f	struct:outbound.Handler	typeref:typename:error
Close	app/proxyman/outbound/outbound.go	/^func (m *Manager) Close() error {$/;"	f	struct:outbound.Manager	typeref:typename:error
Close	app/reverse/bridge.go	/^func (b *Bridge) Close() error {$/;"	f	struct:reverse.Bridge	typeref:typename:error
Close	app/reverse/bridge.go	/^func (w *BridgeWorker) Close() error {$/;"	f	struct:reverse.BridgeWorker	typeref:typename:error
Close	app/reverse/portal.go	/^func (o *Outbound) Close() error {$/;"	f	struct:reverse.Outbound	typeref:typename:error
Close	app/reverse/portal.go	/^func (p *Portal) Close() error {$/;"	f	struct:reverse.Portal	typeref:typename:error
Close	app/reverse/reverse.go	/^func (r *Reverse) Close() error {$/;"	f	struct:reverse.Reverse	typeref:typename:error
Close	app/router/router.go	/^func (*Router) Close() error {$/;"	f	struct:router.Router	typeref:typename:error
Close	app/stats/channel.go	/^func (c *Channel) Close() error {$/;"	f	struct:stats.Channel	typeref:typename:error
Close	app/stats/stats.go	/^func (m *Manager) Close() error {$/;"	f	struct:stats.Manager	typeref:typename:error
Close	common/buf/multi_buffer.go	/^func (c *MultiBufferContainer) Close() error {$/;"	f	struct:buf.MultiBufferContainer	typeref:typename:error
Close	common/buf/reader.go	/^func (r *BufferedReader) Close() error {$/;"	f	struct:buf.BufferedReader	typeref:typename:error
Close	common/buf/writer.go	/^func (w *BufferedWriter) Close() error {$/;"	f	struct:buf.BufferedWriter	typeref:typename:error
Close	common/interfaces.go	/^	Close() error$/;"	n	interface:common.Closable	typeref:typename:error
Close	common/interfaces.go	/^func (cc ChainedClosable) Close() error {$/;"	f	type:common.ChainedClosable	typeref:typename:error
Close	common/interfaces.go	/^func Close(obj interface{}) error {$/;"	f	package:common	typeref:typename:error
Close	common/log/logger.go	/^func (l *generalLogger) Close() error {$/;"	f	struct:log.generalLogger	typeref:typename:error
Close	common/log/logger.go	/^func (w *consoleLogWriter) Close() error {$/;"	f	struct:log.consoleLogWriter	typeref:typename:error
Close	common/log/logger.go	/^func (w *fileLogWriter) Close() error {$/;"	f	struct:log.fileLogWriter	typeref:typename:error
Close	common/mux/server.go	/^func (s *Server) Close() error {$/;"	f	struct:mux.Server	typeref:typename:error
Close	common/mux/session.go	/^func (m *SessionManager) Close() error {$/;"	f	struct:mux.SessionManager	typeref:typename:error
Close	common/mux/session.go	/^func (s *Session) Close() error {$/;"	f	struct:mux.Session	typeref:typename:error
Close	common/mux/writer.go	/^func (w *Writer) Close() error {$/;"	f	struct:mux.Writer	typeref:typename:error
Close	common/net/connection.go	/^func (c *connection) Close() error {$/;"	f	struct:net.connection	typeref:typename:error
Close	common/protocol/dns/io.go	/^func (r *TCPReader) Close() error {$/;"	f	struct:dns.TCPReader	typeref:typename:error
Close	common/protocol/dns/io.go	/^func (r *UDPReader) Close() error {$/;"	f	struct:dns.UDPReader	typeref:typename:error
Close	common/signal/done/done.go	/^func (d *Instance) Close() error {$/;"	f	struct:done.Instance	typeref:typename:error
Close	common/signal/pubsub/pubsub.go	/^func (s *Subscriber) Close() error {$/;"	f	struct:pubsub.Subscriber	typeref:typename:error
Close	common/task/common.go	/^func Close(v interface{}) func() error {$/;"	f	package:task	typeref:typename:func() error
Close	common/task/periodic.go	/^func (t *Periodic) Close() error {$/;"	f	struct:task.Periodic	typeref:typename:error
Close	features/dns/localdns/client.go	/^func (*Client) Close() error { return nil }$/;"	f	struct:localdns.Client	typeref:typename:error
Close	features/policy/default.go	/^func (DefaultManager) Close() error {$/;"	f	struct:policy.DefaultManager	typeref:typename:error
Close	features/routing/router.go	/^func (DefaultRouter) Close() error {$/;"	f	struct:routing.DefaultRouter	typeref:typename:error
Close	features/stats/stats.go	/^func (NoopManager) Close() error { return nil }$/;"	f	struct:stats.NoopManager	typeref:typename:error
Close	proxy/dns/dns.go	/^func (c *outboundConn) Close() error {$/;"	f	struct:dns.outboundConn	typeref:typename:error
Close	proxy/http/client.go	/^func (h *http2Conn) Close() error {$/;"	f	struct:http.http2Conn	typeref:typename:error
Close	proxy/vless/inbound/inbound.go	/^func (h *Handler) Close() error {$/;"	f	struct:inbound.Handler	typeref:typename:error
Close	proxy/vmess/encoding/server.go	/^func (h *SessionHistory) Close() error {$/;"	f	struct:encoding.SessionHistory	typeref:typename:error
Close	proxy/vmess/inbound/inbound.go	/^func (h *Handler) Close() error {$/;"	f	struct:inbound.Handler	typeref:typename:error
Close	proxy/vmess/validator.go	/^func (v *TimedUserValidator) Close() error {$/;"	f	struct:vmess.TimedUserValidator	typeref:typename:error
Close	store/leveldb.go	/^func (self *LevelDBStore) Close() error {$/;"	f	struct:store.LevelDBStore	typeref:typename:error
Close	store/sqlite.go	/^func (this *SQLiteStorage) Close() error {$/;"	f	struct:store.SQLiteStorage	typeref:typename:error
Close	testing/mocks/dns.go	/^func (m *DNSClient) Close() error {$/;"	f	struct:mocks.DNSClient	typeref:typename:error
Close	testing/mocks/dns.go	/^func (mr *DNSClientMockRecorder) Close() *gomock.Call {$/;"	f	struct:mocks.DNSClientMockRecorder	typeref:typename:*gomock.Call
Close	testing/mocks/outbound.go	/^func (m *OutboundManager) Close() error {$/;"	f	struct:mocks.OutboundManager	typeref:typename:error
Close	testing/mocks/outbound.go	/^func (mr *OutboundManagerMockRecorder) Close() *gomock.Call {$/;"	f	struct:mocks.OutboundManagerMockRecorder	typeref:typename:*gomock.Call
Close	testing/servers/http/http.go	/^func (s *Server) Close() error {$/;"	f	struct:tcp.Server	typeref:typename:error
Close	testing/servers/tcp/tcp.go	/^func (server *Server) Close() error {$/;"	f	struct:tcp.Server	typeref:typename:error
Close	testing/servers/udp/udp.go	/^func (server *Server) Close() error {$/;"	f	struct:udp.Server	typeref:typename:error
Close	transport/internet/domainsocket/listener.go	/^func (ln *Listener) Close() error {$/;"	f	struct:domainsocket.Listener	typeref:typename:error
Close	transport/internet/headers/http/http.go	/^func (c *HttpConn) Close() error {$/;"	f	struct:http.HttpConn	typeref:typename:error
Close	transport/internet/http/hub.go	/^func (l *Listener) Close() error {$/;"	f	struct:http.Listener	typeref:typename:error
Close	transport/internet/kcp/connection.go	/^func (c *Connection) Close() error {$/;"	f	struct:kcp.Connection	typeref:typename:error
Close	transport/internet/kcp/connection_test.go	/^func (NoOpCloser) Close() error {$/;"	f	type:kcp_test.NoOpCloser	typeref:typename:error
Close	transport/internet/kcp/listener.go	/^func (l *Listener) Close() error {$/;"	f	struct:kcp.Listener	typeref:typename:error
Close	transport/internet/kcp/listener.go	/^func (w *Writer) Close() error {$/;"	f	struct:kcp.Writer	typeref:typename:error
Close	transport/internet/quic/conn.go	/^func (c *interConn) Close() error {$/;"	f	struct:quic.interConn	typeref:typename:error
Close	transport/internet/quic/conn.go	/^func (c *sysConn) Close() error {$/;"	f	struct:quic.sysConn	typeref:typename:error
Close	transport/internet/quic/hub.go	/^func (l *Listener) Close() error {$/;"	f	struct:quic.Listener	typeref:typename:error
Close	transport/internet/system_dialer.go	/^func (c *packetConnWrapper) Close() error {$/;"	f	struct:internet.packetConnWrapper	typeref:typename:error
Close	transport/internet/tcp/hub.go	/^func (v *Listener) Close() error {$/;"	f	struct:tcp.Listener	typeref:typename:error
Close	transport/internet/tcp_hub.go	/^	Close() error$/;"	n	interface:internet.Listener	typeref:typename:error
Close	transport/internet/udp/dispatcher.go	/^func (c *dispatcherConn) Close() error {$/;"	f	struct:udp.dispatcherConn	typeref:typename:error
Close	transport/internet/udp/dispatcher_test.go	/^func (d *TestDispatcher) Close() error {$/;"	f	struct:udp_test.TestDispatcher	typeref:typename:error
Close	transport/internet/udp/hub.go	/^func (h *Hub) Close() error {$/;"	f	struct:udp.Hub	typeref:typename:error
Close	transport/internet/websocket/connection.go	/^func (c *connection) Close() error {$/;"	f	struct:websocket.connection	typeref:typename:error
Close	transport/internet/websocket/hub.go	/^func (ln *Listener) Close() error {$/;"	f	struct:websocket.Listener	typeref:typename:error
Close	transport/pipe/impl.go	/^func (p *pipe) Close() error {$/;"	f	struct:pipe.pipe	typeref:typename:error
Close	transport/pipe/writer.go	/^func (w *Writer) Close() error {$/;"	f	struct:pipe.Writer	typeref:typename:error
Close	v2ray.go	/^func (s *Instance) Close() error {$/;"	f	struct:core.Instance	typeref:typename:error
CloseAllServers	testing/scenarios/common.go	/^func CloseAllServers(servers []*exec.Cmd) {$/;"	f	package:scenarios
CloseIfNoSession	common/mux/session.go	/^func (m *SessionManager) CloseIfNoSession() bool {$/;"	f	struct:mux.SessionManager	typeref:typename:bool
CloseRead	transport/internet/kcp/receiving.go	/^func (*ReceivingWorker) CloseRead() {$/;"	f	struct:kcp.ReceivingWorker
CloseWrite	transport/internet/kcp/sending.go	/^func (w *SendingWorker) CloseWrite() {$/;"	f	struct:kcp.SendingWorker
Closed	app/reverse/portal.go	/^func (w *PortalWorker) Closed() bool {$/;"	f	struct:reverse.PortalWorker	typeref:typename:bool
Closed	common/mux/client.go	/^func (m *ClientWorker) Closed() bool {$/;"	f	struct:mux.ClientWorker	typeref:typename:bool
Closed	common/mux/server.go	/^func (w *ServerWorker) Closed() bool {$/;"	f	struct:mux.ServerWorker	typeref:typename:bool
Closed	common/mux/session.go	/^func (m *SessionManager) Closed() bool {$/;"	f	struct:mux.SessionManager	typeref:typename:bool
Cmd	transport/internet/kcp/segment.go	/^	Cmd           Command$/;"	m	struct:kcp.CmdOnlySegment	typeref:typename:Command
CmdKey	common/protocol/id.go	/^func (id ID) CmdKey() []byte {$/;"	f	struct:protocol.ID	typeref:typename:[]byte
CmdOnlySegment	transport/internet/kcp/segment.go	/^type CmdOnlySegment struct {$/;"	s	package:kcp
Code	transport/internet/headers/http/config.pb.go	/^	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`$/;"	m	struct:http.Status	typeref:typename:string
Coeff	common/protocol/tls/cert/privateKey.go	/^	Coeff *big.Int$/;"	m	struct:cert.pkcs1AdditionalRSAPrime	typeref:typename:*big.Int
Combine	common/errors/multi_error.go	/^func Combine(maybeError ...error) error {$/;"	f	package:errors	typeref:typename:error
Command	common/protocol/headers.go	/^	Command  RequestCommand$/;"	m	struct:protocol.RequestHeader	typeref:typename:RequestCommand
Command	common/protocol/headers.go	/^	Command ResponseCommand$/;"	m	struct:protocol.ResponseHeader	typeref:typename:ResponseCommand
Command	infra/control/command.go	/^type Command interface {$/;"	i	package:control
Command	transport/internet/kcp/segment.go	/^	Command() Command$/;"	n	interface:kcp.Segment	typeref:typename:Command
Command	transport/internet/kcp/segment.go	/^func (*AckSegment) Command() Command {$/;"	f	struct:kcp.AckSegment	typeref:typename:Command
Command	transport/internet/kcp/segment.go	/^func (*DataSegment) Command() Command {$/;"	f	struct:kcp.DataSegment	typeref:typename:Command
Command	transport/internet/kcp/segment.go	/^func (s *CmdOnlySegment) Command() Command {$/;"	f	struct:kcp.CmdOnlySegment	typeref:typename:Command
Command	transport/internet/kcp/segment.go	/^type Command byte$/;"	t	package:kcp	typeref:typename:byte
CommandACK	transport/internet/kcp/segment.go	/^	CommandACK Command = 0$/;"	c	package:kcp	typeref:type:Command
CommandData	transport/internet/kcp/segment.go	/^	CommandData Command = 1$/;"	c	package:kcp	typeref:type:Command
CommandFactory	proxy/vmess/encoding/commands.go	/^type CommandFactory interface {$/;"	i	package:encoding
CommandPing	transport/internet/kcp/segment.go	/^	CommandPing Command = 3$/;"	c	package:kcp	typeref:type:Command
CommandSwitchAccount	common/protocol/headers.go	/^type CommandSwitchAccount struct {$/;"	s	package:protocol
CommandSwitchAccountFactory	proxy/vmess/encoding/commands.go	/^type CommandSwitchAccountFactory struct {$/;"	s	package:encoding
CommandTerminate	transport/internet/kcp/segment.go	/^	CommandTerminate Command = 2$/;"	c	package:kcp	typeref:type:Command
Commander	app/commander/commander.go	/^type Commander struct {$/;"	s	package:commander
Comment	config.pb.go	/^	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`$/;"	m	struct:core.OutboundHandlerConfig	typeref:typename:string
CommonName	common/protocol/tls/cert/cert.go	/^func CommonName(name string) Option {$/;"	f	package:cert	typeref:typename:Option
Compact	common/buf/multi_buffer.go	/^func Compact(mb MultiBuffer) MultiBuffer {$/;"	f	package:buf	typeref:typename:MultiBuffer
CompressAlgo	bin/config/config-server.json	/^    "Compression":{"Enable":false,"CompressAlgo":1,"FileSize":4194304},$/;"	n	object:porter.Compression
Compression	bin/config/config-server.json	/^    "Compression":{"Enable":false,"CompressAlgo":1,"FileSize":4194304},$/;"	o	object:porter
Concat	common/serial/string.go	/^func Concat(v ...interface{}) string {$/;"	f	package:serial	typeref:typename:string
Concurrency	app/proxyman/config.pb.go	/^	Concurrency *AllocationStrategy_AllocationStrategyConcurrency `protobuf:"bytes,2,opt,name=concu/;"	m	struct:proxyman.AllocationStrategy	typeref:typename:*AllocationStrategy_AllocationStrategyConcurrency
Concurrency	app/proxyman/config.pb.go	/^	Concurrency uint32 `protobuf:"varint,2,opt,name=concurrency,proto3" json:"concurrency,omitempty/;"	m	struct:proxyman.MultiplexingConfig	typeref:typename:uint32
Concurrency	infra/conf/v2ray.go	/^	Concurrency *uint32 `json:"concurrency"`$/;"	m	struct:conf.InboundDetourAllocationConfig	typeref:typename:*uint32
Concurrency	infra/conf/v2ray.go	/^	Concurrency int16 `json:"concurrency"`$/;"	m	struct:conf.MuxConfig	typeref:typename:int16
Condition	app/router/condition.go	/^type Condition interface {$/;"	i	package:router
Condition	app/router/config.go	/^	Condition Condition$/;"	m	struct:router.Rule	typeref:typename:Condition
ConditionChan	app/router/condition.go	/^type ConditionChan []Condition$/;"	t	package:router	typeref:typename:[]Condition
Config	app/commander/config.pb.go	/^type Config struct {$/;"	s	package:commander
Config	app/commander/config.proto	/^message Config {$/;"	m	package:v2ray.core.app.commander
Config	app/dispatcher/config.pb.go	/^type Config struct {$/;"	s	package:dispatcher
Config	app/dispatcher/config.proto	/^message Config {$/;"	m	package:v2ray.core.app.dispatcher
Config	app/dns/config.pb.go	/^type Config struct {$/;"	s	package:dns
Config	app/dns/config.proto	/^message Config {$/;"	m	package:v2ray.core.app.dns
Config	app/log/command/config.pb.go	/^type Config struct {$/;"	s	package:command
Config	app/log/command/config.proto	/^message Config {}$/;"	m	package:v2ray.core.app.log.command
Config	app/log/config.pb.go	/^type Config struct {$/;"	s	package:log
Config	app/log/config.proto	/^message Config {$/;"	m	package:v2ray.core.app.log
Config	app/p2p/api.go	/^	Config    *Config$/;"	m	struct:p2p.P2PNode	typeref:typename:*Config
Config	app/p2p/config.pb.go	/^type Config struct {$/;"	s	package:p2p
Config	app/p2p/config.proto	/^message Config {$/;"	m	package:v2ray.core.app.p2p
Config	app/policy/config.pb.go	/^type Config struct {$/;"	s	package:policy
Config	app/policy/config.proto	/^message Config {$/;"	m	package:v2ray.core.app.policy
Config	app/proxyman/command/command.pb.go	/^type Config struct {$/;"	s	package:command
Config	app/proxyman/command/command.proto	/^message Config {}$/;"	m	package:v2ray.core.app.proxyman.command
Config	app/reverse/config.pb.go	/^type Config struct {$/;"	s	package:reverse
Config	app/reverse/config.proto	/^message Config {$/;"	m	package:v2ray.core.app.reverse
Config	app/router/command/command.pb.go	/^type Config struct {$/;"	s	package:command
Config	app/router/command/command.proto	/^message Config {}$/;"	m	package:v2ray.core.app.router.command
Config	app/router/config.pb.go	/^type Config struct {$/;"	s	package:router
Config	app/router/config.proto	/^message Config {$/;"	m	package:v2ray.core.app.router
Config	app/stats/command/command.pb.go	/^type Config struct {$/;"	s	package:command
Config	app/stats/command/command.proto	/^message Config {}$/;"	m	package:v2ray.core.app.stats.command
Config	app/stats/config.pb.go	/^type Config struct {$/;"	s	package:stats
Config	app/stats/config.proto	/^message Config {}$/;"	m	package:v2ray.core.app.stats
Config	config.pb.go	/^type Config struct {$/;"	s	package:core
Config	config.proto	/^message Config {$/;"	m	package:v2ray.core
Config	infra/conf/v2ray.go	/^type Config struct {$/;"	s	package:conf
Config	proxy/blackhole/config.pb.go	/^type Config struct {$/;"	s	package:blackhole
Config	proxy/blackhole/config.proto	/^message Config {$/;"	m	package:v2ray.core.proxy.blackhole
Config	proxy/dns/config.pb.go	/^type Config struct {$/;"	s	package:dns
Config	proxy/dns/config.proto	/^message Config {$/;"	m	package:v2ray.core.proxy.dns
Config	proxy/dokodemo/config.pb.go	/^type Config struct {$/;"	s	package:dokodemo
Config	proxy/dokodemo/config.proto	/^message Config {$/;"	m	package:v2ray.core.proxy.dokodemo
Config	proxy/freedom/config.pb.go	/^type Config struct {$/;"	s	package:freedom
Config	proxy/freedom/config.proto	/^message Config {$/;"	m	package:v2ray.core.proxy.freedom
Config	proxy/vless/inbound/config.pb.go	/^type Config struct {$/;"	s	package:inbound
Config	proxy/vless/inbound/config.proto	/^message Config {$/;"	m	package:v2ray.core.proxy.vless.inbound
Config	proxy/vless/outbound/config.pb.go	/^type Config struct {$/;"	s	package:outbound
Config	proxy/vless/outbound/config.proto	/^message Config {$/;"	m	package:v2ray.core.proxy.vless.outbound
Config	proxy/vmess/inbound/config.pb.go	/^type Config struct {$/;"	s	package:inbound
Config	proxy/vmess/inbound/config.proto	/^message Config {$/;"	m	package:v2ray.core.proxy.vmess.inbound
Config	proxy/vmess/outbound/config.pb.go	/^type Config struct {$/;"	s	package:outbound
Config	proxy/vmess/outbound/config.proto	/^message Config {$/;"	m	package:v2ray.core.proxy.vmess.outbound
Config	transport/config.pb.go	/^type Config struct {$/;"	s	package:transport
Config	transport/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport
Config	transport/internet/domainsocket/config.pb.go	/^type Config struct {$/;"	s	package:domainsocket
Config	transport/internet/domainsocket/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport.internet.domainsocket
Config	transport/internet/headers/http/config.pb.go	/^type Config struct {$/;"	s	package:http
Config	transport/internet/headers/http/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport.internet.headers.http
Config	transport/internet/headers/noop/config.pb.go	/^type Config struct {$/;"	s	package:noop
Config	transport/internet/headers/noop/config.proto	/^message Config {}$/;"	m	package:v2ray.core.transport.internet.headers.noop
Config	transport/internet/headers/srtp/config.pb.go	/^type Config struct {$/;"	s	package:srtp
Config	transport/internet/headers/srtp/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport.internet.headers.srtp
Config	transport/internet/headers/utp/config.pb.go	/^type Config struct {$/;"	s	package:utp
Config	transport/internet/headers/utp/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport.internet.headers.utp
Config	transport/internet/http/config.pb.go	/^type Config struct {$/;"	s	package:http
Config	transport/internet/http/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport.internet.http
Config	transport/internet/kcp/config.pb.go	/^type Config struct {$/;"	s	package:kcp
Config	transport/internet/kcp/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport.internet.kcp
Config	transport/internet/kcp/connection.go	/^	Config     *Config$/;"	m	struct:kcp.Connection	typeref:typename:*Config
Config	transport/internet/quic/config.pb.go	/^type Config struct {$/;"	s	package:quic
Config	transport/internet/quic/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport.internet.quic
Config	transport/internet/tcp/config.pb.go	/^type Config struct {$/;"	s	package:tcp
Config	transport/internet/tcp/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport.internet.tcp
Config	transport/internet/tls/config.pb.go	/^type Config struct {$/;"	s	package:tls
Config	transport/internet/tls/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport.internet.tls
Config	transport/internet/udp/config.pb.go	/^type Config struct {$/;"	s	package:udp
Config	transport/internet/udp/config.proto	/^message Config {}$/;"	m	package:v2ray.core.transport.internet.udp
Config	transport/internet/websocket/config.pb.go	/^type Config struct {$/;"	s	package:websocket
Config	transport/internet/websocket/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport.internet.websocket
Config	transport/internet/xtls/config.pb.go	/^type Config struct {$/;"	s	package:xtls
Config	transport/internet/xtls/config.proto	/^message Config {$/;"	m	package:v2ray.core.transport.internet.xtls
ConfigCommand	infra/conf/command/command.go	/^type ConfigCommand struct{}$/;"	s	package:command
ConfigCommand	infra/control/config.go	/^type ConfigCommand struct{}$/;"	s	package:control
ConfigCreator	common/type.go	/^type ConfigCreator func(ctx context.Context, config interface{}) (interface{}, error)$/;"	t	package:common	typeref:typename:func(ctx context.Context, config interface{}) (interface{}, error)
ConfigCreator	infra/conf/loader.go	/^type ConfigCreator func() interface{}$/;"	t	package:conf	typeref:typename:func() interface{}
ConfigCreator	transport/internet/config.go	/^type ConfigCreator func() interface{}$/;"	t	package:internet	typeref:typename:func() interface{}
ConfigCreatorCache	infra/conf/loader.go	/^type ConfigCreatorCache map[string]ConfigCreator$/;"	t	package:conf	typeref:typename:map[string]ConfigCreator
ConfigFormat	config.go	/^type ConfigFormat struct {$/;"	s	package:core
ConfigFromStreamSettings	transport/internet/tls/config.go	/^func ConfigFromStreamSettings(settings *internet.MemoryStreamConfig) *Config {$/;"	f	package:tls	typeref:typename:*Config
ConfigFromStreamSettings	transport/internet/xtls/config.go	/^func ConfigFromStreamSettings(settings *internet.MemoryStreamConfig) *Config {$/;"	f	package:xtls	typeref:typename:*Config
ConfigLoader	config.go	/^type ConfigLoader func(input interface{}) (*Config, error)$/;"	t	package:core	typeref:typename:func(input interface{}) (*Config, error)
ConfigLoader	main/confloader/external/external.go	/^func ConfigLoader(arg string) (out io.Reader, err error) {$/;"	f	package:external	typeref:typename:(out io.Reader, err error)
Config_AS_IS	proxy/freedom/config.pb.go	/^	Config_AS_IS   Config_DomainStrategy = 0$/;"	c	package:freedom	typeref:type:Config_DomainStrategy
Config_AsIs	app/router/config.pb.go	/^	Config_AsIs Config_DomainStrategy = 0$/;"	c	package:router	typeref:type:Config_DomainStrategy
Config_DomainStrategy	app/router/config.pb.go	/^type Config_DomainStrategy int32$/;"	t	package:router	typeref:typename:int32
Config_DomainStrategy	proxy/freedom/config.pb.go	/^type Config_DomainStrategy int32$/;"	t	package:freedom	typeref:typename:int32
Config_DomainStrategy_name	app/router/config.pb.go	/^	Config_DomainStrategy_name = map[int32]string{$/;"	v	package:router
Config_DomainStrategy_name	proxy/freedom/config.pb.go	/^	Config_DomainStrategy_name = map[int32]string{$/;"	v	package:freedom
Config_DomainStrategy_value	app/router/config.pb.go	/^	Config_DomainStrategy_value = map[string]int32{$/;"	v	package:router
Config_DomainStrategy_value	proxy/freedom/config.pb.go	/^	Config_DomainStrategy_value = map[string]int32{$/;"	v	package:freedom
Config_HostMapping	app/dns/config.pb.go	/^type Config_HostMapping struct {$/;"	s	package:dns
Config_IpIfNonMatch	app/router/config.pb.go	/^	Config_IpIfNonMatch Config_DomainStrategy = 2$/;"	c	package:router	typeref:type:Config_DomainStrategy
Config_IpOnDemand	app/router/config.pb.go	/^	Config_IpOnDemand Config_DomainStrategy = 3$/;"	c	package:router	typeref:type:Config_DomainStrategy
Config_USE_IP	proxy/freedom/config.pb.go	/^	Config_USE_IP  Config_DomainStrategy = 1$/;"	c	package:freedom	typeref:type:Config_DomainStrategy
Config_USE_IP4	proxy/freedom/config.pb.go	/^	Config_USE_IP4 Config_DomainStrategy = 2$/;"	c	package:freedom	typeref:type:Config_DomainStrategy
Config_USE_IP6	proxy/freedom/config.pb.go	/^	Config_USE_IP6 Config_DomainStrategy = 3$/;"	c	package:freedom	typeref:type:Config_DomainStrategy
Config_UseIp	app/router/config.pb.go	/^	Config_UseIp Config_DomainStrategy = 1$/;"	c	package:router	typeref:type:Config_DomainStrategy
Congestion	infra/conf/transport_internet.go	/^	Congestion      *bool           `json:"congestion"`$/;"	m	struct:conf.KCPConfig	typeref:typename:*bool
Congestion	transport/internet/kcp/config.pb.go	/^	Congestion       bool                 `protobuf:"varint,5,opt,name=congestion,proto3" json:"con/;"	m	struct:kcp.Config	typeref:typename:bool
Conn	common/net/system.go	/^type Conn = net.Conn$/;"	a	package:net	typeref:typename:net.Conn
Conn	proxy/http/client.go	/^	net.Conn$/;"	M	struct:http.http2Conn	typeref:typename:net.Conn
Conn	transport/internet/headers/http/http.go	/^	net.Conn$/;"	M	struct:http.HttpConn	typeref:typename:net.Conn
Conn	transport/internet/tls/tls.go	/^	*tls.Conn$/;"	M	struct:tls.Conn	typeref:typename:*tls.Conn
Conn	transport/internet/tls/tls.go	/^type Conn struct {$/;"	s	package:tls
Conn	transport/internet/xtls/xtls.go	/^	*xtls.Conn$/;"	M	struct:xtls.Conn	typeref:typename:*xtls.Conn
Conn	transport/internet/xtls/xtls.go	/^type Conn struct {$/;"	s	package:xtls
ConnHandler	transport/internet/tcp_hub.go	/^type ConnHandler func(Connection)$/;"	t	package:internet	typeref:typename:func(Connection)
ConnMetadata	transport/internet/kcp/connection.go	/^type ConnMetadata struct {$/;"	s	package:kcp
ConnReader	proxy/trojan/protocol.go	/^type ConnReader struct {$/;"	s	package:trojan
ConnWriter	proxy/trojan/protocol.go	/^type ConnWriter struct {$/;"	s	package:trojan
Connection	app/policy/config.pb.go	/^	Connection int32 `protobuf:"varint,1,opt,name=connection,proto3" json:"connection,omitempty"`$/;"	m	struct:policy.Policy_Buffer	typeref:typename:int32
Connection	transport/internet/connection.go	/^	Connection$/;"	M	struct:internet.StatCouterConnection	typeref:typename:Connection
Connection	transport/internet/connection.go	/^type Connection interface {$/;"	i	package:internet
Connection	transport/internet/kcp/connection.go	/^type Connection struct {$/;"	s	package:kcp
ConnectionAuthenticator	transport/internet/header.go	/^type ConnectionAuthenticator interface {$/;"	i	package:internet
ConnectionConfig	transport/internet/headers/noop/config.pb.go	/^type ConnectionConfig struct {$/;"	s	package:noop
ConnectionConfig	transport/internet/headers/noop/config.proto	/^message ConnectionConfig {}$/;"	m	package:v2ray.core.transport.internet.headers.noop
ConnectionID	transport/internet/kcp/listener.go	/^type ConnectionID struct {$/;"	s	package:kcp
ConnectionIdle	app/policy/config.pb.go	/^	ConnectionIdle *Second `protobuf:"bytes,2,opt,name=connection_idle,json=connectionIdle,proto3" /;"	m	struct:policy.Policy_Timeout	typeref:typename:*Second
ConnectionIdle	features/policy/policy.go	/^	ConnectionIdle time.Duration$/;"	m	struct:policy.Timeout	typeref:typename:time.Duration
ConnectionIdle	infra/conf/policy.go	/^	ConnectionIdle    *uint32 `json:"connIdle"`$/;"	m	struct:conf.Policy	typeref:typename:*uint32
ConnectionInput	common/net/connection.go	/^func ConnectionInput(writer io.Writer) ConnectionOption {$/;"	f	package:net	typeref:typename:ConnectionOption
ConnectionInputMulti	common/net/connection.go	/^func ConnectionInputMulti(writer buf.Writer) ConnectionOption {$/;"	f	package:net	typeref:typename:ConnectionOption
ConnectionLatency	common/peer/latency.go	/^	ConnectionLatency() Latency$/;"	n	interface:peer.HasLatency	typeref:typename:Latency
ConnectionLocalAddr	common/net/connection.go	/^func ConnectionLocalAddr(a net.Addr) ConnectionOption {$/;"	f	package:net	typeref:typename:ConnectionOption
ConnectionOnClose	common/net/connection.go	/^func ConnectionOnClose(n io.Closer) ConnectionOption {$/;"	f	package:net	typeref:typename:ConnectionOption
ConnectionOption	common/net/connection.go	/^type ConnectionOption func(*connection)$/;"	t	package:net	typeref:typename:func(*connection)
ConnectionOutput	common/net/connection.go	/^func ConnectionOutput(reader io.Reader) ConnectionOption {$/;"	f	package:net	typeref:typename:ConnectionOption
ConnectionOutputMulti	common/net/connection.go	/^func ConnectionOutputMulti(reader buf.Reader) ConnectionOption {$/;"	f	package:net	typeref:typename:ConnectionOption
ConnectionOutputMultiUDP	common/net/connection.go	/^func ConnectionOutputMultiUDP(reader buf.Reader) ConnectionOption {$/;"	f	package:net	typeref:typename:ConnectionOption
ConnectionRemoteAddr	common/net/connection.go	/^func ConnectionRemoteAddr(a net.Addr) ConnectionOption {$/;"	f	package:net	typeref:typename:ConnectionOption
ConnectionReuse	transport/internet/kcp/config.pb.go	/^type ConnectionReuse struct {$/;"	s	package:kcp
ConnectionReuse	transport/internet/kcp/config.proto	/^message ConnectionReuse {$/;"	m	package:v2ray.core.transport.internet.kcp
ConnectionType	proxy/mtproto/auth.go	/^	ConnectionType [4]byte$/;"	m	struct:mtproto.SessionContext	typeref:typename:[4]byte
ConnectionType	proxy/mtproto/auth.go	/^func (a *Authentication) ConnectionType() [4]byte {$/;"	f	struct:mtproto.Authentication	typeref:typename:[4]byte
Connections	app/reverse/bridge.go	/^func (w *BridgeWorker) Connections() uint32 {$/;"	f	struct:reverse.BridgeWorker	typeref:typename:uint32
Console	app/log/config.proto	/^  Console = 1;$/;"	e	enum:v2ray.core.app.log.LogType
Contains	common/net/port.go	/^func (mpl MemoryPortList) Contains(port Port) bool {$/;"	f	type:net.MemoryPortList	typeref:typename:bool
Contains	common/net/port.go	/^func (p *PortRange) Contains(port Port) bool {$/;"	f	unknown:net.PortRange	typeref:typename:bool
Contains	common/net/port.go	/^func (r MemoryPortRange) Contains(port Port) bool {$/;"	f	struct:net.MemoryPortRange	typeref:typename:bool
Content	common/log/log.go	/^	Content  interface{}$/;"	m	struct:log.GeneralMessage	typeref:typename:interface{}
Content	common/session/session.go	/^type Content struct {$/;"	s	package:session
Content	features/routing/session/context.go	/^	Content  *session.Content$/;"	m	struct:session.Context	typeref:typename:*session.Content
ContentFromContext	common/session/context.go	/^func ContentFromContext(ctx context.Context) *Content {$/;"	f	package:session	typeref:typename:*Content
Context	app/router/router.go	/^	routing.Context$/;"	M	struct:router.Route	typeref:typename:routing.Context
Context	features/routing/context.go	/^type Context interface {$/;"	i	package:routing
Context	features/routing/dns/context.go	/^	routing.Context$/;"	M	struct:dns.ResolvableContext	typeref:typename:routing.Context
Context	features/routing/session/context.go	/^type Context struct {$/;"	s	package:session
ContextWithAccessMessage	common/log/access.go	/^func ContextWithAccessMessage(ctx context.Context, accessMessage *AccessMessage) context.Context/;"	f	package:log	typeref:typename:context.Context
ContextWithBufferPolicy	features/policy/policy.go	/^func ContextWithBufferPolicy(ctx context.Context, p Buffer) context.Context {$/;"	f	package:policy	typeref:typename:context.Context
ContextWithContent	common/session/context.go	/^func ContextWithContent(ctx context.Context, content *Content) context.Context {$/;"	f	package:session	typeref:typename:context.Context
ContextWithDNSClient	features/routing/dns/context.go	/^func ContextWithDNSClient(ctx routing.Context, client dns.Client) routing.Context {$/;"	f	package:dns	typeref:typename:routing.Context
ContextWithID	common/session/context.go	/^func ContextWithID(ctx context.Context, id ID) context.Context {$/;"	f	package:session	typeref:typename:context.Context
ContextWithInbound	common/session/context.go	/^func ContextWithInbound(ctx context.Context, inbound *Inbound) context.Context {$/;"	f	package:session	typeref:typename:context.Context
ContextWithMuxPrefered	common/session/context.go	/^func ContextWithMuxPrefered(ctx context.Context, forced bool) context.Context {$/;"	f	package:session	typeref:typename:context.Context
ContextWithOutbound	common/session/context.go	/^func ContextWithOutbound(ctx context.Context, outbound *Outbound) context.Context {$/;"	f	package:session	typeref:typename:context.Context
ContextWithRequestHeader	common/protocol/context.go	/^func ContextWithRequestHeader(ctx context.Context, request *RequestHeader) context.Context {$/;"	f	package:protocol	typeref:typename:context.Context
ContextWithSessionContext	proxy/mtproto/auth.go	/^func ContextWithSessionContext(ctx context.Context, c SessionContext) context.Context {$/;"	f	package:mtproto	typeref:typename:context.Context
ContextWithSniffingConfig	app/proxyman/proxyman.go	/^func ContextWithSniffingConfig(ctx context.Context, c *SniffingConfig) context.Context {$/;"	f	package:proxyman	typeref:typename:context.Context
ContextWithSockopt	common/session/context.go	/^func ContextWithSockopt(ctx context.Context, s *Sockopt) context.Context {$/;"	f	package:session	typeref:typename:context.Context
Contributor Covenant Code of Conduct	.github/CODE_OF_CONDUCT.md	/^# Contributor Covenant Code of Conduct$/;"	c
Control	app/reverse/config.pb.go	/^type Control struct {$/;"	s	package:reverse
Control	app/reverse/config.proto	/^message Control {$/;"	m	package:v2ray.core.app.reverse
Control_ACTIVE	app/reverse/config.pb.go	/^	Control_ACTIVE Control_State = 0$/;"	c	package:reverse	typeref:type:Control_State
Control_DRAIN	app/reverse/config.pb.go	/^	Control_DRAIN  Control_State = 1$/;"	c	package:reverse	typeref:type:Control_State
Control_State	app/reverse/config.pb.go	/^type Control_State int32$/;"	t	package:reverse	typeref:typename:int32
Control_State_name	app/reverse/config.pb.go	/^	Control_State_name = map[int32]string{$/;"	v	package:reverse
Control_State_value	app/reverse/config.pb.go	/^	Control_State_value = map[string]int32{$/;"	v	package:reverse
Conv	transport/internet/kcp/listener.go	/^	Conv   uint16$/;"	m	struct:kcp.ConnectionID	typeref:typename:uint16
Conv	transport/internet/kcp/segment.go	/^	Conv            uint16$/;"	m	struct:kcp.AckSegment	typeref:typename:uint16
Conv	transport/internet/kcp/segment.go	/^	Conv          uint16$/;"	m	struct:kcp.CmdOnlySegment	typeref:typename:uint16
Conv	transport/internet/kcp/segment.go	/^	Conv        uint16$/;"	m	struct:kcp.DataSegment	typeref:typename:uint16
Conversation	transport/internet/kcp/connection.go	/^	Conversation uint16$/;"	m	struct:kcp.ConnMetadata	typeref:typename:uint16
Conversation	transport/internet/kcp/segment.go	/^	Conversation() uint16$/;"	n	interface:kcp.Segment	typeref:typename:uint16
Conversation	transport/internet/kcp/segment.go	/^func (s *AckSegment) Conversation() uint16 {$/;"	f	struct:kcp.AckSegment	typeref:typename:uint16
Conversation	transport/internet/kcp/segment.go	/^func (s *CmdOnlySegment) Conversation() uint16 {$/;"	f	struct:kcp.CmdOnlySegment	typeref:typename:uint16
Conversation	transport/internet/kcp/segment.go	/^func (s *DataSegment) Conversation() uint16 {$/;"	f	struct:kcp.DataSegment	typeref:typename:uint16
Copy	common/buf/copy.go	/^func Copy(reader Reader, writer Writer, options ...CopyOption) error {$/;"	f	package:buf	typeref:typename:error
Copy	common/buf/multi_buffer.go	/^func (mb MultiBuffer) Copy(b []byte) int {$/;"	f	type:buf.MultiBuffer	typeref:typename:int
CopyFile	common/platform/filesystem/file.go	/^func CopyFile(dst string, src string) error {$/;"	f	package:filesystem	typeref:typename:error
CopyOnceTimeout	common/buf/copy.go	/^func CopyOnceTimeout(reader Reader, writer Writer, timeout time.Duration) error {$/;"	f	package:buf	typeref:typename:error
CopyOption	common/buf/copy.go	/^type CopyOption func(*copyHandler)$/;"	t	package:buf	typeref:typename:func(*copyHandler)
Count	common/mux/session.go	/^func (m *SessionManager) Count() int {$/;"	f	struct:mux.SessionManager	typeref:typename:int
CountSize	common/buf/copy.go	/^func CountSize(sc *SizeCounter) CopyOption {$/;"	f	package:buf	typeref:typename:CopyOption
Counter	app/dispatcher/stats.go	/^	Counter stats.Counter$/;"	m	struct:dispatcher.SizeStatWriter	typeref:typename:stats.Counter
Counter	app/stats/counter.go	/^type Counter struct {$/;"	s	package:stats
Counter	features/stats/stats.go	/^type Counter interface {$/;"	i	package:stats
CountryCode	app/router/config.pb.go	/^	CountryCode string    `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"c/;"	m	struct:router.GeoSite	typeref:typename:string
CountryCode	app/router/config.pb.go	/^	CountryCode string  `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"cou/;"	m	struct:router.GeoIP	typeref:typename:string
Create	common/mux/client.go	/^	Create() (*ClientWorker, error)$/;"	n	interface:mux.ClientWorkerFactory	typeref:typename:(*ClientWorker, error)
Create	common/mux/client.go	/^func (f *DialingWorkerFactory) Create() (*ClientWorker, error) {$/;"	f	struct:mux.DialingWorkerFactory	typeref:typename:(*ClientWorker, error)
Create	testing/mocks/mux.go	/^func (m *MuxClientWorkerFactory) Create() (*mux.ClientWorker, error) {$/;"	f	struct:mocks.MuxClientWorkerFactory	typeref:typename:(*mux.ClientWorker, error)
Create	testing/mocks/mux.go	/^func (mr *MuxClientWorkerFactoryMockRecorder) Create() *gomock.Call {$/;"	f	struct:mocks.MuxClientWorkerFactoryMockRecorder	typeref:typename:*gomock.Call
CreateAuthID	proxy/vmess/aead/authid.go	/^func CreateAuthID(cmdKey []byte, time int64) [16]byte {$/;"	f	package:aead	typeref:typename:[16]byte
CreateConfig	infra/conf/loader.go	/^func (v ConfigCreatorCache) CreateConfig(id string) (interface{}, error) {$/;"	f	type:conf.ConfigCreatorCache	typeref:typename:(interface{}, error)
CreateConnectionAuthenticator	transport/internet/header.go	/^func CreateConnectionAuthenticator(config interface{}) (ConnectionAuthenticator, error) {$/;"	f	package:internet	typeref:typename:(ConnectionAuthenticator, error)
CreateFileLogWriter	common/log/logger.go	/^func CreateFileLogWriter(path string) (WriterCreator, error) {$/;"	f	package:log	typeref:typename:(WriterCreator, error)
CreateObject	common/type.go	/^func CreateObject(ctx context.Context, config interface{}) (interface{}, error) {$/;"	f	package:common	typeref:typename:(interface{}, error)
CreateObject	functions.go	/^func CreateObject(v *Instance, config interface{}) (interface{}, error) {$/;"	f	package:core	typeref:typename:(interface{}, error)
CreatePacketHeader	transport/internet/header.go	/^func CreatePacketHeader(config interface{}) (PacketHeader, error) {$/;"	f	package:internet	typeref:typename:(PacketHeader, error)
CreateStderrLogWriter	common/log/logger.go	/^func CreateStderrLogWriter() WriterCreator {$/;"	f	package:log	typeref:typename:WriterCreator
CreateStdoutLogWriter	common/log/logger.go	/^func CreateStdoutLogWriter() WriterCreator {$/;"	f	package:log	typeref:typename:WriterCreator
CreateTasks	store/utils.go	/^const CreateTasks string = "CREATE TABLE IF NOT EXISTS " + DSP_TASK_TABLE_NAME +$/;"	c	package:store	typeref:typename:string
CreateTransportConfig	transport/internet/config.go	/^func CreateTransportConfig(name string) (interface{}, error) {$/;"	f	package:internet	typeref:typename:(interface{}, error)
CreatedAt	store/task.go	/^	CreatedAt  time.Time$/;"	m	struct:store.Task	typeref:typename:time.Time
Credits	README.md	/^## Credits$/;"	s	chapter:Project V
CryptionReader	common/crypto/io.go	/^type CryptionReader struct {$/;"	s	package:crypto
CryptionWriter	common/crypto/io.go	/^type CryptionWriter struct {$/;"	s	package:crypto
CsrcCount	transport/internet/headers/srtp/config.pb.go	/^	CsrcCount   uint32 `protobuf:"varint,4,opt,name=csrc_count,json=csrcCount,proto3" json:"csrc_co/;"	m	struct:srtp.Config	typeref:typename:uint32
Current	common/buf/readv_reader.go	/^func (s *allocStrategy) Current() uint32 {$/;"	f	struct:buf.allocStrategy	typeref:typename:uint32
D	common/protocol/tls/cert/privateKey.go	/^	D       *big.Int$/;"	m	struct:cert.pkcs1PrivateKey	typeref:typename:*big.Int
DBName	bin/config/config-server.json	/^    "InfluxDB":{"URL":"http:\/\/192.168.1.115:8086","DBName":"metric","UserName":"saveio","Passw/;"	s	object:porter.InfluxDB
DBVersion	store/sqlite.go	/^const DBVersion int = 6$/;"	c	package:store	typeref:typename:int
DB_DIR	app/p2p/account/account.go	/^const DB_DIR = ".\/db"$/;"	c	package:account
DEFUALT_GRPC_PORT	app/p2p/grpc/server.go	/^const DEFUALT_GRPC_PORT = 55255$/;"	c	package:grpc
DNSClient	testing/mocks/dns.go	/^type DNSClient struct {$/;"	s	package:mocks
DNSClientMockRecorder	testing/mocks/dns.go	/^type DNSClientMockRecorder struct {$/;"	s	package:mocks
DNSConfig	infra/conf/v2ray.go	/^	DNSConfig       *DnsConfig             `json:"dns"`$/;"	m	struct:conf.Config	typeref:typename:*DnsConfig
DNSNames	common/protocol/tls/cert/cert.go	/^func DNSNames(names ...string) Option {$/;"	f	package:cert	typeref:typename:Option
DRAIN	app/reverse/config.proto	/^    DRAIN = 1;$/;"	e	enum:v2ray.core.app.reverse.Control.State
DSConfig	infra/conf/transport.go	/^	DSConfig   *DomainSocketConfig `json:"dsSettings"`$/;"	m	struct:conf.TransportConfig	typeref:typename:*DomainSocketConfig
DSP_TASK_TABLE_NAME	store/utils.go	/^const DSP_TASK_TABLE_NAME = "dsp_tasks"$/;"	c	package:store
DSSettings	infra/conf/transport_internet.go	/^	DSSettings     *DomainSocketConfig `json:"dsSettings"`$/;"	m	struct:conf.StreamConfig	typeref:typename:*DomainSocketConfig
DTLS	transport/internet/headers/tls/dtls.go	/^type DTLS struct {$/;"	s	package:tls
DTLSAuthenticator	infra/conf/transport_authenticators.go	/^type DTLSAuthenticator struct{}$/;"	s	package:conf
Daddr	transport/internet/sockopt_freebsd.go	/^	Daddr     [16]byte \/* pf_addr *\/$/;"	m	struct:internet.pfiocNatlook	typeref:typename:[16]byte
Data	transport/internet/kcp/segment.go	/^func (s *DataSegment) Data() *buf.Buffer {$/;"	f	struct:kcp.DataSegment	typeref:typename:*buf.Buffer
DataCenterID	proxy/mtproto/auth.go	/^	DataCenterID   uint16$/;"	m	struct:mtproto.SessionContext	typeref:typename:uint16
DataCenterID	proxy/mtproto/auth.go	/^func (a *Authentication) DataCenterID() uint16 {$/;"	f	struct:mtproto.Authentication	typeref:typename:uint16
DataSegment	transport/internet/kcp/segment.go	/^type DataSegment struct {$/;"	s	package:kcp
DataSegmentOverhead	transport/internet/kcp/segment.go	/^	DataSegmentOverhead = 18$/;"	c	package:kcp
Debug	common/log/log.proto	/^  Debug = 4;$/;"	e	enum:v2ray.core.common.log.Severity
Decode	common/crypto/chunk.go	/^	Decode([]byte) (uint16, error)$/;"	n	interface:crypto.ChunkSizeDecoder	typeref:typename:(uint16, error)
Decode	common/crypto/chunk.go	/^func (PlainChunkSizeParser) Decode(b []byte) (uint16, error) {$/;"	f	struct:crypto.PlainChunkSizeParser	typeref:typename:(uint16, error)
Decode	common/crypto/chunk.go	/^func (p *AEADChunkSizeParser) Decode(b []byte) (uint16, error) {$/;"	f	struct:crypto.AEADChunkSizeParser	typeref:typename:(uint16, error)
Decode	proxy/vmess/aead/authid.go	/^func (aidd *AuthIDDecoder) Decode(data [16]byte) (int64, uint32, int32, []byte) {$/;"	f	struct:aead.AuthIDDecoder	typeref:typename:(int64, uint32, int32, []byte)
Decode	proxy/vmess/encoding/auth.go	/^func (s *ShakeSizeParser) Decode(b []byte) (uint16, error) {$/;"	f	struct:encoding.ShakeSizeParser	typeref:typename:(uint16, error)
DecodeBodyAddons	proxy/vless/encoding/addons.go	/^func DecodeBodyAddons(reader io.Reader, request *protocol.RequestHeader, addons *Addons) buf.Rea/;"	f	package:encoding	typeref:typename:buf.Reader
DecodeHeaderAddons	proxy/vless/encoding/addons.go	/^func DecodeHeaderAddons(buffer *buf.Buffer, reader io.Reader) (*Addons, error) {$/;"	f	package:encoding	typeref:typename:(*Addons, error)
DecodeJSONConfig	infra/conf/serial/loader.go	/^func DecodeJSONConfig(reader io.Reader) (*conf.Config, error) {$/;"	f	package:serial	typeref:typename:(*conf.Config, error)
DecodePacket	proxy/shadowsocks/config.go	/^	DecodePacket(key []byte, b *buf.Buffer) error$/;"	n	interface:shadowsocks.Cipher	typeref:typename:error
DecodePacket	proxy/shadowsocks/config.go	/^func (NoneCipher) DecodePacket(key []byte, b *buf.Buffer) error {$/;"	f	struct:shadowsocks.NoneCipher	typeref:typename:error
DecodePacket	proxy/shadowsocks/config.go	/^func (c *AEADCipher) DecodePacket(key []byte, b *buf.Buffer) error {$/;"	f	struct:shadowsocks.AEADCipher	typeref:typename:error
DecodePacket	proxy/shadowsocks/config.go	/^func (v *AesCfb) DecodePacket(key []byte, b *buf.Buffer) error {$/;"	f	struct:shadowsocks.AesCfb	typeref:typename:error
DecodePacket	proxy/shadowsocks/config.go	/^func (v *ChaCha20) DecodePacket(key []byte, b *buf.Buffer) error {$/;"	f	struct:shadowsocks.ChaCha20	typeref:typename:error
DecodeRequestBody	proxy/vmess/encoding/server.go	/^func (s *ServerSession) DecodeRequestBody(request *protocol.RequestHeader, reader io.Reader) buf/;"	f	struct:encoding.ServerSession	typeref:typename:buf.Reader
DecodeRequestHeader	proxy/vless/encoding/encoding.go	/^func DecodeRequestHeader(isfb bool, first *buf.Buffer, reader io.Reader, validator *vless.Valida/;"	f	package:encoding	typeref:typename:(*protocol.RequestHeader, *Addons, error, bool)
DecodeRequestHeader	proxy/vmess/encoding/server.go	/^func (s *ServerSession) DecodeRequestHeader(reader io.Reader) (*protocol.RequestHeader, error) {$/;"	f	struct:encoding.ServerSession	typeref:typename:(*protocol.RequestHeader, error)
DecodeResponseBody	proxy/vmess/encoding/client.go	/^func (c *ClientSession) DecodeResponseBody(request *protocol.RequestHeader, reader io.Reader) bu/;"	f	struct:encoding.ClientSession	typeref:typename:buf.Reader
DecodeResponseHeader	proxy/vless/encoding/encoding.go	/^func DecodeResponseHeader(reader io.Reader, request *protocol.RequestHeader) (*Addons, error) {$/;"	f	package:encoding	typeref:typename:(*Addons, error)
DecodeResponseHeader	proxy/vmess/encoding/client.go	/^func (c *ClientSession) DecodeResponseHeader(reader io.Reader) (*protocol.ResponseHeader, error)/;"	f	struct:encoding.ClientSession	typeref:typename:(*protocol.ResponseHeader, error)
DecodeUDPPacket	proxy/shadowsocks/protocol.go	/^func DecodeUDPPacket(user *protocol.MemoryUser, payload *buf.Buffer) (*protocol.RequestHeader, */;"	f	package:shadowsocks	typeref:typename:(*protocol.RequestHeader, *buf.Buffer, error)
DecodeUDPPacket	proxy/socks/protocol.go	/^func DecodeUDPPacket(packet *buf.Buffer) (*protocol.RequestHeader, error) {$/;"	f	package:socks	typeref:typename:(*protocol.RequestHeader, error)
DecodingKey	proxy/mtproto/auth.go	/^	DecodingKey   [32]byte$/;"	m	struct:mtproto.Authentication	typeref:typename:[32]byte
DecodingNonce	proxy/mtproto/auth.go	/^	DecodingNonce [16]byte$/;"	m	struct:mtproto.Authentication	typeref:typename:[16]byte
Decryption	infra/conf/vless.go	/^	Decryption string                  `json:"decryption"`$/;"	m	struct:conf.VLessInboundConfig	typeref:typename:string
Decryption	proxy/vless/inbound/config.pb.go	/^	Decryption string      `protobuf:"bytes,2,opt,name=decryption,proto3" json:"decryption,omitempt/;"	m	struct:inbound.Config	typeref:typename:string
Default	proxy/vmess/inbound/config.pb.go	/^	Default              *DefaultConfig   `protobuf:"bytes,2,opt,name=default,proto3" json:"default/;"	m	struct:inbound.Config	typeref:typename:*DefaultConfig
DefaultConfig	proxy/vmess/inbound/config.pb.go	/^type DefaultConfig struct {$/;"	s	package:inbound
DefaultConfig	proxy/vmess/inbound/config.proto	/^message DefaultConfig {$/;"	m	package:v2ray.core.proxy.vmess.inbound
DefaultDispatcher	app/dispatcher/default.go	/^type DefaultDispatcher struct {$/;"	s	package:dispatcher
DefaultIDHash	common/protocol/id.go	/^func DefaultIDHash(key []byte) hash.Hash {$/;"	f	package:protocol	typeref:typename:hash.Hash
DefaultListener	transport/internet/system_listener.go	/^type DefaultListener struct {$/;"	s	package:internet
DefaultLogConfig	infra/conf/log.go	/^func DefaultLogConfig() *log.Config {$/;"	f	package:conf	typeref:typename:*log.Config
DefaultManager	features/policy/default.go	/^type DefaultManager struct{}$/;"	s	package:policy
DefaultP2PConfig	infra/conf/p2p.go	/^func DefaultP2PConfig() *p2p.Config {$/;"	f	package:conf	typeref:typename:*p2p.Config
DefaultRouter	features/routing/router.go	/^type DefaultRouter struct{}$/;"	s	package:routing
DefaultSessionContext	proxy/mtproto/auth.go	/^func DefaultSessionContext() SessionContext {$/;"	f	package:mtproto	typeref:typename:SessionContext
DefaultSleepInterval	app/p2p/api.go	/^const DefaultSleepInterval = 100 * time.Millisecond$/;"	c	package:p2p
DefaultSystemDialer	transport/internet/system_dialer.go	/^type DefaultSystemDialer struct {$/;"	s	package:internet
Defaults	infra/conf/vmess.go	/^	Defaults     *VMessDefaultConfig `json:"default"`$/;"	m	struct:conf.VMessInboundConfig	typeref:typename:*VMessDefaultConfig
Del	proxy/vless/validator.go	/^func (v *Validator) Del(e string) error {$/;"	f	struct:vless.Validator	typeref:typename:error
Delete	store/db.go	/^	Delete(key string) error$/;"	n	interface:store.Store	typeref:typename:error
Delete	store/leveldb.go	/^func (self *LevelDBStore) Delete(key []byte) error {$/;"	f	struct:store.LevelDBStore	typeref:typename:error
DeleteAccount	app/p2p/account/account.go	/^func (this *SocksDB) DeleteAccount(pubKey crypto.PubKey) error {$/;"	f	struct:account.SocksDB	typeref:typename:error
Description	infra/conf/command/command.go	/^func (c *ConfigCommand) Description() control.Description {$/;"	f	struct:command.ConfigCommand	typeref:typename:control.Description
Description	infra/control/api.go	/^func (c *ApiCommand) Description() Description {$/;"	f	struct:control.ApiCommand	typeref:typename:Description
Description	infra/control/cert.go	/^func (c *CertificateCommand) Description() Description {$/;"	f	struct:control.CertificateCommand	typeref:typename:Description
Description	infra/control/command.go	/^	Description() Description$/;"	n	interface:control.Command	typeref:typename:Description
Description	infra/control/command.go	/^type Description struct {$/;"	s	package:control
Description	infra/control/config.go	/^func (c *ConfigCommand) Description() Description {$/;"	f	struct:control.ConfigCommand	typeref:typename:Description
Description	infra/control/fetch.go	/^func (c *FetchCommand) Description() Description {$/;"	f	struct:control.FetchCommand	typeref:typename:Description
Description	infra/control/love.go	/^func (c *LoveCommand) Description() Description {$/;"	f	struct:control.LoveCommand	typeref:typename:Description
Description	infra/control/tlsping.go	/^func (c *TlsPingCommand) Description() Description {$/;"	f	struct:control.TlsPingCommand	typeref:typename:Description
Description	infra/control/uuid.go	/^func (c *UUIDCommand) Description() Description {$/;"	f	struct:control.UUIDCommand	typeref:typename:Description
Description	infra/control/verify.go	/^func (c *VerifyCommand) Description() Description {$/;"	f	struct:control.VerifyCommand	typeref:typename:Description
Description	release/config/systemd/system/v2ray.service	/^Description=V2Ray Service$/;"	k	section:Unit
Description	release/config/systemd/system/v2ray@.service	/^Description=V2Ray Service$/;"	k	section:Unit
Descriptor	app/commander/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:commander.Config	typeref:typename:([]byte, []int)
Descriptor	app/dispatcher/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:dispatcher.Config	typeref:typename:([]byte, []int)
Descriptor	app/dispatcher/config.pb.go	/^func (*SessionConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:dispatcher.SessionConfig	typeref:typename:([]byte, []int)
Descriptor	app/dns/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:dns.Config	typeref:typename:([]byte, []int)
Descriptor	app/dns/config.pb.go	/^func (*Config_HostMapping) Descriptor() ([]byte, []int) {$/;"	f	struct:dns.Config_HostMapping	typeref:typename:([]byte, []int)
Descriptor	app/dns/config.pb.go	/^func (*NameServer) Descriptor() ([]byte, []int) {$/;"	f	struct:dns.NameServer	typeref:typename:([]byte, []int)
Descriptor	app/dns/config.pb.go	/^func (*NameServer_OriginalRule) Descriptor() ([]byte, []int) {$/;"	f	struct:dns.NameServer_OriginalRule	typeref:typename:([]byte, []int)
Descriptor	app/dns/config.pb.go	/^func (*NameServer_PriorityDomain) Descriptor() ([]byte, []int) {$/;"	f	struct:dns.NameServer_PriorityDomain	typeref:typename:([]byte, []int)
Descriptor	app/dns/config.pb.go	/^func (DomainMatchingType) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:dns.DomainMatchingType	typeref:typename:protoreflect.EnumDescriptor
Descriptor	app/log/command/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:command.Config	typeref:typename:([]byte, []int)
Descriptor	app/log/command/config.pb.go	/^func (*RestartLoggerRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.RestartLoggerRequest	typeref:typename:([]byte, []int)
Descriptor	app/log/command/config.pb.go	/^func (*RestartLoggerResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:command.RestartLoggerResponse	typeref:typename:([]byte, []int)
Descriptor	app/log/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:log.Config	typeref:typename:([]byte, []int)
Descriptor	app/log/config.pb.go	/^func (LogType) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:log.LogType	typeref:typename:protoreflect.EnumDescriptor
Descriptor	app/p2p/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:p2p.Config	typeref:typename:([]byte, []int)
Descriptor	app/p2p/config.pb.go	/^func (*Seed) Descriptor() ([]byte, []int) {$/;"	f	struct:p2p.Seed	typeref:typename:([]byte, []int)
Descriptor	app/p2p/wire/notifier.pb.go	/^func (*HelloReply) Descriptor() ([]byte, []int) {$/;"	f	struct:wire.HelloReply	typeref:typename:([]byte, []int)
Descriptor	app/p2p/wire/notifier.pb.go	/^func (*HelloRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:wire.HelloRequest	typeref:typename:([]byte, []int)
Descriptor	app/p2p/wire/seedlist.pb.go	/^func (*HelloSeedList) Descriptor() ([]byte, []int) {$/;"	f	struct:wire.HelloSeedList	typeref:typename:([]byte, []int)
Descriptor	app/p2p/wire/seedlist.pb.go	/^func (*MessageData) Descriptor() ([]byte, []int) {$/;"	f	struct:wire.MessageData	typeref:typename:([]byte, []int)
Descriptor	app/p2p/wire/seedlist.pb.go	/^func (*SeedInfo) Descriptor() ([]byte, []int) {$/;"	f	struct:wire.SeedInfo	typeref:typename:([]byte, []int)
Descriptor	app/p2p/wire/seedlist.pb.go	/^func (*SeedListRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:wire.SeedListRequest	typeref:typename:([]byte, []int)
Descriptor	app/p2p/wire/seedlist.pb.go	/^func (*SeedListResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:wire.SeedListResponse	typeref:typename:([]byte, []int)
Descriptor	app/policy/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:policy.Config	typeref:typename:([]byte, []int)
Descriptor	app/policy/config.pb.go	/^func (*Policy) Descriptor() ([]byte, []int) {$/;"	f	struct:policy.Policy	typeref:typename:([]byte, []int)
Descriptor	app/policy/config.pb.go	/^func (*Policy_Buffer) Descriptor() ([]byte, []int) {$/;"	f	struct:policy.Policy_Buffer	typeref:typename:([]byte, []int)
Descriptor	app/policy/config.pb.go	/^func (*Policy_Stats) Descriptor() ([]byte, []int) {$/;"	f	struct:policy.Policy_Stats	typeref:typename:([]byte, []int)
Descriptor	app/policy/config.pb.go	/^func (*Policy_Timeout) Descriptor() ([]byte, []int) {$/;"	f	struct:policy.Policy_Timeout	typeref:typename:([]byte, []int)
Descriptor	app/policy/config.pb.go	/^func (*Second) Descriptor() ([]byte, []int) {$/;"	f	struct:policy.Second	typeref:typename:([]byte, []int)
Descriptor	app/policy/config.pb.go	/^func (*SystemPolicy) Descriptor() ([]byte, []int) {$/;"	f	struct:policy.SystemPolicy	typeref:typename:([]byte, []int)
Descriptor	app/policy/config.pb.go	/^func (*SystemPolicy_Stats) Descriptor() ([]byte, []int) {$/;"	f	struct:policy.SystemPolicy_Stats	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*AddInboundRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.AddInboundRequest	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*AddInboundResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:command.AddInboundResponse	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*AddOutboundRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.AddOutboundRequest	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*AddOutboundResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:command.AddOutboundResponse	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*AddUserOperation) Descriptor() ([]byte, []int) {$/;"	f	struct:command.AddUserOperation	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*AlterInboundRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.AlterInboundRequest	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*AlterInboundResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:command.AlterInboundResponse	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*AlterOutboundRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.AlterOutboundRequest	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*AlterOutboundResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:command.AlterOutboundResponse	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:command.Config	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*RemoveInboundRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.RemoveInboundRequest	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*RemoveInboundResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:command.RemoveInboundResponse	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*RemoveOutboundRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.RemoveOutboundRequest	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*RemoveOutboundResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:command.RemoveOutboundResponse	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/command/command.pb.go	/^func (*RemoveUserOperation) Descriptor() ([]byte, []int) {$/;"	f	struct:command.RemoveUserOperation	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/config.pb.go	/^func (*AllocationStrategy) Descriptor() ([]byte, []int) {$/;"	f	struct:proxyman.AllocationStrategy	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/config.pb.go	/^func (*AllocationStrategy_AllocationStrategyConcurrency) Descriptor() ([]byte, []int) {$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyConcurrency	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/config.pb.go	/^func (*AllocationStrategy_AllocationStrategyRefresh) Descriptor() ([]byte, []int) {$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyRefresh	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/config.pb.go	/^func (*InboundConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:proxyman.InboundConfig	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/config.pb.go	/^func (*InboundHandlerConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:proxyman.InboundHandlerConfig	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/config.pb.go	/^func (*MultiplexingConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:proxyman.MultiplexingConfig	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/config.pb.go	/^func (*OutboundConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:proxyman.OutboundConfig	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/config.pb.go	/^func (*ReceiverConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:proxyman.ReceiverConfig	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/config.pb.go	/^func (*SenderConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:proxyman.SenderConfig	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/config.pb.go	/^func (*SniffingConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:proxyman.SniffingConfig	typeref:typename:([]byte, []int)
Descriptor	app/proxyman/config.pb.go	/^func (AllocationStrategy_Type) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:proxyman.AllocationStrategy_Type	typeref:typename:protoreflect.EnumDescriptor
Descriptor	app/proxyman/config.pb.go	/^func (KnownProtocols) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:proxyman.KnownProtocols	typeref:typename:protoreflect.EnumDescriptor
Descriptor	app/reverse/config.pb.go	/^func (*BridgeConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:reverse.BridgeConfig	typeref:typename:([]byte, []int)
Descriptor	app/reverse/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:reverse.Config	typeref:typename:([]byte, []int)
Descriptor	app/reverse/config.pb.go	/^func (*Control) Descriptor() ([]byte, []int) {$/;"	f	struct:reverse.Control	typeref:typename:([]byte, []int)
Descriptor	app/reverse/config.pb.go	/^func (*PortalConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:reverse.PortalConfig	typeref:typename:([]byte, []int)
Descriptor	app/reverse/config.pb.go	/^func (Control_State) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:reverse.Control_State	typeref:typename:protoreflect.EnumDescriptor
Descriptor	app/router/command/command.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:command.Config	typeref:typename:([]byte, []int)
Descriptor	app/router/command/command.pb.go	/^func (*RoutingContext) Descriptor() ([]byte, []int) {$/;"	f	struct:command.RoutingContext	typeref:typename:([]byte, []int)
Descriptor	app/router/command/command.pb.go	/^func (*SubscribeRoutingStatsRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.SubscribeRoutingStatsRequest	typeref:typename:([]byte, []int)
Descriptor	app/router/command/command.pb.go	/^func (*TestRouteRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.TestRouteRequest	typeref:typename:([]byte, []int)
Descriptor	app/router/config.pb.go	/^func (*BalancingRule) Descriptor() ([]byte, []int) {$/;"	f	struct:router.BalancingRule	typeref:typename:([]byte, []int)
Descriptor	app/router/config.pb.go	/^func (*CIDR) Descriptor() ([]byte, []int) {$/;"	f	struct:router.CIDR	typeref:typename:([]byte, []int)
Descriptor	app/router/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:router.Config	typeref:typename:([]byte, []int)
Descriptor	app/router/config.pb.go	/^func (*Domain) Descriptor() ([]byte, []int) {$/;"	f	struct:router.Domain	typeref:typename:([]byte, []int)
Descriptor	app/router/config.pb.go	/^func (*Domain_Attribute) Descriptor() ([]byte, []int) {$/;"	f	struct:router.Domain_Attribute	typeref:typename:([]byte, []int)
Descriptor	app/router/config.pb.go	/^func (*GeoIP) Descriptor() ([]byte, []int) {$/;"	f	struct:router.GeoIP	typeref:typename:([]byte, []int)
Descriptor	app/router/config.pb.go	/^func (*GeoIPList) Descriptor() ([]byte, []int) {$/;"	f	struct:router.GeoIPList	typeref:typename:([]byte, []int)
Descriptor	app/router/config.pb.go	/^func (*GeoSite) Descriptor() ([]byte, []int) {$/;"	f	struct:router.GeoSite	typeref:typename:([]byte, []int)
Descriptor	app/router/config.pb.go	/^func (*GeoSiteList) Descriptor() ([]byte, []int) {$/;"	f	struct:router.GeoSiteList	typeref:typename:([]byte, []int)
Descriptor	app/router/config.pb.go	/^func (*RoutingRule) Descriptor() ([]byte, []int) {$/;"	f	struct:router.RoutingRule	typeref:typename:([]byte, []int)
Descriptor	app/router/config.pb.go	/^func (Config_DomainStrategy) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:router.Config_DomainStrategy	typeref:typename:protoreflect.EnumDescriptor
Descriptor	app/router/config.pb.go	/^func (Domain_Type) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:router.Domain_Type	typeref:typename:protoreflect.EnumDescriptor
Descriptor	app/stats/command/command.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:command.Config	typeref:typename:([]byte, []int)
Descriptor	app/stats/command/command.pb.go	/^func (*GetStatsRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.GetStatsRequest	typeref:typename:([]byte, []int)
Descriptor	app/stats/command/command.pb.go	/^func (*GetStatsResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:command.GetStatsResponse	typeref:typename:([]byte, []int)
Descriptor	app/stats/command/command.pb.go	/^func (*QueryStatsRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.QueryStatsRequest	typeref:typename:([]byte, []int)
Descriptor	app/stats/command/command.pb.go	/^func (*QueryStatsResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:command.QueryStatsResponse	typeref:typename:([]byte, []int)
Descriptor	app/stats/command/command.pb.go	/^func (*Stat) Descriptor() ([]byte, []int) {$/;"	f	struct:command.Stat	typeref:typename:([]byte, []int)
Descriptor	app/stats/command/command.pb.go	/^func (*SysStatsRequest) Descriptor() ([]byte, []int) {$/;"	f	struct:command.SysStatsRequest	typeref:typename:([]byte, []int)
Descriptor	app/stats/command/command.pb.go	/^func (*SysStatsResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:command.SysStatsResponse	typeref:typename:([]byte, []int)
Descriptor	app/stats/config.pb.go	/^func (*ChannelConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:stats.ChannelConfig	typeref:typename:([]byte, []int)
Descriptor	app/stats/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:stats.Config	typeref:typename:([]byte, []int)
Descriptor	common/log/log.pb.go	/^func (Severity) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:log.Severity	typeref:typename:protoreflect.EnumDescriptor
Descriptor	common/net/address.pb.go	/^func (*IPOrDomain) Descriptor() ([]byte, []int) {$/;"	f	struct:net.IPOrDomain	typeref:typename:([]byte, []int)
Descriptor	common/net/destination.pb.go	/^func (*Endpoint) Descriptor() ([]byte, []int) {$/;"	f	struct:net.Endpoint	typeref:typename:([]byte, []int)
Descriptor	common/net/network.pb.go	/^func (*NetworkList) Descriptor() ([]byte, []int) {$/;"	f	struct:net.NetworkList	typeref:typename:([]byte, []int)
Descriptor	common/net/network.pb.go	/^func (Network) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:net.Network	typeref:typename:protoreflect.EnumDescriptor
Descriptor	common/net/port.pb.go	/^func (*PortList) Descriptor() ([]byte, []int) {$/;"	f	struct:net.PortList	typeref:typename:([]byte, []int)
Descriptor	common/net/port.pb.go	/^func (*PortRange) Descriptor() ([]byte, []int) {$/;"	f	struct:net.PortRange	typeref:typename:([]byte, []int)
Descriptor	common/protocol/headers.pb.go	/^func (*SecurityConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:protocol.SecurityConfig	typeref:typename:([]byte, []int)
Descriptor	common/protocol/headers.pb.go	/^func (SecurityType) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:protocol.SecurityType	typeref:typename:protoreflect.EnumDescriptor
Descriptor	common/protocol/server_spec.pb.go	/^func (*ServerEndpoint) Descriptor() ([]byte, []int) {$/;"	f	struct:protocol.ServerEndpoint	typeref:typename:([]byte, []int)
Descriptor	common/protocol/user.pb.go	/^func (*User) Descriptor() ([]byte, []int) {$/;"	f	struct:protocol.User	typeref:typename:([]byte, []int)
Descriptor	common/serial/typed_message.pb.go	/^func (*TypedMessage) Descriptor() ([]byte, []int) {$/;"	f	struct:serial.TypedMessage	typeref:typename:([]byte, []int)
Descriptor	config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:core.Config	typeref:typename:([]byte, []int)
Descriptor	config.pb.go	/^func (*InboundHandlerConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:core.InboundHandlerConfig	typeref:typename:([]byte, []int)
Descriptor	config.pb.go	/^func (*OutboundHandlerConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:core.OutboundHandlerConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/blackhole/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:blackhole.Config	typeref:typename:([]byte, []int)
Descriptor	proxy/blackhole/config.pb.go	/^func (*HTTPResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:blackhole.HTTPResponse	typeref:typename:([]byte, []int)
Descriptor	proxy/blackhole/config.pb.go	/^func (*NoneResponse) Descriptor() ([]byte, []int) {$/;"	f	struct:blackhole.NoneResponse	typeref:typename:([]byte, []int)
Descriptor	proxy/dns/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:dns.Config	typeref:typename:([]byte, []int)
Descriptor	proxy/dokodemo/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:dokodemo.Config	typeref:typename:([]byte, []int)
Descriptor	proxy/freedom/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:freedom.Config	typeref:typename:([]byte, []int)
Descriptor	proxy/freedom/config.pb.go	/^func (*DestinationOverride) Descriptor() ([]byte, []int) {$/;"	f	struct:freedom.DestinationOverride	typeref:typename:([]byte, []int)
Descriptor	proxy/freedom/config.pb.go	/^func (Config_DomainStrategy) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:freedom.Config_DomainStrategy	typeref:typename:protoreflect.EnumDescriptor
Descriptor	proxy/http/config.pb.go	/^func (*Account) Descriptor() ([]byte, []int) {$/;"	f	struct:http.Account	typeref:typename:([]byte, []int)
Descriptor	proxy/http/config.pb.go	/^func (*ClientConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:http.ClientConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/http/config.pb.go	/^func (*ServerConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:http.ServerConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/mtproto/config.pb.go	/^func (*Account) Descriptor() ([]byte, []int) {$/;"	f	struct:mtproto.Account	typeref:typename:([]byte, []int)
Descriptor	proxy/mtproto/config.pb.go	/^func (*ClientConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:mtproto.ClientConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/mtproto/config.pb.go	/^func (*ServerConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:mtproto.ServerConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/shadowsocks/config.pb.go	/^func (*Account) Descriptor() ([]byte, []int) {$/;"	f	struct:shadowsocks.Account	typeref:typename:([]byte, []int)
Descriptor	proxy/shadowsocks/config.pb.go	/^func (*ClientConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:shadowsocks.ClientConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/shadowsocks/config.pb.go	/^func (*ServerConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:shadowsocks.ServerConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/shadowsocks/config.pb.go	/^func (CipherType) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:shadowsocks.CipherType	typeref:typename:protoreflect.EnumDescriptor
Descriptor	proxy/socks/config.pb.go	/^func (*Account) Descriptor() ([]byte, []int) {$/;"	f	struct:socks.Account	typeref:typename:([]byte, []int)
Descriptor	proxy/socks/config.pb.go	/^func (*ClientConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:socks.ClientConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/socks/config.pb.go	/^func (*ServerConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:socks.ServerConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/socks/config.pb.go	/^func (AuthType) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:socks.AuthType	typeref:typename:protoreflect.EnumDescriptor
Descriptor	proxy/trojan/config.pb.go	/^func (*Account) Descriptor() ([]byte, []int) {$/;"	f	struct:trojan.Account	typeref:typename:([]byte, []int)
Descriptor	proxy/trojan/config.pb.go	/^func (*ClientConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:trojan.ClientConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/trojan/config.pb.go	/^func (*Fallback) Descriptor() ([]byte, []int) {$/;"	f	struct:trojan.Fallback	typeref:typename:([]byte, []int)
Descriptor	proxy/trojan/config.pb.go	/^func (*ServerConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:trojan.ServerConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/vless/account.pb.go	/^func (*Account) Descriptor() ([]byte, []int) {$/;"	f	struct:vless.Account	typeref:typename:([]byte, []int)
Descriptor	proxy/vless/encoding/addons.pb.go	/^func (*Addons) Descriptor() ([]byte, []int) {$/;"	f	struct:encoding.Addons	typeref:typename:([]byte, []int)
Descriptor	proxy/vless/inbound/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:inbound.Config	typeref:typename:([]byte, []int)
Descriptor	proxy/vless/inbound/config.pb.go	/^func (*Fallback) Descriptor() ([]byte, []int) {$/;"	f	struct:inbound.Fallback	typeref:typename:([]byte, []int)
Descriptor	proxy/vless/outbound/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:outbound.Config	typeref:typename:([]byte, []int)
Descriptor	proxy/vmess/account.pb.go	/^func (*Account) Descriptor() ([]byte, []int) {$/;"	f	struct:vmess.Account	typeref:typename:([]byte, []int)
Descriptor	proxy/vmess/inbound/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:inbound.Config	typeref:typename:([]byte, []int)
Descriptor	proxy/vmess/inbound/config.pb.go	/^func (*DefaultConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:inbound.DefaultConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/vmess/inbound/config.pb.go	/^func (*DetourConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:inbound.DetourConfig	typeref:typename:([]byte, []int)
Descriptor	proxy/vmess/outbound/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:outbound.Config	typeref:typename:([]byte, []int)
Descriptor	transport/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:transport.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/config.pb.go	/^func (*ProxyConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:internet.ProxyConfig	typeref:typename:([]byte, []int)
Descriptor	transport/internet/config.pb.go	/^func (*SocketConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:internet.SocketConfig	typeref:typename:([]byte, []int)
Descriptor	transport/internet/config.pb.go	/^func (*StreamConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:internet.StreamConfig	typeref:typename:([]byte, []int)
Descriptor	transport/internet/config.pb.go	/^func (*TransportConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:internet.TransportConfig	typeref:typename:([]byte, []int)
Descriptor	transport/internet/config.pb.go	/^func (SocketConfig_TCPFastOpenState) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:internet.SocketConfig_TCPFastOpenState	typeref:typename:protoreflect.EnumDescriptor
Descriptor	transport/internet/config.pb.go	/^func (SocketConfig_TProxyMode) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:internet.SocketConfig_TProxyMode	typeref:typename:protoreflect.EnumDescriptor
Descriptor	transport/internet/config.pb.go	/^func (TransportProtocol) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:internet.TransportProtocol	typeref:typename:protoreflect.EnumDescriptor
Descriptor	transport/internet/domainsocket/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:domainsocket.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/http/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:http.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/http/config.pb.go	/^func (*Header) Descriptor() ([]byte, []int) {$/;"	f	struct:http.Header	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/http/config.pb.go	/^func (*Method) Descriptor() ([]byte, []int) {$/;"	f	struct:http.Method	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/http/config.pb.go	/^func (*RequestConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:http.RequestConfig	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/http/config.pb.go	/^func (*ResponseConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:http.ResponseConfig	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/http/config.pb.go	/^func (*Status) Descriptor() ([]byte, []int) {$/;"	f	struct:http.Status	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/http/config.pb.go	/^func (*Version) Descriptor() ([]byte, []int) {$/;"	f	struct:http.Version	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/noop/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:noop.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/noop/config.pb.go	/^func (*ConnectionConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:noop.ConnectionConfig	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/srtp/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:srtp.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/tls/config.pb.go	/^func (*PacketConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:tls.PacketConfig	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/utp/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:utp.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/wechat/config.pb.go	/^func (*VideoConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:wechat.VideoConfig	typeref:typename:([]byte, []int)
Descriptor	transport/internet/headers/wireguard/config.pb.go	/^func (*WireguardConfig) Descriptor() ([]byte, []int) {$/;"	f	struct:wireguard.WireguardConfig	typeref:typename:([]byte, []int)
Descriptor	transport/internet/http/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:http.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/kcp/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:kcp.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/kcp/config.pb.go	/^func (*ConnectionReuse) Descriptor() ([]byte, []int) {$/;"	f	struct:kcp.ConnectionReuse	typeref:typename:([]byte, []int)
Descriptor	transport/internet/kcp/config.pb.go	/^func (*DownlinkCapacity) Descriptor() ([]byte, []int) {$/;"	f	struct:kcp.DownlinkCapacity	typeref:typename:([]byte, []int)
Descriptor	transport/internet/kcp/config.pb.go	/^func (*EncryptionSeed) Descriptor() ([]byte, []int) {$/;"	f	struct:kcp.EncryptionSeed	typeref:typename:([]byte, []int)
Descriptor	transport/internet/kcp/config.pb.go	/^func (*MTU) Descriptor() ([]byte, []int) {$/;"	f	struct:kcp.MTU	typeref:typename:([]byte, []int)
Descriptor	transport/internet/kcp/config.pb.go	/^func (*ReadBuffer) Descriptor() ([]byte, []int) {$/;"	f	struct:kcp.ReadBuffer	typeref:typename:([]byte, []int)
Descriptor	transport/internet/kcp/config.pb.go	/^func (*TTI) Descriptor() ([]byte, []int) {$/;"	f	struct:kcp.TTI	typeref:typename:([]byte, []int)
Descriptor	transport/internet/kcp/config.pb.go	/^func (*UplinkCapacity) Descriptor() ([]byte, []int) {$/;"	f	struct:kcp.UplinkCapacity	typeref:typename:([]byte, []int)
Descriptor	transport/internet/kcp/config.pb.go	/^func (*WriteBuffer) Descriptor() ([]byte, []int) {$/;"	f	struct:kcp.WriteBuffer	typeref:typename:([]byte, []int)
Descriptor	transport/internet/quic/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:quic.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/tcp/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:tcp.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/tls/config.pb.go	/^func (*Certificate) Descriptor() ([]byte, []int) {$/;"	f	struct:tls.Certificate	typeref:typename:([]byte, []int)
Descriptor	transport/internet/tls/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:tls.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/tls/config.pb.go	/^func (Certificate_Usage) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:tls.Certificate_Usage	typeref:typename:protoreflect.EnumDescriptor
Descriptor	transport/internet/udp/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:udp.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/websocket/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:websocket.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/websocket/config.pb.go	/^func (*Header) Descriptor() ([]byte, []int) {$/;"	f	struct:websocket.Header	typeref:typename:([]byte, []int)
Descriptor	transport/internet/xtls/config.pb.go	/^func (*Certificate) Descriptor() ([]byte, []int) {$/;"	f	struct:xtls.Certificate	typeref:typename:([]byte, []int)
Descriptor	transport/internet/xtls/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f	struct:xtls.Config	typeref:typename:([]byte, []int)
Descriptor	transport/internet/xtls/config.pb.go	/^func (Certificate_Usage) Descriptor() protoreflect.EnumDescriptor {$/;"	f	type:xtls.Certificate_Usage	typeref:typename:protoreflect.EnumDescriptor
Dest	infra/conf/trojan.go	/^	Dest json.RawMessage `json:"dest"`$/;"	m	struct:conf.TrojanInboundFallback	typeref:typename:json.RawMessage
Dest	infra/conf/vless.go	/^	Dest json.RawMessage `json:"dest"`$/;"	m	struct:conf.VLessInboundFallback	typeref:typename:json.RawMessage
Dest	proxy/trojan/config.pb.go	/^	Dest string `protobuf:"bytes,4,opt,name=dest,proto3" json:"dest,omitempty"`$/;"	m	struct:trojan.Fallback	typeref:typename:string
Dest	proxy/vless/inbound/config.pb.go	/^	Dest string `protobuf:"bytes,4,opt,name=dest,proto3" json:"dest,omitempty"`$/;"	m	struct:inbound.Fallback	typeref:typename:string
DestOverride	infra/conf/v2ray.go	/^	DestOverride *StringList `json:"destOverride"`$/;"	m	struct:conf.SniffingConfig	typeref:typename:*StringList
Destination	common/net/destination.go	/^type Destination struct {$/;"	s	package:net
Destination	common/protocol/headers.go	/^func (h *RequestHeader) Destination() net.Destination {$/;"	f	struct:protocol.RequestHeader	typeref:typename:net.Destination
Destination	common/protocol/server_spec.go	/^func (s *ServerSpec) Destination() net.Destination {$/;"	f	struct:protocol.ServerSpec	typeref:typename:net.Destination
DestinationFromAddr	common/net/destination.go	/^func DestinationFromAddr(addr net.Addr) Destination {$/;"	f	package:net	typeref:typename:Destination
DestinationOverride	app/proxyman/config.pb.go	/^	DestinationOverride []string `protobuf:"bytes,2,rep,name=destination_override,json=destinationO/;"	m	struct:proxyman.SniffingConfig	typeref:typename:[]string
DestinationOverride	proxy/freedom/config.pb.go	/^	DestinationOverride *DestinationOverride `protobuf:"bytes,3,opt,name=destination_override,json=/;"	m	struct:freedom.Config	typeref:typename:*DestinationOverride
DestinationOverride	proxy/freedom/config.pb.go	/^type DestinationOverride struct {$/;"	s	package:freedom
DestinationOverride	proxy/freedom/config.proto	/^message DestinationOverride {$/;"	m	package:v2ray.core.proxy.freedom
Detach	transport/internet/kcp/segment.go	/^func (s *DataSegment) Detach() *buf.Buffer {$/;"	f	struct:kcp.DataSegment	typeref:typename:*buf.Buffer
Detour	common/log/access.go	/^	Detour string$/;"	m	struct:log.AccessMessage	typeref:typename:string
Detour	infra/conf/vmess.go	/^	Detour *VMessDetourConfig `json:"detour"`$/;"	m	struct:conf.FeaturesConfig	typeref:typename:*VMessDetourConfig
Detour	proxy/vmess/inbound/config.pb.go	/^	Detour               *DetourConfig    `protobuf:"bytes,3,opt,name=detour,proto3" json:"detour,o/;"	m	struct:inbound.Config	typeref:typename:*DetourConfig
DetourConfig	infra/conf/vmess.go	/^	DetourConfig *VMessDetourConfig  `json:"detour"`$/;"	m	struct:conf.VMessInboundConfig	typeref:typename:*VMessDetourConfig
DetourConfig	proxy/vmess/inbound/config.pb.go	/^type DetourConfig struct {$/;"	s	package:inbound
DetourConfig	proxy/vmess/inbound/config.proto	/^message DetourConfig {$/;"	m	package:v2ray.core.proxy.vmess.inbound
Dial	app/proxyman/outbound/handler.go	/^func (h *Handler) Dial(ctx context.Context, dest net.Destination) (internet.Connection, error) {$/;"	f	struct:outbound.Handler	typeref:typename:(internet.Connection, error)
Dial	common/net/system.go	/^var Dial = net.Dial$/;"	v	package:net
Dial	functions.go	/^func Dial(ctx context.Context, v *Instance, dest net.Destination) (net.Conn, error) {$/;"	f	package:core	typeref:typename:(net.Conn, error)
Dial	transport/internet/dialer.go	/^	Dial(ctx context.Context, destination net.Destination) (Connection, error)$/;"	n	interface:internet.Dialer	typeref:typename:(Connection, error)
Dial	transport/internet/dialer.go	/^func Dial(ctx context.Context, dest net.Destination, streamSettings *MemoryStreamConfig) (Connec/;"	f	package:internet	typeref:typename:(Connection, error)
Dial	transport/internet/domainsocket/dial.go	/^func Dial(ctx context.Context, dest net.Destination, streamSettings *internet.MemoryStreamConfig/;"	f	package:domainsocket	typeref:typename:(internet.Connection, error)
Dial	transport/internet/http/dialer.go	/^func Dial(ctx context.Context, dest net.Destination, streamSettings *internet.MemoryStreamConfig/;"	f	package:http	typeref:typename:(internet.Connection, error)
Dial	transport/internet/quic/dialer.go	/^func Dial(ctx context.Context, dest net.Destination, streamSettings *internet.MemoryStreamConfig/;"	f	package:quic	typeref:typename:(internet.Connection, error)
Dial	transport/internet/system_dialer.go	/^	Dial(ctx context.Context, source net.Address, destination net.Destination, sockopt *SocketConfi/;"	n	interface:internet.SystemDialer	typeref:typename:(net.Conn, error)
Dial	transport/internet/system_dialer.go	/^	Dial(network string, address string) (net.Conn, error)$/;"	n	interface:internet.SystemDialerAdapter	typeref:typename:(net.Conn, error)
Dial	transport/internet/system_dialer.go	/^func (d *DefaultSystemDialer) Dial(ctx context.Context, src net.Address, dest net.Destination, s/;"	f	struct:internet.DefaultSystemDialer	typeref:typename:(net.Conn, error)
Dial	transport/internet/system_dialer.go	/^func (v *SimpleSystemDialer) Dial(ctx context.Context, src net.Address, dest net.Destination, so/;"	f	struct:internet.SimpleSystemDialer	typeref:typename:(net.Conn, error)
Dial	transport/internet/tcp/dialer.go	/^func Dial(ctx context.Context, dest net.Destination, streamSettings *internet.MemoryStreamConfig/;"	f	package:tcp	typeref:typename:(internet.Connection, error)
Dial	transport/internet/websocket/dialer.go	/^func Dial(ctx context.Context, dest net.Destination, streamSettings *internet.MemoryStreamConfig/;"	f	package:websocket	typeref:typename:(internet.Connection, error)
DialDispatcher	transport/internet/udp/dispatcher.go	/^func DialDispatcher(ctx context.Context, dispatcher routing.Dispatcher) (net.PacketConn, error) /;"	f	package:udp	typeref:typename:(net.PacketConn, error)
DialKCP	transport/internet/kcp/dialer.go	/^func DialKCP(ctx context.Context, dest net.Destination, streamSettings *internet.MemoryStreamCon/;"	f	package:kcp	typeref:typename:(internet.Connection, error)
DialSystem	transport/internet/dialer.go	/^func DialSystem(ctx context.Context, dest net.Destination, sockopt *SocketConfig) (net.Conn, err/;"	f	package:internet	typeref:typename:(net.Conn, error)
DialTCP	common/net/system.go	/^var DialTCP = net.DialTCP$/;"	v	package:net
DialUDP	common/net/system.go	/^var DialUDP = net.DialUDP$/;"	v	package:net
DialUDP	functions.go	/^func DialUDP(ctx context.Context, v *Instance) (net.PacketConn, error) {$/;"	f	package:core	typeref:typename:(net.PacketConn, error)
DialUnix	common/net/system.go	/^var DialUnix = net.DialUnix$/;"	v	package:net
Dialer	common/mux/client.go	/^	Dialer   internet.Dialer$/;"	m	struct:mux.DialingWorkerFactory	typeref:typename:internet.Dialer
Dialer	common/net/system.go	/^type Dialer = net.Dialer$/;"	a	package:net	typeref:typename:net.Dialer
Dialer	transport/internet/dialer.go	/^type Dialer interface {$/;"	i	package:internet
DialingWorkerFactory	common/mux/client.go	/^type DialingWorkerFactory struct {$/;"	s	package:mux
Direction	transport/internet/sockopt_freebsd.go	/^	Direction uint8$/;"	m	struct:internet.pfiocNatlook	typeref:typename:uint8
Disable	transport/internet/config.proto	/^    Disable = 2;$/;"	e	enum:v2ray.core.transport.internet.SocketConfig.TCPFastOpenState
DisableSessionResumption	infra/conf/transport_internet.go	/^	DisableSessionResumption bool              `json:"disableSessionResumption"`$/;"	m	struct:conf.XTLSConfig	typeref:typename:bool
DisableSessionResumption	infra/conf/transport_internet.go	/^	DisableSessionResumption bool             `json:"disableSessionResumption"`$/;"	m	struct:conf.TLSConfig	typeref:typename:bool
DisableSessionResumption	transport/internet/tls/config.pb.go	/^	DisableSessionResumption bool `protobuf:"varint,6,opt,name=disable_session_resumption,json=disa/;"	m	struct:tls.Config	typeref:typename:bool
DisableSessionResumption	transport/internet/xtls/config.pb.go	/^	DisableSessionResumption bool `protobuf:"varint,6,opt,name=disable_session_resumption,json=disa/;"	m	struct:xtls.Config	typeref:typename:bool
DisableSystemRoot	infra/conf/transport_internet.go	/^	DisableSystemRoot        bool              `json:"disableSystemRoot"`$/;"	m	struct:conf.XTLSConfig	typeref:typename:bool
DisableSystemRoot	infra/conf/transport_internet.go	/^	DisableSystemRoot        bool             `json:"disableSystemRoot"`$/;"	m	struct:conf.TLSConfig	typeref:typename:bool
DisableSystemRoot	transport/internet/tls/config.pb.go	/^	DisableSystemRoot bool `protobuf:"varint,7,opt,name=disable_system_root,json=disableSystemRoot,/;"	m	struct:tls.Config	typeref:typename:bool
DisableSystemRoot	transport/internet/xtls/config.pb.go	/^	DisableSystemRoot bool `protobuf:"varint,7,opt,name=disable_system_root,json=disableSystemRoot,/;"	m	struct:xtls.Config	typeref:typename:bool
Discard	common/buf/writer.go	/^	Discard Writer = noOpWriter(0)$/;"	v	package:buf	typeref:typename:Writer
DiscardBytes	common/buf/writer.go	/^	DiscardBytes io.Writer = noOpWriter(0)$/;"	v	package:buf	typeref:typename:io.Writer
DiscardOverflow	transport/pipe/pipe.go	/^func DiscardOverflow() Option {$/;"	f	package:pipe	typeref:typename:Option
Dispatch	app/commander/outbound.go	/^func (co *Outbound) Dispatch(ctx context.Context, link *transport.Link) {$/;"	f	struct:commander.Outbound
Dispatch	app/dispatcher/default.go	/^func (d *DefaultDispatcher) Dispatch(ctx context.Context, destination net.Destination) (*transpo/;"	f	struct:dispatcher.DefaultDispatcher	typeref:typename:(*transport.Link, error)
Dispatch	app/proxyman/outbound/handler.go	/^func (h *Handler) Dispatch(ctx context.Context, link *transport.Link) {$/;"	f	struct:outbound.Handler
Dispatch	app/reverse/bridge.go	/^func (w *BridgeWorker) Dispatch(ctx context.Context, dest net.Destination) (*transport.Link, err/;"	f	struct:reverse.BridgeWorker	typeref:typename:(*transport.Link, error)
Dispatch	app/reverse/portal.go	/^func (o *Outbound) Dispatch(ctx context.Context, link *transport.Link) {$/;"	f	struct:reverse.Outbound
Dispatch	common/mux/client.go	/^func (m *ClientManager) Dispatch(ctx context.Context, link *transport.Link) error {$/;"	f	struct:mux.ClientManager	typeref:typename:error
Dispatch	common/mux/client.go	/^func (m *ClientWorker) Dispatch(ctx context.Context, link *transport.Link) bool {$/;"	f	struct:mux.ClientWorker	typeref:typename:bool
Dispatch	common/mux/server.go	/^func (s *Server) Dispatch(ctx context.Context, dest net.Destination) (*transport.Link, error) {$/;"	f	struct:mux.Server	typeref:typename:(*transport.Link, error)
Dispatch	features/outbound/outbound.go	/^	Dispatch(ctx context.Context, link *transport.Link)$/;"	n	interface:outbound.Handler
Dispatch	features/routing/dispatcher.go	/^	Dispatch(ctx context.Context, dest net.Destination) (*transport.Link, error)$/;"	n	interface:routing.Dispatcher	typeref:typename:(*transport.Link, error)
Dispatch	transport/internet/udp/dispatcher.go	/^func (v *Dispatcher) Dispatch(ctx context.Context, destination net.Destination, payload *buf.Buf/;"	f	struct:udp.Dispatcher
Dispatch	transport/internet/udp/dispatcher_test.go	/^func (d *TestDispatcher) Dispatch(ctx context.Context, dest net.Destination) (*transport.Link, e/;"	f	struct:udp_test.TestDispatcher	typeref:typename:(*transport.Link, error)
Dispatcher	features/routing/dispatcher.go	/^type Dispatcher interface {$/;"	i	package:routing
Dispatcher	transport/internet/udp/dispatcher.go	/^type Dispatcher struct {$/;"	s	package:udp
DispatcherType	features/routing/dispatcher.go	/^func DispatcherType() interface{} {$/;"	f	package:routing	typeref:typename:interface{}
DnsConfig	infra/conf/dns.go	/^type DnsConfig struct {$/;"	s	package:conf
DnsOutboundConfig	infra/conf/dns_proxy.go	/^type DnsOutboundConfig struct {$/;"	s	package:conf
DoHNameServer	app/dns/dohdns.go	/^type DoHNameServer struct {$/;"	s	package:dns
DoSeedListRequest	app/p2p/api.go	/^func (this *P2PNode) DoSeedListRequest(pid peer.ID) {$/;"	f	struct:p2p.P2PNode
Documentation	release/config/systemd/system/v2ray.service	/^Documentation=https:\/\/www.v2fly.org\/$/;"	k	section:Unit
Documentation	release/config/systemd/system/v2ray@.service	/^Documentation=https:\/\/www.v2fly.org\/$/;"	k	section:Unit
DokodemoConfig	infra/conf/dokodemo.go	/^type DokodemoConfig struct {$/;"	s	package:conf
DokodemoDoor	proxy/dokodemo/dokodemo.go	/^type DokodemoDoor struct {$/;"	s	package:dokodemo
Domain	app/dispatcher/sniffer.go	/^	Domain() string$/;"	n	interface:dispatcher.SniffResult	typeref:typename:string
Domain	app/dns/config.pb.go	/^	Domain string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`$/;"	m	struct:dns.Config_HostMapping	typeref:typename:string
Domain	app/dns/config.pb.go	/^	Domain string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`$/;"	m	struct:dns.NameServer_PriorityDomain	typeref:typename:string
Domain	app/reverse/config.pb.go	/^	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`$/;"	m	struct:reverse.BridgeConfig	typeref:typename:string
Domain	app/reverse/config.pb.go	/^	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`$/;"	m	struct:reverse.PortalConfig	typeref:typename:string
Domain	app/router/config.pb.go	/^	Domain      []*Domain `protobuf:"bytes,2,rep,name=domain,proto3" json:"domain,omitempty"`$/;"	m	struct:router.GeoSite	typeref:typename:[]*Domain
Domain	app/router/config.pb.go	/^	Domain []*Domain `protobuf:"bytes,2,rep,name=domain,proto3" json:"domain,omitempty"`$/;"	m	struct:router.RoutingRule	typeref:typename:[]*Domain
Domain	app/router/config.pb.go	/^type Domain struct {$/;"	s	package:router
Domain	app/router/config.proto	/^    Domain = 2;$/;"	e	enum:v2ray.core.app.router.Domain.Type
Domain	app/router/config.proto	/^message Domain {$/;"	m	package:v2ray.core.app.router
Domain	common/net/address.go	/^	Domain() string \/\/ Domain of this Address$/;"	n	interface:net.Address	typeref:typename:string
Domain	common/net/address.go	/^func (a domainAddress) Domain() string {$/;"	f	type:net.domainAddress	typeref:typename:string
Domain	common/net/address.go	/^func (ipv4Address) Domain() string {$/;"	f	type:net.ipv4Address	typeref:typename:string
Domain	common/net/address.go	/^func (ipv6Address) Domain() string {$/;"	f	type:net.ipv6Address	typeref:typename:string
Domain	common/net/address.pb.go	/^	Domain string `protobuf:"bytes,2,opt,name=domain,proto3,oneof"`$/;"	m	struct:net.IPOrDomain_Domain	typeref:typename:string
Domain	common/protocol/bittorrent/bittorrent.go	/^func (h *SniffHeader) Domain() string {$/;"	f	struct:bittorrent.SniffHeader	typeref:typename:string
Domain	common/protocol/http/sniff.go	/^func (h *SniffHeader) Domain() string {$/;"	f	struct:http.SniffHeader	typeref:typename:string
Domain	common/protocol/tls/sniff.go	/^func (h *SniffHeader) Domain() string {$/;"	f	struct:tls.SniffHeader	typeref:typename:string
Domain	common/strmatcher/strmatcher.go	/^	Domain$/;"	c	package:strmatcher
Domain	infra/conf/reverse.go	/^	Domain string `json:"domain"`$/;"	m	struct:conf.BridgeConfig	typeref:typename:string
Domain	infra/conf/reverse.go	/^	Domain string `json:"domain"`$/;"	m	struct:conf.PortalConfig	typeref:typename:string
DomainAddress	common/net/address.go	/^func DomainAddress(domain string) Address {$/;"	f	package:net	typeref:typename:Address
DomainMatcher	app/router/condition.go	/^type DomainMatcher struct {$/;"	s	package:router
DomainMatcherGroup	common/strmatcher/domain_matcher.go	/^type DomainMatcherGroup struct {$/;"	s	package:strmatcher
DomainMatcherInfo	app/dns/server.go	/^type DomainMatcherInfo struct {$/;"	s	package:dns
DomainMatchingType	app/dns/config.pb.go	/^type DomainMatchingType int32$/;"	t	package:dns	typeref:typename:int32
DomainMatchingType	app/dns/config.proto	/^enum DomainMatchingType {$/;"	g	package:v2ray.core.app.dns
DomainMatchingType_Full	app/dns/config.pb.go	/^	DomainMatchingType_Full      DomainMatchingType = 0$/;"	c	package:dns	typeref:type:DomainMatchingType
DomainMatchingType_Keyword	app/dns/config.pb.go	/^	DomainMatchingType_Keyword   DomainMatchingType = 2$/;"	c	package:dns	typeref:type:DomainMatchingType
DomainMatchingType_Regex	app/dns/config.pb.go	/^	DomainMatchingType_Regex     DomainMatchingType = 3$/;"	c	package:dns	typeref:type:DomainMatchingType
DomainMatchingType_Subdomain	app/dns/config.pb.go	/^	DomainMatchingType_Subdomain DomainMatchingType = 1$/;"	c	package:dns	typeref:type:DomainMatchingType
DomainMatchingType_name	app/dns/config.pb.go	/^	DomainMatchingType_name = map[int32]string{$/;"	v	package:dns
DomainMatchingType_value	app/dns/config.pb.go	/^	DomainMatchingType_value = map[string]int32{$/;"	v	package:dns
DomainOverride	app/proxyman/config.pb.go	/^	DomainOverride   []KnownProtocols `protobuf:"varint,7,rep,packed,name=domain_override,json=doma/;"	m	struct:proxyman.ReceiverConfig	typeref:typename:[]KnownProtocols
DomainOverride	infra/conf/v2ray.go	/^	DomainOverride *StringList                    `json:"domainOverride"`$/;"	m	struct:conf.InboundDetourConfig	typeref:typename:*StringList
DomainSocket	transport/internet/config.proto	/^  DomainSocket = 5;$/;"	e	enum:v2ray.core.transport.internet.TransportProtocol
DomainSocketConfig	infra/conf/transport_internet.go	/^type DomainSocketConfig struct {$/;"	s	package:conf
DomainStrategy	app/router/config.pb.go	/^	DomainStrategy Config_DomainStrategy `protobuf:"varint,1,opt,name=domain_strategy,json=domainSt/;"	m	struct:router.Config	typeref:typename:Config_DomainStrategy
DomainStrategy	app/router/config.proto	/^  enum DomainStrategy {$/;"	g	message:v2ray.core.app.router.Config
DomainStrategy	infra/conf/freedom.go	/^	DomainStrategy string  `json:"domainStrategy"`$/;"	m	struct:conf.FreedomConfig	typeref:typename:string
DomainStrategy	infra/conf/router.go	/^	DomainStrategy *string            `json:"domainStrategy"`$/;"	m	struct:conf.RouterConfig	typeref:typename:*string
DomainStrategy	infra/conf/router.go	/^	DomainStrategy string            `json:"domainStrategy"`$/;"	m	struct:conf.RouterRulesConfig	typeref:typename:string
DomainStrategy	proxy/freedom/config.pb.go	/^	DomainStrategy Config_DomainStrategy `protobuf:"varint,1,opt,name=domain_strategy,json=domainSt/;"	m	struct:freedom.Config	typeref:typename:Config_DomainStrategy
DomainStrategy	proxy/freedom/config.proto	/^  enum DomainStrategy {$/;"	g	message:v2ray.core.proxy.freedom.Config
Domain_Attribute	app/router/config.pb.go	/^type Domain_Attribute struct {$/;"	s	package:router
Domain_Attribute_BoolValue	app/router/config.pb.go	/^type Domain_Attribute_BoolValue struct {$/;"	s	package:router
Domain_Attribute_IntValue	app/router/config.pb.go	/^type Domain_Attribute_IntValue struct {$/;"	s	package:router
Domain_Domain	app/router/config.pb.go	/^	Domain_Domain Domain_Type = 2$/;"	c	package:router	typeref:type:Domain_Type
Domain_Full	app/router/config.pb.go	/^	Domain_Full Domain_Type = 3$/;"	c	package:router	typeref:type:Domain_Type
Domain_Plain	app/router/config.pb.go	/^	Domain_Plain Domain_Type = 0$/;"	c	package:router	typeref:type:Domain_Type
Domain_Regex	app/router/config.pb.go	/^	Domain_Regex Domain_Type = 1$/;"	c	package:router	typeref:type:Domain_Type
Domain_Type	app/router/config.pb.go	/^type Domain_Type int32$/;"	t	package:router	typeref:typename:int32
Domain_Type_name	app/router/config.pb.go	/^	Domain_Type_name = map[int32]string{$/;"	v	package:router
Domain_Type_value	app/router/config.pb.go	/^	Domain_Type_value = map[string]int32{$/;"	v	package:router
Domains	infra/conf/dns.go	/^	Domains   []string$/;"	m	struct:conf.NameServerConfig	typeref:typename:[]string
Done	common/signal/done/done.go	/^func (d *Instance) Done() bool {$/;"	f	struct:done.Instance	typeref:typename:bool
DownCap	infra/conf/transport_internet.go	/^	DownCap         *uint32         `json:"downlinkCapacity"`$/;"	m	struct:conf.KCPConfig	typeref:typename:*uint32
DownlinkCapacity	transport/internet/kcp/config.pb.go	/^	DownlinkCapacity *DownlinkCapacity    `protobuf:"bytes,4,opt,name=downlink_capacity,json=downli/;"	m	struct:kcp.Config	typeref:typename:*DownlinkCapacity
DownlinkCapacity	transport/internet/kcp/config.pb.go	/^type DownlinkCapacity struct {$/;"	s	package:kcp
DownlinkCapacity	transport/internet/kcp/config.proto	/^message DownlinkCapacity {$/;"	m	package:v2ray.core.transport.internet.kcp
DownlinkOnly	app/policy/config.pb.go	/^	DownlinkOnly   *Second `protobuf:"bytes,4,opt,name=downlink_only,json=downlinkOnly,proto3" json/;"	m	struct:policy.Policy_Timeout	typeref:typename:*Second
DownlinkOnly	features/policy/policy.go	/^	DownlinkOnly time.Duration$/;"	m	struct:policy.Timeout	typeref:typename:time.Duration
DownlinkOnly	infra/conf/policy.go	/^	DownlinkOnly      *uint32 `json:"downlinkOnly"`$/;"	m	struct:conf.Policy	typeref:typename:*uint32
Dp	common/protocol/tls/cert/privateKey.go	/^	Dp   *big.Int `asn1:"optional"`$/;"	m	struct:cert.pkcs1PrivateKey	typeref:typename:*big.Int
Dport	transport/internet/sockopt_freebsd.go	/^	Dport     uint16$/;"	m	struct:internet.pfiocNatlook	typeref:typename:uint16
Dq	common/protocol/tls/cert/privateKey.go	/^	Dq   *big.Int `asn1:"optional"`$/;"	m	struct:cert.pkcs1PrivateKey	typeref:typename:*big.Int
DrainConnN	proxy/shadowsocks/protocol.go	/^func DrainConnN(reader io.Reader, n int) error {$/;"	f	package:shadowsocks	typeref:typename:error
DrainConnN	proxy/vmess/encoding/server.go	/^func (s *ServerSession) DrainConnN(reader io.Reader, n int) error {$/;"	f	struct:encoding.ServerSession	typeref:typename:error
Duration	app/policy/config.go	/^func (s *Second) Duration() time.Duration {$/;"	f	unknown:policy.Second	typeref:typename:time.Duration
DynamicInboundHandler	app/proxyman/inbound/dynamic.go	/^type DynamicInboundHandler struct {$/;"	s	package:inbound
E	common/protocol/tls/cert/privateKey.go	/^	E       int$/;"	m	struct:cert.pkcs1PrivateKey	typeref:typename:int
ENCIPHERMENT	transport/internet/tls/config.proto	/^    ENCIPHERMENT = 0;$/;"	e	enum:v2ray.core.transport.internet.tls.Certificate.Usage
ENCIPHERMENT	transport/internet/xtls/config.proto	/^    ENCIPHERMENT = 0;$/;"	e	enum:v2ray.core.transport.internet.xtls.Certificate.Usage
ENDING	transport/internet/headers/http/http.go	/^	ENDING = CRLF + CRLF$/;"	c	package:http
EXPECT	testing/mocks/dns.go	/^func (m *DNSClient) EXPECT() *DNSClientMockRecorder {$/;"	f	struct:mocks.DNSClient	typeref:typename:*DNSClientMockRecorder
EXPECT	testing/mocks/io.go	/^func (m *Reader) EXPECT() *ReaderMockRecorder {$/;"	f	struct:mocks.Reader	typeref:typename:*ReaderMockRecorder
EXPECT	testing/mocks/io.go	/^func (m *Writer) EXPECT() *WriterMockRecorder {$/;"	f	struct:mocks.Writer	typeref:typename:*WriterMockRecorder
EXPECT	testing/mocks/log.go	/^func (m *LogHandler) EXPECT() *LogHandlerMockRecorder {$/;"	f	struct:mocks.LogHandler	typeref:typename:*LogHandlerMockRecorder
EXPECT	testing/mocks/mux.go	/^func (m *MuxClientWorkerFactory) EXPECT() *MuxClientWorkerFactoryMockRecorder {$/;"	f	struct:mocks.MuxClientWorkerFactory	typeref:typename:*MuxClientWorkerFactoryMockRecorder
EXPECT	testing/mocks/outbound.go	/^func (m *OutboundHandlerSelector) EXPECT() *OutboundHandlerSelectorMockRecorder {$/;"	f	struct:mocks.OutboundHandlerSelector	typeref:typename:*OutboundHandlerSelectorMockRecorder
EXPECT	testing/mocks/outbound.go	/^func (m *OutboundManager) EXPECT() *OutboundManagerMockRecorder {$/;"	f	struct:mocks.OutboundManager	typeref:typename:*OutboundManagerMockRecorder
EXPECT	testing/mocks/proxy.go	/^func (m *ProxyInbound) EXPECT() *ProxyInboundMockRecorder {$/;"	f	struct:mocks.ProxyInbound	typeref:typename:*ProxyInboundMockRecorder
EXPECT	testing/mocks/proxy.go	/^func (m *ProxyOutbound) EXPECT() *ProxyOutboundMockRecorder {$/;"	f	struct:mocks.ProxyOutbound	typeref:typename:*ProxyOutboundMockRecorder
EffectiveConfigFileLoader	main/confloader/confloader.go	/^	EffectiveConfigFileLoader configFileLoader$/;"	v	package:confloader	typeref:type:configFileLoader
EffectiveExtConfigLoader	main/confloader/confloader.go	/^	EffectiveExtConfigLoader  extconfigLoader$/;"	v	package:confloader	typeref:type:extconfigLoader
EightBytes	common/stack/bytes.go	/^type EightBytes [8]byte$/;"	t	package:stack	typeref:typename:[8]byte
Elapsed	transport/internet/kcp/connection.go	/^func (c *Connection) Elapsed() uint32 {$/;"	f	struct:kcp.Connection	typeref:typename:uint32
Email	app/proxyman/command/command.pb.go	/^	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`$/;"	m	struct:command.RemoveUserOperation	typeref:typename:string
Email	common/log/access.go	/^	Email  string$/;"	m	struct:log.AccessMessage	typeref:typename:string
Email	common/protocol/user.go	/^	Email   string$/;"	m	struct:protocol.MemoryUser	typeref:typename:string
Email	common/protocol/user.pb.go	/^	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`$/;"	m	struct:protocol.User	typeref:typename:string
Email	infra/conf/shadowsocks.go	/^	Email       string       `json:"email"`$/;"	m	struct:conf.ShadowsocksServerConfig	typeref:typename:string
Email	infra/conf/shadowsocks.go	/^	Email    string   `json:"email"`$/;"	m	struct:conf.ShadowsocksServerTarget	typeref:typename:string
Email	infra/conf/trojan.go	/^	Email    string   `json:"email"`$/;"	m	struct:conf.TrojanServerTarget	typeref:typename:string
Email	infra/conf/trojan.go	/^	Email    string `json:"email"`$/;"	m	struct:conf.TrojanUserConfig	typeref:typename:string
EmailString	infra/conf/common.go	/^	EmailString string `json:"email"`$/;"	m	struct:conf.User	typeref:typename:string
Enable	bin/config/config-server.json	/^    "Compression":{"Enable":false,"CompressAlgo":1,"FileSize":4194304},$/;"	b	object:porter.Compression
Enable	transport/internet/config.proto	/^    Enable = 1;$/;"	e	enum:v2ray.core.transport.internet.SocketConfig.TCPFastOpenState
Enable	transport/internet/kcp/config.pb.go	/^	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`$/;"	m	struct:kcp.ConnectionReuse	typeref:typename:bool
Enabled	app/proxyman/config.pb.go	/^	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`$/;"	m	struct:proxyman.MultiplexingConfig	typeref:typename:bool
Enabled	app/proxyman/config.pb.go	/^	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`$/;"	m	struct:proxyman.SniffingConfig	typeref:typename:bool
Enabled	common/mux/client.go	/^	Enabled bool \/\/ wheather mux is enabled from user config$/;"	m	struct:mux.ClientManager	typeref:typename:bool
Enabled	common/session/session.go	/^	Enabled                        bool$/;"	m	struct:session.SniffingRequest	typeref:typename:bool
Enabled	infra/conf/v2ray.go	/^	Enabled      bool        `json:"enabled"`$/;"	m	struct:conf.SniffingConfig	typeref:typename:bool
Enabled	infra/conf/v2ray.go	/^	Enabled     bool  `json:"enabled"`$/;"	m	struct:conf.MuxConfig	typeref:typename:bool
Encode	common/crypto/chunk.go	/^	Encode(uint16, []byte) []byte$/;"	n	interface:crypto.ChunkSizeEncoder	typeref:typename:[]byte
Encode	common/crypto/chunk.go	/^func (PlainChunkSizeParser) Encode(size uint16, b []byte) []byte {$/;"	f	struct:crypto.PlainChunkSizeParser	typeref:typename:[]byte
Encode	common/crypto/chunk.go	/^func (p *AEADChunkSizeParser) Encode(size uint16, b []byte) []byte {$/;"	f	struct:crypto.AEADChunkSizeParser	typeref:typename:[]byte
Encode	proxy/vmess/encoding/auth.go	/^func (s *ShakeSizeParser) Encode(size uint16, b []byte) []byte {$/;"	f	struct:encoding.ShakeSizeParser	typeref:typename:[]byte
EncodeBodyAddons	proxy/vless/encoding/addons.go	/^func EncodeBodyAddons(writer io.Writer, request *protocol.RequestHeader, addons *Addons) buf.Wri/;"	f	package:encoding	typeref:typename:buf.Writer
EncodeHeaderAddons	proxy/vless/encoding/addons.go	/^func EncodeHeaderAddons(buffer *buf.Buffer, addons *Addons) error {$/;"	f	package:encoding	typeref:typename:error
EncodePacket	proxy/shadowsocks/config.go	/^	EncodePacket(key []byte, b *buf.Buffer) error$/;"	n	interface:shadowsocks.Cipher	typeref:typename:error
EncodePacket	proxy/shadowsocks/config.go	/^func (NoneCipher) EncodePacket(key []byte, b *buf.Buffer) error {$/;"	f	struct:shadowsocks.NoneCipher	typeref:typename:error
EncodePacket	proxy/shadowsocks/config.go	/^func (c *AEADCipher) EncodePacket(key []byte, b *buf.Buffer) error {$/;"	f	struct:shadowsocks.AEADCipher	typeref:typename:error
EncodePacket	proxy/shadowsocks/config.go	/^func (v *AesCfb) EncodePacket(key []byte, b *buf.Buffer) error {$/;"	f	struct:shadowsocks.AesCfb	typeref:typename:error
EncodePacket	proxy/shadowsocks/config.go	/^func (v *ChaCha20) EncodePacket(key []byte, b *buf.Buffer) error {$/;"	f	struct:shadowsocks.ChaCha20	typeref:typename:error
EncodeRequestBody	proxy/vmess/encoding/client.go	/^func (c *ClientSession) EncodeRequestBody(request *protocol.RequestHeader, writer io.Writer) buf/;"	f	struct:encoding.ClientSession	typeref:typename:buf.Writer
EncodeRequestHeader	proxy/vless/encoding/encoding.go	/^func EncodeRequestHeader(writer io.Writer, request *protocol.RequestHeader, requestAddons *Addon/;"	f	package:encoding	typeref:typename:error
EncodeRequestHeader	proxy/vmess/encoding/client.go	/^func (c *ClientSession) EncodeRequestHeader(header *protocol.RequestHeader, writer io.Writer) er/;"	f	struct:encoding.ClientSession	typeref:typename:error
EncodeResponseBody	proxy/vmess/encoding/server.go	/^func (s *ServerSession) EncodeResponseBody(request *protocol.RequestHeader, writer io.Writer) bu/;"	f	struct:encoding.ServerSession	typeref:typename:buf.Writer
EncodeResponseHeader	proxy/vless/encoding/encoding.go	/^func EncodeResponseHeader(writer io.Writer, request *protocol.RequestHeader, responseAddons *Add/;"	f	package:encoding	typeref:typename:error
EncodeResponseHeader	proxy/vmess/encoding/server.go	/^func (s *ServerSession) EncodeResponseHeader(header *protocol.ResponseHeader, writer io.Writer) /;"	f	struct:encoding.ServerSession
EncodeUDPPacket	proxy/shadowsocks/protocol.go	/^func EncodeUDPPacket(request *protocol.RequestHeader, payload []byte) (*buf.Buffer, error) {$/;"	f	package:shadowsocks	typeref:typename:(*buf.Buffer, error)
EncodeUDPPacket	proxy/socks/protocol.go	/^func EncodeUDPPacket(request *protocol.RequestHeader, data []byte) (*buf.Buffer, error) {$/;"	f	package:socks	typeref:typename:(*buf.Buffer, error)
EncodingKey	proxy/mtproto/auth.go	/^	EncodingKey   [32]byte$/;"	m	struct:mtproto.Authentication	typeref:typename:[32]byte
EncodingNonce	proxy/mtproto/auth.go	/^	EncodingNonce [16]byte$/;"	m	struct:mtproto.Authentication	typeref:typename:[16]byte
Encryption	proxy/vless/account.go	/^	Encryption string$/;"	m	struct:vless.MemoryAccount	typeref:typename:string
Encryption	proxy/vless/account.pb.go	/^	Encryption string `protobuf:"bytes,3,opt,name=encryption,proto3" json:"encryption,omitempty"`$/;"	m	struct:vless.Account	typeref:typename:string
EncryptionSeed	transport/internet/kcp/config.pb.go	/^type EncryptionSeed struct {$/;"	s	package:kcp
EncryptionSeed	transport/internet/kcp/config.proto	/^message EncryptionSeed {$/;"	m	package:v2ray.core.transport.internet.kcp
Endpoint	common/net/destination.pb.go	/^type Endpoint struct {$/;"	s	package:net
Endpoint	common/net/destination.proto	/^message Endpoint {$/;"	m	package:v2ray.core.common.net
Enforcement	.github/CODE_OF_CONDUCT.md	/^## Enforcement$/;"	s	chapter:Contributor Covenant Code of Conduct
Entry	app/router/config.pb.go	/^	Entry []*GeoIP `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`$/;"	m	struct:router.GeoIPList	typeref:typename:[]*GeoIP
Entry	app/router/config.pb.go	/^	Entry []*GeoSite `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`$/;"	m	struct:router.GeoSiteList	typeref:typename:[]*GeoSite
Enum	app/dns/config.pb.go	/^func (x DomainMatchingType) Enum() *DomainMatchingType {$/;"	f	type:dns.DomainMatchingType	typeref:typename:*DomainMatchingType
Enum	app/log/config.pb.go	/^func (x LogType) Enum() *LogType {$/;"	f	type:log.LogType	typeref:typename:*LogType
Enum	app/proxyman/config.pb.go	/^func (x AllocationStrategy_Type) Enum() *AllocationStrategy_Type {$/;"	f	type:proxyman.AllocationStrategy_Type	typeref:typename:*AllocationStrategy_Type
Enum	app/proxyman/config.pb.go	/^func (x KnownProtocols) Enum() *KnownProtocols {$/;"	f	type:proxyman.KnownProtocols	typeref:typename:*KnownProtocols
Enum	app/reverse/config.pb.go	/^func (x Control_State) Enum() *Control_State {$/;"	f	type:reverse.Control_State	typeref:typename:*Control_State
Enum	app/router/config.pb.go	/^func (x Config_DomainStrategy) Enum() *Config_DomainStrategy {$/;"	f	type:router.Config_DomainStrategy	typeref:typename:*Config_DomainStrategy
Enum	app/router/config.pb.go	/^func (x Domain_Type) Enum() *Domain_Type {$/;"	f	type:router.Domain_Type	typeref:typename:*Domain_Type
Enum	common/log/log.pb.go	/^func (x Severity) Enum() *Severity {$/;"	f	type:log.Severity	typeref:typename:*Severity
Enum	common/net/network.pb.go	/^func (x Network) Enum() *Network {$/;"	f	type:net.Network	typeref:typename:*Network
Enum	common/protocol/headers.pb.go	/^func (x SecurityType) Enum() *SecurityType {$/;"	f	type:protocol.SecurityType	typeref:typename:*SecurityType
Enum	proxy/freedom/config.pb.go	/^func (x Config_DomainStrategy) Enum() *Config_DomainStrategy {$/;"	f	type:freedom.Config_DomainStrategy	typeref:typename:*Config_DomainStrategy
Enum	proxy/shadowsocks/config.pb.go	/^func (x CipherType) Enum() *CipherType {$/;"	f	type:shadowsocks.CipherType	typeref:typename:*CipherType
Enum	proxy/socks/config.pb.go	/^func (x AuthType) Enum() *AuthType {$/;"	f	type:socks.AuthType	typeref:typename:*AuthType
Enum	transport/internet/config.pb.go	/^func (x SocketConfig_TCPFastOpenState) Enum() *SocketConfig_TCPFastOpenState {$/;"	f	type:internet.SocketConfig_TCPFastOpenState	typeref:typename:*SocketConfig_TCPFastOpenState
Enum	transport/internet/config.pb.go	/^func (x SocketConfig_TProxyMode) Enum() *SocketConfig_TProxyMode {$/;"	f	type:internet.SocketConfig_TProxyMode	typeref:typename:*SocketConfig_TProxyMode
Enum	transport/internet/config.pb.go	/^func (x TransportProtocol) Enum() *TransportProtocol {$/;"	f	type:internet.TransportProtocol	typeref:typename:*TransportProtocol
Enum	transport/internet/tls/config.pb.go	/^func (x Certificate_Usage) Enum() *Certificate_Usage {$/;"	f	type:tls.Certificate_Usage	typeref:typename:*Certificate_Usage
Enum	transport/internet/xtls/config.pb.go	/^func (x Certificate_Usage) Enum() *Certificate_Usage {$/;"	f	type:xtls.Certificate_Usage	typeref:typename:*Certificate_Usage
EnumDescriptor	app/dns/config.pb.go	/^func (DomainMatchingType) EnumDescriptor() ([]byte, []int) {$/;"	f	type:dns.DomainMatchingType	typeref:typename:([]byte, []int)
EnumDescriptor	app/log/config.pb.go	/^func (LogType) EnumDescriptor() ([]byte, []int) {$/;"	f	type:log.LogType	typeref:typename:([]byte, []int)
EnumDescriptor	app/p2p/wire/seedlist.pb.go	/^func (ActionType) EnumDescriptor() ([]byte, []int) {$/;"	f	type:wire.ActionType	typeref:typename:([]byte, []int)
EnumDescriptor	app/proxyman/config.pb.go	/^func (AllocationStrategy_Type) EnumDescriptor() ([]byte, []int) {$/;"	f	type:proxyman.AllocationStrategy_Type	typeref:typename:([]byte, []int)
EnumDescriptor	app/proxyman/config.pb.go	/^func (KnownProtocols) EnumDescriptor() ([]byte, []int) {$/;"	f	type:proxyman.KnownProtocols	typeref:typename:([]byte, []int)
EnumDescriptor	app/reverse/config.pb.go	/^func (Control_State) EnumDescriptor() ([]byte, []int) {$/;"	f	type:reverse.Control_State	typeref:typename:([]byte, []int)
EnumDescriptor	app/router/config.pb.go	/^func (Config_DomainStrategy) EnumDescriptor() ([]byte, []int) {$/;"	f	type:router.Config_DomainStrategy	typeref:typename:([]byte, []int)
EnumDescriptor	app/router/config.pb.go	/^func (Domain_Type) EnumDescriptor() ([]byte, []int) {$/;"	f	type:router.Domain_Type	typeref:typename:([]byte, []int)
EnumDescriptor	common/log/log.pb.go	/^func (Severity) EnumDescriptor() ([]byte, []int) {$/;"	f	type:log.Severity	typeref:typename:([]byte, []int)
EnumDescriptor	common/net/network.pb.go	/^func (Network) EnumDescriptor() ([]byte, []int) {$/;"	f	type:net.Network	typeref:typename:([]byte, []int)
EnumDescriptor	common/protocol/headers.pb.go	/^func (SecurityType) EnumDescriptor() ([]byte, []int) {$/;"	f	type:protocol.SecurityType	typeref:typename:([]byte, []int)
EnumDescriptor	proxy/freedom/config.pb.go	/^func (Config_DomainStrategy) EnumDescriptor() ([]byte, []int) {$/;"	f	type:freedom.Config_DomainStrategy	typeref:typename:([]byte, []int)
EnumDescriptor	proxy/shadowsocks/config.pb.go	/^func (CipherType) EnumDescriptor() ([]byte, []int) {$/;"	f	type:shadowsocks.CipherType	typeref:typename:([]byte, []int)
EnumDescriptor	proxy/socks/config.pb.go	/^func (AuthType) EnumDescriptor() ([]byte, []int) {$/;"	f	type:socks.AuthType	typeref:typename:([]byte, []int)
EnumDescriptor	transport/internet/config.pb.go	/^func (SocketConfig_TCPFastOpenState) EnumDescriptor() ([]byte, []int) {$/;"	f	type:internet.SocketConfig_TCPFastOpenState	typeref:typename:([]byte, []int)
EnumDescriptor	transport/internet/config.pb.go	/^func (SocketConfig_TProxyMode) EnumDescriptor() ([]byte, []int) {$/;"	f	type:internet.SocketConfig_TProxyMode	typeref:typename:([]byte, []int)
EnumDescriptor	transport/internet/config.pb.go	/^func (TransportProtocol) EnumDescriptor() ([]byte, []int) {$/;"	f	type:internet.TransportProtocol	typeref:typename:([]byte, []int)
EnumDescriptor	transport/internet/tls/config.pb.go	/^func (Certificate_Usage) EnumDescriptor() ([]byte, []int) {$/;"	f	type:tls.Certificate_Usage	typeref:typename:([]byte, []int)
EnumDescriptor	transport/internet/xtls/config.pb.go	/^func (Certificate_Usage) EnumDescriptor() ([]byte, []int) {$/;"	f	type:xtls.Certificate_Usage	typeref:typename:([]byte, []int)
EnvFlag	common/platform/platform.go	/^type EnvFlag struct {$/;"	s	package:platform
Equal	app/p2p/wire/seedlist.pb.go	/^func (this *HelloSeedList) Equal(that interface{}) bool {$/;"	f	struct:wire.HelloSeedList	typeref:typename:bool
Equal	app/p2p/wire/seedlist.pb.go	/^func (this *MessageData) Equal(that interface{}) bool {$/;"	f	struct:wire.MessageData	typeref:typename:bool
Equal	app/p2p/wire/seedlist.pb.go	/^func (this *SeedInfo) Equal(that interface{}) bool {$/;"	f	struct:wire.SeedInfo	typeref:typename:bool
Equal	app/p2p/wire/seedlist.pb.go	/^func (this *SeedListRequest) Equal(that interface{}) bool {$/;"	f	struct:wire.SeedListRequest	typeref:typename:bool
Equal	app/p2p/wire/seedlist.pb.go	/^func (this *SeedListResponse) Equal(that interface{}) bool {$/;"	f	struct:wire.SeedListResponse	typeref:typename:bool
Equals	common/protocol/account.go	/^	Equals(Account) bool$/;"	n	interface:protocol.Account	typeref:typename:bool
Equals	common/protocol/id.go	/^func (id *ID) Equals(another *ID) bool {$/;"	f	struct:protocol.ID	typeref:typename:bool
Equals	common/uuid/uuid.go	/^func (u *UUID) Equals(another *UUID) bool {$/;"	f	type:uuid.UUID	typeref:typename:bool
Equals	proxy/http/config.go	/^func (a *Account) Equals(another protocol.Account) bool {$/;"	f	unknown:http.Account	typeref:typename:bool
Equals	proxy/mtproto/config.go	/^func (a *Account) Equals(another protocol.Account) bool {$/;"	f	unknown:mtproto.Account	typeref:typename:bool
Equals	proxy/shadowsocks/config.go	/^func (a *MemoryAccount) Equals(another protocol.Account) bool {$/;"	f	struct:shadowsocks.MemoryAccount	typeref:typename:bool
Equals	proxy/socks/config.go	/^func (a *Account) Equals(another protocol.Account) bool {$/;"	f	unknown:socks.Account	typeref:typename:bool
Equals	proxy/trojan/config.go	/^func (a *MemoryAccount) Equals(another protocol.Account) bool {$/;"	f	struct:trojan.MemoryAccount	typeref:typename:bool
Equals	proxy/vless/account.go	/^func (a *MemoryAccount) Equals(account protocol.Account) bool {$/;"	f	struct:vless.MemoryAccount	typeref:typename:bool
Equals	proxy/vmess/account.go	/^func (a *MemoryAccount) Equals(account protocol.Account) bool {$/;"	f	struct:vmess.MemoryAccount	typeref:typename:bool
ErrClosedConnection	transport/internet/kcp/connection.go	/^	ErrClosedConnection = newError("Connection closed.")$/;"	v	package:kcp
ErrClosedListener	transport/internet/kcp/connection.go	/^	ErrClosedListener   = newError("Listener closed.")$/;"	v	package:kcp
ErrCommandTooLarge	proxy/vmess/encoding/commands.go	/^	ErrCommandTooLarge     = newError("Command too large.")$/;"	v	package:encoding
ErrCommandTypeMismatch	proxy/vmess/encoding/commands.go	/^	ErrCommandTypeMismatch = newError("Command type mismatch.")$/;"	v	package:encoding
ErrEmptyResponse	features/dns/client.go	/^var ErrEmptyResponse = errors.New("empty response")$/;"	v	package:dns
ErrHeaderMisMatch	transport/internet/headers/http/http.go	/^	ErrHeaderMisMatch = newError("Header Mismatch.")$/;"	v	package:http
ErrHeaderToLong	transport/internet/headers/http/http.go	/^	ErrHeaderToLong = newError("Header too long.")$/;"	v	package:http
ErrIOTimeout	transport/internet/kcp/connection.go	/^	ErrIOTimeout        = newError("Read\/Write timeout")$/;"	v	package:kcp
ErrIntOverflowAddons	proxy/vless/encoding/addons.pb.go	/^	ErrIntOverflowAddons          = fmt.Errorf("proto: integer overflow")$/;"	v	package:encoding
ErrIntOverflowSeedlist	app/p2p/wire/seedlist.pb.go	/^	ErrIntOverflowSeedlist   = fmt.Errorf("proto: integer overflow")$/;"	v	package:wire
ErrInvalidLengthAddons	proxy/vless/encoding/addons.pb.go	/^	ErrInvalidLengthAddons        = fmt.Errorf("proto: negative length found during unmarshaling")$/;"	v	package:encoding
ErrInvalidLengthSeedlist	app/p2p/wire/seedlist.pb.go	/^	ErrInvalidLengthSeedlist = fmt.Errorf("proto: negative length found during unmarshaling")$/;"	v	package:wire
ErrNoClue	common/common.go	/^	ErrNoClue = errors.New("not enough information for making a decision")$/;"	v	package:common
ErrNotFound	proxy/vmess/aead/authid.go	/^var ErrNotFound = errors.New("user do not exist")$/;"	v	package:aead
ErrNotFound	proxy/vmess/validator.go	/^var ErrNotFound = newError("Not Found")$/;"	v	package:vmess
ErrNotTimeoutReader	common/buf/copy.go	/^var ErrNotTimeoutReader = newError("not a TimeoutReader")$/;"	v	package:buf
ErrReadTimeout	common/buf/io.go	/^var ErrReadTimeout = newError("IO timeout")$/;"	v	package:buf
ErrReplay	proxy/vmess/aead/authid.go	/^var ErrReplay = errors.New("replayed request")$/;"	v	package:aead
ErrRetryFailed	common/retry/retry.go	/^	ErrRetryFailed = newError("all retry attempts failed")$/;"	v	package:retry
ErrTainted	proxy/vmess/validator.go	/^var ErrTainted = newError("ErrTainted")$/;"	v	package:vmess
ErrUnexpectedEndOfGroupAddons	proxy/vless/encoding/addons.pb.go	/^	ErrUnexpectedEndOfGroupAddons = fmt.Errorf("proto: unexpected end of group")$/;"	v	package:encoding
ErrUnknownCommand	proxy/vmess/encoding/commands.go	/^	ErrUnknownCommand      = newError("Unknown command.")$/;"	v	package:encoding
Error	common/buf/copy.go	/^func (e readError) Error() string {$/;"	f	struct:buf.readError	typeref:typename:string
Error	common/buf/copy.go	/^func (e writeError) Error() string {$/;"	f	struct:buf.writeError	typeref:typename:string
Error	common/errors/errors.go	/^func (err *Error) Error() string {$/;"	f	struct:errors.Error	typeref:typename:string
Error	common/errors/errors.go	/^type Error struct {$/;"	s	package:errors
Error	common/errors/multi_error.go	/^func (e multiError) Error() string {$/;"	f	type:errors.multiError	typeref:typename:string
Error	common/log/log.proto	/^  Error = 1;$/;"	e	enum:v2ray.core.common.log.Severity
Error	common/net/system.go	/^type Error = net.Error$/;"	a	package:net	typeref:typename:net.Error
Error	features/dns/client.go	/^func (e RCodeError) Error() string {$/;"	f	type:dns.RCodeError	typeref:typename:string
Error2	common/common.go	/^func Error2(v interface{}, err error) error {$/;"	f	package:common	typeref:typename:error
ErrorLog	infra/conf/log.go	/^	ErrorLog  string `json:"error"`$/;"	m	struct:conf.LogConfig	typeref:typename:string
ErrorLogLevel	app/log/config.pb.go	/^	ErrorLogLevel log.Severity `protobuf:"varint,2,opt,name=error_log_level,json=errorLogLevel,prot/;"	m	struct:log.Config	typeref:typename:log.Severity
ErrorLogPath	app/log/config.pb.go	/^	ErrorLogPath  string       `protobuf:"bytes,3,opt,name=error_log_path,json=errorLogPath,proto3"/;"	m	struct:log.Config	typeref:typename:string
ErrorLogType	app/log/config.pb.go	/^	ErrorLogType  LogType      `protobuf:"varint,1,opt,name=error_log_type,json=errorLogType,proto3/;"	m	struct:log.Config	typeref:typename:LogType
Event	app/log/config.proto	/^  Event = 3;$/;"	e	enum:v2ray.core.app.log.LogType
Exec	store/sqlite.go	/^func (this *SQLiteStorage) Exec(query string, args ...interface{}) (bool, error) {$/;"	f	struct:store.SQLiteStorage	typeref:typename:(bool, error)
ExecStart	release/config/systemd/system/v2ray.service	/^ExecStart=\/usr\/local\/bin\/v2ray -config \/usr\/local\/etc\/v2ray\/config.json$/;"	k	section:Service
ExecStart	release/config/systemd/system/v2ray@.service	/^ExecStart=\/usr\/local\/bin\/v2ray -config \/usr\/local\/etc\/v2ray\/%i.json$/;"	k	section:Service
Execute	common/task/periodic.go	/^	Execute func() error$/;"	m	struct:task.Periodic	typeref:typename:func() error
Execute	infra/conf/command/command.go	/^func (c *ConfigCommand) Execute(args []string) error {$/;"	f	struct:command.ConfigCommand	typeref:typename:error
Execute	infra/control/api.go	/^func (c *ApiCommand) Execute(args []string) error {$/;"	f	struct:control.ApiCommand	typeref:typename:error
Execute	infra/control/cert.go	/^func (c *CertificateCommand) Execute(args []string) error {$/;"	f	struct:control.CertificateCommand	typeref:typename:error
Execute	infra/control/command.go	/^	Execute(args []string) error$/;"	n	interface:control.Command	typeref:typename:error
Execute	infra/control/config.go	/^func (c *ConfigCommand) Execute(args []string) error {$/;"	f	struct:control.ConfigCommand	typeref:typename:error
Execute	infra/control/fetch.go	/^func (c *FetchCommand) Execute(args []string) error {$/;"	f	struct:control.FetchCommand	typeref:typename:error
Execute	infra/control/love.go	/^func (*LoveCommand) Execute([]string) error {$/;"	f	struct:control.LoveCommand	typeref:typename:error
Execute	infra/control/tlsping.go	/^func (c *TlsPingCommand) Execute(args []string) error {$/;"	f	struct:control.TlsPingCommand	typeref:typename:error
Execute	infra/control/uuid.go	/^func (c *UUIDCommand) Execute([]string) error {$/;"	f	struct:control.UUIDCommand	typeref:typename:error
Execute	infra/control/verify.go	/^func (c *VerifyCommand) Execute(args []string) error {$/;"	f	struct:control.VerifyCommand	typeref:typename:error
Exp	common/protocol/tls/cert/privateKey.go	/^	Exp   *big.Int$/;"	m	struct:cert.pkcs1AdditionalRSAPrime	typeref:typename:*big.Int
ExpandEnv	common/platform/others.go	/^func ExpandEnv(s string) string {$/;"	f	package:platform	typeref:typename:string
ExpandEnv	common/platform/windows.go	/^func ExpandEnv(s string) string {$/;"	f	package:platform	typeref:typename:string
ExpectIPs	infra/conf/dns.go	/^	ExpectIPs StringList$/;"	m	struct:conf.NameServerConfig	typeref:typename:StringList
ExpectThisRequest	transport/internet/headers/http/http.go	/^func (h *HeaderReader) ExpectThisRequest(expectedHeader *RequestConfig) *HeaderReader {$/;"	f	struct:http.HeaderReader	typeref:typename:*HeaderReader
Expire	app/dns/dnscommon.go	/^	Expire time.Time$/;"	m	struct:dns.IPRecord	typeref:typename:time.Time
Expire	config.pb.go	/^	Expire int64 `protobuf:"varint,4,opt,name=expire,proto3" json:"expire,omitempty"`$/;"	m	struct:core.OutboundHandlerConfig	typeref:typename:int64
ExponentialBackoff	common/retry/retry.go	/^func ExponentialBackoff(attempts int, delay uint32) Strategy {$/;"	f	package:retry	typeref:typename:Strategy
ExportIDToError	common/session/session.go	/^func ExportIDToError(ctx context.Context) errors.ExportOption {$/;"	f	package:session	typeref:typename:errors.ExportOption
ExportOption	common/errors/errors.go	/^type ExportOption func(*ExportOptionHolder)$/;"	t	package:errors	typeref:typename:func(*ExportOptionHolder)
ExportOptionHolder	common/errors/errors.go	/^type ExportOptionHolder struct {$/;"	s	package:errors
ExtConfigLoader	main/confloader/external/external.go	/^func ExtConfigLoader(files []string) (io.Reader, error) {$/;"	f	package:external	typeref:typename:(io.Reader, error)
Extend	common/buf/buffer.go	/^func (b *Buffer) Extend(n int32) []byte {$/;"	f	struct:buf.Buffer	typeref:typename:[]byte
Extension	config.go	/^	Extension []string$/;"	m	struct:core.ConfigFormat	typeref:typename:[]string
Extension	config.pb.go	/^	Extension []*serial.TypedMessage `protobuf:"bytes,6,rep,name=extension,proto3" json:"extension,/;"	m	struct:core.Config	typeref:typename:[]*serial.TypedMessage
Extension	transport/internet/headers/srtp/config.pb.go	/^	Extension   bool   `protobuf:"varint,3,opt,name=extension,proto3" json:"extension,omitempty"`$/;"	m	struct:srtp.Config	typeref:typename:bool
External	app/proxyman/config.proto	/^    External = 2;$/;"	e	enum:v2ray.core.app.proxyman.AllocationStrategy.Type
Factory	common/mux/client.go	/^	Factory ClientWorkerFactory$/;"	m	struct:mux.IncrementalWorkerPicker	typeref:typename:ClientWorkerFactory
Fallback	infra/conf/trojan.go	/^	Fallback  json.RawMessage          `json:"fallback"`$/;"	m	struct:conf.TrojanServerConfig	typeref:typename:json.RawMessage
Fallback	infra/conf/vless.go	/^	Fallback   json.RawMessage         `json:"fallback"`$/;"	m	struct:conf.VLessInboundConfig	typeref:typename:json.RawMessage
Fallback	proxy/trojan/config.pb.go	/^type Fallback struct {$/;"	s	package:trojan
Fallback	proxy/trojan/config.proto	/^message Fallback {$/;"	m	package:v2ray.core.proxy.trojan
Fallback	proxy/vless/inbound/config.pb.go	/^type Fallback struct {$/;"	s	package:inbound
Fallback	proxy/vless/inbound/config.proto	/^message Fallback {$/;"	m	package:v2ray.core.proxy.vless.inbound
Fallbacks	infra/conf/trojan.go	/^	Fallbacks []*TrojanInboundFallback `json:"fallbacks"`$/;"	m	struct:conf.TrojanServerConfig	typeref:typename:[]*TrojanInboundFallback
Fallbacks	infra/conf/vless.go	/^	Fallbacks  []*VLessInboundFallback `json:"fallbacks"`$/;"	m	struct:conf.VLessInboundConfig	typeref:typename:[]*VLessInboundFallback
Fallbacks	proxy/trojan/config.pb.go	/^	Fallbacks []*Fallback      `protobuf:"bytes,3,rep,name=fallbacks,proto3" json:"fallbacks,omitem/;"	m	struct:trojan.ServerConfig	typeref:typename:[]*Fallback
Fallbacks	proxy/vless/inbound/config.pb.go	/^	Fallbacks  []*Fallback `protobuf:"bytes,3,rep,name=fallbacks,proto3" json:"fallbacks,omitempty"/;"	m	struct:inbound.Config	typeref:typename:[]*Fallback
Family	common/net/address.go	/^	Family() AddressFamily$/;"	n	interface:net.Address	typeref:typename:AddressFamily
Family	common/net/address.go	/^func (domainAddress) Family() AddressFamily {$/;"	f	type:net.domainAddress	typeref:typename:AddressFamily
Family	common/net/address.go	/^func (ipv4Address) Family() AddressFamily {$/;"	f	type:net.ipv4Address	typeref:typename:AddressFamily
Family	common/net/address.go	/^func (ipv6Address) Family() AddressFamily {$/;"	f	type:net.ipv6Address	typeref:typename:AddressFamily
Feature	features/feature.go	/^type Feature interface {$/;"	i	package:features
Features	infra/conf/vmess.go	/^	Features     *FeaturesConfig     `json:"features"`$/;"	m	struct:conf.VMessInboundConfig	typeref:typename:*FeaturesConfig
FeaturesConfig	infra/conf/vmess.go	/^type FeaturesConfig struct {$/;"	s	package:conf
FetchCommand	infra/control/fetch.go	/^type FetchCommand struct{}$/;"	s	package:control
FetchHTTPContent	infra/control/fetch.go	/^func FetchHTTPContent(target string) ([]byte, error) {$/;"	f	package:control	typeref:typename:([]byte, error)
FetchHTTPContent	main/confloader/external/external.go	/^func FetchHTTPContent(target string) ([]byte, error) {$/;"	f	package:external	typeref:typename:([]byte, error)
FieldSelectors	app/router/command/command.pb.go	/^	FieldSelectors []string        `protobuf:"bytes,2,rep,name=FieldSelectors,proto3" json:"FieldSe/;"	m	struct:command.TestRouteRequest	typeref:typename:[]string
FieldSelectors	app/router/command/command.pb.go	/^	FieldSelectors []string `protobuf:"bytes,1,rep,name=FieldSelectors,proto3" json:"FieldSelectors/;"	m	struct:command.SubscribeRoutingStatsRequest	typeref:typename:[]string
FieldSelectors	app/router/command/command.proto	/^  repeated string FieldSelectors = 1;$/;"	f	message:v2ray.core.app.router.command.SubscribeRoutingStatsRequest	typeref:typename:string
FieldSelectors	app/router/command/command.proto	/^  repeated string FieldSelectors = 2;$/;"	f	message:v2ray.core.app.router.command.TestRouteRequest	typeref:typename:string
File	app/log/config.proto	/^  File = 2;$/;"	e	enum:v2ray.core.app.log.LogType
FileConn	common/net/system.go	/^var FileConn = net.FileConn$/;"	v	package:net
FileHash	store/task.go	/^	FileHash   string$/;"	m	struct:store.Task	typeref:typename:string
FileName	store/task.go	/^	FileName   string$/;"	m	struct:store.Task	typeref:typename:string
FileReaderFunc	common/platform/filesystem/file.go	/^type FileReaderFunc func(path string) (io.ReadCloser, error)$/;"	t	package:filesystem	typeref:typename:func(path string) (io.ReadCloser, error)
FileSize	bin/config/config-server.json	/^    "Compression":{"Enable":false,"CompressAlgo":1,"FileSize":4194304},$/;"	n	object:porter.Compression
File_app_commander_config_proto	app/commander/config.pb.go	/^var File_app_commander_config_proto protoreflect.FileDescriptor$/;"	v	package:commander	typeref:typename:protoreflect.FileDescriptor
File_app_dispatcher_config_proto	app/dispatcher/config.pb.go	/^var File_app_dispatcher_config_proto protoreflect.FileDescriptor$/;"	v	package:dispatcher	typeref:typename:protoreflect.FileDescriptor
File_app_dns_config_proto	app/dns/config.pb.go	/^var File_app_dns_config_proto protoreflect.FileDescriptor$/;"	v	package:dns	typeref:typename:protoreflect.FileDescriptor
File_app_log_command_config_proto	app/log/command/config.pb.go	/^var File_app_log_command_config_proto protoreflect.FileDescriptor$/;"	v	package:command	typeref:typename:protoreflect.FileDescriptor
File_app_log_config_proto	app/log/config.pb.go	/^var File_app_log_config_proto protoreflect.FileDescriptor$/;"	v	package:log	typeref:typename:protoreflect.FileDescriptor
File_app_policy_config_proto	app/policy/config.pb.go	/^var File_app_policy_config_proto protoreflect.FileDescriptor$/;"	v	package:policy	typeref:typename:protoreflect.FileDescriptor
File_app_proxyman_command_command_proto	app/proxyman/command/command.pb.go	/^var File_app_proxyman_command_command_proto protoreflect.FileDescriptor$/;"	v	package:command	typeref:typename:protoreflect.FileDescriptor
File_app_proxyman_config_proto	app/proxyman/config.pb.go	/^var File_app_proxyman_config_proto protoreflect.FileDescriptor$/;"	v	package:proxyman	typeref:typename:protoreflect.FileDescriptor
File_app_reverse_config_proto	app/reverse/config.pb.go	/^var File_app_reverse_config_proto protoreflect.FileDescriptor$/;"	v	package:reverse	typeref:typename:protoreflect.FileDescriptor
File_app_router_command_command_proto	app/router/command/command.pb.go	/^var File_app_router_command_command_proto protoreflect.FileDescriptor$/;"	v	package:command	typeref:typename:protoreflect.FileDescriptor
File_app_router_config_proto	app/router/config.pb.go	/^var File_app_router_config_proto protoreflect.FileDescriptor$/;"	v	package:router	typeref:typename:protoreflect.FileDescriptor
File_app_stats_command_command_proto	app/stats/command/command.pb.go	/^var File_app_stats_command_command_proto protoreflect.FileDescriptor$/;"	v	package:command	typeref:typename:protoreflect.FileDescriptor
File_app_stats_config_proto	app/stats/config.pb.go	/^var File_app_stats_config_proto protoreflect.FileDescriptor$/;"	v	package:stats	typeref:typename:protoreflect.FileDescriptor
File_common_log_log_proto	common/log/log.pb.go	/^var File_common_log_log_proto protoreflect.FileDescriptor$/;"	v	package:log	typeref:typename:protoreflect.FileDescriptor
File_common_net_address_proto	common/net/address.pb.go	/^var File_common_net_address_proto protoreflect.FileDescriptor$/;"	v	package:net	typeref:typename:protoreflect.FileDescriptor
File_common_net_destination_proto	common/net/destination.pb.go	/^var File_common_net_destination_proto protoreflect.FileDescriptor$/;"	v	package:net	typeref:typename:protoreflect.FileDescriptor
File_common_net_network_proto	common/net/network.pb.go	/^var File_common_net_network_proto protoreflect.FileDescriptor$/;"	v	package:net	typeref:typename:protoreflect.FileDescriptor
File_common_net_port_proto	common/net/port.pb.go	/^var File_common_net_port_proto protoreflect.FileDescriptor$/;"	v	package:net	typeref:typename:protoreflect.FileDescriptor
File_common_protocol_headers_proto	common/protocol/headers.pb.go	/^var File_common_protocol_headers_proto protoreflect.FileDescriptor$/;"	v	package:protocol	typeref:typename:protoreflect.FileDescriptor
File_common_protocol_server_spec_proto	common/protocol/server_spec.pb.go	/^var File_common_protocol_server_spec_proto protoreflect.FileDescriptor$/;"	v	package:protocol	typeref:typename:protoreflect.FileDescriptor
File_common_protocol_user_proto	common/protocol/user.pb.go	/^var File_common_protocol_user_proto protoreflect.FileDescriptor$/;"	v	package:protocol	typeref:typename:protoreflect.FileDescriptor
File_common_serial_typed_message_proto	common/serial/typed_message.pb.go	/^var File_common_serial_typed_message_proto protoreflect.FileDescriptor$/;"	v	package:serial	typeref:typename:protoreflect.FileDescriptor
File_config_proto	config.pb.go	/^var File_config_proto protoreflect.FileDescriptor$/;"	v	package:core	typeref:typename:protoreflect.FileDescriptor
File_proxy_blackhole_config_proto	proxy/blackhole/config.pb.go	/^var File_proxy_blackhole_config_proto protoreflect.FileDescriptor$/;"	v	package:blackhole	typeref:typename:protoreflect.FileDescriptor
File_proxy_dns_config_proto	proxy/dns/config.pb.go	/^var File_proxy_dns_config_proto protoreflect.FileDescriptor$/;"	v	package:dns	typeref:typename:protoreflect.FileDescriptor
File_proxy_dokodemo_config_proto	proxy/dokodemo/config.pb.go	/^var File_proxy_dokodemo_config_proto protoreflect.FileDescriptor$/;"	v	package:dokodemo	typeref:typename:protoreflect.FileDescriptor
File_proxy_freedom_config_proto	proxy/freedom/config.pb.go	/^var File_proxy_freedom_config_proto protoreflect.FileDescriptor$/;"	v	package:freedom	typeref:typename:protoreflect.FileDescriptor
File_proxy_http_config_proto	proxy/http/config.pb.go	/^var File_proxy_http_config_proto protoreflect.FileDescriptor$/;"	v	package:http	typeref:typename:protoreflect.FileDescriptor
File_proxy_mtproto_config_proto	proxy/mtproto/config.pb.go	/^var File_proxy_mtproto_config_proto protoreflect.FileDescriptor$/;"	v	package:mtproto	typeref:typename:protoreflect.FileDescriptor
File_proxy_shadowsocks_config_proto	proxy/shadowsocks/config.pb.go	/^var File_proxy_shadowsocks_config_proto protoreflect.FileDescriptor$/;"	v	package:shadowsocks	typeref:typename:protoreflect.FileDescriptor
File_proxy_socks_config_proto	proxy/socks/config.pb.go	/^var File_proxy_socks_config_proto protoreflect.FileDescriptor$/;"	v	package:socks	typeref:typename:protoreflect.FileDescriptor
File_proxy_trojan_config_proto	proxy/trojan/config.pb.go	/^var File_proxy_trojan_config_proto protoreflect.FileDescriptor$/;"	v	package:trojan	typeref:typename:protoreflect.FileDescriptor
File_proxy_vless_account_proto	proxy/vless/account.pb.go	/^var File_proxy_vless_account_proto protoreflect.FileDescriptor$/;"	v	package:vless	typeref:typename:protoreflect.FileDescriptor
File_proxy_vless_inbound_config_proto	proxy/vless/inbound/config.pb.go	/^var File_proxy_vless_inbound_config_proto protoreflect.FileDescriptor$/;"	v	package:inbound	typeref:typename:protoreflect.FileDescriptor
File_proxy_vless_outbound_config_proto	proxy/vless/outbound/config.pb.go	/^var File_proxy_vless_outbound_config_proto protoreflect.FileDescriptor$/;"	v	package:outbound	typeref:typename:protoreflect.FileDescriptor
File_proxy_vmess_account_proto	proxy/vmess/account.pb.go	/^var File_proxy_vmess_account_proto protoreflect.FileDescriptor$/;"	v	package:vmess	typeref:typename:protoreflect.FileDescriptor
File_proxy_vmess_inbound_config_proto	proxy/vmess/inbound/config.pb.go	/^var File_proxy_vmess_inbound_config_proto protoreflect.FileDescriptor$/;"	v	package:inbound	typeref:typename:protoreflect.FileDescriptor
File_proxy_vmess_outbound_config_proto	proxy/vmess/outbound/config.pb.go	/^var File_proxy_vmess_outbound_config_proto protoreflect.FileDescriptor$/;"	v	package:outbound	typeref:typename:protoreflect.FileDescriptor
File_transport_config_proto	transport/config.pb.go	/^var File_transport_config_proto protoreflect.FileDescriptor$/;"	v	package:transport	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_config_proto	transport/internet/config.pb.go	/^var File_transport_internet_config_proto protoreflect.FileDescriptor$/;"	v	package:internet	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_domainsocket_config_proto	transport/internet/domainsocket/config.pb.go	/^var File_transport_internet_domainsocket_config_proto protoreflect.FileDescriptor$/;"	v	package:domainsocket	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_headers_http_config_proto	transport/internet/headers/http/config.pb.go	/^var File_transport_internet_headers_http_config_proto protoreflect.FileDescriptor$/;"	v	package:http	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_headers_noop_config_proto	transport/internet/headers/noop/config.pb.go	/^var File_transport_internet_headers_noop_config_proto protoreflect.FileDescriptor$/;"	v	package:noop	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_headers_srtp_config_proto	transport/internet/headers/srtp/config.pb.go	/^var File_transport_internet_headers_srtp_config_proto protoreflect.FileDescriptor$/;"	v	package:srtp	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_headers_tls_config_proto	transport/internet/headers/tls/config.pb.go	/^var File_transport_internet_headers_tls_config_proto protoreflect.FileDescriptor$/;"	v	package:tls	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_headers_utp_config_proto	transport/internet/headers/utp/config.pb.go	/^var File_transport_internet_headers_utp_config_proto protoreflect.FileDescriptor$/;"	v	package:utp	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_headers_wechat_config_proto	transport/internet/headers/wechat/config.pb.go	/^var File_transport_internet_headers_wechat_config_proto protoreflect.FileDescriptor$/;"	v	package:wechat	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_headers_wireguard_config_proto	transport/internet/headers/wireguard/config.pb.go	/^var File_transport_internet_headers_wireguard_config_proto protoreflect.FileDescriptor$/;"	v	package:wireguard	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_http_config_proto	transport/internet/http/config.pb.go	/^var File_transport_internet_http_config_proto protoreflect.FileDescriptor$/;"	v	package:http	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_kcp_config_proto	transport/internet/kcp/config.pb.go	/^var File_transport_internet_kcp_config_proto protoreflect.FileDescriptor$/;"	v	package:kcp	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_quic_config_proto	transport/internet/quic/config.pb.go	/^var File_transport_internet_quic_config_proto protoreflect.FileDescriptor$/;"	v	package:quic	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_tcp_config_proto	transport/internet/tcp/config.pb.go	/^var File_transport_internet_tcp_config_proto protoreflect.FileDescriptor$/;"	v	package:tcp	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_tls_config_proto	transport/internet/tls/config.pb.go	/^var File_transport_internet_tls_config_proto protoreflect.FileDescriptor$/;"	v	package:tls	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_udp_config_proto	transport/internet/udp/config.pb.go	/^var File_transport_internet_udp_config_proto protoreflect.FileDescriptor$/;"	v	package:udp	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_websocket_config_proto	transport/internet/websocket/config.pb.go	/^var File_transport_internet_websocket_config_proto protoreflect.FileDescriptor$/;"	v	package:websocket	typeref:typename:protoreflect.FileDescriptor
File_transport_internet_xtls_config_proto	transport/internet/xtls/config.pb.go	/^var File_transport_internet_xtls_config_proto protoreflect.FileDescriptor$/;"	v	package:xtls	typeref:typename:protoreflect.FileDescriptor
FillInRandom	app/reverse/config.go	/^func (c *Control) FillInRandom() {$/;"	f	unknown:reverse.Control
FindFirstUnacknowledged	transport/internet/kcp/sending.go	/^func (w *SendingWorker) FindFirstUnacknowledged() {$/;"	f	struct:kcp.SendingWorker
FirstNumber	transport/internet/kcp/sending.go	/^func (sw *SendingWindow) FirstNumber() uint32 {$/;"	f	struct:kcp.SendingWindow	typeref:typename:uint32
FirstUnacknowledged	transport/internet/kcp/sending.go	/^func (w *SendingWorker) FirstUnacknowledged() uint32 {$/;"	f	struct:kcp.SendingWorker	typeref:typename:uint32
Float32	app/p2p/wire/seedlist.pb.go	/^	Float32() float32$/;"	n	interface:wire.randySeedlist	typeref:typename:float32
Float64	app/p2p/wire/seedlist.pb.go	/^	Float64() float64$/;"	n	interface:wire.randySeedlist	typeref:typename:float64
Flow	proxy/vless/account.go	/^	Flow string$/;"	m	struct:vless.MemoryAccount	typeref:typename:string
Flow	proxy/vless/account.pb.go	/^	Flow string `protobuf:"bytes,2,opt,name=flow,proto3" json:"flow,omitempty"`$/;"	m	struct:vless.Account	typeref:typename:string
Flow	proxy/vless/encoding/addons.pb.go	/^	Flow                 string   `protobuf:"bytes,1,opt,name=Flow,proto3" json:"Flow,omitempty"`$/;"	m	struct:encoding.Addons	typeref:typename:string
Flow	proxy/vless/encoding/addons.proto	/^  string Flow = 1;$/;"	f	message:v2ray.core.proxy.vless.encoding.Addons	typeref:typename:string
Flush	common/buf/writer.go	/^func (w *BufferedWriter) Flush() error {$/;"	f	struct:buf.BufferedWriter	typeref:typename:error
Flush	transport/internet/kcp/receiving.go	/^func (l *AckList) Flush(current uint32, rto uint32) {$/;"	f	struct:kcp.AckList
Flush	transport/internet/kcp/receiving.go	/^func (w *ReceivingWorker) Flush(current uint32) {$/;"	f	struct:kcp.ReceivingWorker
Flush	transport/internet/kcp/sending.go	/^func (sw *SendingWindow) Flush(current uint32, rto uint32, maxInFlightSize uint32) {$/;"	f	struct:kcp.SendingWindow
Flush	transport/internet/kcp/sending.go	/^func (w *SendingWorker) Flush(current uint32) {$/;"	f	struct:kcp.SendingWorker
FnvAuthenticator	proxy/vmess/encoding/auth.go	/^type FnvAuthenticator struct {$/;"	s	package:encoding
FollowRedirect	proxy/dokodemo/config.pb.go	/^	FollowRedirect bool   `protobuf:"varint,5,opt,name=follow_redirect,json=followRedirect,proto3" /;"	m	struct:dokodemo.Config	typeref:typename:bool
ForLevel	app/policy/manager.go	/^func (m *Instance) ForLevel(level uint32) policy.Session {$/;"	f	struct:policy.Instance	typeref:typename:policy.Session
ForLevel	features/policy/default.go	/^func (DefaultManager) ForLevel(level uint32) Session {$/;"	f	struct:policy.DefaultManager	typeref:typename:Session
ForLevel	features/policy/policy.go	/^	ForLevel(level uint32) Session$/;"	n	interface:policy.Manager	typeref:typename:Session
ForSystem	app/policy/manager.go	/^func (m *Instance) ForSystem() policy.System {$/;"	f	struct:policy.Instance	typeref:typename:policy.System
ForSystem	features/policy/default.go	/^func (DefaultManager) ForSystem() System {$/;"	f	struct:policy.DefaultManager	typeref:typename:System
ForSystem	features/policy/policy.go	/^	ForSystem() System$/;"	n	interface:policy.Manager	typeref:typename:System
Fqdn	app/dns/dnscommon.go	/^func Fqdn(domain string) string {$/;"	f	package:dns	typeref:typename:string
FrameMetadata	common/mux/frame.go	/^type FrameMetadata struct {$/;"	s	package:mux
Free	common/bytespool/pool.go	/^func Free(b []byte) {$/;"	f	package:bytespool
FreedomConfig	infra/conf/freedom.go	/^type FreedomConfig struct {$/;"	s	package:conf
Frees	app/stats/command/command.pb.go	/^	Frees        uint64 `protobuf:"varint,7,opt,name=Frees,proto3" json:"Frees,omitempty"`$/;"	m	struct:command.SysStatsResponse	typeref:typename:uint64
Frees	app/stats/command/command.proto	/^  uint64 Frees = 7;$/;"	f	message:v2ray.core.app.stats.command.SysStatsResponse	typeref:typename:uint64
From	common/log/access.go	/^	From   interface{}$/;"	m	struct:log.AccessMessage	typeref:typename:interface{}
From	common/net/port.go	/^	From Port$/;"	m	struct:net.MemoryPortRange	typeref:typename:Port
From	common/net/port.pb.go	/^	From uint32 `protobuf:"varint,1,opt,name=From,proto3" json:"From,omitempty"`$/;"	m	struct:net.PortRange	typeref:typename:uint32
From	common/net/port.proto	/^  uint32 From = 1;$/;"	f	message:v2ray.core.common.net.PortRange	typeref:typename:uint32
From	infra/conf/common.go	/^	From uint32$/;"	m	struct:conf.PortRange	typeref:typename:uint32
FromContext	context.go	/^func FromContext(ctx context.Context) *Instance {$/;"	f	package:core	typeref:typename:*Instance
FromPort	common/net/port.go	/^func (p *PortRange) FromPort() Port {$/;"	f	unknown:net.PortRange	typeref:typename:Port
Full	app/dns/config.proto	/^  Full = 0;$/;"	e	enum:v2ray.core.app.dns.DomainMatchingType
Full	app/router/config.proto	/^    Full = 3;$/;"	e	enum:v2ray.core.app.router.Domain.Type
Full	common/strmatcher/strmatcher.go	/^	Full Type = iota$/;"	c	package:strmatcher	typeref:type:Type
FullMatcherGroup	common/strmatcher/full_matcher.go	/^type FullMatcherGroup struct {$/;"	s	package:strmatcher
GC	Makefile	/^GC=go build$/;"	m
GOFMT	Makefile	/^GOFMT=gofmt$/;"	m
Gateway	common/session/session.go	/^	Gateway net.Address$/;"	m	struct:session.Outbound	typeref:typename:net.Address
Gateway	common/session/session.go	/^	Gateway net.Destination$/;"	m	struct:session.Inbound	typeref:typename:net.Destination
GeneralMessage	common/log/log.go	/^type GeneralMessage struct {$/;"	s	package:log
Generate	common/protocol/tls/cert/cert.go	/^func Generate(parent *Certificate, opts ...Option) (*Certificate, error) {$/;"	f	package:cert	typeref:typename:(*Certificate, error)
GenerateChacha20Poly1305Key	proxy/vmess/encoding/auth.go	/^func GenerateChacha20Poly1305Key(b []byte) []byte {$/;"	f	package:encoding	typeref:typename:[]byte
GenerateChunkNonce	proxy/vmess/encoding/client.go	/^func GenerateChunkNonce(nonce []byte, size uint32) crypto.BytesGenerator {$/;"	f	package:encoding	typeref:typename:crypto.BytesGenerator
GenerateEmptyBytes	common/crypto/auth.go	/^func GenerateEmptyBytes() BytesGenerator {$/;"	f	package:crypto	typeref:typename:BytesGenerator
GenerateIncreasingNonce	common/crypto/auth.go	/^func GenerateIncreasingNonce(nonce []byte) BytesGenerator {$/;"	f	package:crypto	typeref:typename:BytesGenerator
GenerateInitialAEADNonce	common/crypto/auth.go	/^func GenerateInitialAEADNonce() BytesGenerator {$/;"	f	package:crypto	typeref:typename:BytesGenerator
GenerateStaticBytes	common/crypto/auth.go	/^func GenerateStaticBytes(content []byte) BytesGenerator {$/;"	f	package:crypto	typeref:typename:BytesGenerator
GeoIP	app/router/config.pb.go	/^type GeoIP struct {$/;"	s	package:router
GeoIP	app/router/config.proto	/^message GeoIP {$/;"	m	package:v2ray.core.app.router
GeoIPList	app/router/config.pb.go	/^type GeoIPList struct {$/;"	s	package:router
GeoIPList	app/router/config.proto	/^message GeoIPList {$/;"	m	package:v2ray.core.app.router
GeoIPMatcher	app/router/condition_geoip.go	/^type GeoIPMatcher struct {$/;"	s	package:router
GeoIPMatcherContainer	app/router/condition_geoip.go	/^type GeoIPMatcherContainer struct {$/;"	s	package:router
GeoSite	app/router/config.pb.go	/^type GeoSite struct {$/;"	s	package:router
GeoSite	app/router/config.proto	/^message GeoSite {$/;"	m	package:v2ray.core.app.router
GeoSiteList	app/router/config.pb.go	/^type GeoSiteList struct {$/;"	s	package:router
GeoSiteList	app/router/config.proto	/^message GeoSiteList {$/;"	m	package:v2ray.core.app.router
Geoip	app/dns/config.pb.go	/^	Geoip             []*router.GeoIP              `protobuf:"bytes,3,rep,name=geoip,proto3" json:"/;"	m	struct:dns.NameServer	typeref:typename:[]*router.GeoIP
Geoip	app/router/config.pb.go	/^	Geoip []*GeoIP `protobuf:"bytes,10,rep,name=geoip,proto3" json:"geoip,omitempty"`$/;"	m	struct:router.RoutingRule	typeref:typename:[]*GeoIP
Get	common/mux/session.go	/^func (m *SessionManager) Get(id uint16) (*Session, bool) {$/;"	f	struct:mux.SessionManager	typeref:typename:(*Session, bool)
Get	proxy/trojan/validator.go	/^func (v *Validator) Get(hash string) *protocol.MemoryUser {$/;"	f	struct:trojan.Validator	typeref:typename:*protocol.MemoryUser
Get	proxy/vless/validator.go	/^func (v *Validator) Get(id uuid.UUID) *protocol.MemoryUser {$/;"	f	struct:vless.Validator	typeref:typename:*protocol.MemoryUser
Get	proxy/vmess/inbound/inbound.go	/^func (v *userByEmail) Get(email string) (*protocol.MemoryUser, bool) {$/;"	f	struct:inbound.userByEmail	typeref:typename:(*protocol.MemoryUser, bool)
Get	proxy/vmess/validator.go	/^func (v *TimedUserValidator) Get(userHash []byte) (*protocol.MemoryUser, protocol.Timestamp, boo/;"	f	struct:vmess.TimedUserValidator	typeref:typename:(*protocol.MemoryUser, protocol.Timestamp, bool, error)
Get	store/db.go	/^	Get(key string) (interface{}, error)$/;"	n	interface:store.Store	typeref:typename:(interface{}, error)
Get	store/leveldb.go	/^func (self *LevelDBStore) Get(key []byte) ([]byte, error) {$/;"	f	struct:store.LevelDBStore	typeref:typename:([]byte, error)
GetAEAD	proxy/vmess/validator.go	/^func (v *TimedUserValidator) GetAEAD(userHash []byte) (*protocol.MemoryUser, bool, error) {$/;"	f	struct:vmess.TimedUserValidator	typeref:typename:(*protocol.MemoryUser, bool, error)
GetAbstract	transport/internet/domainsocket/config.pb.go	/^func (x *Config) GetAbstract() bool {$/;"	f	struct:domainsocket.Config	typeref:typename:bool
GetAcceptProxyProtocol	transport/internet/domainsocket/config.pb.go	/^func (x *Config) GetAcceptProxyProtocol() bool {$/;"	f	struct:domainsocket.Config	typeref:typename:bool
GetAcceptProxyProtocol	transport/internet/tcp/config.pb.go	/^func (x *Config) GetAcceptProxyProtocol() bool {$/;"	f	struct:tcp.Config	typeref:typename:bool
GetAcceptProxyProtocol	transport/internet/websocket/config.pb.go	/^func (x *Config) GetAcceptProxyProtocol() bool {$/;"	f	struct:websocket.Config	typeref:typename:bool
GetAccessLogPath	app/log/config.pb.go	/^func (x *Config) GetAccessLogPath() string {$/;"	f	struct:log.Config	typeref:typename:string
GetAccessLogType	app/log/config.pb.go	/^func (x *Config) GetAccessLogType() LogType {$/;"	f	struct:log.Config	typeref:typename:LogType
GetAccount	app/p2p/account/account.go	/^func GetAccount() *Account {$/;"	f	package:account	typeref:typename:*Account
GetAccount	common/protocol/user.pb.go	/^func (x *User) GetAccount() *serial.TypedMessage {$/;"	f	struct:protocol.User	typeref:typename:*serial.TypedMessage
GetAccounts	proxy/http/config.pb.go	/^func (x *ServerConfig) GetAccounts() map[string]string {$/;"	f	struct:http.ServerConfig	typeref:typename:map[string]string
GetAccounts	proxy/socks/config.pb.go	/^func (x *ServerConfig) GetAccounts() map[string]string {$/;"	f	struct:socks.ServerConfig	typeref:typename:map[string]string
GetAction	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) GetAction() ActionType {$/;"	f	struct:wire.HelloSeedList	typeref:typename:ActionType
GetAddress	app/dns/config.pb.go	/^func (x *NameServer) GetAddress() *net.Endpoint {$/;"	f	struct:dns.NameServer	typeref:typename:*net.Endpoint
GetAddress	common/net/address.pb.go	/^func (m *IPOrDomain) GetAddress() isIPOrDomain_Address {$/;"	f	struct:net.IPOrDomain	typeref:typename:isIPOrDomain_Address
GetAddress	common/net/destination.pb.go	/^func (x *Endpoint) GetAddress() *IPOrDomain {$/;"	f	struct:net.Endpoint	typeref:typename:*IPOrDomain
GetAddress	common/protocol/server_spec.pb.go	/^func (x *ServerEndpoint) GetAddress() *net.IPOrDomain {$/;"	f	struct:protocol.ServerEndpoint	typeref:typename:*net.IPOrDomain
GetAddress	proxy/dokodemo/config.pb.go	/^func (x *Config) GetAddress() *net.IPOrDomain {$/;"	f	struct:dokodemo.Config	typeref:typename:*net.IPOrDomain
GetAddress	proxy/socks/config.pb.go	/^func (x *ServerConfig) GetAddress() *net.IPOrDomain {$/;"	f	struct:socks.ServerConfig	typeref:typename:*net.IPOrDomain
GetAlloc	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) GetAlloc() uint64 {$/;"	f	struct:command.SysStatsResponse	typeref:typename:uint64
GetAllocationStrategy	app/proxyman/config.pb.go	/^func (x *ReceiverConfig) GetAllocationStrategy() *AllocationStrategy {$/;"	f	struct:proxyman.ReceiverConfig	typeref:typename:*AllocationStrategy
GetAllowInsecure	transport/internet/tls/config.pb.go	/^func (x *Config) GetAllowInsecure() bool {$/;"	f	struct:tls.Config	typeref:typename:bool
GetAllowInsecure	transport/internet/xtls/config.pb.go	/^func (x *Config) GetAllowInsecure() bool {$/;"	f	struct:xtls.Config	typeref:typename:bool
GetAllowInsecureCiphers	transport/internet/tls/config.pb.go	/^func (x *Config) GetAllowInsecureCiphers() bool {$/;"	f	struct:tls.Config	typeref:typename:bool
GetAllowInsecureCiphers	transport/internet/xtls/config.pb.go	/^func (x *Config) GetAllowInsecureCiphers() bool {$/;"	f	struct:xtls.Config	typeref:typename:bool
GetAllowTransparent	proxy/http/config.pb.go	/^func (x *ServerConfig) GetAllowTransparent() bool {$/;"	f	struct:http.ServerConfig	typeref:typename:bool
GetAlpn	proxy/trojan/config.pb.go	/^func (x *Fallback) GetAlpn() string {$/;"	f	struct:trojan.Fallback	typeref:typename:string
GetAlpn	proxy/vless/inbound/config.pb.go	/^func (x *Fallback) GetAlpn() string {$/;"	f	struct:inbound.Fallback	typeref:typename:string
GetAlterId	proxy/vmess/account.pb.go	/^func (x *Account) GetAlterId() uint32 {$/;"	f	struct:vmess.Account	typeref:typename:uint32
GetAlterId	proxy/vmess/inbound/config.pb.go	/^func (x *DefaultConfig) GetAlterId() uint32 {$/;"	f	struct:inbound.DefaultConfig	typeref:typename:uint32
GetApp	config.pb.go	/^func (x *Config) GetApp() []*serial.TypedMessage {$/;"	f	struct:core.Config	typeref:typename:[]*serial.TypedMessage
GetAssetLocation	common/platform/others.go	/^func GetAssetLocation(file string) string {$/;"	f	package:platform	typeref:typename:string
GetAssetLocation	common/platform/windows.go	/^func GetAssetLocation(file string) string {$/;"	f	package:platform	typeref:typename:string
GetAttribute	app/router/config.pb.go	/^func (x *Domain) GetAttribute() []*Domain_Attribute {$/;"	f	struct:router.Domain	typeref:typename:[]*Domain_Attribute
GetAttributes	app/router/command/command.pb.go	/^func (x *RoutingContext) GetAttributes() map[string]string {$/;"	f	struct:command.RoutingContext	typeref:typename:map[string]string
GetAttributes	app/router/config.pb.go	/^func (x *RoutingRule) GetAttributes() string {$/;"	f	struct:router.RoutingRule	typeref:typename:string
GetAttributes	features/routing/context.go	/^	GetAttributes() map[string]string$/;"	n	interface:routing.Context	typeref:typename:map[string]string
GetAttributes	features/routing/session/context.go	/^func (ctx *Context) GetAttributes() map[string]string {$/;"	f	struct:session.Context	typeref:typename:map[string]string
GetAuthType	proxy/socks/config.pb.go	/^func (x *ServerConfig) GetAuthType() AuthType {$/;"	f	struct:socks.ServerConfig	typeref:typename:AuthType
GetBalancingRule	app/router/config.pb.go	/^func (x *Config) GetBalancingRule() []*BalancingRule {$/;"	f	struct:router.Config	typeref:typename:[]*BalancingRule
GetBalancingTag	app/router/config.pb.go	/^func (x *RoutingRule) GetBalancingTag() string {$/;"	f	struct:router.RoutingRule	typeref:typename:string
GetBehaviorSeed	proxy/vmess/validator.go	/^func (v *TimedUserValidator) GetBehaviorSeed() uint64 {$/;"	f	struct:vmess.TimedUserValidator	typeref:typename:uint64
GetBindAddress	transport/internet/config.pb.go	/^func (x *SocketConfig) GetBindAddress() []byte {$/;"	f	struct:internet.SocketConfig	typeref:typename:[]byte
GetBindPort	transport/internet/config.pb.go	/^func (x *SocketConfig) GetBindPort() uint32 {$/;"	f	struct:internet.SocketConfig	typeref:typename:uint32
GetBlocking	app/stats/config.pb.go	/^func (x *ChannelConfig) GetBlocking() bool {$/;"	f	struct:stats.ChannelConfig	typeref:typename:bool
GetBoolValue	app/router/config.pb.go	/^func (x *Domain_Attribute) GetBoolValue() bool {$/;"	f	struct:router.Domain_Attribute	typeref:typename:bool
GetBridgeConfig	app/reverse/config.pb.go	/^func (x *Config) GetBridgeConfig() []*BridgeConfig {$/;"	f	struct:reverse.Config	typeref:typename:[]*BridgeConfig
GetBuffer	app/policy/config.pb.go	/^func (x *Policy) GetBuffer() *Policy_Buffer {$/;"	f	struct:policy.Policy	typeref:typename:*Policy_Buffer
GetBufferSize	app/stats/config.pb.go	/^func (x *ChannelConfig) GetBufferSize() int32 {$/;"	f	struct:stats.ChannelConfig	typeref:typename:int32
GetCertificate	transport/internet/tls/config.pb.go	/^func (x *Certificate) GetCertificate() []byte {$/;"	f	struct:tls.Certificate	typeref:typename:[]byte
GetCertificate	transport/internet/tls/config.pb.go	/^func (x *Config) GetCertificate() []*Certificate {$/;"	f	struct:tls.Config	typeref:typename:[]*Certificate
GetCertificate	transport/internet/xtls/config.pb.go	/^func (x *Certificate) GetCertificate() []byte {$/;"	f	struct:xtls.Certificate	typeref:typename:[]byte
GetCertificate	transport/internet/xtls/config.pb.go	/^func (x *Config) GetCertificate() []*Certificate {$/;"	f	struct:xtls.Config	typeref:typename:[]*Certificate
GetChannel	app/stats/stats.go	/^func (m *Manager) GetChannel(name string) stats.Channel {$/;"	f	struct:stats.Manager	typeref:typename:stats.Channel
GetChannel	features/stats/stats.go	/^	GetChannel(string) Channel$/;"	n	interface:stats.Manager	typeref:typename:Channel
GetChannel	features/stats/stats.go	/^func (NoopManager) GetChannel(string) Channel {$/;"	f	struct:stats.NoopManager	typeref:typename:Channel
GetCidr	app/router/config.pb.go	/^func (x *GeoIP) GetCidr() []*CIDR {$/;"	f	struct:router.GeoIP	typeref:typename:[]*CIDR
GetCidr	app/router/config.pb.go	/^func (x *RoutingRule) GetCidr() []*CIDR {$/;"	f	struct:router.RoutingRule	typeref:typename:[]*CIDR
GetCipherType	proxy/shadowsocks/config.pb.go	/^func (x *Account) GetCipherType() CipherType {$/;"	f	struct:shadowsocks.Account	typeref:typename:CipherType
GetClientIp	app/dns/config.pb.go	/^func (x *Config) GetClientIp() []byte {$/;"	f	struct:dns.Config	typeref:typename:[]byte
GetClientVersion	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) GetClientVersion() string {$/;"	f	struct:wire.MessageData	typeref:typename:string
GetClientWriter	transport/internet/headers/http/http.go	/^func (a HttpAuthenticator) GetClientWriter() *HeaderWriter {$/;"	f	struct:http.HttpAuthenticator	typeref:typename:*HeaderWriter
GetClients	proxy/vless/inbound/config.pb.go	/^func (x *Config) GetClients() []*protocol.User {$/;"	f	struct:inbound.Config	typeref:typename:[]*protocol.User
GetCode	transport/internet/headers/http/config.pb.go	/^func (x *Status) GetCode() string {$/;"	f	struct:http.Status	typeref:typename:string
GetCommand	infra/control/command.go	/^func GetCommand(name string) Command {$/;"	f	package:control	typeref:typename:Command
GetComment	config.pb.go	/^func (x *OutboundHandlerConfig) GetComment() string {$/;"	f	struct:core.OutboundHandlerConfig	typeref:typename:string
GetConcurrency	app/proxyman/config.pb.go	/^func (x *AllocationStrategy) GetConcurrency() *AllocationStrategy_AllocationStrategyConcurrency /;"	f	struct:proxyman.AllocationStrategy	typeref:typename:*AllocationStrategy_AllocationStrategyConcurrency
GetConcurrency	app/proxyman/config.pb.go	/^func (x *MultiplexingConfig) GetConcurrency() uint32 {$/;"	f	struct:proxyman.MultiplexingConfig	typeref:typename:uint32
GetConcurrencyValue	app/proxyman/config.go	/^func (s *AllocationStrategy) GetConcurrencyValue() uint32 {$/;"	f	unknown:proxyman.AllocationStrategy	typeref:typename:uint32
GetConfDirPath	common/platform/platform.go	/^func GetConfDirPath() string {$/;"	f	package:platform	typeref:typename:string
GetConfigFormat	main/main.go	/^func GetConfigFormat() string {$/;"	f	package:main	typeref:typename:string
GetConfigurationPath	common/platform/platform.go	/^func GetConfigurationPath() string {$/;"	f	package:platform	typeref:typename:string
GetCongestion	transport/internet/kcp/config.pb.go	/^func (x *Config) GetCongestion() bool {$/;"	f	struct:kcp.Config	typeref:typename:bool
GetConnection	app/policy/config.pb.go	/^func (x *Policy_Buffer) GetConnection() int32 {$/;"	f	struct:policy.Policy_Buffer	typeref:typename:int32
GetConnectionIdle	app/policy/config.pb.go	/^func (x *Policy_Timeout) GetConnectionIdle() *Second {$/;"	f	struct:policy.Policy_Timeout	typeref:typename:*Second
GetCounter	app/stats/stats.go	/^func (m *Manager) GetCounter(name string) stats.Counter {$/;"	f	struct:stats.Manager	typeref:typename:stats.Counter
GetCounter	features/stats/stats.go	/^	GetCounter(string) Counter$/;"	n	interface:stats.Manager	typeref:typename:Counter
GetCounter	features/stats/stats.go	/^func (NoopManager) GetCounter(string) Counter {$/;"	f	struct:stats.NoopManager	typeref:typename:Counter
GetCountryCode	app/router/config.pb.go	/^func (x *GeoIP) GetCountryCode() string {$/;"	f	struct:router.GeoIP	typeref:typename:string
GetCountryCode	app/router/config.pb.go	/^func (x *GeoSite) GetCountryCode() string {$/;"	f	struct:router.GeoSite	typeref:typename:string
GetCreateTables	store/utils.go	/^func GetCreateTables() string {$/;"	f	package:store	typeref:typename:string
GetCsrcCount	transport/internet/headers/srtp/config.pb.go	/^func (x *Config) GetCsrcCount() uint32 {$/;"	f	struct:srtp.Config	typeref:typename:uint32
GetDecryption	proxy/vless/inbound/config.pb.go	/^func (x *Config) GetDecryption() string {$/;"	f	struct:inbound.Config	typeref:typename:string
GetDefault	proxy/vmess/inbound/config.pb.go	/^func (x *Config) GetDefault() *DefaultConfig {$/;"	f	struct:inbound.Config	typeref:typename:*DefaultConfig
GetDefaultHandler	app/proxyman/outbound/outbound.go	/^func (m *Manager) GetDefaultHandler() outbound.Handler {$/;"	f	struct:outbound.Manager	typeref:typename:outbound.Handler
GetDefaultHandler	features/outbound/outbound.go	/^	GetDefaultHandler() Handler$/;"	n	interface:outbound.Manager	typeref:typename:Handler
GetDefaultHandler	testing/mocks/outbound.go	/^func (m *OutboundManager) GetDefaultHandler() outbound.Handler {$/;"	f	struct:mocks.OutboundManager	typeref:typename:outbound.Handler
GetDefaultHandler	testing/mocks/outbound.go	/^func (mr *OutboundManagerMockRecorder) GetDefaultHandler() *gomock.Call {$/;"	f	struct:mocks.OutboundManagerMockRecorder	typeref:typename:*gomock.Call
GetDefaultValue	proxy/vmess/inbound/config.go	/^func (c *Config) GetDefaultValue() *DefaultConfig {$/;"	f	unknown:inbound.Config	typeref:typename:*DefaultConfig
GetDest	proxy/trojan/config.pb.go	/^func (x *Fallback) GetDest() string {$/;"	f	struct:trojan.Fallback	typeref:typename:string
GetDest	proxy/vless/inbound/config.pb.go	/^func (x *Fallback) GetDest() string {$/;"	f	struct:inbound.Fallback	typeref:typename:string
GetDestinationOverride	app/proxyman/config.pb.go	/^func (x *SniffingConfig) GetDestinationOverride() []string {$/;"	f	struct:proxyman.SniffingConfig	typeref:typename:[]string
GetDestinationOverride	proxy/freedom/config.pb.go	/^func (x *Config) GetDestinationOverride() *DestinationOverride {$/;"	f	struct:freedom.Config	typeref:typename:*DestinationOverride
GetDetour	proxy/vmess/inbound/config.pb.go	/^func (x *Config) GetDetour() *DetourConfig {$/;"	f	struct:inbound.Config	typeref:typename:*DetourConfig
GetDisableSessionResumption	transport/internet/tls/config.pb.go	/^func (x *Config) GetDisableSessionResumption() bool {$/;"	f	struct:tls.Config	typeref:typename:bool
GetDisableSessionResumption	transport/internet/xtls/config.pb.go	/^func (x *Config) GetDisableSessionResumption() bool {$/;"	f	struct:xtls.Config	typeref:typename:bool
GetDisableSystemRoot	transport/internet/tls/config.pb.go	/^func (x *Config) GetDisableSystemRoot() bool {$/;"	f	struct:tls.Config	typeref:typename:bool
GetDisableSystemRoot	transport/internet/xtls/config.pb.go	/^func (x *Config) GetDisableSystemRoot() bool {$/;"	f	struct:xtls.Config	typeref:typename:bool
GetDomain	app/dns/config.pb.go	/^func (x *Config_HostMapping) GetDomain() string {$/;"	f	struct:dns.Config_HostMapping	typeref:typename:string
GetDomain	app/dns/config.pb.go	/^func (x *NameServer_PriorityDomain) GetDomain() string {$/;"	f	struct:dns.NameServer_PriorityDomain	typeref:typename:string
GetDomain	app/reverse/config.pb.go	/^func (x *BridgeConfig) GetDomain() string {$/;"	f	struct:reverse.BridgeConfig	typeref:typename:string
GetDomain	app/reverse/config.pb.go	/^func (x *PortalConfig) GetDomain() string {$/;"	f	struct:reverse.PortalConfig	typeref:typename:string
GetDomain	app/router/config.pb.go	/^func (x *GeoSite) GetDomain() []*Domain {$/;"	f	struct:router.GeoSite	typeref:typename:[]*Domain
GetDomain	app/router/config.pb.go	/^func (x *RoutingRule) GetDomain() []*Domain {$/;"	f	struct:router.RoutingRule	typeref:typename:[]*Domain
GetDomain	common/net/address.pb.go	/^func (x *IPOrDomain) GetDomain() string {$/;"	f	struct:net.IPOrDomain	typeref:typename:string
GetDomainOverride	app/proxyman/config.pb.go	/^func (x *ReceiverConfig) GetDomainOverride() []KnownProtocols {$/;"	f	struct:proxyman.ReceiverConfig	typeref:typename:[]KnownProtocols
GetDomainStrategy	app/router/config.pb.go	/^func (x *Config) GetDomainStrategy() Config_DomainStrategy {$/;"	f	struct:router.Config	typeref:typename:Config_DomainStrategy
GetDomainStrategy	proxy/freedom/config.pb.go	/^func (x *Config) GetDomainStrategy() Config_DomainStrategy {$/;"	f	struct:freedom.Config	typeref:typename:Config_DomainStrategy
GetDownlinkCapacity	transport/internet/kcp/config.pb.go	/^func (x *Config) GetDownlinkCapacity() *DownlinkCapacity {$/;"	f	struct:kcp.Config	typeref:typename:*DownlinkCapacity
GetDownlinkCapacityValue	transport/internet/kcp/config.go	/^func (c *Config) GetDownlinkCapacityValue() uint32 {$/;"	f	unknown:kcp.Config	typeref:typename:uint32
GetDownlinkOnly	app/policy/config.pb.go	/^func (x *Policy_Timeout) GetDownlinkOnly() *Second {$/;"	f	struct:policy.Policy_Timeout	typeref:typename:*Second
GetEffectiveProtocol	transport/internet/config.go	/^func (c *StreamConfig) GetEffectiveProtocol() string {$/;"	f	unknown:internet.StreamConfig	typeref:typename:string
GetEffectiveSecuritySettings	transport/internet/config.go	/^func (c *StreamConfig) GetEffectiveSecuritySettings() (interface{}, error) {$/;"	f	unknown:internet.StreamConfig	typeref:typename:(interface{}, error)
GetEffectiveSniffingSettings	app/proxyman/config.go	/^func (c *ReceiverConfig) GetEffectiveSniffingSettings() *SniffingConfig {$/;"	f	unknown:proxyman.ReceiverConfig	typeref:typename:*SniffingConfig
GetEffectiveTransportSettings	transport/internet/config.go	/^func (c *StreamConfig) GetEffectiveTransportSettings() (interface{}, error) {$/;"	f	unknown:internet.StreamConfig	typeref:typename:(interface{}, error)
GetEmail	app/proxyman/command/command.pb.go	/^func (x *RemoveUserOperation) GetEmail() string {$/;"	f	struct:command.RemoveUserOperation	typeref:typename:string
GetEmail	common/protocol/user.pb.go	/^func (x *User) GetEmail() string {$/;"	f	struct:protocol.User	typeref:typename:string
GetEnable	transport/internet/kcp/config.pb.go	/^func (x *ConnectionReuse) GetEnable() bool {$/;"	f	struct:kcp.ConnectionReuse	typeref:typename:bool
GetEnabled	app/proxyman/config.pb.go	/^func (x *MultiplexingConfig) GetEnabled() bool {$/;"	f	struct:proxyman.MultiplexingConfig	typeref:typename:bool
GetEnabled	app/proxyman/config.pb.go	/^func (x *SniffingConfig) GetEnabled() bool {$/;"	f	struct:proxyman.SniffingConfig	typeref:typename:bool
GetEncryption	proxy/vless/account.pb.go	/^func (x *Account) GetEncryption() string {$/;"	f	struct:vless.Account	typeref:typename:string
GetEntry	app/router/config.pb.go	/^func (x *GeoIPList) GetEntry() []*GeoIP {$/;"	f	struct:router.GeoIPList	typeref:typename:[]*GeoIP
GetEntry	app/router/config.pb.go	/^func (x *GeoSiteList) GetEntry() []*GeoSite {$/;"	f	struct:router.GeoSiteList	typeref:typename:[]*GeoSite
GetErrorLogLevel	app/log/config.pb.go	/^func (x *Config) GetErrorLogLevel() log.Severity {$/;"	f	struct:log.Config	typeref:typename:log.Severity
GetErrorLogPath	app/log/config.pb.go	/^func (x *Config) GetErrorLogPath() string {$/;"	f	struct:log.Config	typeref:typename:string
GetErrorLogType	app/log/config.pb.go	/^func (x *Config) GetErrorLogType() LogType {$/;"	f	struct:log.Config	typeref:typename:LogType
GetExpire	config.pb.go	/^func (x *OutboundHandlerConfig) GetExpire() int64 {$/;"	f	struct:core.OutboundHandlerConfig	typeref:typename:int64
GetExtension	config.pb.go	/^func (x *Config) GetExtension() []*serial.TypedMessage {$/;"	f	struct:core.Config	typeref:typename:[]*serial.TypedMessage
GetExtension	transport/internet/headers/srtp/config.pb.go	/^func (x *Config) GetExtension() bool {$/;"	f	struct:srtp.Config	typeref:typename:bool
GetFallbacks	proxy/trojan/config.pb.go	/^func (x *ServerConfig) GetFallbacks() []*Fallback {$/;"	f	struct:trojan.ServerConfig	typeref:typename:[]*Fallback
GetFallbacks	proxy/vless/inbound/config.pb.go	/^func (x *Config) GetFallbacks() []*Fallback {$/;"	f	struct:inbound.Config	typeref:typename:[]*Fallback
GetFeature	v2ray.go	/^func (s *Instance) GetFeature(featureType interface{}) features.Feature {$/;"	f	struct:core.Instance	typeref:typename:features.Feature
GetFieldSelectors	app/router/command/command.pb.go	/^func (x *SubscribeRoutingStatsRequest) GetFieldSelectors() []string {$/;"	f	struct:command.SubscribeRoutingStatsRequest	typeref:typename:[]string
GetFieldSelectors	app/router/command/command.pb.go	/^func (x *TestRouteRequest) GetFieldSelectors() []string {$/;"	f	struct:command.TestRouteRequest	typeref:typename:[]string
GetFlow	proxy/vless/account.pb.go	/^func (x *Account) GetFlow() string {$/;"	f	struct:vless.Account	typeref:typename:string
GetFlow	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) GetFlow() string {$/;"	f	struct:encoding.Addons	typeref:typename:string
GetFollowRedirect	proxy/dokodemo/config.pb.go	/^func (x *Config) GetFollowRedirect() bool {$/;"	f	struct:dokodemo.Config	typeref:typename:bool
GetFrees	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) GetFrees() uint64 {$/;"	f	struct:command.SysStatsResponse	typeref:typename:uint64
GetFrom	common/net/port.pb.go	/^func (x *PortRange) GetFrom() uint32 {$/;"	f	struct:net.PortRange	typeref:typename:uint32
GetFullVersion	transport/internet/headers/http/config.go	/^func (v *RequestConfig) GetFullVersion() string {$/;"	f	unknown:http.RequestConfig	typeref:typename:string
GetFullVersion	transport/internet/headers/http/config.go	/^func (v *ResponseConfig) GetFullVersion() string {$/;"	f	unknown:http.ResponseConfig	typeref:typename:string
GetGOBIN	common/common.go	/^func GetGOBIN() string {$/;"	f	package:common	typeref:typename:string
GetGOPATH	common/common.go	/^func GetGOPATH() string {$/;"	f	package:common	typeref:typename:string
GetGeoip	app/dns/config.pb.go	/^func (x *NameServer) GetGeoip() []*router.GeoIP {$/;"	f	struct:dns.NameServer	typeref:typename:[]*router.GeoIP
GetGeoip	app/router/config.pb.go	/^func (x *RoutingRule) GetGeoip() []*GeoIP {$/;"	f	struct:router.RoutingRule	typeref:typename:[]*GeoIP
GetGossip	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) GetGossip() bool {$/;"	f	struct:wire.MessageData	typeref:typename:bool
GetHandler	app/proxyman/inbound/inbound.go	/^func (m *Manager) GetHandler(ctx context.Context, tag string) (inbound.Handler, error) {$/;"	f	struct:inbound.Manager	typeref:typename:(inbound.Handler, error)
GetHandler	app/proxyman/outbound/outbound.go	/^func (m *Manager) GetHandler(tag string) outbound.Handler {$/;"	f	struct:outbound.Manager	typeref:typename:outbound.Handler
GetHandler	features/inbound/inbound.go	/^	GetHandler(ctx context.Context, tag string) (Handler, error)$/;"	n	interface:inbound.Manager	typeref:typename:(Handler, error)
GetHandler	features/outbound/outbound.go	/^	GetHandler(tag string) Handler$/;"	n	interface:outbound.Manager	typeref:typename:Handler
GetHandler	testing/mocks/outbound.go	/^func (m *OutboundManager) GetHandler(arg0 string) outbound.Handler {$/;"	f	struct:mocks.OutboundManager	typeref:typename:outbound.Handler
GetHandler	testing/mocks/outbound.go	/^func (mr *OutboundManagerMockRecorder) GetHandler(arg0 interface{}) *gomock.Call {$/;"	f	struct:mocks.OutboundManagerMockRecorder	typeref:typename:*gomock.Call
GetHandshake	app/policy/config.pb.go	/^func (x *Policy_Timeout) GetHandshake() *Second {$/;"	f	struct:policy.Policy_Timeout	typeref:typename:*Second
GetHeader	transport/internet/headers/http/config.pb.go	/^func (x *RequestConfig) GetHeader() []*Header {$/;"	f	struct:http.RequestConfig	typeref:typename:[]*Header
GetHeader	transport/internet/headers/http/config.pb.go	/^func (x *ResponseConfig) GetHeader() []*Header {$/;"	f	struct:http.ResponseConfig	typeref:typename:[]*Header
GetHeader	transport/internet/quic/config.pb.go	/^func (x *Config) GetHeader() *serial.TypedMessage {$/;"	f	struct:quic.Config	typeref:typename:*serial.TypedMessage
GetHeader	transport/internet/websocket/config.pb.go	/^func (x *Config) GetHeader() []*Header {$/;"	f	struct:websocket.Config	typeref:typename:[]*Header
GetHeaderConfig	transport/internet/kcp/config.pb.go	/^func (x *Config) GetHeaderConfig() *serial.TypedMessage {$/;"	f	struct:kcp.Config	typeref:typename:*serial.TypedMessage
GetHeaderSettings	transport/internet/tcp/config.pb.go	/^func (x *Config) GetHeaderSettings() *serial.TypedMessage {$/;"	f	struct:tcp.Config	typeref:typename:*serial.TypedMessage
GetHost	transport/internet/http/config.pb.go	/^func (x *Config) GetHost() []string {$/;"	f	struct:http.Config	typeref:typename:[]string
GetHostID	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) GetHostID() string {$/;"	f	struct:wire.SeedInfo	typeref:typename:string
GetHosts	app/dns/config.pb.go	/^func (x *Config) GetHosts() map[string]*net.IPOrDomain {$/;"	f	struct:dns.Config	typeref:typename:map[string]*net.IPOrDomain
GetId	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) GetId() string {$/;"	f	struct:wire.MessageData	typeref:typename:string
GetId	proxy/vless/account.pb.go	/^func (x *Account) GetId() string {$/;"	f	struct:vless.Account	typeref:typename:string
GetId	proxy/vmess/account.pb.go	/^func (x *Account) GetId() string {$/;"	f	struct:vmess.Account	typeref:typename:string
GetInbound	app/proxyman/command/command.pb.go	/^func (x *AddInboundRequest) GetInbound() *core.InboundHandlerConfig {$/;"	f	struct:command.AddInboundRequest	typeref:typename:*core.InboundHandlerConfig
GetInbound	app/proxyman/inbound/always.go	/^func (h *AlwaysOnInboundHandler) GetInbound() proxy.Inbound {$/;"	f	struct:inbound.AlwaysOnInboundHandler	typeref:typename:proxy.Inbound
GetInbound	config.pb.go	/^func (x *Config) GetInbound() []*InboundHandlerConfig {$/;"	f	struct:core.Config	typeref:typename:[]*InboundHandlerConfig
GetInbound	proxy/proxy.go	/^	GetInbound() Inbound$/;"	n	interface:proxy.GetInbound	typeref:typename:Inbound
GetInbound	proxy/proxy.go	/^type GetInbound interface {$/;"	i	package:proxy
GetInboundDownlink	app/policy/config.pb.go	/^func (x *SystemPolicy_Stats) GetInboundDownlink() bool {$/;"	f	struct:policy.SystemPolicy_Stats	typeref:typename:bool
GetInboundTag	app/router/command/command.pb.go	/^func (x *RoutingContext) GetInboundTag() string {$/;"	f	struct:command.RoutingContext	typeref:typename:string
GetInboundTag	app/router/config.pb.go	/^func (x *RoutingRule) GetInboundTag() []string {$/;"	f	struct:router.RoutingRule	typeref:typename:[]string
GetInboundTag	features/routing/context.go	/^	GetInboundTag() string$/;"	n	interface:routing.Context	typeref:typename:string
GetInboundTag	features/routing/session/context.go	/^func (ctx *Context) GetInboundTag() string {$/;"	f	struct:session.Context	typeref:typename:string
GetInboundUplink	app/policy/config.pb.go	/^func (x *SystemPolicy_Stats) GetInboundUplink() bool {$/;"	f	struct:policy.SystemPolicy_Stats	typeref:typename:bool
GetInstance	common/serial/typed_message.go	/^func (v *TypedMessage) GetInstance() (proto.Message, error) {$/;"	f	unknown:serial.TypedMessage	typeref:typename:(proto.Message, error)
GetInstance	common/serial/typed_message.go	/^func GetInstance(messageType string) (interface{}, error) {$/;"	f	package:serial	typeref:typename:(interface{}, error)
GetIntValue	app/router/config.pb.go	/^func (x *Domain_Attribute) GetIntValue() int64 {$/;"	f	struct:router.Domain_Attribute	typeref:typename:int64
GetInternalResponse	proxy/blackhole/config.go	/^func (c *Config) GetInternalResponse() (ResponseConfig, error) {$/;"	f	unknown:blackhole.Config	typeref:typename:(ResponseConfig, error)
GetIp	app/dns/config.pb.go	/^func (x *Config_HostMapping) GetIp() [][]byte {$/;"	f	struct:dns.Config_HostMapping	typeref:typename:[][]byte
GetIp	app/p2p/config.pb.go	/^func (m *Config) GetIp() string {$/;"	f	struct:p2p.Config	typeref:typename:string
GetIp	app/p2p/config.pb.go	/^func (m *Seed) GetIp() string {$/;"	f	struct:p2p.Seed	typeref:typename:string
GetIp	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) GetIp() string {$/;"	f	struct:wire.SeedInfo	typeref:typename:string
GetIp	app/router/config.pb.go	/^func (x *CIDR) GetIp() []byte {$/;"	f	struct:router.CIDR	typeref:typename:[]byte
GetIp	common/net/address.pb.go	/^func (x *IPOrDomain) GetIp() []byte {$/;"	f	struct:net.IPOrDomain	typeref:typename:[]byte
GetKey	app/router/config.pb.go	/^func (x *Domain_Attribute) GetKey() string {$/;"	f	struct:router.Domain_Attribute	typeref:typename:string
GetKey	transport/internet/quic/config.pb.go	/^func (x *Config) GetKey() string {$/;"	f	struct:quic.Config	typeref:typename:string
GetKey	transport/internet/tls/config.pb.go	/^func (x *Certificate) GetKey() []byte {$/;"	f	struct:tls.Certificate	typeref:typename:[]byte
GetKey	transport/internet/websocket/config.pb.go	/^func (x *Header) GetKey() string {$/;"	f	struct:websocket.Header	typeref:typename:string
GetKey	transport/internet/xtls/config.pb.go	/^func (x *Certificate) GetKey() []byte {$/;"	f	struct:xtls.Certificate	typeref:typename:[]byte
GetLevel	app/policy/config.pb.go	/^func (x *Config) GetLevel() map[uint32]*Policy {$/;"	f	struct:policy.Config	typeref:typename:map[uint32]*Policy
GetLevel	common/protocol/user.pb.go	/^func (x *User) GetLevel() uint32 {$/;"	f	struct:protocol.User	typeref:typename:uint32
GetLevel	proxy/vmess/inbound/config.pb.go	/^func (x *DefaultConfig) GetLevel() uint32 {$/;"	f	struct:inbound.DefaultConfig	typeref:typename:uint32
GetListen	app/proxyman/config.pb.go	/^func (x *ReceiverConfig) GetListen() *net.IPOrDomain {$/;"	f	struct:proxyman.ReceiverConfig	typeref:typename:*net.IPOrDomain
GetLiveObjects	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) GetLiveObjects() uint64 {$/;"	f	struct:command.SysStatsResponse	typeref:typename:uint64
GetMTUValue	transport/internet/kcp/config.go	/^func (c *Config) GetMTUValue() uint32 {$/;"	f	unknown:kcp.Config	typeref:typename:uint32
GetMallocs	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) GetMallocs() uint64 {$/;"	f	struct:command.SysStatsResponse	typeref:typename:uint64
GetMark	transport/internet/config.pb.go	/^func (x *SocketConfig) GetMark() int32 {$/;"	f	struct:internet.SocketConfig	typeref:typename:int32
GetMarker	transport/internet/headers/srtp/config.pb.go	/^func (x *Config) GetMarker() bool {$/;"	f	struct:srtp.Config	typeref:typename:bool
GetMessage	app/p2p/wire/notifier.pb.go	/^func (m *HelloReply) GetMessage() string {$/;"	f	struct:wire.HelloReply	typeref:typename:string
GetMessage	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListRequest) GetMessage() string {$/;"	f	struct:wire.SeedListRequest	typeref:typename:string
GetMessage	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListResponse) GetMessage() string {$/;"	f	struct:wire.SeedListResponse	typeref:typename:string
GetMessageData	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListRequest) GetMessageData() *MessageData {$/;"	f	struct:wire.SeedListRequest	typeref:typename:*MessageData
GetMessageData	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListResponse) GetMessageData() *MessageData {$/;"	f	struct:wire.SeedListResponse	typeref:typename:*MessageData
GetMessageType	common/serial/typed_message.go	/^func GetMessageType(message proto.Message) string {$/;"	f	package:serial	typeref:typename:string
GetMethod	transport/internet/headers/http/config.pb.go	/^func (x *RequestConfig) GetMethod() *Method {$/;"	f	struct:http.RequestConfig	typeref:typename:*Method
GetMethodValue	transport/internet/headers/http/config.go	/^func (v *RequestConfig) GetMethodValue() string {$/;"	f	unknown:http.RequestConfig	typeref:typename:string
GetModuleName	common/common.go	/^func GetModuleName(pathToProjectRoot string) (string, error) {$/;"	f	package:common	typeref:typename:(string, error)
GetMtu	transport/internet/kcp/config.pb.go	/^func (x *Config) GetMtu() *MTU {$/;"	f	struct:kcp.Config	typeref:typename:*MTU
GetMultiplexSettings	app/proxyman/config.pb.go	/^func (x *SenderConfig) GetMultiplexSettings() *MultiplexingConfig {$/;"	f	struct:proxyman.SenderConfig	typeref:typename:*MultiplexingConfig
GetName	app/p2p/wire/notifier.pb.go	/^func (m *HelloRequest) GetName() string {$/;"	f	struct:wire.HelloRequest	typeref:typename:string
GetName	app/stats/command/command.pb.go	/^func (x *GetStatsRequest) GetName() string {$/;"	f	struct:command.GetStatsRequest	typeref:typename:string
GetName	app/stats/command/command.pb.go	/^func (x *Stat) GetName() string {$/;"	f	struct:command.Stat	typeref:typename:string
GetName	transport/internet/headers/http/config.pb.go	/^func (x *Header) GetName() string {$/;"	f	struct:http.Header	typeref:typename:string
GetNameServer	app/dns/config.pb.go	/^func (x *Config) GetNameServer() []*NameServer {$/;"	f	struct:dns.Config	typeref:typename:[]*NameServer
GetNameServers	app/dns/config.pb.go	/^func (x *Config) GetNameServers() []*net.Endpoint {$/;"	f	struct:dns.Config	typeref:typename:[]*net.Endpoint
GetNetwork	app/router/command/command.pb.go	/^func (x *RoutingContext) GetNetwork() net.Network {$/;"	f	struct:command.RoutingContext	typeref:typename:net.Network
GetNetwork	common/net/destination.pb.go	/^func (x *Endpoint) GetNetwork() Network {$/;"	f	struct:net.Endpoint	typeref:typename:Network
GetNetwork	common/net/network.pb.go	/^func (x *NetworkList) GetNetwork() []Network {$/;"	f	struct:net.NetworkList	typeref:typename:[]Network
GetNetwork	features/routing/context.go	/^	GetNetwork() net.Network$/;"	n	interface:routing.Context	typeref:typename:net.Network
GetNetwork	features/routing/session/context.go	/^func (ctx *Context) GetNetwork() net.Network {$/;"	f	struct:session.Context	typeref:typename:net.Network
GetNetwork	proxy/shadowsocks/config.pb.go	/^func (x *ServerConfig) GetNetwork() []net.Network {$/;"	f	struct:shadowsocks.ServerConfig	typeref:typename:[]net.Network
GetNetworkList	app/router/config.pb.go	/^func (x *RoutingRule) GetNetworkList() *net.NetworkList {$/;"	f	struct:router.RoutingRule	typeref:typename:*net.NetworkList
GetNetworkList	proxy/dokodemo/config.pb.go	/^func (x *Config) GetNetworkList() *net.NetworkList {$/;"	f	struct:dokodemo.Config	typeref:typename:*net.NetworkList
GetNetworks	app/router/config.pb.go	/^func (x *RoutingRule) GetNetworks() []net.Network {$/;"	f	struct:router.RoutingRule	typeref:typename:[]net.Network
GetNetworks	proxy/dokodemo/config.pb.go	/^func (x *Config) GetNetworks() []net.Network {$/;"	f	struct:dokodemo.Config	typeref:typename:[]net.Network
GetNextProtocol	transport/internet/tls/config.pb.go	/^func (x *Config) GetNextProtocol() []string {$/;"	f	struct:tls.Config	typeref:typename:[]string
GetNextProtocol	transport/internet/xtls/config.pb.go	/^func (x *Config) GetNextProtocol() []string {$/;"	f	struct:xtls.Config	typeref:typename:[]string
GetNodeId	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) GetNodeId() string {$/;"	f	struct:wire.MessageData	typeref:typename:string
GetNodePubKey	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) GetNodePubKey() []byte {$/;"	f	struct:wire.MessageData	typeref:typename:[]byte
GetNonce	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) GetNonce() string {$/;"	f	struct:wire.HelloSeedList	typeref:typename:string
GetNormalizedPath	transport/internet/websocket/config.go	/^func (c *Config) GetNormalizedPath() string {$/;"	f	unknown:websocket.Config	typeref:typename:string
GetNumGC	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) GetNumGC() uint32 {$/;"	f	struct:command.SysStatsResponse	typeref:typename:uint32
GetNumGoroutine	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) GetNumGoroutine() uint32 {$/;"	f	struct:command.SysStatsResponse	typeref:typename:uint32
GetOperation	app/proxyman/command/command.pb.go	/^func (x *AlterInboundRequest) GetOperation() *serial.TypedMessage {$/;"	f	struct:command.AlterInboundRequest	typeref:typename:*serial.TypedMessage
GetOperation	app/proxyman/command/command.pb.go	/^func (x *AlterOutboundRequest) GetOperation() *serial.TypedMessage {$/;"	f	struct:command.AlterOutboundRequest	typeref:typename:*serial.TypedMessage
GetOrRegisterChannel	features/stats/stats.go	/^func GetOrRegisterChannel(m Manager, name string) (Channel, error) {$/;"	f	package:stats	typeref:typename:(Channel, error)
GetOrRegisterCounter	features/stats/stats.go	/^func GetOrRegisterCounter(m Manager, name string) (Counter, error) {$/;"	f	package:stats	typeref:typename:(Counter, error)
GetOriginalDestination	transport/internet/tcp/sockopt_freebsd.go	/^func GetOriginalDestination(conn internet.Connection) (net.Destination, error) {$/;"	f	package:tcp	typeref:typename:(net.Destination, error)
GetOriginalDestination	transport/internet/tcp/sockopt_linux.go	/^func GetOriginalDestination(conn internet.Connection) (net.Destination, error) {$/;"	f	package:tcp	typeref:typename:(net.Destination, error)
GetOriginalDestination	transport/internet/tcp/sockopt_other.go	/^func GetOriginalDestination(conn internet.Connection) (net.Destination, error) {$/;"	f	package:tcp	typeref:typename:(net.Destination, error)
GetOriginalRules	app/dns/config.pb.go	/^func (x *NameServer) GetOriginalRules() []*NameServer_OriginalRule {$/;"	f	struct:dns.NameServer	typeref:typename:[]*NameServer_OriginalRule
GetOutbound	app/proxyman/command/command.pb.go	/^func (x *AddOutboundRequest) GetOutbound() *core.OutboundHandlerConfig {$/;"	f	struct:command.AddOutboundRequest	typeref:typename:*core.OutboundHandlerConfig
GetOutbound	app/proxyman/outbound/handler.go	/^func (h *Handler) GetOutbound() proxy.Outbound {$/;"	f	struct:outbound.Handler	typeref:typename:proxy.Outbound
GetOutbound	config.pb.go	/^func (x *Config) GetOutbound() []*OutboundHandlerConfig {$/;"	f	struct:core.Config	typeref:typename:[]*OutboundHandlerConfig
GetOutbound	proxy/proxy.go	/^	GetOutbound() Outbound$/;"	n	interface:proxy.GetOutbound	typeref:typename:Outbound
GetOutbound	proxy/proxy.go	/^type GetOutbound interface {$/;"	i	package:proxy
GetOutboundDownlink	app/policy/config.pb.go	/^func (x *SystemPolicy_Stats) GetOutboundDownlink() bool {$/;"	f	struct:policy.SystemPolicy_Stats	typeref:typename:bool
GetOutboundGroupTags	app/router/command/command.pb.go	/^func (x *RoutingContext) GetOutboundGroupTags() []string {$/;"	f	struct:command.RoutingContext	typeref:typename:[]string
GetOutboundGroupTags	app/router/router.go	/^func (r *Route) GetOutboundGroupTags() []string {$/;"	f	struct:router.Route	typeref:typename:[]string
GetOutboundGroupTags	features/routing/router.go	/^	GetOutboundGroupTags() []string$/;"	n	interface:routing.Route	typeref:typename:[]string
GetOutboundSelector	app/router/config.pb.go	/^func (x *BalancingRule) GetOutboundSelector() []string {$/;"	f	struct:router.BalancingRule	typeref:typename:[]string
GetOutboundTag	app/router/command/command.pb.go	/^func (x *RoutingContext) GetOutboundTag() string {$/;"	f	struct:command.RoutingContext	typeref:typename:string
GetOutboundTag	app/router/router.go	/^func (r *Route) GetOutboundTag() string {$/;"	f	struct:router.Route	typeref:typename:string
GetOutboundTag	features/routing/router.go	/^	GetOutboundTag() string$/;"	n	interface:routing.Route	typeref:typename:string
GetOutboundUplink	app/policy/config.pb.go	/^func (x *SystemPolicy_Stats) GetOutboundUplink() bool {$/;"	f	struct:policy.SystemPolicy_Stats	typeref:typename:bool
GetPackerHeader	transport/internet/kcp/config.go	/^func (c *Config) GetPackerHeader() (internet.PacketHeader, error) {$/;"	f	unknown:kcp.Config	typeref:typename:(internet.PacketHeader, error)
GetPadding	transport/internet/domainsocket/config.pb.go	/^func (x *Config) GetPadding() bool {$/;"	f	struct:domainsocket.Config	typeref:typename:bool
GetPadding	transport/internet/headers/srtp/config.pb.go	/^func (x *Config) GetPadding() bool {$/;"	f	struct:srtp.Config	typeref:typename:bool
GetPassword	proxy/http/config.pb.go	/^func (x *Account) GetPassword() string {$/;"	f	struct:http.Account	typeref:typename:string
GetPassword	proxy/shadowsocks/config.pb.go	/^func (x *Account) GetPassword() string {$/;"	f	struct:shadowsocks.Account	typeref:typename:string
GetPassword	proxy/socks/config.pb.go	/^func (x *Account) GetPassword() string {$/;"	f	struct:socks.Account	typeref:typename:string
GetPassword	proxy/trojan/config.pb.go	/^func (x *Account) GetPassword() string {$/;"	f	struct:trojan.Account	typeref:typename:string
GetPath	proxy/trojan/config.pb.go	/^func (x *Fallback) GetPath() string {$/;"	f	struct:trojan.Fallback	typeref:typename:string
GetPath	proxy/vless/inbound/config.pb.go	/^func (x *Fallback) GetPath() string {$/;"	f	struct:inbound.Fallback	typeref:typename:string
GetPath	transport/internet/domainsocket/config.pb.go	/^func (x *Config) GetPath() string {$/;"	f	struct:domainsocket.Config	typeref:typename:string
GetPath	transport/internet/http/config.pb.go	/^func (x *Config) GetPath() string {$/;"	f	struct:http.Config	typeref:typename:string
GetPath	transport/internet/websocket/config.pb.go	/^func (x *Config) GetPath() string {$/;"	f	struct:websocket.Config	typeref:typename:string
GetPattern	app/stats/command/command.pb.go	/^func (x *QueryStatsRequest) GetPattern() string {$/;"	f	struct:command.QueryStatsRequest	typeref:typename:string
GetPauseTotalNs	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) GetPauseTotalNs() uint64 {$/;"	f	struct:command.SysStatsResponse	typeref:typename:uint64
GetPayloadType	transport/internet/headers/srtp/config.pb.go	/^func (x *Config) GetPayloadType() uint32 {$/;"	f	struct:srtp.Config	typeref:typename:uint32
GetPluginDirectory	common/platform/platform.go	/^func GetPluginDirectory() string {$/;"	f	package:platform	typeref:typename:string
GetPool	common/bytespool/pool.go	/^func GetPool(size int32) *sync.Pool {$/;"	f	package:bytespool	typeref:typename:*sync.Pool
GetPort	app/p2p/config.pb.go	/^func (m *Config) GetPort() int32 {$/;"	f	struct:p2p.Config	typeref:typename:int32
GetPort	app/p2p/config.pb.go	/^func (m *Seed) GetPort() int32 {$/;"	f	struct:p2p.Seed	typeref:typename:int32
GetPort	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) GetPort() int32 {$/;"	f	struct:wire.SeedInfo	typeref:typename:int32
GetPort	common/net/destination.pb.go	/^func (x *Endpoint) GetPort() uint32 {$/;"	f	struct:net.Endpoint	typeref:typename:uint32
GetPort	common/protocol/server_spec.pb.go	/^func (x *ServerEndpoint) GetPort() uint32 {$/;"	f	struct:protocol.ServerEndpoint	typeref:typename:uint32
GetPort	proxy/dokodemo/config.pb.go	/^func (x *Config) GetPort() uint32 {$/;"	f	struct:dokodemo.Config	typeref:typename:uint32
GetPortList	app/router/config.pb.go	/^func (x *RoutingRule) GetPortList() *net.PortList {$/;"	f	struct:router.RoutingRule	typeref:typename:*net.PortList
GetPortRange	app/proxyman/config.pb.go	/^func (x *ReceiverConfig) GetPortRange() *net.PortRange {$/;"	f	struct:proxyman.ReceiverConfig	typeref:typename:*net.PortRange
GetPortRange	app/router/config.pb.go	/^func (x *RoutingRule) GetPortRange() *net.PortRange {$/;"	f	struct:router.RoutingRule	typeref:typename:*net.PortRange
GetPortalConfig	app/reverse/config.pb.go	/^func (x *Config) GetPortalConfig() []*PortalConfig {$/;"	f	struct:reverse.Config	typeref:typename:[]*PortalConfig
GetPredefinedAddress	proxy/dokodemo/config.go	/^func (v *Config) GetPredefinedAddress() net.Address {$/;"	f	unknown:dokodemo.Config	typeref:typename:net.Address
GetPrefix	app/router/config.pb.go	/^func (x *CIDR) GetPrefix() uint32 {$/;"	f	struct:router.CIDR	typeref:typename:uint32
GetPrioritizedDomain	app/dns/config.pb.go	/^func (x *NameServer) GetPrioritizedDomain() []*NameServer_PriorityDomain {$/;"	f	struct:dns.NameServer	typeref:typename:[]*NameServer_PriorityDomain
GetPrivKey	app/p2p/account/account.go	/^func (this *Account) GetPrivKey() crypto.PrivKey {$/;"	f	struct:account.Account	typeref:typename:crypto.PrivKey
GetProtocol	app/p2p/config.pb.go	/^func (m *Config) GetProtocol() string {$/;"	f	struct:p2p.Config	typeref:typename:string
GetProtocol	app/p2p/config.pb.go	/^func (m *Seed) GetProtocol() string {$/;"	f	struct:p2p.Seed	typeref:typename:string
GetProtocol	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) GetProtocol() string {$/;"	f	struct:wire.SeedInfo	typeref:typename:string
GetProtocol	app/router/command/command.pb.go	/^func (x *RoutingContext) GetProtocol() string {$/;"	f	struct:command.RoutingContext	typeref:typename:string
GetProtocol	app/router/config.pb.go	/^func (x *RoutingRule) GetProtocol() []string {$/;"	f	struct:router.RoutingRule	typeref:typename:[]string
GetProtocol	features/routing/context.go	/^	GetProtocol() string$/;"	n	interface:routing.Context	typeref:typename:string
GetProtocol	features/routing/session/context.go	/^func (ctx *Context) GetProtocol() string {$/;"	f	struct:session.Context	typeref:typename:string
GetProtocol	transport/internet/config.pb.go	/^func (x *StreamConfig) GetProtocol() TransportProtocol {$/;"	f	struct:internet.StreamConfig	typeref:typename:TransportProtocol
GetProtocol	transport/internet/config.pb.go	/^func (x *TransportConfig) GetProtocol() TransportProtocol {$/;"	f	struct:internet.TransportConfig	typeref:typename:TransportProtocol
GetProtocolName	transport/internet/config.pb.go	/^func (x *StreamConfig) GetProtocolName() string {$/;"	f	struct:internet.StreamConfig	typeref:typename:string
GetProtocolName	transport/internet/config.pb.go	/^func (x *TransportConfig) GetProtocolName() string {$/;"	f	struct:internet.TransportConfig	typeref:typename:string
GetProxiedDomain	app/dns/config.pb.go	/^func (x *Config_HostMapping) GetProxiedDomain() string {$/;"	f	struct:dns.Config_HostMapping	typeref:typename:string
GetProxySettings	app/proxyman/config.pb.go	/^func (x *InboundHandlerConfig) GetProxySettings() *serial.TypedMessage {$/;"	f	struct:proxyman.InboundHandlerConfig	typeref:typename:*serial.TypedMessage
GetProxySettings	app/proxyman/config.pb.go	/^func (x *SenderConfig) GetProxySettings() *internet.ProxyConfig {$/;"	f	struct:proxyman.SenderConfig	typeref:typename:*internet.ProxyConfig
GetProxySettings	config.pb.go	/^func (x *InboundHandlerConfig) GetProxySettings() *serial.TypedMessage {$/;"	f	struct:core.InboundHandlerConfig	typeref:typename:*serial.TypedMessage
GetProxySettings	config.pb.go	/^func (x *OutboundHandlerConfig) GetProxySettings() *serial.TypedMessage {$/;"	f	struct:core.OutboundHandlerConfig	typeref:typename:*serial.TypedMessage
GetPubId	app/p2p/config.pb.go	/^func (m *Config) GetPubId() string {$/;"	f	struct:p2p.Config	typeref:typename:string
GetPubId	app/p2p/config.pb.go	/^func (m *Seed) GetPubId() string {$/;"	f	struct:p2p.Seed	typeref:typename:string
GetPublishResult	app/router/command/command.pb.go	/^func (x *TestRouteRequest) GetPublishResult() bool {$/;"	f	struct:command.TestRouteRequest	typeref:typename:bool
GetRandom	app/reverse/config.pb.go	/^func (x *Control) GetRandom() []byte {$/;"	f	struct:reverse.Control	typeref:typename:[]byte
GetRandomInboundProxy	app/proxyman/inbound/always.go	/^func (h *AlwaysOnInboundHandler) GetRandomInboundProxy() (interface{}, net.Port, int) {$/;"	f	struct:inbound.AlwaysOnInboundHandler	typeref:typename:(interface{}, net.Port, int)
GetRandomInboundProxy	app/proxyman/inbound/dynamic.go	/^func (h *DynamicInboundHandler) GetRandomInboundProxy() (interface{}, net.Port, int) {$/;"	f	struct:inbound.DynamicInboundHandler	typeref:typename:(interface{}, net.Port, int)
GetRandomInboundProxy	features/inbound/inbound.go	/^	GetRandomInboundProxy() (interface{}, net.Port, int)$/;"	n	interface:inbound.Handler	typeref:typename:(interface{}, net.Port, int)
GetRange	common/net/port.pb.go	/^func (x *PortList) GetRange() []*PortRange {$/;"	f	struct:net.PortList	typeref:typename:[]*PortRange
GetReadBuffer	transport/internet/kcp/config.pb.go	/^func (x *Config) GetReadBuffer() *ReadBuffer {$/;"	f	struct:kcp.Config	typeref:typename:*ReadBuffer
GetReadBufferSize	transport/internet/kcp/config.go	/^func (c *Config) GetReadBufferSize() uint32 {$/;"	f	unknown:kcp.Config	typeref:typename:uint32
GetReason	transport/internet/headers/http/config.pb.go	/^func (x *Status) GetReason() string {$/;"	f	struct:http.Status	typeref:typename:string
GetReceiveOriginalDestAddress	transport/internet/config.pb.go	/^func (x *SocketConfig) GetReceiveOriginalDestAddress() bool {$/;"	f	struct:internet.SocketConfig	typeref:typename:bool
GetReceiveOriginalDestination	app/proxyman/config.pb.go	/^func (x *ReceiverConfig) GetReceiveOriginalDestination() bool {$/;"	f	struct:proxyman.ReceiverConfig	typeref:typename:bool
GetReceiver	proxy/vmess/outbound/config.pb.go	/^func (x *Config) GetReceiver() []*protocol.ServerEndpoint {$/;"	f	struct:outbound.Config	typeref:typename:[]*protocol.ServerEndpoint
GetReceiverSettings	app/proxyman/config.pb.go	/^func (x *InboundHandlerConfig) GetReceiverSettings() *serial.TypedMessage {$/;"	f	struct:proxyman.InboundHandlerConfig	typeref:typename:*serial.TypedMessage
GetReceiverSettings	config.pb.go	/^func (x *InboundHandlerConfig) GetReceiverSettings() *serial.TypedMessage {$/;"	f	struct:core.InboundHandlerConfig	typeref:typename:*serial.TypedMessage
GetReceivingBufferSize	transport/internet/kcp/config.go	/^func (c *Config) GetReceivingBufferSize() uint32 {$/;"	f	unknown:kcp.Config	typeref:typename:uint32
GetReceivingInFlightSize	transport/internet/kcp/config.go	/^func (c *Config) GetReceivingInFlightSize() uint32 {$/;"	f	unknown:kcp.Config	typeref:typename:uint32
GetRefresh	app/proxyman/config.pb.go	/^func (x *AllocationStrategy) GetRefresh() *AllocationStrategy_AllocationStrategyRefresh {$/;"	f	struct:proxyman.AllocationStrategy	typeref:typename:*AllocationStrategy_AllocationStrategyRefresh
GetRefreshValue	app/proxyman/config.go	/^func (s *AllocationStrategy) GetRefreshValue() uint32 {$/;"	f	unknown:proxyman.AllocationStrategy	typeref:typename:uint32
GetRequest	transport/internet/headers/http/config.pb.go	/^func (x *Config) GetRequest() *RequestConfig {$/;"	f	struct:http.Config	typeref:typename:*RequestConfig
GetRequestHeader	transport/internet/websocket/config.go	/^func (c *Config) GetRequestHeader() http.Header {$/;"	f	unknown:websocket.Config	typeref:typename:http.Header
GetReset_	app/stats/command/command.pb.go	/^func (x *GetStatsRequest) GetReset_() bool {$/;"	f	struct:command.GetStatsRequest	typeref:typename:bool
GetReset_	app/stats/command/command.pb.go	/^func (x *QueryStatsRequest) GetReset_() bool {$/;"	f	struct:command.QueryStatsRequest	typeref:typename:bool
GetResponse	proxy/blackhole/config.pb.go	/^func (x *Config) GetResponse() *serial.TypedMessage {$/;"	f	struct:blackhole.Config	typeref:typename:*serial.TypedMessage
GetResponse	transport/internet/headers/http/config.pb.go	/^func (x *Config) GetResponse() *ResponseConfig {$/;"	f	struct:http.Config	typeref:typename:*ResponseConfig
GetRoutingContext	app/router/command/command.pb.go	/^func (x *TestRouteRequest) GetRoutingContext() *RoutingContext {$/;"	f	struct:command.TestRouteRequest	typeref:typename:*RoutingContext
GetRule	app/dns/config.pb.go	/^func (x *NameServer_OriginalRule) GetRule() string {$/;"	f	struct:dns.NameServer_OriginalRule	typeref:typename:string
GetRule	app/router/config.pb.go	/^func (x *Config) GetRule() []*RoutingRule {$/;"	f	struct:router.Config	typeref:typename:[]*RoutingRule
GetRuntimeEnv	common/common.go	/^func GetRuntimeEnv(key string) (string, error) {$/;"	f	package:common	typeref:typename:(string, error)
GetSecret	proxy/mtproto/config.pb.go	/^func (x *Account) GetSecret() []byte {$/;"	f	struct:mtproto.Account	typeref:typename:[]byte
GetSecureEncryptionOnly	proxy/vmess/inbound/config.pb.go	/^func (x *Config) GetSecureEncryptionOnly() bool {$/;"	f	struct:inbound.Config	typeref:typename:bool
GetSecurity	transport/internet/kcp/config.go	/^func (c *Config) GetSecurity() (cipher.AEAD, error) {$/;"	f	unknown:kcp.Config	typeref:typename:(cipher.AEAD, error)
GetSecurity	transport/internet/quic/config.pb.go	/^func (x *Config) GetSecurity() *protocol.SecurityConfig {$/;"	f	struct:quic.Config	typeref:typename:*protocol.SecurityConfig
GetSecuritySettings	proxy/vmess/account.pb.go	/^func (x *Account) GetSecuritySettings() *protocol.SecurityConfig {$/;"	f	struct:vmess.Account	typeref:typename:*protocol.SecurityConfig
GetSecuritySettings	transport/internet/config.pb.go	/^func (x *StreamConfig) GetSecuritySettings() []*serial.TypedMessage {$/;"	f	struct:internet.StreamConfig	typeref:typename:[]*serial.TypedMessage
GetSecurityType	common/protocol/headers.go	/^func (sc *SecurityConfig) GetSecurityType() SecurityType {$/;"	f	unknown:protocol.SecurityConfig	typeref:typename:SecurityType
GetSecurityType	transport/internet/config.pb.go	/^func (x *StreamConfig) GetSecurityType() string {$/;"	f	struct:internet.StreamConfig	typeref:typename:string
GetSeed	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) GetSeed() *SeedInfo {$/;"	f	struct:wire.HelloSeedList	typeref:typename:*SeedInfo
GetSeed	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) GetSeed() []byte {$/;"	f	struct:encoding.Addons	typeref:typename:[]byte
GetSeed	transport/internet/kcp/config.pb.go	/^func (x *Config) GetSeed() *EncryptionSeed {$/;"	f	struct:kcp.Config	typeref:typename:*EncryptionSeed
GetSeed	transport/internet/kcp/config.pb.go	/^func (x *EncryptionSeed) GetSeed() string {$/;"	f	struct:kcp.EncryptionSeed	typeref:typename:string
GetSeedlist	app/p2p/config.pb.go	/^func (m *Config) GetSeedlist() []*Seed {$/;"	f	struct:p2p.Config	typeref:typename:[]*Seed
GetSenderSettings	config.pb.go	/^func (x *OutboundHandlerConfig) GetSenderSettings() *serial.TypedMessage {$/;"	f	struct:core.OutboundHandlerConfig	typeref:typename:*serial.TypedMessage
GetSendingBufferSize	transport/internet/kcp/config.go	/^func (c *Config) GetSendingBufferSize() uint32 {$/;"	f	unknown:kcp.Config	typeref:typename:uint32
GetSendingInFlightSize	transport/internet/kcp/config.go	/^func (c *Config) GetSendingInFlightSize() uint32 {$/;"	f	unknown:kcp.Config	typeref:typename:uint32
GetServer	common/protocol/server_picker.go	/^func (sl *ServerList) GetServer(idx uint32) *ServerSpec {$/;"	f	struct:protocol.ServerList	typeref:typename:*ServerSpec
GetServer	proxy/dns/config.pb.go	/^func (x *Config) GetServer() *net.Endpoint {$/;"	f	struct:dns.Config	typeref:typename:*net.Endpoint
GetServer	proxy/freedom/config.pb.go	/^func (x *DestinationOverride) GetServer() *protocol.ServerEndpoint {$/;"	f	struct:freedom.DestinationOverride	typeref:typename:*protocol.ServerEndpoint
GetServer	proxy/http/config.pb.go	/^func (x *ClientConfig) GetServer() []*protocol.ServerEndpoint {$/;"	f	struct:http.ClientConfig	typeref:typename:[]*protocol.ServerEndpoint
GetServer	proxy/shadowsocks/config.pb.go	/^func (x *ClientConfig) GetServer() []*protocol.ServerEndpoint {$/;"	f	struct:shadowsocks.ClientConfig	typeref:typename:[]*protocol.ServerEndpoint
GetServer	proxy/socks/config.pb.go	/^func (x *ClientConfig) GetServer() []*protocol.ServerEndpoint {$/;"	f	struct:socks.ClientConfig	typeref:typename:[]*protocol.ServerEndpoint
GetServer	proxy/trojan/config.pb.go	/^func (x *ClientConfig) GetServer() []*protocol.ServerEndpoint {$/;"	f	struct:trojan.ClientConfig	typeref:typename:[]*protocol.ServerEndpoint
GetServerName	transport/internet/tls/config.pb.go	/^func (x *Config) GetServerName() string {$/;"	f	struct:tls.Config	typeref:typename:string
GetServerName	transport/internet/xtls/config.pb.go	/^func (x *Config) GetServerName() string {$/;"	f	struct:xtls.Config	typeref:typename:string
GetServerWriter	transport/internet/headers/http/http.go	/^func (a HttpAuthenticator) GetServerWriter() *HeaderWriter {$/;"	f	struct:http.HttpAuthenticator	typeref:typename:*HeaderWriter
GetService	app/commander/config.pb.go	/^func (x *Config) GetService() []*serial.TypedMessage {$/;"	f	struct:commander.Config	typeref:typename:[]*serial.TypedMessage
GetSettings	app/dispatcher/config.pb.go	/^func (x *Config) GetSettings() *SessionConfig {$/;"	f	struct:dispatcher.Config	typeref:typename:*SessionConfig
GetSettings	transport/internet/config.pb.go	/^func (x *TransportConfig) GetSettings() *serial.TypedMessage {$/;"	f	struct:internet.TransportConfig	typeref:typename:*serial.TypedMessage
GetSeverity	common/errors/errors.go	/^func GetSeverity(err error) log.Severity {$/;"	f	package:errors	typeref:typename:log.Severity
GetSign	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) GetSign() []byte {$/;"	f	struct:wire.MessageData	typeref:typename:[]byte
GetSize	app/dns/config.pb.go	/^func (x *NameServer_OriginalRule) GetSize() uint32 {$/;"	f	struct:dns.NameServer_OriginalRule	typeref:typename:uint32
GetSize	transport/internet/kcp/config.pb.go	/^func (x *ReadBuffer) GetSize() uint32 {$/;"	f	struct:kcp.ReadBuffer	typeref:typename:uint32
GetSize	transport/internet/kcp/config.pb.go	/^func (x *WriteBuffer) GetSize() uint32 {$/;"	f	struct:kcp.WriteBuffer	typeref:typename:uint32
GetSniffingSettings	app/proxyman/config.pb.go	/^func (x *ReceiverConfig) GetSniffingSettings() *SniffingConfig {$/;"	f	struct:proxyman.ReceiverConfig	typeref:typename:*SniffingConfig
GetSocketSettings	transport/internet/config.pb.go	/^func (x *StreamConfig) GetSocketSettings() *SocketConfig {$/;"	f	struct:internet.StreamConfig	typeref:typename:*SocketConfig
GetSourceCidr	app/router/config.pb.go	/^func (x *RoutingRule) GetSourceCidr() []*CIDR {$/;"	f	struct:router.RoutingRule	typeref:typename:[]*CIDR
GetSourceGeoip	app/router/config.pb.go	/^func (x *RoutingRule) GetSourceGeoip() []*GeoIP {$/;"	f	struct:router.RoutingRule	typeref:typename:[]*GeoIP
GetSourceIPs	app/router/command/command.pb.go	/^func (x *RoutingContext) GetSourceIPs() [][]byte {$/;"	f	struct:command.RoutingContext	typeref:typename:[][]byte
GetSourceIPs	app/router/command/config.go	/^func (c routingContext) GetSourceIPs() []net.IP {$/;"	f	struct:command.routingContext	typeref:typename:[]net.IP
GetSourceIPs	features/routing/context.go	/^	GetSourceIPs() []net.IP$/;"	n	interface:routing.Context	typeref:typename:[]net.IP
GetSourceIPs	features/routing/session/context.go	/^func (ctx *Context) GetSourceIPs() []net.IP {$/;"	f	struct:session.Context	typeref:typename:[]net.IP
GetSourcePath	testing/scenarios/common.go	/^func GetSourcePath() string {$/;"	f	package:scenarios	typeref:typename:string
GetSourcePort	app/router/command/command.pb.go	/^func (x *RoutingContext) GetSourcePort() uint32 {$/;"	f	struct:command.RoutingContext	typeref:typename:uint32
GetSourcePort	app/router/command/config.go	/^func (c routingContext) GetSourcePort() net.Port {$/;"	f	struct:command.routingContext	typeref:typename:net.Port
GetSourcePort	features/routing/context.go	/^	GetSourcePort() net.Port$/;"	n	interface:routing.Context	typeref:typename:net.Port
GetSourcePort	features/routing/session/context.go	/^func (ctx *Context) GetSourcePort() net.Port {$/;"	f	struct:session.Context	typeref:typename:net.Port
GetSourcePortList	app/router/config.pb.go	/^func (x *RoutingRule) GetSourcePortList() *net.PortList {$/;"	f	struct:router.RoutingRule	typeref:typename:*net.PortList
GetStat	app/stats/command/command.pb.go	/^func (x *GetStatsResponse) GetStat() *Stat {$/;"	f	struct:command.GetStatsResponse	typeref:typename:*Stat
GetStat	app/stats/command/command.pb.go	/^func (x *QueryStatsResponse) GetStat() []*Stat {$/;"	f	struct:command.QueryStatsResponse	typeref:typename:[]*Stat
GetState	app/reverse/config.pb.go	/^func (x *Control) GetState() Control_State {$/;"	f	struct:reverse.Control	typeref:typename:Control_State
GetStaticHosts	app/dns/config.pb.go	/^func (x *Config) GetStaticHosts() []*Config_HostMapping {$/;"	f	struct:dns.Config	typeref:typename:[]*Config_HostMapping
GetStats	app/policy/config.pb.go	/^func (x *Policy) GetStats() *Policy_Stats {$/;"	f	struct:policy.Policy	typeref:typename:*Policy_Stats
GetStats	app/policy/config.pb.go	/^func (x *SystemPolicy) GetStats() *SystemPolicy_Stats {$/;"	f	struct:policy.SystemPolicy	typeref:typename:*SystemPolicy_Stats
GetStats	app/stats/command/command.go	/^func (s *statsServer) GetStats(ctx context.Context, request *GetStatsRequest) (*GetStatsResponse/;"	f	struct:command.statsServer	typeref:typename:(*GetStatsResponse, error)
GetStats	app/stats/command/command.proto	/^  rpc GetStats(GetStatsRequest) returns (GetStatsResponse) {}$/;"	r	service:v2ray.core.app.stats.command.StatsService	typeref:typename:GetStatsResponse
GetStats	app/stats/command/command_grpc.pb.go	/^	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)$/;"	n	interface:command.StatsServiceServer	typeref:typename:(*GetStatsResponse, error)
GetStats	app/stats/command/command_grpc.pb.go	/^	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse,/;"	n	interface:command.StatsServiceClient	typeref:typename:(*GetStatsResponse, error)
GetStats	app/stats/command/command_grpc.pb.go	/^func (UnimplementedStatsServiceServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsRes/;"	f	struct:command.UnimplementedStatsServiceServer	typeref:typename:(*GetStatsResponse, error)
GetStats	app/stats/command/command_grpc.pb.go	/^func (c *statsServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.Cal/;"	f	struct:command.statsServiceClient	typeref:typename:(*GetStatsResponse, error)
GetStatsRequest	app/stats/command/command.pb.go	/^type GetStatsRequest struct {$/;"	s	package:command
GetStatsRequest	app/stats/command/command.proto	/^message GetStatsRequest {$/;"	m	package:v2ray.core.app.stats.command
GetStatsResponse	app/stats/command/command.pb.go	/^type GetStatsResponse struct {$/;"	s	package:command
GetStatsResponse	app/stats/command/command.proto	/^message GetStatsResponse {$/;"	m	package:v2ray.core.app.stats.command
GetStatus	transport/internet/headers/http/config.pb.go	/^func (x *ResponseConfig) GetStatus() *Status {$/;"	f	struct:http.ResponseConfig	typeref:typename:*Status
GetStatusValue	transport/internet/headers/http/config.go	/^func (v *ResponseConfig) GetStatusValue() *Status {$/;"	f	unknown:http.ResponseConfig	typeref:typename:*Status
GetStreamSettings	app/proxyman/config.pb.go	/^func (x *ReceiverConfig) GetStreamSettings() *internet.StreamConfig {$/;"	f	struct:proxyman.ReceiverConfig	typeref:typename:*internet.StreamConfig
GetStreamSettings	app/proxyman/config.pb.go	/^func (x *SenderConfig) GetStreamSettings() *internet.StreamConfig {$/;"	f	struct:proxyman.SenderConfig	typeref:typename:*internet.StreamConfig
GetSubscriberLimit	app/stats/config.pb.go	/^func (x *ChannelConfig) GetSubscriberLimit() int32 {$/;"	f	struct:stats.ChannelConfig	typeref:typename:int32
GetSys	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) GetSys() uint64 {$/;"	f	struct:command.SysStatsResponse	typeref:typename:uint64
GetSysStats	app/stats/command/command.go	/^func (s *statsServer) GetSysStats(ctx context.Context, request *SysStatsRequest) (*SysStatsRespo/;"	f	struct:command.statsServer	typeref:typename:(*SysStatsResponse, error)
GetSysStats	app/stats/command/command.proto	/^  rpc GetSysStats(SysStatsRequest) returns (SysStatsResponse) {}$/;"	r	service:v2ray.core.app.stats.command.StatsService	typeref:typename:SysStatsResponse
GetSysStats	app/stats/command/command_grpc.pb.go	/^	GetSysStats(context.Context, *SysStatsRequest) (*SysStatsResponse, error)$/;"	n	interface:command.StatsServiceServer	typeref:typename:(*SysStatsResponse, error)
GetSysStats	app/stats/command/command_grpc.pb.go	/^	GetSysStats(ctx context.Context, in *SysStatsRequest, opts ...grpc.CallOption) (*SysStatsRespon/;"	n	interface:command.StatsServiceClient	typeref:typename:(*SysStatsResponse, error)
GetSysStats	app/stats/command/command_grpc.pb.go	/^func (UnimplementedStatsServiceServer) GetSysStats(context.Context, *SysStatsRequest) (*SysStats/;"	f	struct:command.UnimplementedStatsServiceServer	typeref:typename:(*SysStatsResponse, error)
GetSysStats	app/stats/command/command_grpc.pb.go	/^func (c *statsServiceClient) GetSysStats(ctx context.Context, in *SysStatsRequest, opts ...grpc./;"	f	struct:command.statsServiceClient	typeref:typename:(*SysStatsResponse, error)
GetSystem	app/policy/config.pb.go	/^func (x *Config) GetSystem() *SystemPolicy {$/;"	f	struct:policy.Config	typeref:typename:*SystemPolicy
GetTLSConfig	transport/internet/tls/config.go	/^func (c *Config) GetTLSConfig(opts ...Option) *tls.Config {$/;"	f	unknown:tls.Config	typeref:typename:*tls.Config
GetTTIValue	transport/internet/kcp/config.go	/^func (c *Config) GetTTIValue() uint32 {$/;"	f	unknown:kcp.Config	typeref:typename:uint32
GetTag	app/commander/config.pb.go	/^func (x *Config) GetTag() string {$/;"	f	struct:commander.Config	typeref:typename:string
GetTag	app/dns/config.pb.go	/^func (x *Config) GetTag() string {$/;"	f	struct:dns.Config	typeref:typename:string
GetTag	app/proxyman/command/command.pb.go	/^func (x *AlterInboundRequest) GetTag() string {$/;"	f	struct:command.AlterInboundRequest	typeref:typename:string
GetTag	app/proxyman/command/command.pb.go	/^func (x *AlterOutboundRequest) GetTag() string {$/;"	f	struct:command.AlterOutboundRequest	typeref:typename:string
GetTag	app/proxyman/command/command.pb.go	/^func (x *RemoveInboundRequest) GetTag() string {$/;"	f	struct:command.RemoveInboundRequest	typeref:typename:string
GetTag	app/proxyman/command/command.pb.go	/^func (x *RemoveOutboundRequest) GetTag() string {$/;"	f	struct:command.RemoveOutboundRequest	typeref:typename:string
GetTag	app/proxyman/config.pb.go	/^func (x *InboundHandlerConfig) GetTag() string {$/;"	f	struct:proxyman.InboundHandlerConfig	typeref:typename:string
GetTag	app/reverse/config.pb.go	/^func (x *BridgeConfig) GetTag() string {$/;"	f	struct:reverse.BridgeConfig	typeref:typename:string
GetTag	app/reverse/config.pb.go	/^func (x *PortalConfig) GetTag() string {$/;"	f	struct:reverse.PortalConfig	typeref:typename:string
GetTag	app/router/config.go	/^func (r *Rule) GetTag() (string, error) {$/;"	f	struct:router.Rule	typeref:typename:(string, error)
GetTag	app/router/config.pb.go	/^func (x *BalancingRule) GetTag() string {$/;"	f	struct:router.BalancingRule	typeref:typename:string
GetTag	app/router/config.pb.go	/^func (x *RoutingRule) GetTag() string {$/;"	f	struct:router.RoutingRule	typeref:typename:string
GetTag	config.pb.go	/^func (x *InboundHandlerConfig) GetTag() string {$/;"	f	struct:core.InboundHandlerConfig	typeref:typename:string
GetTag	config.pb.go	/^func (x *OutboundHandlerConfig) GetTag() string {$/;"	f	struct:core.OutboundHandlerConfig	typeref:typename:string
GetTag	transport/internet/config.pb.go	/^func (x *ProxyConfig) GetTag() string {$/;"	f	struct:internet.ProxyConfig	typeref:typename:string
GetTargetDomain	app/router/command/command.pb.go	/^func (x *RoutingContext) GetTargetDomain() string {$/;"	f	struct:command.RoutingContext	typeref:typename:string
GetTargetDomain	features/routing/context.go	/^	GetTargetDomain() string$/;"	n	interface:routing.Context	typeref:typename:string
GetTargetDomain	features/routing/session/context.go	/^func (ctx *Context) GetTargetDomain() string {$/;"	f	struct:session.Context	typeref:typename:string
GetTargetIPs	app/router/command/command.pb.go	/^func (x *RoutingContext) GetTargetIPs() [][]byte {$/;"	f	struct:command.RoutingContext	typeref:typename:[][]byte
GetTargetIPs	app/router/command/config.go	/^func (c routingContext) GetTargetIPs() []net.IP {$/;"	f	struct:command.routingContext	typeref:typename:[]net.IP
GetTargetIPs	features/routing/context.go	/^	GetTargetIPs() []net.IP$/;"	n	interface:routing.Context	typeref:typename:[]net.IP
GetTargetIPs	features/routing/dns/context.go	/^func (ctx *ResolvableContext) GetTargetIPs() []net.IP {$/;"	f	struct:dns.ResolvableContext	typeref:typename:[]net.IP
GetTargetIPs	features/routing/session/context.go	/^func (ctx *Context) GetTargetIPs() []net.IP {$/;"	f	struct:session.Context	typeref:typename:[]net.IP
GetTargetPort	app/router/command/command.pb.go	/^func (x *RoutingContext) GetTargetPort() uint32 {$/;"	f	struct:command.RoutingContext	typeref:typename:uint32
GetTargetPort	app/router/command/config.go	/^func (c routingContext) GetTargetPort() net.Port {$/;"	f	struct:command.routingContext	typeref:typename:net.Port
GetTargetPort	features/routing/context.go	/^	GetTargetPort() net.Port$/;"	n	interface:routing.Context	typeref:typename:net.Port
GetTargetPort	features/routing/session/context.go	/^func (ctx *Context) GetTargetPort() net.Port {$/;"	f	struct:session.Context	typeref:typename:net.Port
GetTargetTag	app/router/config.pb.go	/^func (m *RoutingRule) GetTargetTag() isRoutingRule_TargetTag {$/;"	f	struct:router.RoutingRule	typeref:typename:isRoutingRule_TargetTag
GetTestsEnabled	proxy/vmess/account.pb.go	/^func (x *Account) GetTestsEnabled() string {$/;"	f	struct:vmess.Account	typeref:typename:string
GetTfo	transport/internet/config.pb.go	/^func (x *SocketConfig) GetTfo() SocketConfig_TCPFastOpenState {$/;"	f	struct:internet.SocketConfig	typeref:typename:SocketConfig_TCPFastOpenState
GetTimeout	app/policy/config.pb.go	/^func (x *Policy) GetTimeout() *Policy_Timeout {$/;"	f	struct:policy.Policy	typeref:typename:*Policy_Timeout
GetTimeout	proxy/dokodemo/config.pb.go	/^func (x *Config) GetTimeout() uint32 {$/;"	f	struct:dokodemo.Config	typeref:typename:uint32
GetTimeout	proxy/freedom/config.pb.go	/^func (x *Config) GetTimeout() uint32 {$/;"	f	struct:freedom.Config	typeref:typename:uint32
GetTimeout	proxy/http/config.pb.go	/^func (x *ServerConfig) GetTimeout() uint32 {$/;"	f	struct:http.ServerConfig	typeref:typename:uint32
GetTimeout	proxy/socks/config.pb.go	/^func (x *ServerConfig) GetTimeout() uint32 {$/;"	f	struct:socks.ServerConfig	typeref:typename:uint32
GetTimestamp	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) GetTimestamp() int64 {$/;"	f	struct:wire.MessageData	typeref:typename:int64
GetTo	common/net/port.pb.go	/^func (x *PortRange) GetTo() uint32 {$/;"	f	struct:net.PortRange	typeref:typename:uint32
GetTo	proxy/vmess/inbound/config.pb.go	/^func (x *DetourConfig) GetTo() string {$/;"	f	struct:inbound.DetourConfig	typeref:typename:string
GetToolLocation	common/platform/others.go	/^func GetToolLocation(file string) string {$/;"	f	package:platform	typeref:typename:string
GetToolLocation	common/platform/windows.go	/^func GetToolLocation(file string) string {$/;"	f	package:platform	typeref:typename:string
GetTotalAlloc	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) GetTotalAlloc() uint64 {$/;"	f	struct:command.SysStatsResponse	typeref:typename:uint64
GetTproxy	transport/internet/config.pb.go	/^func (x *SocketConfig) GetTproxy() SocketConfig_TProxyMode {$/;"	f	struct:internet.SocketConfig	typeref:typename:SocketConfig_TProxyMode
GetTransport	config.pb.go	/^func (x *Config) GetTransport() *transport.Config {$/;"	f	struct:core.Config	typeref:typename:*transport.Config
GetTransportSettings	transport/config.pb.go	/^func (x *Config) GetTransportSettings() []*internet.TransportConfig {$/;"	f	struct:transport.Config	typeref:typename:[]*internet.TransportConfig
GetTransportSettings	transport/internet/config.pb.go	/^func (x *StreamConfig) GetTransportSettings() []*TransportConfig {$/;"	f	struct:internet.StreamConfig	typeref:typename:[]*TransportConfig
GetTransportSettingsFor	transport/internet/config.go	/^func (c *StreamConfig) GetTransportSettingsFor(protocol string) (interface{}, error) {$/;"	f	unknown:internet.StreamConfig	typeref:typename:(interface{}, error)
GetTti	transport/internet/kcp/config.pb.go	/^func (x *Config) GetTti() *TTI {$/;"	f	struct:kcp.Config	typeref:typename:*TTI
GetType	app/dns/config.pb.go	/^func (x *Config_HostMapping) GetType() DomainMatchingType {$/;"	f	struct:dns.Config_HostMapping	typeref:typename:DomainMatchingType
GetType	app/dns/config.pb.go	/^func (x *NameServer_PriorityDomain) GetType() DomainMatchingType {$/;"	f	struct:dns.NameServer_PriorityDomain	typeref:typename:DomainMatchingType
GetType	app/proxyman/config.pb.go	/^func (x *AllocationStrategy) GetType() AllocationStrategy_Type {$/;"	f	struct:proxyman.AllocationStrategy	typeref:typename:AllocationStrategy_Type
GetType	app/router/config.pb.go	/^func (x *Domain) GetType() Domain_Type {$/;"	f	struct:router.Domain	typeref:typename:Domain_Type
GetType	common/protocol/headers.pb.go	/^func (x *SecurityConfig) GetType() SecurityType {$/;"	f	struct:protocol.SecurityConfig	typeref:typename:SecurityType
GetType	common/serial/typed_message.pb.go	/^func (x *TypedMessage) GetType() string {$/;"	f	struct:serial.TypedMessage	typeref:typename:string
GetType	proxy/trojan/config.pb.go	/^func (x *Fallback) GetType() string {$/;"	f	struct:trojan.Fallback	typeref:typename:string
GetType	proxy/vless/inbound/config.pb.go	/^func (x *Fallback) GetType() string {$/;"	f	struct:inbound.Fallback	typeref:typename:string
GetTypedAccount	common/protocol/user.go	/^func (u *User) GetTypedAccount() (Account, error) {$/;"	f	unknown:protocol.User	typeref:typename:(Account, error)
GetTypedSettings	transport/internet/config.go	/^func (c *TransportConfig) GetTypedSettings() (interface{}, error) {$/;"	f	unknown:internet.TransportConfig	typeref:typename:(interface{}, error)
GetTypedValue	app/router/config.pb.go	/^func (m *Domain_Attribute) GetTypedValue() isDomain_Attribute_TypedValue {$/;"	f	struct:router.Domain_Attribute	typeref:typename:isDomain_Attribute_TypedValue
GetUdpEnabled	proxy/shadowsocks/config.pb.go	/^func (x *ServerConfig) GetUdpEnabled() bool {$/;"	f	struct:shadowsocks.ServerConfig	typeref:typename:bool
GetUdpEnabled	proxy/socks/config.pb.go	/^func (x *ServerConfig) GetUdpEnabled() bool {$/;"	f	struct:socks.ServerConfig	typeref:typename:bool
GetUnifiedProtocolName	transport/internet/config.go	/^func (c *TransportConfig) GetUnifiedProtocolName() string {$/;"	f	unknown:internet.TransportConfig	typeref:typename:string
GetUnixAddr	transport/internet/domainsocket/config.go	/^func (c *Config) GetUnixAddr() (*net.UnixAddr, error) {$/;"	f	unknown:domainsocket.Config	typeref:typename:(*net.UnixAddr, error)
GetUplinkCapacity	transport/internet/kcp/config.pb.go	/^func (x *Config) GetUplinkCapacity() *UplinkCapacity {$/;"	f	struct:kcp.Config	typeref:typename:*UplinkCapacity
GetUplinkCapacityValue	transport/internet/kcp/config.go	/^func (c *Config) GetUplinkCapacityValue() uint32 {$/;"	f	unknown:kcp.Config	typeref:typename:uint32
GetUplinkOnly	app/policy/config.pb.go	/^func (x *Policy_Timeout) GetUplinkOnly() *Second {$/;"	f	struct:policy.Policy_Timeout	typeref:typename:*Second
GetUptime	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) GetUptime() uint32 {$/;"	f	struct:command.SysStatsResponse	typeref:typename:uint32
GetUri	transport/internet/headers/http/config.pb.go	/^func (x *RequestConfig) GetUri() []string {$/;"	f	struct:http.RequestConfig	typeref:typename:[]string
GetUsage	transport/internet/tls/config.pb.go	/^func (x *Certificate) GetUsage() Certificate_Usage {$/;"	f	struct:tls.Certificate	typeref:typename:Certificate_Usage
GetUsage	transport/internet/xtls/config.pb.go	/^func (x *Certificate) GetUsage() Certificate_Usage {$/;"	f	struct:xtls.Certificate	typeref:typename:Certificate_Usage
GetUser	app/proxyman/command/command.pb.go	/^func (x *AddUserOperation) GetUser() *protocol.User {$/;"	f	struct:command.AddUserOperation	typeref:typename:*protocol.User
GetUser	app/router/command/command.pb.go	/^func (x *RoutingContext) GetUser() string {$/;"	f	struct:command.RoutingContext	typeref:typename:string
GetUser	common/protocol/server_spec.pb.go	/^func (x *ServerEndpoint) GetUser() []*User {$/;"	f	struct:protocol.ServerEndpoint	typeref:typename:[]*User
GetUser	features/routing/context.go	/^	GetUser() string$/;"	n	interface:routing.Context	typeref:typename:string
GetUser	features/routing/session/context.go	/^func (ctx *Context) GetUser() string {$/;"	f	struct:session.Context	typeref:typename:string
GetUser	proxy/mtproto/config.pb.go	/^func (x *ServerConfig) GetUser() []*protocol.User {$/;"	f	struct:mtproto.ServerConfig	typeref:typename:[]*protocol.User
GetUser	proxy/shadowsocks/config.pb.go	/^func (x *ServerConfig) GetUser() *protocol.User {$/;"	f	struct:shadowsocks.ServerConfig	typeref:typename:*protocol.User
GetUser	proxy/vmess/inbound/config.pb.go	/^func (x *Config) GetUser() []*protocol.User {$/;"	f	struct:inbound.Config	typeref:typename:[]*protocol.User
GetUser	proxy/vmess/inbound/inbound.go	/^func (h *Handler) GetUser(email string) *protocol.MemoryUser {$/;"	f	struct:inbound.Handler	typeref:typename:*protocol.MemoryUser
GetUserDownlink	app/policy/config.pb.go	/^func (x *Policy_Stats) GetUserDownlink() bool {$/;"	f	struct:policy.Policy_Stats	typeref:typename:bool
GetUserEmail	app/router/config.pb.go	/^func (x *RoutingRule) GetUserEmail() []string {$/;"	f	struct:router.RoutingRule	typeref:typename:[]string
GetUserLevel	proxy/dokodemo/config.pb.go	/^func (x *Config) GetUserLevel() uint32 {$/;"	f	struct:dokodemo.Config	typeref:typename:uint32
GetUserLevel	proxy/freedom/config.pb.go	/^func (x *Config) GetUserLevel() uint32 {$/;"	f	struct:freedom.Config	typeref:typename:uint32
GetUserLevel	proxy/http/config.pb.go	/^func (x *ServerConfig) GetUserLevel() uint32 {$/;"	f	struct:http.ServerConfig	typeref:typename:uint32
GetUserLevel	proxy/socks/config.pb.go	/^func (x *ServerConfig) GetUserLevel() uint32 {$/;"	f	struct:socks.ServerConfig	typeref:typename:uint32
GetUserUplink	app/policy/config.pb.go	/^func (x *Policy_Stats) GetUserUplink() bool {$/;"	f	struct:policy.Policy_Stats	typeref:typename:bool
GetUsername	proxy/http/config.pb.go	/^func (x *Account) GetUsername() string {$/;"	f	struct:http.Account	typeref:typename:string
GetUsername	proxy/socks/config.pb.go	/^func (x *Account) GetUsername() string {$/;"	f	struct:socks.Account	typeref:typename:string
GetUsers	proxy/trojan/config.pb.go	/^func (x *ServerConfig) GetUsers() []*protocol.User {$/;"	f	struct:trojan.ServerConfig	typeref:typename:[]*protocol.User
GetValue	app/policy/config.pb.go	/^func (x *Second) GetValue() uint32 {$/;"	f	struct:policy.Second	typeref:typename:uint32
GetValue	app/proxyman/config.pb.go	/^func (x *AllocationStrategy_AllocationStrategyConcurrency) GetValue() uint32 {$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyConcurrency	typeref:typename:uint32
GetValue	app/proxyman/config.pb.go	/^func (x *AllocationStrategy_AllocationStrategyRefresh) GetValue() uint32 {$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyRefresh	typeref:typename:uint32
GetValue	app/router/config.pb.go	/^func (x *Domain) GetValue() string {$/;"	f	struct:router.Domain	typeref:typename:string
GetValue	app/stats/command/command.pb.go	/^func (x *Stat) GetValue() int64 {$/;"	f	struct:command.Stat	typeref:typename:int64
GetValue	common/platform/platform.go	/^func (f EnvFlag) GetValue(defaultValue func() string) string {$/;"	f	struct:platform.EnvFlag	typeref:typename:string
GetValue	common/serial/typed_message.pb.go	/^func (x *TypedMessage) GetValue() []byte {$/;"	f	struct:serial.TypedMessage	typeref:typename:[]byte
GetValue	transport/internet/headers/http/config.pb.go	/^func (x *Header) GetValue() []string {$/;"	f	struct:http.Header	typeref:typename:[]string
GetValue	transport/internet/headers/http/config.pb.go	/^func (x *Method) GetValue() string {$/;"	f	struct:http.Method	typeref:typename:string
GetValue	transport/internet/headers/http/config.pb.go	/^func (x *Version) GetValue() string {$/;"	f	struct:http.Version	typeref:typename:string
GetValue	transport/internet/kcp/config.pb.go	/^func (x *DownlinkCapacity) GetValue() uint32 {$/;"	f	struct:kcp.DownlinkCapacity	typeref:typename:uint32
GetValue	transport/internet/kcp/config.pb.go	/^func (x *MTU) GetValue() uint32 {$/;"	f	struct:kcp.MTU	typeref:typename:uint32
GetValue	transport/internet/kcp/config.pb.go	/^func (x *TTI) GetValue() uint32 {$/;"	f	struct:kcp.TTI	typeref:typename:uint32
GetValue	transport/internet/kcp/config.pb.go	/^func (x *UplinkCapacity) GetValue() uint32 {$/;"	f	struct:kcp.UplinkCapacity	typeref:typename:uint32
GetValue	transport/internet/websocket/config.pb.go	/^func (x *Header) GetValue() string {$/;"	f	struct:websocket.Header	typeref:typename:string
GetValueAsInt	common/platform/platform.go	/^func (f EnvFlag) GetValueAsInt(defaultValue int) int {$/;"	f	struct:platform.EnvFlag	typeref:typename:int
GetVersion	transport/internet/headers/http/config.pb.go	/^func (x *RequestConfig) GetVersion() *Version {$/;"	f	struct:http.RequestConfig	typeref:typename:*Version
GetVersion	transport/internet/headers/http/config.pb.go	/^func (x *ResponseConfig) GetVersion() *Version {$/;"	f	struct:http.ResponseConfig	typeref:typename:*Version
GetVersion	transport/internet/headers/srtp/config.pb.go	/^func (x *Config) GetVersion() uint32 {$/;"	f	struct:srtp.Config	typeref:typename:uint32
GetVersion	transport/internet/headers/utp/config.pb.go	/^func (x *Config) GetVersion() uint32 {$/;"	f	struct:utp.Config	typeref:typename:uint32
GetVersionValue	transport/internet/headers/http/config.go	/^func (v *RequestConfig) GetVersionValue() string {$/;"	f	unknown:http.RequestConfig	typeref:typename:string
GetVersionValue	transport/internet/headers/http/config.go	/^func (v *ResponseConfig) GetVersionValue() string {$/;"	f	unknown:http.ResponseConfig	typeref:typename:string
GetVia	app/proxyman/config.pb.go	/^func (x *SenderConfig) GetVia() *net.IPOrDomain {$/;"	f	struct:proxyman.SenderConfig	typeref:typename:*net.IPOrDomain
GetVnext	proxy/vless/outbound/config.pb.go	/^func (x *Config) GetVnext() []*protocol.ServerEndpoint {$/;"	f	struct:outbound.Config	typeref:typename:[]*protocol.ServerEndpoint
GetWriteBuffer	transport/internet/kcp/config.pb.go	/^func (x *Config) GetWriteBuffer() *WriteBuffer {$/;"	f	struct:kcp.Config	typeref:typename:*WriteBuffer
GetWriteBufferSize	transport/internet/kcp/config.go	/^func (c *Config) GetWriteBufferSize() uint32 {$/;"	f	unknown:kcp.Config	typeref:typename:uint32
GetXTLSConfig	transport/internet/xtls/config.go	/^func (c *Config) GetXTLSConfig(opts ...Option) *xtls.Config {$/;"	f	unknown:xtls.Config	typeref:typename:*xtls.Config
GetXver	proxy/trojan/config.pb.go	/^func (x *Fallback) GetXver() uint64 {$/;"	f	struct:trojan.Fallback	typeref:typename:uint64
GetXver	proxy/vless/inbound/config.pb.go	/^func (x *Fallback) GetXver() uint64 {$/;"	f	struct:inbound.Fallback	typeref:typename:uint64
GoString	app/p2p/wire/seedlist.pb.go	/^func (this *HelloSeedList) GoString() string {$/;"	f	struct:wire.HelloSeedList	typeref:typename:string
GoString	app/p2p/wire/seedlist.pb.go	/^func (this *MessageData) GoString() string {$/;"	f	struct:wire.MessageData	typeref:typename:string
GoString	app/p2p/wire/seedlist.pb.go	/^func (this *SeedInfo) GoString() string {$/;"	f	struct:wire.SeedInfo	typeref:typename:string
GoString	app/p2p/wire/seedlist.pb.go	/^func (this *SeedListRequest) GoString() string {$/;"	f	struct:wire.SeedListRequest	typeref:typename:string
GoString	app/p2p/wire/seedlist.pb.go	/^func (this *SeedListResponse) GoString() string {$/;"	f	struct:wire.SeedListResponse	typeref:typename:string
Gossip	app/p2p/wire/seedlist.pb.go	/^	Gossip               bool     `protobuf:"varint,4,opt,name=gossip,proto3" json:"gossip,omitempt/;"	m	struct:wire.MessageData	typeref:typename:bool
HTTP	app/proxyman/config.proto	/^  HTTP = 0;$/;"	e	enum:v2ray.core.app.proxyman.KnownProtocols
HTTP	transport/internet/config.proto	/^  HTTP = 4;$/;"	e	enum:v2ray.core.transport.internet.TransportProtocol
HTTP1	common/protocol/http/sniff.go	/^	HTTP1 version = iota$/;"	c	package:http	typeref:type:version
HTTP2	common/protocol/http/sniff.go	/^	HTTP2$/;"	c	package:http
HTTPAuthenticator	infra/conf/transport_authenticators.go	/^type HTTPAuthenticator struct {$/;"	s	package:conf
HTTPAuthenticatorRequest	infra/conf/transport_authenticators.go	/^type HTTPAuthenticatorRequest struct {$/;"	s	package:conf
HTTPAuthenticatorResponse	infra/conf/transport_authenticators.go	/^type HTTPAuthenticatorResponse struct {$/;"	s	package:conf
HTTPConfig	infra/conf/transport.go	/^	HTTPConfig *HTTPConfig         `json:"httpSettings"`$/;"	m	struct:conf.TransportConfig	typeref:typename:*HTTPConfig
HTTPConfig	infra/conf/transport_internet.go	/^type HTTPConfig struct {$/;"	s	package:conf
HTTPResponse	proxy/blackhole/config.pb.go	/^type HTTPResponse struct {$/;"	s	package:blackhole
HTTPResponse	proxy/blackhole/config.proto	/^message HTTPResponse {}$/;"	m	package:v2ray.core.proxy.blackhole
HTTPSettings	infra/conf/transport_internet.go	/^	HTTPSettings   *HTTPConfig         `json:"httpSettings"`$/;"	m	struct:conf.StreamConfig	typeref:typename:*HTTPConfig
Handle	app/log/log.go	/^func (g *Instance) Handle(msg log.Message) {$/;"	f	struct:log.Instance
Handle	app/p2p/p2p.go	/^func (g *Instance) Handle(msg log.Message) {$/;"	f	struct:p2p.Instance
Handle	common/log/log.go	/^	Handle(msg Message)$/;"	n	interface:log.Handler
Handle	common/log/log.go	/^func (h *syncHandler) Handle(msg Message) {$/;"	f	struct:log.syncHandler
Handle	common/log/log_test.go	/^func (l *testLogger) Handle(msg log.Message) {$/;"	f	struct:log_test.testLogger
Handle	common/log/logger.go	/^func (l *generalLogger) Handle(msg Message) {$/;"	f	struct:log.generalLogger
Handle	testing/mocks/log.go	/^func (m *LogHandler) Handle(arg0 log.Message) {$/;"	f	struct:mocks.LogHandler
Handle	testing/mocks/log.go	/^func (mr *LogHandlerMockRecorder) Handle(arg0 interface{}) *gomock.Call {$/;"	f	struct:mocks.LogHandlerMockRecorder	typeref:typename:*gomock.Call
HandleConnection	app/reverse/portal.go	/^func (p *Portal) HandleConnection(ctx context.Context, link *transport.Link) error {$/;"	f	struct:reverse.Portal	typeref:typename:error
HandleFastAck	transport/internet/kcp/sending.go	/^func (sw *SendingWindow) HandleFastAck(number uint32, rto uint32) {$/;"	f	struct:kcp.SendingWindow
HandleOption	transport/internet/kcp/connection.go	/^func (c *Connection) HandleOption(opt SegmentOption) {$/;"	f	struct:kcp.Connection
HandleResponse	app/dns/udpns.go	/^func (s *ClassicNameServer) HandleResponse(ctx context.Context, packet *udp_proto.Packet) {$/;"	f	struct:dns.ClassicNameServer
Handler	app/proxyman/outbound/handler.go	/^type Handler struct {$/;"	s	package:outbound
Handler	common/log/log.go	/^	Handler$/;"	M	struct:log.syncHandler	typeref:typename:Handler
Handler	common/log/log.go	/^type Handler interface {$/;"	i	package:log
Handler	features/inbound/inbound.go	/^type Handler interface {$/;"	i	package:inbound
Handler	features/outbound/outbound.go	/^type Handler interface {$/;"	i	package:outbound
Handler	proxy/blackhole/blackhole.go	/^type Handler struct {$/;"	s	package:blackhole
Handler	proxy/dns/dns.go	/^type Handler struct {$/;"	s	package:dns
Handler	proxy/freedom/freedom.go	/^type Handler struct {$/;"	s	package:freedom
Handler	proxy/vless/inbound/inbound.go	/^type Handler struct {$/;"	s	package:inbound
Handler	proxy/vless/outbound/outbound.go	/^type Handler struct {$/;"	s	package:outbound
Handler	proxy/vmess/inbound/inbound.go	/^type Handler struct {$/;"	s	package:inbound
Handler	proxy/vmess/outbound/outbound.go	/^type Handler struct {$/;"	s	package:outbound
HandlerCreator	app/log/log_creator.go	/^type HandlerCreator func(LogType, HandlerCreatorOptions) (log.Handler, error)$/;"	t	package:log	typeref:typename:func(LogType, HandlerCreatorOptions) (log.Handler, error)
HandlerCreatorOptions	app/log/log_creator.go	/^type HandlerCreatorOptions struct {$/;"	s	package:log
HandlerSelector	app/router/router_test.go	/^	outbound.HandlerSelector$/;"	M	struct:router_test.mockOutboundManager	typeref:typename:outbound.HandlerSelector
HandlerSelector	features/outbound/outbound.go	/^type HandlerSelector interface {$/;"	i	package:outbound
HandlerService	app/proxyman/command/command.proto	/^service HandlerService {$/;"	s	package:v2ray.core.app.proxyman.command
HandlerServiceClient	app/proxyman/command/command_grpc.pb.go	/^type HandlerServiceClient interface {$/;"	i	package:command
HandlerServiceServer	app/proxyman/command/command_grpc.pb.go	/^type HandlerServiceServer interface {$/;"	i	package:command
Handshake	app/policy/config.pb.go	/^	Handshake      *Second `protobuf:"bytes,1,opt,name=handshake,proto3" json:"handshake,omitempty"/;"	m	struct:policy.Policy_Timeout	typeref:typename:*Second
Handshake	features/policy/policy.go	/^	Handshake time.Duration$/;"	m	struct:policy.Timeout	typeref:typename:time.Duration
Handshake	infra/conf/policy.go	/^	Handshake         *uint32 `json:"handshake"`$/;"	m	struct:conf.Policy	typeref:typename:*uint32
Handshake	proxy/socks/protocol.go	/^func (s *ServerSession) Handshake(reader io.Reader, writer io.Writer) (*protocol.RequestHeader, /;"	f	struct:socks.ServerSession	typeref:typename:(*protocol.RequestHeader, error)
HandshakeAddress	proxy/dokodemo/dokodemo.go	/^	HandshakeAddress() net.Address$/;"	n	interface:dokodemo.hasHandshakeAddress	typeref:typename:net.Address
HandshakeAddress	transport/internet/tls/tls.go	/^func (c *Conn) HandshakeAddress() net.Address {$/;"	f	struct:tls.Conn	typeref:typename:net.Address
HandshakeAddress	transport/internet/xtls/xtls.go	/^func (c *Conn) HandshakeAddress() net.Address {$/;"	f	struct:xtls.Conn	typeref:typename:net.Address
HandshakeLatency	common/peer/latency.go	/^	HandshakeLatency() Latency$/;"	n	interface:peer.HasLatency	typeref:typename:Latency
Has	common/bitmask/byte.go	/^func (b Byte) Has(bb Byte) bool {$/;"	f	type:bitmask.Byte	typeref:typename:bool
Has	store/leveldb.go	/^func (self *LevelDBStore) Has(key []byte) (bool, error) {$/;"	f	struct:store.LevelDBStore	typeref:typename:(bool, error)
Has	transport/internet/kcp/receiving.go	/^func (w *ReceivingWindow) Has(id uint32) bool {$/;"	f	struct:kcp.ReceivingWindow	typeref:typename:bool
HasAccount	proxy/http/config.go	/^func (sc *ServerConfig) HasAccount(username, password string) bool {$/;"	f	unknown:http.ServerConfig	typeref:typename:bool
HasAccount	proxy/socks/config.go	/^func (c *ServerConfig) HasAccount(username, password string) bool {$/;"	f	unknown:socks.ServerConfig	typeref:typename:bool
HasHeader	transport/internet/headers/http/config.go	/^func (v *ResponseConfig) HasHeader(header string) bool {$/;"	f	unknown:http.ResponseConfig	typeref:typename:bool
HasLatency	common/peer/latency.go	/^type HasLatency interface {$/;"	i	package:peer
HasMatcher	app/dns/server.go	/^func (c *MultiGeoIPMatcher) HasMatcher() bool {$/;"	f	struct:dns.MultiGeoIPMatcher	typeref:typename:bool
HasNetwork	common/net/network.go	/^func HasNetwork(list []Network, network Network) bool {$/;"	f	package:net	typeref:typename:bool
HasSecuritySettings	transport/internet/config.go	/^func (c *StreamConfig) HasSecuritySettings() bool {$/;"	f	unknown:internet.StreamConfig	typeref:typename:bool
HasTag	transport/internet/config.go	/^func (c *ProxyConfig) HasTag() bool {$/;"	f	unknown:internet.ProxyConfig	typeref:typename:bool
HasType	common/interfaces.go	/^type HasType interface {$/;"	i	package:common
HasUser	common/protocol/server_spec.go	/^func (s *ServerSpec) HasUser(user *MemoryUser) bool {$/;"	f	struct:protocol.ServerSpec	typeref:typename:bool
Hash	app/p2p/protocol/seedlist/seedlist.go	/^	Hash      string$/;"	m	struct:seedlist.Seed	typeref:typename:string
Header	infra/conf/transport_internet.go	/^	Header   json.RawMessage `json:"header"`$/;"	m	struct:conf.QUICConfig	typeref:typename:json.RawMessage
Header	proxy/mtproto/auth.go	/^	Header        [HeaderSize]byte$/;"	m	struct:mtproto.Authentication	typeref:typename:[HeaderSize]byte
Header	transport/internet/headers/http/config.pb.go	/^	Header  []*Header `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty"`$/;"	m	struct:http.ResponseConfig	typeref:typename:[]*Header
Header	transport/internet/headers/http/config.pb.go	/^	Header []*Header `protobuf:"bytes,4,rep,name=header,proto3" json:"header,omitempty"`$/;"	m	struct:http.RequestConfig	typeref:typename:[]*Header
Header	transport/internet/headers/http/config.pb.go	/^type Header struct {$/;"	s	package:http
Header	transport/internet/headers/http/config.proto	/^message Header {$/;"	m	package:v2ray.core.transport.internet.headers.http
Header	transport/internet/kcp/io.go	/^	Header   internet.PacketHeader$/;"	m	struct:kcp.KCPPacketReader	typeref:typename:internet.PacketHeader
Header	transport/internet/kcp/io.go	/^	Header   internet.PacketHeader$/;"	m	struct:kcp.KCPPacketWriter	typeref:typename:internet.PacketHeader
Header	transport/internet/quic/config.pb.go	/^	Header   *serial.TypedMessage     `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omite/;"	m	struct:quic.Config	typeref:typename:*serial.TypedMessage
Header	transport/internet/websocket/config.pb.go	/^	Header              []*Header `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty/;"	m	struct:websocket.Config	typeref:typename:[]*Header
Header	transport/internet/websocket/config.pb.go	/^type Header struct {$/;"	s	package:websocket
Header	transport/internet/websocket/config.proto	/^message Header {$/;"	m	package:v2ray.core.transport.internet.websocket
HeaderConfig	infra/conf/transport_internet.go	/^	HeaderConfig        json.RawMessage `json:"header"`$/;"	m	struct:conf.TCPConfig	typeref:typename:json.RawMessage
HeaderConfig	infra/conf/transport_internet.go	/^	HeaderConfig    json.RawMessage `json:"header"`$/;"	m	struct:conf.KCPConfig	typeref:typename:json.RawMessage
HeaderConfig	transport/internet/kcp/config.pb.go	/^	HeaderConfig     *serial.TypedMessage `protobuf:"bytes,8,opt,name=header_config,json=headerConf/;"	m	struct:kcp.Config	typeref:typename:*serial.TypedMessage
HeaderReader	transport/internet/headers/http/http.go	/^type HeaderReader struct {$/;"	s	package:http
HeaderSettings	transport/internet/tcp/config.pb.go	/^	HeaderSettings      *serial.TypedMessage `protobuf:"bytes,2,opt,name=header_settings,json=heade/;"	m	struct:tcp.Config	typeref:typename:*serial.TypedMessage
HeaderSize	proxy/mtproto/auth.go	/^	HeaderSize = 64$/;"	c	package:mtproto
HeaderWriter	transport/internet/headers/http/http.go	/^type HeaderWriter struct {$/;"	s	package:http
Headers	infra/conf/transport_authenticators.go	/^	Headers map[string]*StringList `json:"headers"`$/;"	m	struct:conf.HTTPAuthenticatorRequest	typeref:typename:map[string]*StringList
Headers	infra/conf/transport_authenticators.go	/^	Headers map[string]*StringList `json:"headers"`$/;"	m	struct:conf.HTTPAuthenticatorResponse	typeref:typename:map[string]*StringList
Headers	infra/conf/transport_internet.go	/^	Headers             map[string]string `json:"headers"`$/;"	m	struct:conf.WebSocketConfig	typeref:typename:map[string]string
HelloReply	app/p2p/wire/notifier.pb.go	/^type HelloReply struct {$/;"	s	package:wire
HelloReply	app/p2p/wire/notifier.proto	/^message HelloReply {$/;"	m	package:wire
HelloRequest	app/p2p/wire/notifier.pb.go	/^type HelloRequest struct {$/;"	s	package:wire
HelloRequest	app/p2p/wire/notifier.proto	/^message HelloRequest {$/;"	m	package:wire
HelloSeedList	app/p2p/wire/seedlist.pb.go	/^type HelloSeedList struct {$/;"	s	package:wire
HelloSeedList	app/p2p/wire/seedlist.proto	/^message HelloSeedList {$/;"	m	package:wire
Hidden	infra/control/command.go	/^	Hidden() bool$/;"	n	interface:control.hiddenCommand	typeref:typename:bool
Hidden	infra/control/love.go	/^func (*LoveCommand) Hidden() bool {$/;"	f	struct:control.LoveCommand	typeref:typename:bool
Host	app/p2p/api.go	/^	Host      core.Host$/;"	m	struct:p2p.P2PNode	typeref:typename:core.Host
Host	app/p2p/protocol/seedlist/seedlist.go	/^	Host      string \/\/ip:port$/;"	m	struct:seedlist.Seed	typeref:typename:string
Host	app/p2p/protocol/seedlist/seedlist.go	/^	core.Host         \/\/ lib-p2p host$/;"	M	struct:seedlist.SeedNode	typeref:typename:core.Host
Host	common/protocol/headers.go	/^	Host     net.Address$/;"	m	struct:protocol.CommandSwitchAccount	typeref:typename:net.Address
Host	infra/conf/dokodemo.go	/^	Host         *Address     `json:"address"`$/;"	m	struct:conf.DokodemoConfig	typeref:typename:*Address
Host	infra/conf/socks.go	/^	Host       *Address        `json:"ip"`$/;"	m	struct:conf.SocksServerConfig	typeref:typename:*Address
Host	infra/conf/transport_internet.go	/^	Host *StringList `json:"host"`$/;"	m	struct:conf.HTTPConfig	typeref:typename:*StringList
Host	transport/internet/http/config.pb.go	/^	Host []string `protobuf:"bytes,1,rep,name=host,proto3" json:"host,omitempty"`$/;"	m	struct:http.Config	typeref:typename:[]string
HostID	app/p2p/wire/seedlist.pb.go	/^	HostID               string   `protobuf:"bytes,4,opt,name=hostID,proto3" json:"hostID,omitempty/;"	m	struct:wire.SeedInfo	typeref:typename:string
HostMapping	app/dns/config.proto	/^  message HostMapping {$/;"	m	message:v2ray.core.app.dns.Config
Hosts	app/dns/config.pb.go	/^	Hosts map[string]*net.IPOrDomain `protobuf:"bytes,2,rep,name=Hosts,proto3" json:"Hosts,omitempt/;"	m	struct:dns.Config	typeref:typename:map[string]*net.IPOrDomain
Hosts	app/dns/config.proto	/^  map<string, v2ray.core.common.net.IPOrDomain> Hosts = 2 [deprecated = true];$/;"	f	message:v2ray.core.app.dns.Config	typeref:typename:map<string,v2ray.core.common.net.IPOrDomain>
Hosts	infra/conf/dns.go	/^	Hosts    map[string]*Address `json:"hosts"`$/;"	m	struct:conf.DnsConfig	typeref:typename:map[string]*Address
HttpAccount	infra/conf/http.go	/^type HttpAccount struct {$/;"	s	package:conf
HttpAuthenticator	transport/internet/headers/http/http.go	/^type HttpAuthenticator struct {$/;"	s	package:http
HttpClientConfig	infra/conf/http.go	/^type HttpClientConfig struct {$/;"	s	package:conf
HttpConn	transport/internet/headers/http/http.go	/^type HttpConn struct {$/;"	s	package:http
HttpRemoteConfig	infra/conf/http.go	/^type HttpRemoteConfig struct {$/;"	s	package:conf
HttpResponse	infra/conf/blackhole.go	/^type HttpResponse struct{}$/;"	s	package:conf
HttpServerConfig	infra/conf/http.go	/^type HttpServerConfig struct {$/;"	s	package:conf
Hub	transport/internet/udp/hub.go	/^type Hub struct {$/;"	s	package:udp
HubCapacity	transport/internet/udp/hub.go	/^func HubCapacity(capacity int) HubOption {$/;"	f	package:udp	typeref:typename:HubOption
HubOption	transport/internet/udp/hub.go	/^type HubOption func(h *Hub)$/;"	t	package:udp	typeref:typename:func(h *Hub)
HubReceiveOriginalDestination	transport/internet/udp/hub.go	/^func HubReceiveOriginalDestination(r bool) HubOption {$/;"	f	package:udp	typeref:typename:HubOption
ID	common/mux/session.go	/^	ID           uint16$/;"	m	struct:mux.Session	typeref:typename:uint16
ID	common/protocol/headers.go	/^	ID       uuid.UUID$/;"	m	struct:protocol.CommandSwitchAccount	typeref:typename:uuid.UUID
ID	common/protocol/id.go	/^type ID struct {$/;"	s	package:protocol
ID	common/session/session.go	/^type ID uint32$/;"	t	package:session	typeref:typename:uint32
ID	infra/conf/vmess.go	/^	ID       string `json:"id"`$/;"	m	struct:conf.VMessAccount	typeref:typename:string
ID	proxy/vless/account.go	/^	ID *protocol.ID$/;"	m	struct:vless.MemoryAccount	typeref:typename:*protocol.ID
ID	proxy/vmess/account.go	/^	ID *protocol.ID$/;"	m	struct:vmess.MemoryAccount	typeref:typename:*protocol.ID
IDBytesLen	common/protocol/id.go	/^	IDBytesLen = 16$/;"	c	package:protocol
IDFromContext	common/session/context.go	/^func IDFromContext(ctx context.Context) ID {$/;"	f	package:session	typeref:typename:ID
IDHash	common/protocol/id.go	/^type IDHash func(key []byte) hash.Hash$/;"	t	package:protocol	typeref:typename:func(key []byte) hash.Hash
IP	app/dns/dnscommon.go	/^	IP     []net.Address$/;"	m	struct:dns.IPRecord	typeref:typename:[]net.Address
IP	common/net/address.go	/^	IP() net.IP     \/\/ IP of this Address$/;"	n	interface:net.Address	typeref:typename:net.IP
IP	common/net/address.go	/^func (a ipv4Address) IP() net.IP {$/;"	f	type:net.ipv4Address	typeref:typename:net.IP
IP	common/net/address.go	/^func (a ipv6Address) IP() net.IP {$/;"	f	type:net.ipv6Address	typeref:typename:net.IP
IP	common/net/address.go	/^func (domainAddress) IP() net.IP {$/;"	f	type:net.domainAddress	typeref:typename:net.IP
IP	common/net/system.go	/^type IP = net.IP$/;"	a	package:net	typeref:typename:net.IP
IP	infra/conf/p2p.go	/^	IP       string `json:"ip"`$/;"	m	struct:conf.P2PConfig	typeref:typename:string
IP	infra/conf/p2p.go	/^	IP       string `json:"ip"`$/;"	m	struct:conf.seed	typeref:typename:string
IPAddress	common/net/address.go	/^func IPAddress(ip []byte) Address {$/;"	f	package:net	typeref:typename:Address
IPMask	common/net/system.go	/^type IPMask = net.IPMask$/;"	a	package:net	typeref:typename:net.IPMask
IPNet	common/net/system.go	/^type IPNet = net.IPNet$/;"	a	package:net	typeref:typename:net.IPNet
IPOption	app/dns/nameserver.go	/^type IPOption struct {$/;"	s	package:dns
IPOrDomain	common/net/address.pb.go	/^type IPOrDomain struct {$/;"	s	package:net
IPOrDomain	common/net/address.proto	/^message IPOrDomain {$/;"	m	package:v2ray.core.common.net
IPOrDomain_Domain	common/net/address.pb.go	/^type IPOrDomain_Domain struct {$/;"	s	package:net
IPOrDomain_Ip	common/net/address.pb.go	/^type IPOrDomain_Ip struct {$/;"	s	package:net
IPRecord	app/dns/dnscommon.go	/^type IPRecord struct {$/;"	s	package:dns
IPv4Enable	app/dns/nameserver.go	/^	IPv4Enable bool$/;"	m	struct:dns.IPOption	typeref:typename:bool
IPv4Lookup	features/dns/client.go	/^type IPv4Lookup interface {$/;"	i	package:dns
IPv4len	common/net/system.go	/^const IPv4len = net.IPv4len$/;"	c	package:net
IPv6Enable	app/dns/nameserver.go	/^	IPv6Enable bool$/;"	m	struct:dns.IPOption	typeref:typename:bool
IPv6Lookup	features/dns/client.go	/^type IPv6Lookup interface {$/;"	i	package:dns
IPv6len	common/net/system.go	/^const IPv6len = net.IPv6len$/;"	c	package:net
IVBytes	proxy/shadowsocks/config.go	/^	IVBytes         int32$/;"	m	struct:shadowsocks.AEADCipher	typeref:typename:int32
IVBytes	proxy/shadowsocks/config.go	/^	IVBytes int32$/;"	m	struct:shadowsocks.ChaCha20	typeref:typename:int32
IVSize	proxy/shadowsocks/config.go	/^	IVSize() int32$/;"	n	interface:shadowsocks.Cipher	typeref:typename:int32
IVSize	proxy/shadowsocks/config.go	/^func (NoneCipher) IVSize() int32  { return 0 }$/;"	f	struct:shadowsocks.NoneCipher	typeref:typename:int32
IVSize	proxy/shadowsocks/config.go	/^func (c *AEADCipher) IVSize() int32 {$/;"	f	struct:shadowsocks.AEADCipher	typeref:typename:int32
IVSize	proxy/shadowsocks/config.go	/^func (v *AesCfb) IVSize() int32 {$/;"	f	struct:shadowsocks.AesCfb	typeref:typename:int32
IVSize	proxy/shadowsocks/config.go	/^func (v *ChaCha20) IVSize() int32 {$/;"	f	struct:shadowsocks.ChaCha20	typeref:typename:int32
Id	app/p2p/wire/seedlist.pb.go	/^	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`$/;"	m	struct:wire.MessageData	typeref:typename:string
Id	proxy/vless/account.pb.go	/^	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`$/;"	m	struct:vless.Account	typeref:typename:string
Id	proxy/vmess/account.pb.go	/^	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`$/;"	m	struct:vmess.Account	typeref:typename:string
Id	store/task.go	/^	Id         string$/;"	m	struct:store.Task	typeref:typename:string
Inbound	app/proxyman/command/command.pb.go	/^	Inbound *core.InboundHandlerConfig `protobuf:"bytes,1,opt,name=inbound,proto3" json:"inbound,om/;"	m	struct:command.AddInboundRequest	typeref:typename:*core.InboundHandlerConfig
Inbound	common/session/session.go	/^type Inbound struct {$/;"	s	package:session
Inbound	config.pb.go	/^	Inbound []*InboundHandlerConfig `protobuf:"bytes,1,rep,name=inbound,proto3" json:"inbound,omite/;"	m	struct:core.Config	typeref:typename:[]*InboundHandlerConfig
Inbound	features/routing/session/context.go	/^	Inbound  *session.Inbound$/;"	m	struct:session.Context	typeref:typename:*session.Inbound
Inbound	proxy/proxy.go	/^type Inbound interface {$/;"	i	package:proxy
InboundConfig	app/proxyman/config.pb.go	/^type InboundConfig struct {$/;"	s	package:proxyman
InboundConfig	app/proxyman/config.proto	/^message InboundConfig {}$/;"	m	package:v2ray.core.app.proxyman
InboundConfig	infra/conf/v2ray.go	/^	InboundConfig   *InboundDetourConfig   `json:"inbound"`        \/\/ Deprecated.$/;"	m	struct:conf.Config	typeref:typename:*InboundDetourConfig
InboundConfigs	infra/conf/v2ray.go	/^	InboundConfigs  []InboundDetourConfig  `json:"inbounds"`$/;"	m	struct:conf.Config	typeref:typename:[]InboundDetourConfig
InboundDetourAllocationConfig	infra/conf/v2ray.go	/^type InboundDetourAllocationConfig struct {$/;"	s	package:conf
InboundDetourConfig	infra/conf/v2ray.go	/^type InboundDetourConfig struct {$/;"	s	package:conf
InboundDetours	infra/conf/v2ray.go	/^	InboundDetours  []InboundDetourConfig  `json:"inboundDetour"`  \/\/ Deprecated.$/;"	m	struct:conf.Config	typeref:typename:[]InboundDetourConfig
InboundDownlink	app/policy/config.pb.go	/^	InboundDownlink  bool `protobuf:"varint,2,opt,name=inbound_downlink,json=inboundDownlink,proto3/;"	m	struct:policy.SystemPolicy_Stats	typeref:typename:bool
InboundDownlink	features/policy/policy.go	/^	InboundDownlink bool$/;"	m	struct:policy.SystemStats	typeref:typename:bool
InboundFromContext	common/session/context.go	/^func InboundFromContext(ctx context.Context) *Inbound {$/;"	f	package:session	typeref:typename:*Inbound
InboundHandlerConfig	app/proxyman/config.pb.go	/^type InboundHandlerConfig struct {$/;"	s	package:proxyman
InboundHandlerConfig	app/proxyman/config.proto	/^message InboundHandlerConfig {$/;"	m	package:v2ray.core.app.proxyman
InboundHandlerConfig	config.pb.go	/^type InboundHandlerConfig struct {$/;"	s	package:core
InboundHandlerConfig	config.proto	/^message InboundHandlerConfig {$/;"	m	package:v2ray.core
InboundOperation	app/proxyman/command/command.go	/^type InboundOperation interface {$/;"	i	package:command
InboundTag	app/router/command/command.pb.go	/^	InboundTag        string            `protobuf:"bytes,1,opt,name=InboundTag,proto3" json:"Inboun/;"	m	struct:command.RoutingContext	typeref:typename:string
InboundTag	app/router/command/command.proto	/^  string InboundTag = 1;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:string
InboundTag	app/router/config.pb.go	/^	InboundTag     []string      `protobuf:"bytes,8,rep,name=inbound_tag,json=inboundTag,proto3" js/;"	m	struct:router.RoutingRule	typeref:typename:[]string
InboundTagMatcher	app/router/condition.go	/^type InboundTagMatcher struct {$/;"	s	package:router
InboundUplink	app/policy/config.pb.go	/^	InboundUplink    bool `protobuf:"varint,1,opt,name=inbound_uplink,json=inboundUplink,proto3" js/;"	m	struct:policy.SystemPolicy_Stats	typeref:typename:bool
InboundUplink	features/policy/policy.go	/^	InboundUplink bool$/;"	m	struct:policy.SystemStats	typeref:typename:bool
IncrementalWorkerPicker	common/mux/client.go	/^type IncrementalWorkerPicker struct {$/;"	s	package:mux
IndexMatcher	common/strmatcher/strmatcher.go	/^type IndexMatcher interface {$/;"	i	package:strmatcher
InfluxDB	bin/config/config-server.json	/^    "InfluxDB":{"URL":"http:\/\/192.168.1.115:8086","DBName":"metric","UserName":"saveio","Passw/;"	o	object:porter
Info	common/log/log.proto	/^  Info = 3;$/;"	e	enum:v2ray.core.common.log.Severity
Init	app/dispatcher/default.go	/^func (d *DefaultDispatcher) Init(config *Config, om outbound.Manager, router routing.Router, pm /;"	f	struct:dispatcher.DefaultDispatcher	typeref:typename:error
Init	app/reverse/reverse.go	/^func (r *Reverse) Init(config *Config, d routing.Dispatcher, ohm outbound.Manager) error {$/;"	f	struct:reverse.Reverse	typeref:typename:error
Init	app/router/condition_geoip.go	/^func (m *GeoIPMatcher) Init(cidrs []*CIDR) error {$/;"	f	struct:router.GeoIPMatcher	typeref:typename:error
Init	app/router/router.go	/^func (r *Router) Init(config *Config, d dns.Client, ohm outbound.Manager) error {$/;"	f	struct:router.Router	typeref:typename:error
Init	common/buf/readv_posix.go	/^func (r *posixReader) Init(bs []*Buffer) {$/;"	f	struct:buf.posixReader
Init	common/buf/readv_reader.go	/^	Init([]*Buffer)$/;"	n	interface:buf.multiReader
Init	common/buf/readv_unix.go	/^func (r *unixReader) Init(bs []*Buffer) {$/;"	f	struct:buf.unixReader
Init	common/buf/readv_windows.go	/^func (r *windowsReader) Init(bs []*Buffer) {$/;"	f	struct:buf.windowsReader
Init	proxy/dns/dns.go	/^func (h *Handler) Init(config *Config, dnsClient dns.Client) error {$/;"	f	struct:dns.Handler	typeref:typename:error
Init	proxy/dokodemo/dokodemo.go	/^func (d *DokodemoDoor) Init(config *Config, pm policy.Manager, sockopt *session.Sockopt) error {$/;"	f	struct:dokodemo.DokodemoDoor	typeref:typename:error
Init	proxy/freedom/freedom.go	/^func (h *Handler) Init(config *Config, pm policy.Manager, d dns.Client) error {$/;"	f	struct:freedom.Handler	typeref:typename:error
InitializeServerConfig	testing/scenarios/common.go	/^func InitializeServerConfig(config *core.Config) (*exec.Cmd, error) {$/;"	f	package:scenarios	typeref:typename:(*exec.Cmd, error)
InitializeServerConfigs	testing/scenarios/common.go	/^func InitializeServerConfigs(configs ...*core.Config) ([]*exec.Cmd, error) {$/;"	f	package:scenarios	typeref:typename:([]*exec.Cmd, error)
Inner	common/buf/copy.go	/^func (e readError) Inner() error {$/;"	f	struct:buf.readError	typeref:typename:error
Inner	common/buf/copy.go	/^func (e writeError) Inner() error {$/;"	f	struct:buf.writeError	typeref:typename:error
Inner	common/errors/errors.go	/^	Inner() error$/;"	n	interface:errors.hasInnerError	typeref:typename:error
Inner	common/errors/errors.go	/^func (err *Error) Inner() error {$/;"	f	struct:errors.Error	typeref:typename:error
InnerIP	bin/config/config-server.json	/^    "InnerIP":"192.168.1.115",$/;"	s	object:porter
Input	infra/conf/general_test.go	/^	Input  string$/;"	m	struct:conf_test.TestCase	typeref:typename:string
Input	transport/internet/kcp/connection.go	/^func (c *Connection) Input(segments []Segment) {$/;"	f	struct:kcp.Connection
Insecure	infra/conf/transport_internet.go	/^	Insecure                 bool              `json:"allowInsecure"`$/;"	m	struct:conf.XTLSConfig	typeref:typename:bool
Insecure	infra/conf/transport_internet.go	/^	Insecure                 bool             `json:"allowInsecure"`$/;"	m	struct:conf.TLSConfig	typeref:typename:bool
InsecureCiphers	infra/conf/transport_internet.go	/^	InsecureCiphers          bool              `json:"allowInsecureCiphers"`$/;"	m	struct:conf.XTLSConfig	typeref:typename:bool
InsecureCiphers	infra/conf/transport_internet.go	/^	InsecureCiphers          bool             `json:"allowInsecureCiphers"`$/;"	m	struct:conf.TLSConfig	typeref:typename:bool
InsertOrUpdateAccount	app/p2p/account/account.go	/^func (this *SocksDB) InsertOrUpdateAccount(pubKey crypto.PubKey, privKey crypto.PrivKey) (error,/;"	f	struct:account.SocksDB	typeref:typename:(error, *Account)
InsertTask	store/task.go	/^func (this *SQLiteStorage) InsertTask(id, fileHash, fileName, walletAddr string, taskType uint64/;"	f	unknown:store.SQLiteStorage	typeref:typename:(bool, error)
Install	release/config/systemd/system/v2ray.service	/^[Install]$/;"	s
Install	release/config/systemd/system/v2ray@.service	/^[Install]$/;"	s
Instance	app/log/log.go	/^type Instance struct {$/;"	s	package:log
Instance	app/p2p/p2p.go	/^type Instance struct {$/;"	s	package:p2p
Instance	app/policy/manager.go	/^type Instance struct {$/;"	s	package:policy
Instance	common/signal/done/done.go	/^type Instance struct {$/;"	s	package:done
Instance	common/signal/semaphore/semaphore.go	/^type Instance struct {$/;"	s	package:semaphore
Instance	v2ray.go	/^type Instance struct {$/;"	s	package:core
Int31	app/p2p/wire/seedlist.pb.go	/^	Int31() int32$/;"	n	interface:wire.randySeedlist	typeref:typename:int32
Int63	app/p2p/wire/seedlist.pb.go	/^	Int63() int64$/;"	n	interface:wire.randySeedlist	typeref:typename:int64
IntValue	app/router/config.pb.go	/^	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`$/;"	m	struct:router.Domain_Attribute_IntValue	typeref:typename:int64
InterfaceName	bin/config/config-server.json	/^    "InterfaceName":"en0",$/;"	s	object:porter
Interrupt	app/dispatcher/default.go	/^func (r *cachedReader) Interrupt() {$/;"	f	struct:dispatcher.cachedReader
Interrupt	app/dispatcher/stats.go	/^func (w *SizeStatWriter) Interrupt() {$/;"	f	struct:dispatcher.SizeStatWriter
Interrupt	common/buf/reader.go	/^func (r *BufferedReader) Interrupt() {$/;"	f	struct:buf.BufferedReader
Interrupt	common/interfaces.go	/^	Interrupt()$/;"	n	interface:common.Interruptible
Interrupt	common/interfaces.go	/^func Interrupt(obj interface{}) error {$/;"	f	package:common	typeref:typename:error
Interrupt	common/protocol/dns/io.go	/^func (r *TCPReader) Interrupt() {$/;"	f	struct:dns.TCPReader
Interrupt	transport/pipe/impl.go	/^func (p *pipe) Interrupt() {$/;"	f	struct:pipe.pipe
Interrupt	transport/pipe/reader.go	/^func (r *Reader) Interrupt() {$/;"	f	struct:pipe.Reader
Interrupt	transport/pipe/writer.go	/^func (w *Writer) Interrupt() {$/;"	f	struct:pipe.Writer
Interruptible	common/interfaces.go	/^type Interruptible interface {$/;"	i	package:common
Interval	bin/config/config-server.json	/^    "InfluxDB":{"URL":"http:\/\/192.168.1.115:8086","DBName":"metric","UserName":"saveio","Passw/;"	n	object:porter.InfluxDB
Interval	common/task/periodic.go	/^	Interval time.Duration$/;"	m	struct:task.Periodic	typeref:typename:time.Duration
Interval	transport/internet/kcp/connection.go	/^func (u *Updater) Interval() time.Duration {$/;"	f	struct:kcp.Updater	typeref:typename:time.Duration
Intn	app/p2p/wire/seedlist.pb.go	/^	Intn(n int) int$/;"	n	interface:wire.randySeedlist	typeref:typename:int
Invalidate	common/protocol/server_spec.go	/^	Invalidate()$/;"	n	interface:protocol.ValidationStrategy
Invalidate	common/protocol/server_spec.go	/^func (alwaysValidStrategy) Invalidate() {}$/;"	f	struct:protocol.alwaysValidStrategy
Invalidate	common/protocol/server_spec.go	/^func (s *ServerSpec) Invalidate() {$/;"	f	struct:protocol.ServerSpec
Invalidate	common/protocol/server_spec.go	/^func (s *timeoutValidStrategy) Invalidate() {$/;"	f	struct:protocol.timeoutValidStrategy
Inverse	proxy/mtproto/auth.go	/^func Inverse(b []byte) []byte {$/;"	f	package:mtproto	typeref:typename:[]byte
Ip	app/dns/config.pb.go	/^	Ip     [][]byte           `protobuf:"bytes,3,rep,name=ip,proto3" json:"ip,omitempty"`$/;"	m	struct:dns.Config_HostMapping	typeref:typename:[][]byte
Ip	app/p2p/config.pb.go	/^	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`$/;"	m	struct:p2p.Config	typeref:typename:string
Ip	app/p2p/config.pb.go	/^	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`$/;"	m	struct:p2p.Seed	typeref:typename:string
Ip	app/p2p/wire/seedlist.pb.go	/^	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`$/;"	m	struct:wire.SeedInfo	typeref:typename:string
Ip	app/router/config.pb.go	/^	Ip []byte `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`$/;"	m	struct:router.CIDR	typeref:typename:[]byte
Ip	common/net/address.pb.go	/^	Ip []byte `protobuf:"bytes,1,opt,name=ip,proto3,oneof"`$/;"	m	struct:net.IPOrDomain_Ip	typeref:typename:[]byte
IpIfNonMatch	app/router/config.proto	/^    IpIfNonMatch = 2;$/;"	e	enum:v2ray.core.app.router.Config.DomainStrategy
IpOnDemand	app/router/config.proto	/^    IpOnDemand = 3;$/;"	e	enum:v2ray.core.app.router.Config.DomainStrategy
Is	transport/internet/kcp/connection.go	/^func (s State) Is(states ...State) bool {$/;"	f	type:kcp.State	typeref:typename:bool
IsAEAD	proxy/shadowsocks/config.go	/^	IsAEAD() bool$/;"	n	interface:shadowsocks.Cipher	typeref:typename:bool
IsAEAD	proxy/shadowsocks/config.go	/^func (*AEADCipher) IsAEAD() bool {$/;"	f	struct:shadowsocks.AEADCipher	typeref:typename:bool
IsAEAD	proxy/shadowsocks/config.go	/^func (*AesCfb) IsAEAD() bool {$/;"	f	struct:shadowsocks.AesCfb	typeref:typename:bool
IsAEAD	proxy/shadowsocks/config.go	/^func (*ChaCha20) IsAEAD() bool {$/;"	f	struct:shadowsocks.ChaCha20	typeref:typename:bool
IsAEAD	proxy/shadowsocks/config.go	/^func (NoneCipher) IsAEAD() bool {$/;"	f	struct:shadowsocks.NoneCipher	typeref:typename:bool
IsActive	app/reverse/bridge.go	/^func (w *BridgeWorker) IsActive() bool {$/;"	f	struct:reverse.BridgeWorker	typeref:typename:bool
IsClosed	common/signal/pubsub/pubsub.go	/^func (s *Subscriber) IsClosed() bool {$/;"	f	struct:pubsub.Subscriber	typeref:typename:bool
IsClosing	common/mux/client.go	/^func (m *ClientWorker) IsClosing() bool {$/;"	f	struct:mux.ClientWorker	typeref:typename:bool
IsDataAvailable	transport/internet/kcp/receiving.go	/^func (w *ReceivingWorker) IsDataAvailable() bool {$/;"	f	struct:kcp.ReceivingWorker	typeref:typename:bool
IsDomain	common/net/address.go	/^func (af AddressFamily) IsDomain() bool {$/;"	f	type:net.AddressFamily	typeref:typename:bool
IsEmpty	common/buf/buffer.go	/^func (b *Buffer) IsEmpty() bool {$/;"	f	struct:buf.Buffer	typeref:typename:bool
IsEmpty	common/buf/multi_buffer.go	/^func (mb MultiBuffer) IsEmpty() bool {$/;"	f	type:buf.MultiBuffer	typeref:typename:bool
IsEmpty	infra/conf/router.go	/^func (al *AttributeList) IsEmpty() bool {$/;"	f	struct:conf.AttributeList	typeref:typename:bool
IsEmpty	transport/internet/kcp/segment.go	/^func (s *AckSegment) IsEmpty() bool {$/;"	f	struct:kcp.AckSegment	typeref:typename:bool
IsEmpty	transport/internet/kcp/sending.go	/^func (sw *SendingWindow) IsEmpty() bool {$/;"	f	struct:kcp.SendingWindow	typeref:typename:bool
IsEmpty	transport/internet/kcp/sending.go	/^func (w *SendingWorker) IsEmpty() bool {$/;"	f	struct:kcp.SendingWorker	typeref:typename:bool
IsEnabled	transport/internet/config.go	/^func (m SocketConfig_TProxyMode) IsEnabled() bool {$/;"	f	unknown:internet.SocketConfig_TProxyMode	typeref:typename:bool
IsExperiment8357	transport/internet/tls/config.go	/^func (c *Config) IsExperiment8357() bool {$/;"	f	unknown:tls.Config	typeref:typename:bool
IsFull	app/reverse/portal.go	/^func (w *PortalWorker) IsFull() bool {$/;"	f	struct:reverse.PortalWorker	typeref:typename:bool
IsFull	common/buf/buffer.go	/^func (b *Buffer) IsFull() bool {$/;"	f	struct:buf.Buffer	typeref:typename:bool
IsFull	common/mux/client.go	/^func (m *ClientWorker) IsFull() bool {$/;"	f	struct:mux.ClientWorker	typeref:typename:bool
IsFull	transport/internet/kcp/segment.go	/^func (s *AckSegment) IsFull() bool {$/;"	f	struct:kcp.AckSegment	typeref:typename:bool
IsIP	common/net/address.go	/^func (af AddressFamily) IsIP() bool {$/;"	f	type:net.AddressFamily	typeref:typename:bool
IsIPv4	common/net/address.go	/^func (af AddressFamily) IsIPv4() bool {$/;"	f	type:net.AddressFamily	typeref:typename:bool
IsIPv6	common/net/address.go	/^func (af AddressFamily) IsIPv6() bool {$/;"	f	type:net.AddressFamily	typeref:typename:bool
IsOwnLink	app/dns/server.go	/^func (s *Server) IsOwnLink(ctx context.Context) bool {$/;"	f	struct:dns.Server	typeref:typename:bool
IsOwnLink	proxy/dns/dns.go	/^	IsOwnLink(ctx context.Context) bool$/;"	n	interface:dns.ownLinkVerifier	typeref:typename:bool
IsReadError	common/buf/copy.go	/^func IsReadError(err error) bool {$/;"	f	package:buf	typeref:typename:bool
IsValid	common/net/destination.go	/^func (d Destination) IsValid() bool {$/;"	f	struct:net.Destination	typeref:typename:bool
IsValid	common/protocol/server_spec.go	/^	IsValid() bool$/;"	n	interface:protocol.ValidationStrategy	typeref:typename:bool
IsValid	common/protocol/server_spec.go	/^func (alwaysValidStrategy) IsValid() bool {$/;"	f	struct:protocol.alwaysValidStrategy	typeref:typename:bool
IsValid	common/protocol/server_spec.go	/^func (s *ServerSpec) IsValid() bool {$/;"	f	struct:protocol.ServerSpec	typeref:typename:bool
IsValid	common/protocol/server_spec.go	/^func (s *timeoutValidStrategy) IsValid() bool {$/;"	f	struct:protocol.timeoutValidStrategy	typeref:typename:bool
IsValidTLSVersion	common/protocol/tls/sniff.go	/^func IsValidTLSVersion(major, minor byte) bool {$/;"	f	package:tls	typeref:typename:bool
IsWriteError	common/buf/copy.go	/^func IsWriteError(err error) bool {$/;"	f	package:buf	typeref:typename:bool
JSONConfigLoader	infra/conf/loader.go	/^type JSONConfigLoader struct {$/;"	s	package:conf
KCPConfig	infra/conf/transport.go	/^	KCPConfig  *KCPConfig          `json:"kcpSettings"`$/;"	m	struct:conf.TransportConfig	typeref:typename:*KCPConfig
KCPConfig	infra/conf/transport_internet.go	/^type KCPConfig struct {$/;"	s	package:conf
KCPPacketReader	transport/internet/kcp/io.go	/^type KCPPacketReader struct {$/;"	s	package:kcp
KCPPacketWriter	transport/internet/kcp/io.go	/^type KCPPacketWriter struct {$/;"	s	package:kcp
KCPSettings	infra/conf/transport_internet.go	/^	KCPSettings    *KCPConfig          `json:"kcpSettings"`$/;"	m	struct:conf.StreamConfig	typeref:typename:*KCPConfig
KDF	proxy/vmess/aead/kdf.go	/^func KDF(key []byte, path ...string) []byte {$/;"	f	package:aead	typeref:typename:[]byte
KDF16	proxy/vmess/aead/kdf.go	/^func KDF16(key []byte, path ...string) []byte {$/;"	f	package:aead	typeref:typename:[]byte
KDFSaltConst_AEADRespHeaderLenIV	proxy/vmess/aead/consts.go	/^const KDFSaltConst_AEADRespHeaderLenIV = "AEAD Resp Header Len IV"$/;"	c	package:aead
KDFSaltConst_AEADRespHeaderLenKey	proxy/vmess/aead/consts.go	/^const KDFSaltConst_AEADRespHeaderLenKey = "AEAD Resp Header Len Key"$/;"	c	package:aead
KDFSaltConst_AEADRespHeaderPayloadIV	proxy/vmess/aead/consts.go	/^const KDFSaltConst_AEADRespHeaderPayloadIV = "AEAD Resp Header IV"$/;"	c	package:aead
KDFSaltConst_AEADRespHeaderPayloadKey	proxy/vmess/aead/consts.go	/^const KDFSaltConst_AEADRespHeaderPayloadKey = "AEAD Resp Header Key"$/;"	c	package:aead
KDFSaltConst_AuthIDEncryptionKey	proxy/vmess/aead/consts.go	/^const KDFSaltConst_AuthIDEncryptionKey = "AES Auth ID Encryption"$/;"	c	package:aead
KDFSaltConst_VMessAEADKDF	proxy/vmess/aead/consts.go	/^const KDFSaltConst_VMessAEADKDF = "VMess AEAD KDF"$/;"	c	package:aead
KDFSaltConst_VMessHeaderPayloadAEADIV	proxy/vmess/aead/consts.go	/^const KDFSaltConst_VMessHeaderPayloadAEADIV = "VMess Header AEAD Nonce"$/;"	c	package:aead
KDFSaltConst_VMessHeaderPayloadAEADKey	proxy/vmess/aead/consts.go	/^const KDFSaltConst_VMessHeaderPayloadAEADKey = "VMess Header AEAD Key"$/;"	c	package:aead
KDFSaltConst_VMessHeaderPayloadLengthAEADIV	proxy/vmess/aead/consts.go	/^const KDFSaltConst_VMessHeaderPayloadLengthAEADIV = "VMess Header AEAD Nonce_Length"$/;"	c	package:aead
KDFSaltConst_VMessHeaderPayloadLengthAEADKey	proxy/vmess/aead/consts.go	/^const KDFSaltConst_VMessHeaderPayloadLengthAEADKey = "VMess Header AEAD Key_Length"$/;"	c	package:aead
KPort	bin/config/config-server.json	/^    "KPort":6008,$/;"	n	object:porter
Key	app/router/config.pb.go	/^	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`$/;"	m	struct:router.Domain_Attribute	typeref:typename:string
Key	common/protocol/tls/cert/cert_test.go	/^	Key         []string `json:"key"`$/;"	m	struct:cert.jsonCert	typeref:typename:[]string
Key	infra/conf/transport_internet.go	/^	Key      string          `json:"key"`$/;"	m	struct:conf.QUICConfig	typeref:typename:string
Key	infra/control/cert.go	/^	Key         []string `json:"key"`$/;"	m	struct:control.jsonCert	typeref:typename:[]string
Key	proxy/shadowsocks/config.go	/^	Key    []byte$/;"	m	struct:shadowsocks.MemoryAccount	typeref:typename:[]byte
Key	proxy/trojan/config.go	/^	Key      []byte$/;"	m	struct:trojan.MemoryAccount	typeref:typename:[]byte
Key	transport/internet/quic/config.pb.go	/^	Key      string                   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`$/;"	m	struct:quic.Config	typeref:typename:string
Key	transport/internet/tls/config.pb.go	/^	Key   []byte            `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`$/;"	m	struct:tls.Certificate	typeref:typename:[]byte
Key	transport/internet/tls/config.proto	/^  bytes Key = 2;$/;"	f	message:v2ray.core.transport.internet.tls.Certificate	typeref:typename:bytes
Key	transport/internet/websocket/config.pb.go	/^	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`$/;"	m	struct:websocket.Header	typeref:typename:string
Key	transport/internet/xtls/config.pb.go	/^	Key   []byte            `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`$/;"	m	struct:xtls.Certificate	typeref:typename:[]byte
Key	transport/internet/xtls/config.proto	/^  bytes Key = 2;$/;"	f	message:v2ray.core.transport.internet.xtls.Certificate	typeref:typename:bytes
KeyBytes	proxy/shadowsocks/config.go	/^	KeyBytes        int32$/;"	m	struct:shadowsocks.AEADCipher	typeref:typename:int32
KeyBytes	proxy/shadowsocks/config.go	/^	KeyBytes int32$/;"	m	struct:shadowsocks.AesCfb	typeref:typename:int32
KeyFile	infra/conf/transport_internet.go	/^	KeyFile  string   `json:"keyFile"`$/;"	m	struct:conf.TLSCertConfig	typeref:typename:string
KeyFile	infra/conf/transport_internet.go	/^	KeyFile  string   `json:"keyFile"`$/;"	m	struct:conf.XTLSCertConfig	typeref:typename:string
KeySize	proxy/shadowsocks/config.go	/^	KeySize() int32$/;"	n	interface:shadowsocks.Cipher	typeref:typename:int32
KeySize	proxy/shadowsocks/config.go	/^func (NoneCipher) KeySize() int32 { return 0 }$/;"	f	struct:shadowsocks.NoneCipher	typeref:typename:int32
KeySize	proxy/shadowsocks/config.go	/^func (c *AEADCipher) KeySize() int32 {$/;"	f	struct:shadowsocks.AEADCipher	typeref:typename:int32
KeySize	proxy/shadowsocks/config.go	/^func (v *AesCfb) KeySize() int32 {$/;"	f	struct:shadowsocks.AesCfb	typeref:typename:int32
KeySize	proxy/shadowsocks/config.go	/^func (v *ChaCha20) KeySize() int32 {$/;"	f	struct:shadowsocks.ChaCha20	typeref:typename:int32
KeyStr	infra/conf/transport_internet.go	/^	KeyStr   []string `json:"key"`$/;"	m	struct:conf.TLSCertConfig	typeref:typename:[]string
KeyStr	infra/conf/transport_internet.go	/^	KeyStr   []string `json:"key"`$/;"	m	struct:conf.XTLSCertConfig	typeref:typename:[]string
KeyUsage	common/protocol/tls/cert/cert.go	/^func KeyUsage(usage x509.KeyUsage) Option {$/;"	f	package:cert	typeref:typename:Option
Keyword	app/dns/config.proto	/^  Keyword = 2;$/;"	e	enum:v2ray.core.app.dns.DomainMatchingType
KnownProtocols	app/proxyman/config.pb.go	/^type KnownProtocols int32$/;"	t	package:proxyman	typeref:typename:int32
KnownProtocols	app/proxyman/config.proto	/^enum KnownProtocols {$/;"	g	package:v2ray.core.app.proxyman
KnownProtocols_HTTP	app/proxyman/config.pb.go	/^	KnownProtocols_HTTP KnownProtocols = 0$/;"	c	package:proxyman	typeref:type:KnownProtocols
KnownProtocols_TLS	app/proxyman/config.pb.go	/^	KnownProtocols_TLS  KnownProtocols = 1$/;"	c	package:proxyman	typeref:type:KnownProtocols
KnownProtocols_name	app/proxyman/config.pb.go	/^	KnownProtocols_name = map[int32]string{$/;"	v	package:proxyman
KnownProtocols_value	app/proxyman/config.pb.go	/^	KnownProtocols_value = map[string]int32{$/;"	v	package:proxyman
LEGACY	common/protocol/headers.proto	/^  LEGACY = 1;$/;"	e	enum:v2ray.core.common.protocol.SecurityType
Latency	common/peer/latency.go	/^type Latency interface {$/;"	i	package:peer
Len	app/router/condition.go	/^func (v *ConditionChan) Len() int {$/;"	f	type:router.ConditionChan	typeref:typename:int
Len	app/router/config.go	/^func (l *CIDRList) Len() int {$/;"	f	type:router.CIDRList	typeref:typename:int
Len	common/buf/buffer.go	/^func (b *Buffer) Len() int32 {$/;"	f	struct:buf.Buffer	typeref:typename:int32
Len	common/buf/multi_buffer.go	/^func (mb MultiBuffer) Len() int32 {$/;"	f	type:buf.MultiBuffer	typeref:typename:int32
Len	infra/conf/common.go	/^func (v StringList) Len() int {$/;"	f	type:conf.StringList	typeref:typename:int
Len	transport/internet/kcp/sending.go	/^func (sw *SendingWindow) Len() uint32 {$/;"	f	struct:kcp.SendingWindow	typeref:typename:uint32
LengthPacketReader	proxy/vless/encoding/addons.go	/^type LengthPacketReader struct {$/;"	s	package:encoding
LengthPacketWriter	proxy/vless/encoding/addons.go	/^type LengthPacketWriter struct {$/;"	s	package:encoding
Less	app/router/config.go	/^func (l *CIDRList) Less(i int, j int) bool {$/;"	f	type:router.CIDRList	typeref:typename:bool
Level	app/policy/config.pb.go	/^	Level  map[uint32]*Policy `protobuf:"bytes,1,rep,name=level,proto3" json:"level,omitempty" prot/;"	m	struct:policy.Config	typeref:typename:map[uint32]*Policy
Level	common/protocol/headers.go	/^	Level    uint32$/;"	m	struct:protocol.CommandSwitchAccount	typeref:typename:uint32
Level	common/protocol/user.go	/^	Level   uint32$/;"	m	struct:protocol.MemoryUser	typeref:typename:uint32
Level	common/protocol/user.pb.go	/^	Level uint32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`$/;"	m	struct:protocol.User	typeref:typename:uint32
Level	infra/conf/shadowsocks.go	/^	Level       byte         `json:"level"`$/;"	m	struct:conf.ShadowsocksServerConfig	typeref:typename:byte
Level	infra/conf/shadowsocks.go	/^	Level    byte     `json:"level"`$/;"	m	struct:conf.ShadowsocksServerTarget	typeref:typename:byte
Level	infra/conf/trojan.go	/^	Level    byte     `json:"level"`$/;"	m	struct:conf.TrojanServerTarget	typeref:typename:byte
Level	infra/conf/trojan.go	/^	Level    byte   `json:"level"`$/;"	m	struct:conf.TrojanUserConfig	typeref:typename:byte
Level	infra/conf/vmess.go	/^	Level    byte   `json:"level"`$/;"	m	struct:conf.VMessDefaultConfig	typeref:typename:byte
Level	proxy/vmess/inbound/config.pb.go	/^	Level   uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`$/;"	m	struct:inbound.DefaultConfig	typeref:typename:uint32
LevelByte	infra/conf/common.go	/^	LevelByte   byte   `json:"level"`$/;"	m	struct:conf.User	typeref:typename:byte
LevelDBStore	store/leveldb.go	/^type LevelDBStore struct {$/;"	s	package:store
Levels	infra/conf/policy.go	/^	Levels map[uint32]*Policy `json:"levels"`$/;"	m	struct:conf.PolicyConfig	typeref:typename:map[uint32]*Policy
License	README.md	/^## License$/;"	s	chapter:Project V
LineSeparator	common/platform/others.go	/^func LineSeparator() string {$/;"	f	package:platform	typeref:typename:string
LineSeparator	common/platform/windows.go	/^func LineSeparator() string {$/;"	f	package:platform	typeref:typename:string
Link	transport/link.go	/^type Link struct {$/;"	s	package:transport
Listen	app/proxyman/config.pb.go	/^	Listen                     *net.IPOrDomain        `protobuf:"bytes,2,opt,name=listen,proto3" js/;"	m	struct:proxyman.ReceiverConfig	typeref:typename:*net.IPOrDomain
Listen	common/net/system.go	/^var Listen = net.Listen$/;"	v	package:net
Listen	testing/servers/tcp/tcp.go	/^	Listen       net.Address$/;"	m	struct:tcp.Server	typeref:typename:net.Address
Listen	transport/internet/domainsocket/listener.go	/^func Listen(ctx context.Context, address net.Address, port net.Port, streamSettings *internet.Me/;"	f	package:domainsocket	typeref:typename:(internet.Listener, error)
Listen	transport/internet/http/hub.go	/^func Listen(ctx context.Context, address net.Address, port net.Port, streamSettings *internet.Me/;"	f	package:http	typeref:typename:(internet.Listener, error)
Listen	transport/internet/quic/hub.go	/^func Listen(ctx context.Context, address net.Address, port net.Port, streamSettings *internet.Me/;"	f	package:quic	typeref:typename:(internet.Listener, error)
Listen	transport/internet/system_listener.go	/^func (dl *DefaultListener) Listen(ctx context.Context, addr net.Addr, sockopt *SocketConfig) (ne/;"	f	struct:internet.DefaultListener	typeref:typename:(net.Listener, error)
ListenConfig	common/net/system.go	/^type ListenConfig = net.ListenConfig$/;"	a	package:net	typeref:typename:net.ListenConfig
ListenFunc	transport/internet/tcp_hub.go	/^type ListenFunc func(ctx context.Context, address net.Address, port net.Port, settings *MemorySt/;"	t	package:internet	typeref:typename:func(ctx context.Context, address net.Address, port net.Port, settings *MemoryStreamConfig, handler ConnHandler) (Listener, error)
ListenKCP	transport/internet/kcp/listener.go	/^func ListenKCP(ctx context.Context, address net.Address, port net.Port, streamSettings *internet/;"	f	package:kcp	typeref:typename:(internet.Listener, error)
ListenOn	infra/conf/v2ray.go	/^	ListenOn       *Address                       `json:"listen"`$/;"	m	struct:conf.InboundDetourConfig	typeref:typename:*Address
ListenPacket	transport/internet/system_listener.go	/^func (dl *DefaultListener) ListenPacket(ctx context.Context, addr net.Addr, sockopt *SocketConfi/;"	f	struct:internet.DefaultListener	typeref:typename:(net.PacketConn, error)
ListenSystem	transport/internet/tcp_hub.go	/^func ListenSystem(ctx context.Context, addr net.Addr, sockopt *SocketConfig) (net.Listener, erro/;"	f	package:internet	typeref:typename:(net.Listener, error)
ListenSystemPacket	transport/internet/tcp_hub.go	/^func ListenSystemPacket(ctx context.Context, addr net.Addr, sockopt *SocketConfig) (net.PacketCo/;"	f	package:internet	typeref:typename:(net.PacketConn, error)
ListenTCP	common/net/system.go	/^var ListenTCP = net.ListenTCP$/;"	v	package:net
ListenTCP	transport/internet/tcp/hub.go	/^func ListenTCP(ctx context.Context, address net.Address, port net.Port, streamSettings *internet/;"	f	package:tcp	typeref:typename:(internet.Listener, error)
ListenTCP	transport/internet/tcp_hub.go	/^func ListenTCP(ctx context.Context, address net.Address, port net.Port, settings *MemoryStreamCo/;"	f	package:internet	typeref:typename:(Listener, error)
ListenUDP	common/net/system.go	/^var ListenUDP = net.ListenUDP$/;"	v	package:net
ListenUDP	transport/internet/udp/hub.go	/^func ListenUDP(ctx context.Context, address net.Address, port net.Port, streamSettings *internet/;"	f	package:udp	typeref:typename:(*Hub, error)
ListenUnix	common/net/system.go	/^var ListenUnix = net.ListenUnix$/;"	v	package:net
ListenWS	transport/internet/websocket/hub.go	/^func ListenWS(ctx context.Context, address net.Address, port net.Port, streamSettings *internet./;"	f	package:websocket	typeref:typename:(internet.Listener, error)
Listener	common/net/system.go	/^type Listener = net.Listener$/;"	a	package:net	typeref:typename:net.Listener
Listener	transport/internet/domainsocket/listener.go	/^type Listener struct {$/;"	s	package:domainsocket
Listener	transport/internet/http/hub.go	/^type Listener struct {$/;"	s	package:http
Listener	transport/internet/kcp/listener.go	/^type Listener struct {$/;"	s	package:kcp
Listener	transport/internet/quic/hub.go	/^type Listener struct {$/;"	s	package:quic
Listener	transport/internet/tcp/hub.go	/^type Listener struct {$/;"	s	package:tcp
Listener	transport/internet/tcp_hub.go	/^type Listener interface {$/;"	i	package:internet
Listener	transport/internet/websocket/hub.go	/^type Listener struct {$/;"	s	package:websocket
LiveObjects	app/stats/command/command.pb.go	/^	LiveObjects  uint64 `protobuf:"varint,8,opt,name=LiveObjects,proto3" json:"LiveObjects,omitempt/;"	m	struct:command.SysStatsResponse	typeref:typename:uint64
LiveObjects	app/stats/command/command.proto	/^  uint64 LiveObjects = 8;$/;"	f	message:v2ray.core.app.stats.command.SysStatsResponse	typeref:typename:uint64
Load	infra/conf/loader.go	/^func (v *JSONConfigLoader) Load(raw []byte) (interface{}, string, error) {$/;"	f	struct:conf.JSONConfigLoader	typeref:typename:(interface{}, string, error)
LoadArg	infra/control/config.go	/^func (c *ConfigCommand) LoadArg(arg string) (out io.Reader, err error) {$/;"	f	struct:control.ConfigCommand	typeref:typename:(out io.Reader, err error)
LoadConfig	config.go	/^func LoadConfig(formatName string, filename string, input interface{}) (*Config, error) {$/;"	f	package:core	typeref:typename:(*Config, error)
LoadConfig	main/confloader/confloader.go	/^func LoadConfig(file string) (io.Reader, error) {$/;"	f	package:confloader	typeref:typename:(io.Reader, error)
LoadExtConfig	main/confloader/confloader.go	/^func LoadExtConfig(files []string) (io.Reader, error) {$/;"	f	package:confloader	typeref:typename:(io.Reader, error)
LoadJSONConfig	infra/conf/serial/loader.go	/^func LoadJSONConfig(reader io.Reader) (*core.Config, error) {$/;"	f	package:serial	typeref:typename:(*core.Config, error)
LoadWithID	infra/conf/loader.go	/^func (v *JSONConfigLoader) LoadWithID(raw []byte, id string) (interface{}, error) {$/;"	f	struct:conf.JSONConfigLoader	typeref:typename:(interface{}, error)
Loader	config.go	/^	Loader    ConfigLoader$/;"	m	struct:core.ConfigFormat	typeref:typename:ConfigLoader
LocalAddr	app/proxyman/inbound/worker.go	/^func (c *udpConn) LocalAddr() net.Addr {$/;"	f	struct:inbound.udpConn	typeref:typename:net.Addr
LocalAddr	common/net/connection.go	/^func (c *connection) LocalAddr() net.Addr {$/;"	f	struct:net.connection	typeref:typename:net.Addr
LocalAddr	transport/internet/kcp/connection.go	/^	LocalAddr    net.Addr$/;"	m	struct:kcp.ConnMetadata	typeref:typename:net.Addr
LocalAddr	transport/internet/kcp/connection.go	/^func (c *Connection) LocalAddr() net.Addr {$/;"	f	struct:kcp.Connection	typeref:typename:net.Addr
LocalAddr	transport/internet/quic/conn.go	/^func (c *interConn) LocalAddr() net.Addr {$/;"	f	struct:quic.interConn	typeref:typename:net.Addr
LocalAddr	transport/internet/quic/conn.go	/^func (c *sysConn) LocalAddr() net.Addr {$/;"	f	struct:quic.sysConn	typeref:typename:net.Addr
LocalAddr	transport/internet/system_dialer.go	/^func (c *packetConnWrapper) LocalAddr() net.Addr {$/;"	f	struct:internet.packetConnWrapper	typeref:typename:net.Addr
LocalAddr	transport/internet/udp/dispatcher.go	/^func (c *dispatcherConn) LocalAddr() net.Addr {$/;"	f	struct:udp.dispatcherConn	typeref:typename:net.Addr
LocalAddr	transport/internet/websocket/connection.go	/^func (c *connection) LocalAddr() net.Addr {$/;"	f	struct:websocket.connection	typeref:typename:net.Addr
LocalHostDomain	common/net/address.go	/^	LocalHostDomain = DomainAddress("localhost")$/;"	v	package:net
LocalHostIP	common/net/address.go	/^	LocalHostIP = IPAddress([]byte{127, 0, 0, 1})$/;"	v	package:net
LocalHostIPv6	common/net/address.go	/^	LocalHostIPv6 = IPAddress([]byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1})$/;"	v	package:net
LogConfig	infra/conf/log.go	/^type LogConfig struct {$/;"	s	package:conf
LogConfig	infra/conf/v2ray.go	/^	LogConfig       *LogConfig             `json:"log"`$/;"	m	struct:conf.Config	typeref:typename:*LogConfig
LogDir	bin/config/config-server.json	/^    "LogDir":".\/",$/;"	s	object:porter
LogHandler	testing/mocks/log.go	/^type LogHandler struct {$/;"	s	package:mocks
LogHandlerMockRecorder	testing/mocks/log.go	/^type LogHandlerMockRecorder struct {$/;"	s	package:mocks
LogLevel	bin/config/config-server.json	/^    "LogLevel":1,$/;"	n	object:porter
LogLevel	infra/conf/log.go	/^	LogLevel  string `json:"loglevel"`$/;"	m	struct:conf.LogConfig	typeref:typename:string
LogType	app/log/config.pb.go	/^type LogType int32$/;"	t	package:log	typeref:typename:int32
LogType	app/log/config.proto	/^enum LogType {$/;"	g	package:v2ray.core.app.log
LogType_Console	app/log/config.pb.go	/^	LogType_Console LogType = 1$/;"	c	package:log	typeref:type:LogType
LogType_Event	app/log/config.pb.go	/^	LogType_Event   LogType = 3$/;"	c	package:log	typeref:type:LogType
LogType_File	app/log/config.pb.go	/^	LogType_File    LogType = 2$/;"	c	package:log	typeref:type:LogType
LogType_None	app/log/config.pb.go	/^	LogType_None    LogType = 0$/;"	c	package:log	typeref:type:LogType
LogType_name	app/log/config.pb.go	/^	LogType_name = map[int32]string{$/;"	v	package:log
LogType_value	app/log/config.pb.go	/^	LogType_value = map[string]int32{$/;"	v	package:log
LoggerServer	app/log/command/command.go	/^type LoggerServer struct {$/;"	s	package:command
LoggerService	app/log/command/config.proto	/^service LoggerService {$/;"	s	package:v2ray.core.app.log.command
LoggerServiceClient	app/log/command/config_grpc.pb.go	/^type LoggerServiceClient interface {$/;"	i	package:command
LoggerServiceServer	app/log/command/config_grpc.pb.go	/^type LoggerServiceServer interface {$/;"	i	package:command
LookupIP	app/dns/hosts.go	/^func (h *StaticHosts) LookupIP(domain string, option IPOption) []net.Address {$/;"	f	struct:dns.StaticHosts	typeref:typename:[]net.Address
LookupIP	app/dns/server.go	/^func (s *Server) LookupIP(domain string) ([]net.IP, error) {$/;"	f	struct:dns.Server	typeref:typename:([]net.IP, error)
LookupIP	common/net/system.go	/^var LookupIP = net.LookupIP$/;"	v	package:net
LookupIP	features/dns/client.go	/^	LookupIP(domain string) ([]net.IP, error)$/;"	n	interface:dns.Client	typeref:typename:([]net.IP, error)
LookupIP	features/dns/localdns/client.go	/^func (*Client) LookupIP(host string) ([]net.IP, error) {$/;"	f	struct:localdns.Client	typeref:typename:([]net.IP, error)
LookupIP	testing/mocks/dns.go	/^func (m *DNSClient) LookupIP(arg0 string) ([]net.IP, error) {$/;"	f	struct:mocks.DNSClient	typeref:typename:([]net.IP, error)
LookupIP	testing/mocks/dns.go	/^func (mr *DNSClientMockRecorder) LookupIP(arg0 interface{}) *gomock.Call {$/;"	f	struct:mocks.DNSClientMockRecorder	typeref:typename:*gomock.Call
LookupIPv4	app/dns/server.go	/^func (s *Server) LookupIPv4(domain string) ([]net.IP, error) {$/;"	f	struct:dns.Server	typeref:typename:([]net.IP, error)
LookupIPv4	features/dns/client.go	/^	LookupIPv4(domain string) ([]net.IP, error)$/;"	n	interface:dns.IPv4Lookup	typeref:typename:([]net.IP, error)
LookupIPv4	features/dns/localdns/client.go	/^func (c *Client) LookupIPv4(host string) ([]net.IP, error) {$/;"	f	struct:localdns.Client	typeref:typename:([]net.IP, error)
LookupIPv6	app/dns/server.go	/^func (s *Server) LookupIPv6(domain string) ([]net.IP, error) {$/;"	f	struct:dns.Server	typeref:typename:([]net.IP, error)
LookupIPv6	features/dns/client.go	/^	LookupIPv6(domain string) ([]net.IP, error)$/;"	n	interface:dns.IPv6Lookup	typeref:typename:([]net.IP, error)
LookupIPv6	features/dns/localdns/client.go	/^func (c *Client) LookupIPv6(host string) ([]net.IP, error) {$/;"	f	struct:localdns.Client	typeref:typename:([]net.IP, error)
LoveCommand	infra/control/love.go	/^type LoveCommand struct{}$/;"	s	package:control
MKCP	transport/internet/config.proto	/^  MKCP = 2;$/;"	e	enum:v2ray.core.transport.internet.TransportProtocol
MTProtoAccount	infra/conf/mtproto.go	/^type MTProtoAccount struct {$/;"	s	package:conf
MTProtoClientConfig	infra/conf/mtproto.go	/^type MTProtoClientConfig struct {$/;"	s	package:conf
MTProtoServerConfig	infra/conf/mtproto.go	/^type MTProtoServerConfig struct {$/;"	s	package:conf
MTU	transport/internet/kcp/config.pb.go	/^type MTU struct {$/;"	s	package:kcp
MTU	transport/internet/kcp/config.proto	/^message MTU {$/;"	m	package:v2ray.core.transport.internet.kcp
Mallocs	app/stats/command/command.pb.go	/^	Mallocs      uint64 `protobuf:"varint,6,opt,name=Mallocs,proto3" json:"Mallocs,omitempty"`$/;"	m	struct:command.SysStatsResponse	typeref:typename:uint64
Mallocs	app/stats/command/command.proto	/^  uint64 Mallocs = 6;$/;"	f	message:v2ray.core.app.stats.command.SysStatsResponse	typeref:typename:uint64
Manager	app/proxyman/inbound/inbound.go	/^type Manager struct {$/;"	s	package:inbound
Manager	app/proxyman/outbound/outbound.go	/^type Manager struct {$/;"	s	package:outbound
Manager	app/router/router_test.go	/^	outbound.Manager$/;"	M	struct:router_test.mockOutboundManager	typeref:typename:outbound.Manager
Manager	app/stats/stats.go	/^type Manager struct {$/;"	s	package:stats
Manager	features/inbound/inbound.go	/^type Manager interface {$/;"	i	package:inbound
Manager	features/outbound/outbound.go	/^type Manager interface {$/;"	i	package:outbound
Manager	features/policy/policy.go	/^type Manager interface {$/;"	i	package:policy
Manager	features/stats/stats.go	/^type Manager interface {$/;"	i	package:stats
ManagerType	features/inbound/inbound.go	/^func ManagerType() interface{} {$/;"	f	package:inbound	typeref:typename:interface{}
ManagerType	features/outbound/outbound.go	/^func ManagerType() interface{} {$/;"	f	package:outbound	typeref:typename:interface{}
ManagerType	features/policy/policy.go	/^func ManagerType() interface{} {$/;"	f	package:policy	typeref:typename:interface{}
ManagerType	features/stats/stats.go	/^func ManagerType() interface{} {$/;"	f	package:stats	typeref:typename:interface{}
Mark	common/session/session.go	/^	Mark int32$/;"	m	struct:session.Sockopt	typeref:typename:int32
Mark	infra/conf/transport_internet.go	/^	Mark   int32  `json:"mark"`$/;"	m	struct:conf.SocketConfig	typeref:typename:int32
Mark	transport/internet/config.pb.go	/^	Mark int32 `protobuf:"varint,1,opt,name=mark,proto3" json:"mark,omitempty"`$/;"	m	struct:internet.SocketConfig	typeref:typename:int32
Marker	transport/internet/headers/srtp/config.pb.go	/^	Marker      bool   `protobuf:"varint,5,opt,name=marker,proto3" json:"marker,omitempty"`$/;"	m	struct:srtp.Config	typeref:typename:bool
Marshal	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) Marshal() (dAtA []byte, err error) {$/;"	f	struct:wire.HelloSeedList	typeref:typename:(dAtA []byte, err error)
Marshal	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) Marshal() (dAtA []byte, err error) {$/;"	f	struct:wire.MessageData	typeref:typename:(dAtA []byte, err error)
Marshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) Marshal() (dAtA []byte, err error) {$/;"	f	struct:wire.SeedInfo	typeref:typename:(dAtA []byte, err error)
Marshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListRequest) Marshal() (dAtA []byte, err error) {$/;"	f	struct:wire.SeedListRequest	typeref:typename:(dAtA []byte, err error)
Marshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListResponse) Marshal() (dAtA []byte, err error) {$/;"	f	struct:wire.SeedListResponse	typeref:typename:(dAtA []byte, err error)
Marshal	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) Marshal() (dAtA []byte, err error) {$/;"	f	struct:encoding.Addons	typeref:typename:(dAtA []byte, err error)
Marshal	proxy/vmess/encoding/commands.go	/^	Marshal(command interface{}, writer io.Writer) error$/;"	n	interface:encoding.CommandFactory	typeref:typename:error
Marshal	proxy/vmess/encoding/commands.go	/^func (f *CommandSwitchAccountFactory) Marshal(command interface{}, writer io.Writer) error {$/;"	f	struct:encoding.CommandSwitchAccountFactory	typeref:typename:error
MarshalCommand	proxy/vmess/encoding/commands.go	/^func MarshalCommand(command interface{}, writer io.Writer) error {$/;"	f	package:encoding	typeref:typename:error
MarshalTo	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) MarshalTo(dAtA []byte) (int, error) {$/;"	f	struct:wire.HelloSeedList	typeref:typename:(int, error)
MarshalTo	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) MarshalTo(dAtA []byte) (int, error) {$/;"	f	struct:wire.MessageData	typeref:typename:(int, error)
MarshalTo	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) MarshalTo(dAtA []byte) (int, error) {$/;"	f	struct:wire.SeedInfo	typeref:typename:(int, error)
MarshalTo	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListRequest) MarshalTo(dAtA []byte) (int, error) {$/;"	f	struct:wire.SeedListRequest	typeref:typename:(int, error)
MarshalTo	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListResponse) MarshalTo(dAtA []byte) (int, error) {$/;"	f	struct:wire.SeedListResponse	typeref:typename:(int, error)
MarshalTo	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) MarshalTo(dAtA []byte) (int, error) {$/;"	f	struct:encoding.Addons	typeref:typename:(int, error)
MarshalToSizedBuffer	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) MarshalToSizedBuffer(dAtA []byte) (int, error) {$/;"	f	struct:encoding.Addons	typeref:typename:(int, error)
Match	app/dns/server.go	/^func (c *MultiGeoIPMatcher) Match(ip net.IP) bool {$/;"	f	struct:dns.MultiGeoIPMatcher	typeref:typename:bool
Match	app/dns/server.go	/^func (s *Server) Match(idx int, client Client, domain string, ips []net.IP) ([]net.IP, error) {$/;"	f	struct:dns.Server	typeref:typename:([]net.IP, error)
Match	app/router/condition.go	/^func (m *AttributeMatcher) Match(attrs map[string]string) bool {$/;"	f	struct:router.AttributeMatcher	typeref:typename:bool
Match	app/router/condition_geoip.go	/^func (m *GeoIPMatcher) Match(ip net.IP) bool {$/;"	f	struct:router.GeoIPMatcher	typeref:typename:bool
Match	common/strmatcher/domain_matcher.go	/^func (g *DomainMatcherGroup) Match(domain string) []uint32 {$/;"	f	struct:strmatcher.DomainMatcherGroup	typeref:typename:[]uint32
Match	common/strmatcher/full_matcher.go	/^func (g *FullMatcherGroup) Match(str string) []uint32 {$/;"	f	struct:strmatcher.FullMatcherGroup	typeref:typename:[]uint32
Match	common/strmatcher/matchers.go	/^func (m *regexMatcher) Match(s string) bool {$/;"	f	struct:strmatcher.regexMatcher	typeref:typename:bool
Match	common/strmatcher/matchers.go	/^func (m domainMatcher) Match(s string) bool {$/;"	f	type:strmatcher.domainMatcher	typeref:typename:bool
Match	common/strmatcher/matchers.go	/^func (m fullMatcher) Match(s string) bool {$/;"	f	type:strmatcher.fullMatcher	typeref:typename:bool
Match	common/strmatcher/matchers.go	/^func (m substrMatcher) Match(s string) bool {$/;"	f	type:strmatcher.substrMatcher	typeref:typename:bool
Match	common/strmatcher/strmatcher.go	/^	Match(input string) []uint32$/;"	n	interface:strmatcher.IndexMatcher	typeref:typename:[]uint32
Match	common/strmatcher/strmatcher.go	/^	Match(string) bool$/;"	n	interface:strmatcher.Matcher	typeref:typename:bool
Match	common/strmatcher/strmatcher.go	/^func (g *MatcherGroup) Match(pattern string) []uint32 {$/;"	f	struct:strmatcher.MatcherGroup	typeref:typename:[]uint32
Match	infra/conf/router.go	/^	Match(*router.Domain) bool$/;"	n	interface:conf.AttributeMatcher	typeref:typename:bool
Match	infra/conf/router.go	/^func (al *AttributeList) Match(domain *router.Domain) bool {$/;"	f	struct:conf.AttributeList	typeref:typename:bool
Match	infra/conf/router.go	/^func (m BooleanMatcher) Match(domain *router.Domain) bool {$/;"	f	type:conf.BooleanMatcher	typeref:typename:bool
Match	proxy/vmess/aead/authid.go	/^func (a *AuthIDDecoderHolder) Match(AuthID [16]byte) (interface{}, error) {$/;"	f	struct:aead.AuthIDDecoderHolder	typeref:typename:(interface{}, error)
Matcher	common/strmatcher/strmatcher.go	/^type Matcher interface {$/;"	i	package:strmatcher
MatcherGroup	common/strmatcher/strmatcher.go	/^type MatcherGroup struct {$/;"	s	package:strmatcher
MaxConcurrency	common/mux/client.go	/^	MaxConcurrency uint32$/;"	m	struct:mux.ClientStrategy	typeref:typename:uint32
MaxConnection	common/mux/client.go	/^	MaxConnection  uint32$/;"	m	struct:mux.ClientStrategy	typeref:typename:uint32
MaxPaddingLen	common/crypto/chunk.go	/^	MaxPaddingLen() uint16$/;"	n	interface:crypto.PaddingLengthGenerator	typeref:typename:uint16
MaxPaddingLen	proxy/vmess/encoding/auth.go	/^func (s *ShakeSizeParser) MaxPaddingLen() uint16 {$/;"	f	struct:encoding.ShakeSizeParser	typeref:typename:uint16
MemoryAccount	proxy/shadowsocks/config.go	/^type MemoryAccount struct {$/;"	s	package:shadowsocks
MemoryAccount	proxy/trojan/config.go	/^type MemoryAccount struct {$/;"	s	package:trojan
MemoryAccount	proxy/vless/account.go	/^type MemoryAccount struct {$/;"	s	package:vless
MemoryAccount	proxy/vmess/account.go	/^type MemoryAccount struct {$/;"	s	package:vmess
MemoryPortList	common/net/port.go	/^type MemoryPortList []MemoryPortRange$/;"	t	package:net	typeref:typename:[]MemoryPortRange
MemoryPortRange	common/net/port.go	/^type MemoryPortRange struct {$/;"	s	package:net
MemoryStreamConfig	transport/internet/memory_settings.go	/^type MemoryStreamConfig struct {$/;"	s	package:internet
MemoryUser	common/protocol/user.go	/^type MemoryUser struct {$/;"	s	package:protocol
MergeBytes	common/buf/multi_buffer.go	/^func MergeBytes(dest MultiBuffer, src []byte) MultiBuffer {$/;"	f	package:buf	typeref:typename:MultiBuffer
MergeMulti	common/buf/multi_buffer.go	/^func MergeMulti(dest MultiBuffer, src MultiBuffer) (MultiBuffer, MultiBuffer) {$/;"	f	package:buf	typeref:typename:(MultiBuffer, MultiBuffer)
Message	app/p2p/wire/notifier.pb.go	/^	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitemp/;"	m	struct:wire.HelloReply	typeref:typename:string
Message	app/p2p/wire/seedlist.pb.go	/^	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitemp/;"	m	struct:wire.SeedListRequest	typeref:typename:string
Message	app/p2p/wire/seedlist.pb.go	/^	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitemp/;"	m	struct:wire.SeedListResponse	typeref:typename:string
Message	common/log/log.go	/^type Message interface {$/;"	i	package:log
MessageData	app/p2p/wire/seedlist.pb.go	/^	MessageData *MessageData `protobuf:"bytes,1,opt,name=messageData" json:"messageData,omitempty"`$/;"	m	struct:wire.SeedListRequest	typeref:typename:*MessageData
MessageData	app/p2p/wire/seedlist.pb.go	/^	MessageData *MessageData `protobuf:"bytes,1,opt,name=messageData" json:"messageData,omitempty"`$/;"	m	struct:wire.SeedListResponse	typeref:typename:*MessageData
MessageData	app/p2p/wire/seedlist.pb.go	/^type MessageData struct {$/;"	s	package:wire
MessageData	app/p2p/wire/seedlist.proto	/^message MessageData {$/;"	m	package:wire
MessageReader	common/protocol/dns/io.go	/^type MessageReader interface {$/;"	i	package:dns
MessageWriter	common/protocol/dns/io.go	/^type MessageWriter interface {$/;"	i	package:dns
Method	infra/conf/transport_authenticators.go	/^	Method  string                 `json:"method"`$/;"	m	struct:conf.HTTPAuthenticatorRequest	typeref:typename:string
Method	transport/internet/headers/http/config.pb.go	/^	Method *Method `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`$/;"	m	struct:http.RequestConfig	typeref:typename:*Method
Method	transport/internet/headers/http/config.pb.go	/^type Method struct {$/;"	s	package:http
Method	transport/internet/headers/http/config.proto	/^message Method {$/;"	m	package:v2ray.core.transport.internet.headers.http
Move To https://github.com/v2fly/v2ray-core	README.md	/^# Move To https:\/\/github.com\/v2fly\/v2ray-core$/;"	c
MsgProcessor	testing/servers/tcp/tcp.go	/^	MsgProcessor func(msg []byte) []byte$/;"	m	struct:tcp.Server	typeref:typename:func(msg []byte) []byte
MsgProcessor	testing/servers/udp/udp.go	/^	MsgProcessor func(msg []byte) []byte$/;"	m	struct:udp.Server	typeref:typename:func(msg []byte) []byte
Mtu	infra/conf/transport_internet.go	/^	Mtu             *uint32         `json:"mtu"`$/;"	m	struct:conf.KCPConfig	typeref:typename:*uint32
Mtu	transport/internet/kcp/config.pb.go	/^	Mtu              *MTU                 `protobuf:"bytes,1,opt,name=mtu,proto3" json:"mtu,omitemp/;"	m	struct:kcp.Config	typeref:typename:*MTU
MultiBuffer	common/buf/multi_buffer.go	/^	MultiBuffer$/;"	M	struct:buf.MultiBufferContainer	typeref:typename:MultiBuffer
MultiBuffer	common/buf/multi_buffer.go	/^type MultiBuffer []*Buffer$/;"	t	package:buf	typeref:typename:[]*Buffer
MultiBufferContainer	common/buf/multi_buffer.go	/^type MultiBufferContainer struct {$/;"	s	package:buf
MultiGeoIPMatcher	app/dns/server.go	/^type MultiGeoIPMatcher struct {$/;"	s	package:dns
MultiGeoIPMatcher	app/router/condition.go	/^type MultiGeoIPMatcher struct {$/;"	s	package:router
MultiLengthPacketWriter	proxy/vless/encoding/addons.go	/^type MultiLengthPacketWriter struct {$/;"	s	package:encoding
MultiplexSettings	app/proxyman/config.pb.go	/^	MultiplexSettings *MultiplexingConfig    `protobuf:"bytes,4,opt,name=multiplex_settings,json=mu/;"	m	struct:proxyman.SenderConfig	typeref:typename:*MultiplexingConfig
MultiplexingConfig	app/proxyman/config.pb.go	/^type MultiplexingConfig struct {$/;"	s	package:proxyman
MultiplexingConfig	app/proxyman/config.proto	/^message MultiplexingConfig {$/;"	m	package:v2ray.core.app.proxyman
Must	common/common.go	/^func Must(err error) {$/;"	f	package:common
Must2	common/common.go	/^func Must2(v interface{}, err error) interface{} {$/;"	f	package:common	typeref:typename:interface{}
MustFromContext	context.go	/^func MustFromContext(ctx context.Context) *Instance {$/;"	f	package:core	typeref:typename:*Instance
MustGenerate	common/protocol/tls/cert/cert.go	/^func MustGenerate(parent *Certificate, opts ...Option) *Certificate {$/;"	f	package:cert	typeref:typename:*Certificate
Mutex	app/commander/commander.go	/^	sync.Mutex$/;"	M	struct:commander.Commander	typeref:typename:sync.Mutex
Mutex	app/dispatcher/default.go	/^	sync.Mutex$/;"	M	struct:dispatcher.cachedReader	typeref:typename:sync.Mutex
Mutex	app/dns/server.go	/^	sync.Mutex$/;"	M	struct:dns.Server	typeref:typename:sync.Mutex
Mutex	common/buf/writer.go	/^	sync.Mutex$/;"	M	struct:buf.BufferedWriter	typeref:typename:sync.Mutex
Mutex	common/protocol/server_picker.go	/^	sync.Mutex$/;"	M	struct:protocol.RoundRobinServerPicker	typeref:typename:sync.Mutex
Mutex	proxy/vmess/inbound/inbound.go	/^	sync.Mutex$/;"	M	struct:inbound.userByEmail	typeref:typename:sync.Mutex
Mutex	transport/internet/kcp/listener.go	/^	sync.Mutex$/;"	M	struct:kcp.Listener	typeref:typename:sync.Mutex
Mutex	transport/internet/kcp/output.go	/^	sync.Mutex$/;"	M	struct:kcp.SimpleSegmentWriter	typeref:typename:sync.Mutex
Mutex	transport/internet/tls/config_other.go	/^	sync.Mutex$/;"	M	struct:tls.rootCertsCache	typeref:typename:sync.Mutex
Mutex	transport/internet/websocket/hub.go	/^	sync.Mutex$/;"	M	struct:websocket.Listener	typeref:typename:sync.Mutex
Mutex	transport/internet/xtls/config_other.go	/^	sync.Mutex$/;"	M	struct:xtls.rootCertsCache	typeref:typename:sync.Mutex
Mutex	transport/pipe/impl.go	/^	sync.Mutex$/;"	M	struct:pipe.pipe	typeref:typename:sync.Mutex
MuxClientWorkerFactory	testing/mocks/mux.go	/^type MuxClientWorkerFactory struct {$/;"	s	package:mocks
MuxClientWorkerFactoryMockRecorder	testing/mocks/mux.go	/^type MuxClientWorkerFactoryMockRecorder struct {$/;"	s	package:mocks
MuxConfig	infra/conf/v2ray.go	/^type MuxConfig struct {$/;"	s	package:conf
MuxPreferedFromContext	common/session/context.go	/^func MuxPreferedFromContext(ctx context.Context) bool {$/;"	f	package:session	typeref:typename:bool
MuxSettings	infra/conf/v2ray.go	/^	MuxSettings   *MuxConfig       `json:"mux"`$/;"	m	struct:conf.OutboundDetourConfig	typeref:typename:*MuxConfig
N	common/protocol/tls/cert/privateKey.go	/^	N       *big.Int$/;"	m	struct:cert.pkcs1PrivateKey	typeref:typename:*big.Int
NONE	common/protocol/headers.proto	/^  NONE = 5;$/;"	e	enum:v2ray.core.common.protocol.SecurityType
NONE	proxy/shadowsocks/config.proto	/^  NONE = 8;$/;"	e	enum:v2ray.core.proxy.shadowsocks.CipherType
NO_AUTH	proxy/socks/config.proto	/^  NO_AUTH = 0;$/;"	e	enum:v2ray.core.proxy.socks.AuthType
Name	app/dns/dohdns.go	/^func (s *DoHNameServer) Name() string {$/;"	f	struct:dns.DoHNameServer	typeref:typename:string
Name	app/dns/nameserver.go	/^	Name() string$/;"	n	interface:dns.Client	typeref:typename:string
Name	app/dns/nameserver.go	/^func (s *localNameServer) Name() string {$/;"	f	struct:dns.localNameServer	typeref:typename:string
Name	app/dns/udpns.go	/^func (s *ClassicNameServer) Name() string {$/;"	f	struct:dns.ClassicNameServer	typeref:typename:string
Name	app/p2p/wire/notifier.pb.go	/^	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`$/;"	m	struct:wire.HelloRequest	typeref:typename:string
Name	app/stats/command/command.pb.go	/^	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`$/;"	m	struct:command.Stat	typeref:typename:string
Name	app/stats/command/command.pb.go	/^	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`$/;"	m	struct:command.GetStatsRequest	typeref:typename:string
Name	common/platform/platform.go	/^	Name    string$/;"	m	struct:platform.EnvFlag	typeref:typename:string
Name	config.go	/^	Name      string$/;"	m	struct:core.ConfigFormat	typeref:typename:string
Name	infra/conf/command/command.go	/^func (c *ConfigCommand) Name() string {$/;"	f	struct:command.ConfigCommand	typeref:typename:string
Name	infra/control/api.go	/^func (c *ApiCommand) Name() string {$/;"	f	struct:control.ApiCommand	typeref:typename:string
Name	infra/control/cert.go	/^func (c *CertificateCommand) Name() string {$/;"	f	struct:control.CertificateCommand	typeref:typename:string
Name	infra/control/command.go	/^	Name() string$/;"	n	interface:control.Command	typeref:typename:string
Name	infra/control/config.go	/^func (c *ConfigCommand) Name() string {$/;"	f	struct:control.ConfigCommand	typeref:typename:string
Name	infra/control/fetch.go	/^func (c *FetchCommand) Name() string {$/;"	f	struct:control.FetchCommand	typeref:typename:string
Name	infra/control/love.go	/^func (*LoveCommand) Name() string {$/;"	f	struct:control.LoveCommand	typeref:typename:string
Name	infra/control/tlsping.go	/^func (c *TlsPingCommand) Name() string {$/;"	f	struct:control.TlsPingCommand	typeref:typename:string
Name	infra/control/uuid.go	/^func (c *UUIDCommand) Name() string {$/;"	f	struct:control.UUIDCommand	typeref:typename:string
Name	infra/control/verify.go	/^func (c *VerifyCommand) Name() string {$/;"	f	struct:control.VerifyCommand	typeref:typename:string
Name	transport/internet/headers/http/config.pb.go	/^	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`$/;"	m	struct:http.Header	typeref:typename:string
NameServer	app/dns/config.pb.go	/^	NameServer []*NameServer `protobuf:"bytes,5,rep,name=name_server,json=nameServer,proto3" json:"/;"	m	struct:dns.Config	typeref:typename:[]*NameServer
NameServer	app/dns/config.pb.go	/^type NameServer struct {$/;"	s	package:dns
NameServer	app/dns/config.proto	/^message NameServer {$/;"	m	package:v2ray.core.app.dns
NameServerConfig	infra/conf/dns.go	/^type NameServerConfig struct {$/;"	s	package:conf
NameServer_OriginalRule	app/dns/config.pb.go	/^type NameServer_OriginalRule struct {$/;"	s	package:dns
NameServer_PriorityDomain	app/dns/config.pb.go	/^type NameServer_PriorityDomain struct {$/;"	s	package:dns
NameServers	app/dns/config.pb.go	/^	NameServers []*net.Endpoint `protobuf:"bytes,1,rep,name=NameServers,proto3" json:"NameServers,o/;"	m	struct:dns.Config	typeref:typename:[]*net.Endpoint
NameServers	app/dns/config.proto	/^  repeated v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];$/;"	f	message:v2ray.core.app.dns.Config	typeref:typename:v2ray.core.common.net.Endpoint
NamedCurveOID	common/protocol/tls/cert/privateKey.go	/^	NamedCurveOID asn1.ObjectIdentifier `asn1:"optional,explicit,tag:0"`$/;"	m	struct:cert.ecPrivateKey	typeref:typename:asn1.ObjectIdentifier
NeighborList	app/p2p/api.go	/^	NeighborList sync.Map$/;"	m	struct:p2p.gRpcService	typeref:typename:sync.Map
NetAddr	common/net/destination.go	/^func (d Destination) NetAddr() string {$/;"	f	struct:net.Destination	typeref:typename:string
Network	app/router/command/command.pb.go	/^	Network           net.Network       `protobuf:"varint,2,opt,name=Network,proto3,enum=v2ray.core/;"	m	struct:command.RoutingContext	typeref:typename:net.Network
Network	app/router/command/command.proto	/^  v2ray.core.common.net.Network Network = 2;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:v2ray.core.common.net.Network
Network	common/net/destination.go	/^	Network Network$/;"	m	struct:net.Destination	typeref:typename:Network
Network	common/net/destination.pb.go	/^	Network Network     `protobuf:"varint,1,opt,name=network,proto3,enum=v2ray.core.common.net.Netw/;"	m	struct:net.Endpoint	typeref:typename:Network
Network	common/net/network.pb.go	/^	Network []Network `protobuf:"varint,1,rep,packed,name=network,proto3,enum=v2ray.core.common.net/;"	m	struct:net.NetworkList	typeref:typename:[]Network
Network	common/net/network.pb.go	/^type Network int32$/;"	t	package:net	typeref:typename:int32
Network	common/net/network.proto	/^enum Network {$/;"	g	package:v2ray.core.common.net
Network	infra/conf/common.go	/^type Network string$/;"	t	package:conf	typeref:typename:string
Network	infra/conf/dns_proxy.go	/^	Network Network  `json:"network"`$/;"	m	struct:conf.DnsOutboundConfig	typeref:typename:Network
Network	infra/conf/transport_internet.go	/^	Network        *TransportProtocol  `json:"network"`$/;"	m	struct:conf.StreamConfig	typeref:typename:*TransportProtocol
Network	proxy/dokodemo/dokodemo.go	/^func (d *DokodemoDoor) Network() []net.Network {$/;"	f	struct:dokodemo.DokodemoDoor	typeref:typename:[]net.Network
Network	proxy/http/server.go	/^func (*Server) Network() []net.Network {$/;"	f	struct:http.Server	typeref:typename:[]net.Network
Network	proxy/mtproto/server.go	/^func (s *Server) Network() []net.Network {$/;"	f	struct:mtproto.Server	typeref:typename:[]net.Network
Network	proxy/proxy.go	/^	Network() []net.Network$/;"	n	interface:proxy.Inbound	typeref:typename:[]net.Network
Network	proxy/shadowsocks/config.pb.go	/^	Network    []net.Network  `protobuf:"varint,3,rep,packed,name=network,proto3,enum=v2ray.core.co/;"	m	struct:shadowsocks.ServerConfig	typeref:typename:[]net.Network
Network	proxy/shadowsocks/server.go	/^func (s *Server) Network() []net.Network {$/;"	f	struct:shadowsocks.Server	typeref:typename:[]net.Network
Network	proxy/socks/server.go	/^func (s *Server) Network() []net.Network {$/;"	f	struct:socks.Server	typeref:typename:[]net.Network
Network	proxy/trojan/server.go	/^func (s *Server) Network() []net.Network {$/;"	f	struct:trojan.Server	typeref:typename:[]net.Network
Network	proxy/vless/inbound/inbound.go	/^func (*Handler) Network() []net.Network {$/;"	f	struct:inbound.Handler	typeref:typename:[]net.Network
Network	proxy/vmess/inbound/inbound.go	/^func (*Handler) Network() []net.Network {$/;"	f	struct:inbound.Handler	typeref:typename:[]net.Network
Network	testing/mocks/proxy.go	/^func (m *ProxyInbound) Network() []net.Network {$/;"	f	struct:mocks.ProxyInbound	typeref:typename:[]net.Network
Network	testing/mocks/proxy.go	/^func (mr *ProxyInboundMockRecorder) Network() *gomock.Call {$/;"	f	struct:mocks.ProxyInboundMockRecorder	typeref:typename:*gomock.Call
NetworkID	bin/config/config-server.json	/^    "NetworkID":1564141146,$/;"	n	object:porter
NetworkList	app/router/config.pb.go	/^	NetworkList *net.NetworkList `protobuf:"bytes,5,opt,name=network_list,json=networkList,proto3" /;"	m	struct:router.RoutingRule	typeref:typename:*net.NetworkList
NetworkList	common/net/network.pb.go	/^type NetworkList struct {$/;"	s	package:net
NetworkList	common/net/network.proto	/^message NetworkList {$/;"	m	package:v2ray.core.common.net
NetworkList	infra/conf/common.go	/^type NetworkList []Network$/;"	t	package:conf	typeref:typename:[]Network
NetworkList	infra/conf/dokodemo.go	/^	NetworkList  *NetworkList `json:"network"`$/;"	m	struct:conf.DokodemoConfig	typeref:typename:*NetworkList
NetworkList	infra/conf/shadowsocks.go	/^	NetworkList *NetworkList `json:"network"`$/;"	m	struct:conf.ShadowsocksServerConfig	typeref:typename:*NetworkList
NetworkList	proxy/dokodemo/config.pb.go	/^	NetworkList *net.NetworkList `protobuf:"bytes,3,opt,name=network_list,json=networkList,proto3" /;"	m	struct:dokodemo.Config	typeref:typename:*net.NetworkList
NetworkMatcher	app/router/condition.go	/^type NetworkMatcher struct {$/;"	s	package:router
Network_RawTCP	common/net/network.pb.go	/^	Network_RawTCP Network = 1$/;"	c	package:net	typeref:type:Network
Network_TCP	common/net/network.pb.go	/^	Network_TCP    Network = 2$/;"	c	package:net	typeref:type:Network
Network_UDP	common/net/network.pb.go	/^	Network_UDP    Network = 3$/;"	c	package:net	typeref:type:Network
Network_Unknown	common/net/network.pb.go	/^	Network_Unknown Network = 0$/;"	c	package:net	typeref:type:Network
Network_name	common/net/network.pb.go	/^	Network_name = map[int32]string{$/;"	v	package:net
Network_value	common/net/network.pb.go	/^	Network_value = map[string]int32{$/;"	v	package:net
Networks	app/router/config.pb.go	/^	Networks []net.Network `protobuf:"varint,13,rep,packed,name=networks,proto3,enum=v2ray.core.com/;"	m	struct:router.RoutingRule	typeref:typename:[]net.Network
Networks	proxy/dokodemo/config.pb.go	/^	Networks []net.Network `protobuf:"varint,7,rep,packed,name=networks,proto3,enum=v2ray.core.comm/;"	m	struct:dokodemo.Config	typeref:typename:[]net.Network
New	app/dns/server.go	/^func New(ctx context.Context, config *Config) (*Server, error) {$/;"	f	package:dns	typeref:typename:(*Server, error)
New	app/log/log.go	/^func New(ctx context.Context, config *Config) (*Instance, error) {$/;"	f	package:log	typeref:typename:(*Instance, error)
New	app/p2p/p2p.go	/^func New(ctx context.Context, config *Config) (*Instance, error) {$/;"	f	package:p2p	typeref:typename:(*Instance, error)
New	app/policy/manager.go	/^func New(ctx context.Context, config *Config) (*Instance, error) {$/;"	f	package:policy	typeref:typename:(*Instance, error)
New	app/proxyman/inbound/inbound.go	/^func New(ctx context.Context, config *proxyman.InboundConfig) (*Manager, error) {$/;"	f	package:inbound	typeref:typename:(*Manager, error)
New	app/proxyman/outbound/outbound.go	/^func New(ctx context.Context, config *proxyman.OutboundConfig) (*Manager, error) {$/;"	f	package:outbound	typeref:typename:(*Manager, error)
New	common/buf/buffer.go	/^func New() *Buffer {$/;"	f	package:buf	typeref:typename:*Buffer
New	common/errors/errors.go	/^func New(msg ...interface{}) *Error {$/;"	f	package:errors	typeref:typename:*Error
New	common/signal/done/done.go	/^func New() *Instance {$/;"	f	package:done	typeref:typename:*Instance
New	common/signal/semaphore/semaphore.go	/^func New(n int) *Instance {$/;"	f	package:semaphore	typeref:typename:*Instance
New	common/strmatcher/strmatcher.go	/^func (t Type) New(pattern string) (Matcher, error) {$/;"	f	type:strmatcher.Type	typeref:typename:(Matcher, error)
New	common/uuid/uuid.go	/^func New() UUID {$/;"	f	package:uuid	typeref:typename:UUID
New	features/dns/localdns/client.go	/^func New() *Client {$/;"	f	package:localdns	typeref:typename:*Client
New	proxy/blackhole/blackhole.go	/^func New(ctx context.Context, config *Config) (*Handler, error) {$/;"	f	package:blackhole	typeref:typename:(*Handler, error)
New	proxy/vless/inbound/inbound.go	/^func New(ctx context.Context, config *Config, dc dns.Client) (*Handler, error) {$/;"	f	package:inbound	typeref:typename:(*Handler, error)
New	proxy/vless/outbound/outbound.go	/^func New(ctx context.Context, config *Config) (*Handler, error) {$/;"	f	package:outbound	typeref:typename:(*Handler, error)
New	proxy/vmess/inbound/inbound.go	/^func New(ctx context.Context, config *Config) (*Handler, error) {$/;"	f	package:inbound	typeref:typename:(*Handler, error)
New	proxy/vmess/outbound/outbound.go	/^func New(ctx context.Context, config *Config) (*Handler, error) {$/;"	f	package:outbound	typeref:typename:(*Handler, error)
New	transport/internet/headers/srtp/srtp.go	/^func New(ctx context.Context, config interface{}) (interface{}, error) {$/;"	f	package:srtp	typeref:typename:(interface{}, error)
New	transport/internet/headers/tls/dtls.go	/^func New(ctx context.Context, config interface{}) (interface{}, error) {$/;"	f	package:tls	typeref:typename:(interface{}, error)
New	transport/internet/headers/utp/utp.go	/^func New(ctx context.Context, config interface{}) (interface{}, error) {$/;"	f	package:utp	typeref:typename:(interface{}, error)
New	transport/pipe/pipe.go	/^func New(opts ...Option) (*Reader, *Writer) {$/;"	f	package:pipe	typeref:typename:(*Reader, *Writer)
New	v2ray.go	/^func New(config *Config) (*Instance, error) {$/;"	f	package:core	typeref:typename:(*Instance, error)
NewAEADAESGCMBasedOnSeed	transport/internet/kcp/cryptreal.go	/^func NewAEADAESGCMBasedOnSeed(seed string) cipher.AEAD {$/;"	f	package:kcp	typeref:typename:cipher.AEAD
NewAckList	transport/internet/kcp/receiving.go	/^func NewAckList(writer SegmentWriter) *AckList {$/;"	f	package:kcp	typeref:typename:*AckList
NewAckSegment	transport/internet/kcp/segment.go	/^func NewAckSegment() *AckSegment {$/;"	f	package:kcp	typeref:typename:*AckSegment
NewAddressParser	common/protocol/address.go	/^func NewAddressParser(options ...AddressOption) AddressSerializer {$/;"	f	package:protocol	typeref:typename:AddressSerializer
NewAesCTRStream	common/crypto/aes.go	/^func NewAesCTRStream(key []byte, iv []byte) cipher.Stream {$/;"	f	package:crypto	typeref:typename:cipher.Stream
NewAesDecryptionStream	common/crypto/aes.go	/^func NewAesDecryptionStream(key []byte, iv []byte) cipher.Stream {$/;"	f	package:crypto	typeref:typename:cipher.Stream
NewAesEncryptionStream	common/crypto/aes.go	/^func NewAesEncryptionStream(key []byte, iv []byte) cipher.Stream {$/;"	f	package:crypto	typeref:typename:cipher.Stream
NewAesGcm	common/crypto/aes.go	/^func NewAesGcm(key []byte) cipher.AEAD {$/;"	f	package:crypto	typeref:typename:cipher.AEAD
NewAesStreamMethod	common/crypto/aes.go	/^func NewAesStreamMethod(key []byte, iv []byte, f func(cipher.Block, []byte) cipher.Stream) ciphe/;"	f	package:crypto	typeref:typename:cipher.Stream
NewAlterIDs	common/protocol/id.go	/^func NewAlterIDs(primary *ID, alterIDCount uint16) []*ID {$/;"	f	package:protocol	typeref:typename:[]*ID
NewAlwaysOnInboundHandler	app/proxyman/inbound/always.go	/^func NewAlwaysOnInboundHandler(ctx context.Context, tag string, receiverConfig *proxyman.Receive/;"	f	package:inbound	typeref:typename:(*AlwaysOnInboundHandler, error)
NewAntiReplayWindow	common/antireplay/antireplay.go	/^func NewAntiReplayWindow(AntiReplayTime int64) *AntiReplayWindow {$/;"	f	package:antireplay	typeref:typename:*AntiReplayWindow
NewAttributeMatcher	app/router/condition.go	/^func NewAttributeMatcher(code string) (*AttributeMatcher, error) {$/;"	f	package:router	typeref:typename:(*AttributeMatcher, error)
NewAuthIDDecoder	proxy/vmess/aead/authid.go	/^func NewAuthIDDecoder(cmdKey []byte) *AuthIDDecoder {$/;"	f	package:aead	typeref:typename:*AuthIDDecoder
NewAuthIDDecoderHolder	proxy/vmess/aead/authid.go	/^func NewAuthIDDecoderHolder() *AuthIDDecoderHolder {$/;"	f	package:aead	typeref:typename:*AuthIDDecoderHolder
NewAuthIDDecoderItem	proxy/vmess/aead/authid.go	/^func NewAuthIDDecoderItem(key [16]byte, ticket interface{}) *AuthIDDecoderItem {$/;"	f	package:aead	typeref:typename:*AuthIDDecoderItem
NewAuthentication	proxy/mtproto/auth.go	/^func NewAuthentication(sc SessionContext) *Authentication {$/;"	f	package:mtproto	typeref:typename:*Authentication
NewAuthenticationReader	common/crypto/auth.go	/^func NewAuthenticationReader(auth Authenticator, sizeParser ChunkSizeDecoder, reader io.Reader, /;"	f	package:crypto	typeref:typename:*AuthenticationReader
NewAuthenticationWriter	common/crypto/auth.go	/^func NewAuthenticationWriter(auth Authenticator, sizeParser ChunkSizeEncoder, writer io.Writer, /;"	f	package:crypto	typeref:typename:*AuthenticationWriter
NewBatch	store/leveldb.go	/^func (self *LevelDBStore) NewBatch() {$/;"	f	struct:store.LevelDBStore
NewBridge	app/reverse/bridge.go	/^func NewBridge(config *BridgeConfig, dispatcher routing.Dispatcher) (*Bridge, error) {$/;"	f	package:reverse	typeref:typename:(*Bridge, error)
NewBridgeWorker	app/reverse/bridge.go	/^func NewBridgeWorker(domain string, tag string, d routing.Dispatcher) (*BridgeWorker, error) {$/;"	f	package:reverse	typeref:typename:(*BridgeWorker, error)
NewBufferedWriter	common/buf/writer.go	/^func NewBufferedWriter(writer Writer) *BufferedWriter {$/;"	f	package:buf	typeref:typename:*BufferedWriter
NewChaCha20Stream	common/crypto/chacha20.go	/^func NewChaCha20Stream(key []byte, iv []byte) cipher.Stream {$/;"	f	package:crypto	typeref:typename:cipher.Stream
NewChaCha20Stream	common/crypto/internal/chacha.go	/^func NewChaCha20Stream(key []byte, nonce []byte, rounds int) *ChaCha20Stream {$/;"	f	package:internal	typeref:typename:*ChaCha20Stream
NewChannel	app/stats/channel.go	/^func NewChannel(config *ChannelConfig) *Channel {$/;"	f	package:stats	typeref:typename:*Channel
NewChunkStreamReader	common/crypto/chunk.go	/^func NewChunkStreamReader(sizeDecoder ChunkSizeDecoder, reader io.Reader) *ChunkStreamReader {$/;"	f	package:crypto	typeref:typename:*ChunkStreamReader
NewChunkStreamReaderWithChunkCount	common/crypto/chunk.go	/^func NewChunkStreamReaderWithChunkCount(sizeDecoder ChunkSizeDecoder, reader io.Reader, maxNumCh/;"	f	package:crypto	typeref:typename:*ChunkStreamReader
NewChunkStreamWriter	common/crypto/chunk.go	/^func NewChunkStreamWriter(sizeEncoder ChunkSizeEncoder, writer io.Writer) *ChunkStreamWriter {$/;"	f	package:crypto	typeref:typename:*ChunkStreamWriter
NewCipherFromKey	proxy/vmess/aead/authid.go	/^func NewCipherFromKey(cmdKey []byte) cipher.Block {$/;"	f	package:aead	typeref:typename:cipher.Block
NewClassicNameServer	app/dns/udpns.go	/^func NewClassicNameServer(address net.Destination, dispatcher routing.Dispatcher, clientIP net.I/;"	f	package:dns	typeref:typename:*ClassicNameServer
NewClient	proxy/http/client.go	/^func NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {$/;"	f	package:http	typeref:typename:(*Client, error)
NewClient	proxy/mtproto/client.go	/^func NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {$/;"	f	package:mtproto	typeref:typename:(*Client, error)
NewClient	proxy/shadowsocks/client.go	/^func NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {$/;"	f	package:shadowsocks	typeref:typename:(*Client, error)
NewClient	proxy/socks/client.go	/^func NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {$/;"	f	package:socks	typeref:typename:(*Client, error)
NewClient	proxy/trojan/client.go	/^func NewClient(ctx context.Context, config *ClientConfig) (*Client, error) {$/;"	f	package:trojan	typeref:typename:(*Client, error)
NewClientSession	proxy/vmess/encoding/client.go	/^func NewClientSession(isAEAD bool, idHash protocol.IDHash, ctx context.Context) *ClientSession {$/;"	f	package:encoding	typeref:typename:*ClientSession
NewClientWorker	common/mux/client.go	/^func NewClientWorker(stream transport.Link, s ClientStrategy) (*ClientWorker, error) {$/;"	f	package:mux	typeref:typename:(*ClientWorker, error)
NewCmdOnlySegment	transport/internet/kcp/segment.go	/^func NewCmdOnlySegment() *CmdOnlySegment {$/;"	f	package:kcp	typeref:typename:*CmdOnlySegment
NewCommander	app/commander/commander.go	/^func NewCommander(ctx context.Context, config *Config) (*Commander, error) {$/;"	f	package:commander	typeref:typename:(*Commander, error)
NewConditionChan	app/router/condition.go	/^func NewConditionChan() *ConditionChan {$/;"	f	package:router	typeref:typename:*ConditionChan
NewConnection	common/net/connection.go	/^func NewConnection(opts ...ConnectionOption) net.Conn {$/;"	f	package:net	typeref:typename:net.Conn
NewConnection	transport/internet/kcp/connection.go	/^func NewConnection(meta ConnMetadata, writer PacketWriter, closer io.Closer, config *Config) *Co/;"	f	package:kcp	typeref:typename:*Connection
NewCryptionReader	common/crypto/io.go	/^func NewCryptionReader(stream cipher.Stream, reader io.Reader) *CryptionReader {$/;"	f	package:crypto	typeref:typename:*CryptionReader
NewCryptionWriter	common/crypto/io.go	/^func NewCryptionWriter(stream cipher.Stream, writer io.Writer) *CryptionWriter {$/;"	f	package:crypto	typeref:typename:*CryptionWriter
NewDNSClient	testing/mocks/dns.go	/^func NewDNSClient(ctrl *gomock.Controller) *DNSClient {$/;"	f	package:mocks	typeref:typename:*DNSClient
NewDataSegment	transport/internet/kcp/segment.go	/^func NewDataSegment() *DataSegment {$/;"	f	package:kcp	typeref:typename:*DataSegment
NewDecryptionReader	proxy/shadowsocks/config.go	/^	NewDecryptionReader(key []byte, iv []byte, reader io.Reader) (buf.Reader, error)$/;"	n	interface:shadowsocks.Cipher	typeref:typename:(buf.Reader, error)
NewDecryptionReader	proxy/shadowsocks/config.go	/^func (NoneCipher) NewDecryptionReader(key []byte, iv []byte, reader io.Reader) (buf.Reader, erro/;"	f	struct:shadowsocks.NoneCipher	typeref:typename:(buf.Reader, error)
NewDecryptionReader	proxy/shadowsocks/config.go	/^func (c *AEADCipher) NewDecryptionReader(key []byte, iv []byte, reader io.Reader) (buf.Reader, e/;"	f	struct:shadowsocks.AEADCipher	typeref:typename:(buf.Reader, error)
NewDecryptionReader	proxy/shadowsocks/config.go	/^func (v *AesCfb) NewDecryptionReader(key []byte, iv []byte, reader io.Reader) (buf.Reader, error/;"	f	struct:shadowsocks.AesCfb	typeref:typename:(buf.Reader, error)
NewDecryptionReader	proxy/shadowsocks/config.go	/^func (v *ChaCha20) NewDecryptionReader(key []byte, iv []byte, reader io.Reader) (buf.Reader, err/;"	f	struct:shadowsocks.ChaCha20	typeref:typename:(buf.Reader, error)
NewDeterministicDice	common/dice/dice.go	/^func NewDeterministicDice(seed int64) *deterministicDice {$/;"	f	package:dice	typeref:typename:*deterministicDice
NewDispatcher	transport/internet/udp/dispatcher.go	/^func NewDispatcher(dispatcher routing.Dispatcher, callback ResponseCallback) *Dispatcher {$/;"	f	package:udp	typeref:typename:*Dispatcher
NewDoHLocalNameServer	app/dns/dohdns.go	/^func NewDoHLocalNameServer(url *url.URL, clientIP net.IP) *DoHNameServer {$/;"	f	package:dns	typeref:typename:*DoHNameServer
NewDoHNameServer	app/dns/dohdns.go	/^func NewDoHNameServer(url *url.URL, dispatcher routing.Dispatcher, clientIP net.IP) (*DoHNameSer/;"	f	package:dns	typeref:typename:(*DoHNameServer, error)
NewDomainMatcher	app/router/condition.go	/^func NewDomainMatcher(domains []*Domain) (*DomainMatcher, error) {$/;"	f	package:router	typeref:typename:(*DomainMatcher, error)
NewDynamicInboundHandler	app/proxyman/inbound/dynamic.go	/^func NewDynamicInboundHandler(ctx context.Context, tag string, receiverConfig *proxyman.Receiver/;"	f	package:inbound	typeref:typename:(*DynamicInboundHandler, error)
NewEncryptionWriter	proxy/shadowsocks/config.go	/^	NewEncryptionWriter(key []byte, iv []byte, writer io.Writer) (buf.Writer, error)$/;"	n	interface:shadowsocks.Cipher	typeref:typename:(buf.Writer, error)
NewEncryptionWriter	proxy/shadowsocks/config.go	/^func (NoneCipher) NewEncryptionWriter(key []byte, iv []byte, writer io.Writer) (buf.Writer, erro/;"	f	struct:shadowsocks.NoneCipher	typeref:typename:(buf.Writer, error)
NewEncryptionWriter	proxy/shadowsocks/config.go	/^func (c *AEADCipher) NewEncryptionWriter(key []byte, iv []byte, writer io.Writer) (buf.Writer, e/;"	f	struct:shadowsocks.AEADCipher	typeref:typename:(buf.Writer, error)
NewEncryptionWriter	proxy/shadowsocks/config.go	/^func (v *AesCfb) NewEncryptionWriter(key []byte, iv []byte, writer io.Writer) (buf.Writer, error/;"	f	struct:shadowsocks.AesCfb	typeref:typename:(buf.Writer, error)
NewEncryptionWriter	proxy/shadowsocks/config.go	/^func (v *ChaCha20) NewEncryptionWriter(key []byte, iv []byte, writer io.Writer) (buf.Writer, err/;"	f	struct:shadowsocks.ChaCha20	typeref:typename:(buf.Writer, error)
NewEnvFlag	common/platform/platform.go	/^func NewEnvFlag(name string) EnvFlag {$/;"	f	package:platform	typeref:typename:EnvFlag
NewFileReader	common/platform/filesystem/file.go	/^var NewFileReader FileReaderFunc = func(path string) (io.ReadCloser, error) {$/;"	v	package:filesystem	typeref:type:FileReaderFunc
NewHandler	app/proxyman/inbound/inbound.go	/^func NewHandler(ctx context.Context, config *core.InboundHandlerConfig) (inbound.Handler, error)/;"	f	package:inbound	typeref:typename:(inbound.Handler, error)
NewHandler	app/proxyman/outbound/handler.go	/^func NewHandler(ctx context.Context, config *core.OutboundHandlerConfig) (outbound.Handler, erro/;"	f	package:outbound	typeref:typename:(outbound.Handler, error)
NewHandlerServiceClient	app/proxyman/command/command_grpc.pb.go	/^func NewHandlerServiceClient(cc grpc.ClientConnInterface) HandlerServiceClient {$/;"	f	package:command	typeref:typename:HandlerServiceClient
NewHeaderWriter	transport/internet/headers/http/http.go	/^func NewHeaderWriter(header *buf.Buffer) *HeaderWriter {$/;"	f	package:http	typeref:typename:*HeaderWriter
NewHttpAuthenticator	transport/internet/headers/http/http.go	/^func NewHttpAuthenticator(ctx context.Context, config *Config) (HttpAuthenticator, error) {$/;"	f	package:http	typeref:typename:(HttpAuthenticator, error)
NewHttpConn	transport/internet/headers/http/http.go	/^func NewHttpConn(conn net.Conn, reader Reader, writer Writer, errorWriter Writer, errorMismatchW/;"	f	package:http	typeref:typename:*HttpConn
NewID	common/protocol/id.go	/^func NewID(uuid uuid.UUID) *ID {$/;"	f	package:protocol	typeref:typename:*ID
NewID	common/session/session.go	/^func NewID() ID {$/;"	f	package:session	typeref:typename:ID
NewIPOrDomain	common/net/address.go	/^func NewIPOrDomain(addr Address) *IPOrDomain {$/;"	f	package:net	typeref:typename:*IPOrDomain
NewInboundTagMatcher	app/router/condition.go	/^func NewInboundTagMatcher(tags []string) *InboundTagMatcher {$/;"	f	package:router	typeref:typename:*InboundTagMatcher
NewJSONConfigLoader	infra/conf/loader.go	/^func NewJSONConfigLoader(cache ConfigCreatorCache, idKey string, configKey string) *JSONConfigLo/;"	f	package:conf	typeref:typename:*JSONConfigLoader
NewLengthPacketReader	proxy/vless/encoding/addons.go	/^func NewLengthPacketReader(reader io.Reader) *LengthPacketReader {$/;"	f	package:encoding	typeref:typename:*LengthPacketReader
NewLengthPacketWriter	proxy/vless/encoding/addons.go	/^func NewLengthPacketWriter(writer io.Writer) *LengthPacketWriter {$/;"	f	package:encoding	typeref:typename:*LengthPacketWriter
NewLevelDBStore	store/leveldb.go	/^func NewLevelDBStore(file string) (*LevelDBStore, error) {$/;"	f	package:store	typeref:typename:(*LevelDBStore, error)
NewListener	transport/internet/kcp/listener.go	/^func NewListener(ctx context.Context, address net.Address, port net.Port, streamSettings *intern/;"	f	package:kcp	typeref:typename:(*Listener, error)
NewLocalNameServer	app/dns/nameserver.go	/^func NewLocalNameServer() *localNameServer {$/;"	f	package:dns	typeref:typename:*localNameServer
NewLogHandler	testing/mocks/log.go	/^func NewLogHandler(ctrl *gomock.Controller) *LogHandler {$/;"	f	package:mocks	typeref:typename:*LogHandler
NewLogger	common/log/logger.go	/^func NewLogger(logWriterCreator WriterCreator) Handler {$/;"	f	package:log	typeref:typename:Handler
NewLoggerServiceClient	app/log/command/config_grpc.pb.go	/^func NewLoggerServiceClient(cc grpc.ClientConnInterface) LoggerServiceClient {$/;"	f	package:command	typeref:typename:LoggerServiceClient
NewManager	app/stats/stats.go	/^func NewManager(ctx context.Context, config *Config) (*Manager, error) {$/;"	f	package:stats	typeref:typename:(*Manager, error)
NewMessageData	app/p2p/protocol/seedlist/message.go	/^func NewMessageData(n *SeedNode, messageId string, gossip bool) *wire.MessageData {$/;"	f	package:seedlist	typeref:typename:*wire.MessageData
NewMultiGeoIPMatcher	app/router/condition.go	/^func NewMultiGeoIPMatcher(geoips []*GeoIP, onSource bool) (*MultiGeoIPMatcher, error) {$/;"	f	package:router	typeref:typename:(*MultiGeoIPMatcher, error)
NewMultiLengthPacketWriter	proxy/vless/encoding/addons.go	/^func NewMultiLengthPacketWriter(writer buf.Writer) *MultiLengthPacketWriter {$/;"	f	package:encoding	typeref:typename:*MultiLengthPacketWriter
NewMuxClientWorkerFactory	testing/mocks/mux.go	/^func NewMuxClientWorkerFactory(ctrl *gomock.Controller) *MuxClientWorkerFactory {$/;"	f	package:mocks	typeref:typename:*MuxClientWorkerFactory
NewNetworkMatcher	app/router/condition.go	/^func NewNetworkMatcher(network []net.Network) NetworkMatcher {$/;"	f	package:router	typeref:typename:NetworkMatcher
NewNoOpConnectionHeader	transport/internet/headers/noop/noop.go	/^func NewNoOpConnectionHeader(context.Context, interface{}) (interface{}, error) {$/;"	f	package:noop	typeref:typename:(interface{}, error)
NewNoOpHeader	transport/internet/headers/noop/noop.go	/^func NewNoOpHeader(context.Context, interface{}) (interface{}, error) {$/;"	f	package:noop	typeref:typename:(interface{}, error)
NewNotifier	common/signal/notifier.go	/^func NewNotifier() *Notifier {$/;"	f	package:signal	typeref:typename:*Notifier
NewNotifierClient	app/p2p/wire/notifier.pb.go	/^func NewNotifierClient(cc *grpc.ClientConn) NotifierClient {$/;"	f	package:wire	typeref:typename:NotifierClient
NewOutboundHandlerSelector	testing/mocks/outbound.go	/^func NewOutboundHandlerSelector(ctrl *gomock.Controller) *OutboundHandlerSelector {$/;"	f	package:mocks	typeref:typename:*OutboundHandlerSelector
NewOutboundManager	testing/mocks/outbound.go	/^func NewOutboundManager(ctrl *gomock.Controller) *OutboundManager {$/;"	f	package:mocks	typeref:typename:*OutboundManager
NewP2PNode	app/p2p/api.go	/^func NewP2PNode(config *Config) *P2PNode {$/;"	f	package:p2p	typeref:typename:*P2PNode
NewPacketReader	common/buf/io.go	/^func NewPacketReader(reader io.Reader) Reader {$/;"	f	package:buf	typeref:typename:Reader
NewPacketReader	common/mux/reader.go	/^func NewPacketReader(reader io.Reader) *PacketReader {$/;"	f	package:mux	typeref:typename:*PacketReader
NewPopulatedHelloSeedList	app/p2p/wire/seedlist.pb.go	/^func NewPopulatedHelloSeedList(r randySeedlist, easy bool) *HelloSeedList {$/;"	f	package:wire	typeref:typename:*HelloSeedList
NewPopulatedMessageData	app/p2p/wire/seedlist.pb.go	/^func NewPopulatedMessageData(r randySeedlist, easy bool) *MessageData {$/;"	f	package:wire	typeref:typename:*MessageData
NewPopulatedSeedInfo	app/p2p/wire/seedlist.pb.go	/^func NewPopulatedSeedInfo(r randySeedlist, easy bool) *SeedInfo {$/;"	f	package:wire	typeref:typename:*SeedInfo
NewPopulatedSeedListRequest	app/p2p/wire/seedlist.pb.go	/^func NewPopulatedSeedListRequest(r randySeedlist, easy bool) *SeedListRequest {$/;"	f	package:wire	typeref:typename:*SeedListRequest
NewPopulatedSeedListResponse	app/p2p/wire/seedlist.pb.go	/^func NewPopulatedSeedListResponse(r randySeedlist, easy bool) *SeedListResponse {$/;"	f	package:wire	typeref:typename:*SeedListResponse
NewPortMatcher	app/router/condition.go	/^func NewPortMatcher(list *net.PortList, onSource bool) *PortMatcher {$/;"	f	package:router	typeref:typename:*PortMatcher
NewPortal	app/reverse/portal.go	/^func NewPortal(config *PortalConfig, ohm outbound.Manager) (*Portal, error) {$/;"	f	package:reverse	typeref:typename:(*Portal, error)
NewPortalWorker	app/reverse/portal.go	/^func NewPortalWorker(client *mux.ClientWorker) (*PortalWorker, error) {$/;"	f	package:reverse	typeref:typename:(*PortalWorker, error)
NewProtocolMatcher	app/router/condition.go	/^func NewProtocolMatcher(protocols []string) *ProtocolMatcher {$/;"	f	package:router	typeref:typename:*ProtocolMatcher
NewProxyInbound	testing/mocks/proxy.go	/^func NewProxyInbound(ctrl *gomock.Controller) *ProxyInbound {$/;"	f	package:mocks	typeref:typename:*ProxyInbound
NewProxyOutbound	testing/mocks/proxy.go	/^func NewProxyOutbound(ctrl *gomock.Controller) *ProxyOutbound {$/;"	f	package:mocks	typeref:typename:*ProxyOutbound
NewReadVReader	common/buf/readv_reader.go	/^func NewReadVReader(reader io.Reader, rawConn syscall.RawConn) *ReadVReader {$/;"	f	package:buf	typeref:typename:*ReadVReader
NewReadVReader	common/buf/readv_reader_wasm.go	/^func NewReadVReader(reader io.Reader, rawConn syscall.RawConn) Reader {$/;"	f	package:buf	typeref:typename:Reader
NewReader	common/buf/io.go	/^func NewReader(reader io.Reader) Reader {$/;"	f	package:buf	typeref:typename:Reader
NewReader	common/mux/session.go	/^func (s *Session) NewReader(reader *buf.BufferedReader) buf.Reader {$/;"	f	struct:mux.Session	typeref:typename:buf.Reader
NewReader	testing/mocks/io.go	/^func NewReader(ctrl *gomock.Controller) *Reader {$/;"	f	package:mocks	typeref:typename:*Reader
NewReceivingWindow	transport/internet/kcp/receiving.go	/^func NewReceivingWindow() *ReceivingWindow {$/;"	f	package:kcp	typeref:typename:*ReceivingWindow
NewReceivingWorker	transport/internet/kcp/receiving.go	/^func NewReceivingWorker(kcp *Connection) *ReceivingWorker {$/;"	f	package:kcp	typeref:typename:*ReceivingWorker
NewResponseWriter	common/mux/writer.go	/^func NewResponseWriter(id uint16, writer buf.Writer, transferType protocol.TransferType) *Writer/;"	f	package:mux	typeref:typename:*Writer
NewRetryableWriter	transport/internet/kcp/output.go	/^func NewRetryableWriter(writer SegmentWriter) SegmentWriter {$/;"	f	package:kcp	typeref:typename:SegmentWriter
NewRoundRobinServerPicker	common/protocol/server_picker.go	/^func NewRoundRobinServerPicker(serverlist *ServerList) *RoundRobinServerPicker {$/;"	f	package:protocol	typeref:typename:*RoundRobinServerPicker
NewRoutingServer	app/router/command/command.go	/^func NewRoutingServer(router routing.Router, routingStats stats.Channel) RoutingServiceServer {$/;"	f	package:command	typeref:typename:RoutingServiceServer
NewRoutingServiceClient	app/router/command/command_grpc.pb.go	/^func NewRoutingServiceClient(cc grpc.ClientConnInterface) RoutingServiceClient {$/;"	f	package:command	typeref:typename:RoutingServiceClient
NewSQLiteStorage	store/sqlite.go	/^func NewSQLiteStorage(databasePath, createTableScript string) (*SQLiteStorage, error) {$/;"	f	package:store	typeref:typename:(*SQLiteStorage, error)
NewSeedListProtocol	app/p2p/protocol/seedlist/seedlist.go	/^func NewSeedListProtocol(node *SeedNode, done chan struct{}) *SeedListProtocol {$/;"	f	package:seedlist	typeref:typename:*SeedListProtocol
NewSeedNode	app/p2p/protocol/seedlist/seedlist.go	/^func NewSeedNode(host core.Host, done chan struct{}) *SeedNode {$/;"	f	package:seedlist	typeref:typename:*SeedNode
NewSegmentWriter	transport/internet/kcp/output.go	/^func NewSegmentWriter(writer io.Writer) SegmentWriter {$/;"	f	package:kcp	typeref:typename:SegmentWriter
NewSendingWindow	transport/internet/kcp/sending.go	/^func NewSendingWindow(writer SegmentWriter, onPacketLoss func(uint32)) *SendingWindow {$/;"	f	package:kcp	typeref:typename:*SendingWindow
NewSendingWorker	transport/internet/kcp/sending.go	/^func NewSendingWorker(kcp *Connection) *SendingWorker {$/;"	f	package:kcp	typeref:typename:*SendingWorker
NewServer	common/mux/server.go	/^func NewServer(ctx context.Context) *Server {$/;"	f	package:mux	typeref:typename:*Server
NewServer	proxy/http/server.go	/^func NewServer(ctx context.Context, config *ServerConfig) (*Server, error) {$/;"	f	package:http	typeref:typename:(*Server, error)
NewServer	proxy/mtproto/server.go	/^func NewServer(ctx context.Context, config *ServerConfig) (*Server, error) {$/;"	f	package:mtproto	typeref:typename:(*Server, error)
NewServer	proxy/shadowsocks/server.go	/^func NewServer(ctx context.Context, config *ServerConfig) (*Server, error) {$/;"	f	package:shadowsocks	typeref:typename:(*Server, error)
NewServer	proxy/socks/server.go	/^func NewServer(ctx context.Context, config *ServerConfig) (*Server, error) {$/;"	f	package:socks	typeref:typename:(*Server, error)
NewServer	proxy/trojan/server.go	/^func NewServer(ctx context.Context, config *ServerConfig) (*Server, error) {$/;"	f	package:trojan	typeref:typename:(*Server, error)
NewServerList	common/protocol/server_picker.go	/^func NewServerList() *ServerList {$/;"	f	package:protocol	typeref:typename:*ServerList
NewServerSession	proxy/vmess/encoding/server.go	/^func NewServerSession(validator *vmess.TimedUserValidator, sessionHistory *SessionHistory) *Serv/;"	f	package:encoding	typeref:typename:*ServerSession
NewServerSpec	common/protocol/server_spec.go	/^func NewServerSpec(dest net.Destination, valid ValidationStrategy, users ...*MemoryUser) *Server/;"	f	package:protocol	typeref:typename:*ServerSpec
NewServerSpecFromPB	common/protocol/server_spec.go	/^func NewServerSpecFromPB(spec *ServerEndpoint) (*ServerSpec, error) {$/;"	f	package:protocol	typeref:typename:(*ServerSpec, error)
NewServerWorker	common/mux/server.go	/^func NewServerWorker(ctx context.Context, d routing.Dispatcher, link *transport.Link) (*ServerWo/;"	f	package:mux	typeref:typename:(*ServerWorker, error)
NewService	common/signal/pubsub/pubsub.go	/^func NewService() *Service {$/;"	f	package:pubsub	typeref:typename:*Service
NewSessionHistory	proxy/vmess/encoding/server.go	/^func NewSessionHistory() *SessionHistory {$/;"	f	package:encoding	typeref:typename:*SessionHistory
NewSessionManager	common/mux/session.go	/^func NewSessionManager() *SessionManager {$/;"	f	package:mux	typeref:typename:*SessionManager
NewShakeSizeParser	proxy/vmess/encoding/auth.go	/^func NewShakeSizeParser(nonce []byte) *ShakeSizeParser {$/;"	f	package:encoding	typeref:typename:*ShakeSizeParser
NewSimpleAuthenticator	transport/internet/kcp/crypt.go	/^func NewSimpleAuthenticator() cipher.AEAD {$/;"	f	package:kcp	typeref:typename:cipher.AEAD
NewSniffer	app/dispatcher/sniffer.go	/^func NewSniffer() *Sniffer {$/;"	f	package:dispatcher	typeref:typename:*Sniffer
NewSocksDB	app/p2p/account/account.go	/^func NewSocksDB(d *store.LevelDBStore) *SocksDB {$/;"	f	package:account	typeref:typename:*SocksDB
NewStaticHosts	app/dns/hosts.go	/^func NewStaticHosts(hosts []*Config_HostMapping, legacy map[string]*net.IPOrDomain) (*StaticHost/;"	f	package:dns	typeref:typename:(*StaticHosts, error)
NewStaticMuxPicker	app/reverse/portal.go	/^func NewStaticMuxPicker() (*StaticMuxPicker, error) {$/;"	f	package:reverse	typeref:typename:(*StaticMuxPicker, error)
NewStatsServer	app/stats/command/command.go	/^func NewStatsServer(manager feature_stats.Manager) StatsServiceServer {$/;"	f	package:command	typeref:typename:StatsServiceServer
NewStatsServiceClient	app/stats/command/command_grpc.pb.go	/^func NewStatsServiceClient(cc grpc.ClientConnInterface) StatsServiceClient {$/;"	f	package:command	typeref:typename:StatsServiceClient
NewStreamReader	common/mux/reader.go	/^func NewStreamReader(reader *buf.BufferedReader) buf.Reader {$/;"	f	package:mux	typeref:typename:buf.Reader
NewStringList	infra/conf/common.go	/^func NewStringList(raw []string) *StringList {$/;"	f	package:conf	typeref:typename:*StringList
NewTCPReader	common/protocol/dns/io.go	/^func NewTCPReader(reader buf.Reader) *TCPReader {$/;"	f	package:dns	typeref:typename:*TCPReader
NewTimedUserValidator	proxy/vmess/validator.go	/^func NewTimedUserValidator(hasher protocol.IDHash) *TimedUserValidator {$/;"	f	package:vmess	typeref:typename:*TimedUserValidator
NewTimestampGenerator	common/protocol/time.go	/^func NewTimestampGenerator(base Timestamp, delta int) TimestampGenerator {$/;"	f	package:protocol	typeref:typename:TimestampGenerator
NewUDPReader	proxy/socks/protocol.go	/^func NewUDPReader(reader io.Reader) *UDPReader {$/;"	f	package:socks	typeref:typename:*UDPReader
NewUDPWriter	proxy/socks/protocol.go	/^func NewUDPWriter(request *protocol.RequestHeader, writer io.Writer) *UDPWriter {$/;"	f	package:socks	typeref:typename:*UDPWriter
NewUpdater	transport/internet/kcp/connection.go	/^func NewUpdater(interval uint32, shouldContinue func() bool, shouldTerminate func() bool, update/;"	f	package:kcp	typeref:typename:*Updater
NewUserMatcher	app/router/condition.go	/^func NewUserMatcher(users []string) *UserMatcher {$/;"	f	package:router	typeref:typename:*UserMatcher
NewVideoChat	transport/internet/headers/wechat/wechat.go	/^func NewVideoChat(ctx context.Context, config interface{}) (interface{}, error) {$/;"	f	package:wechat	typeref:typename:(interface{}, error)
NewWireguard	transport/internet/headers/wireguard/wireguard.go	/^func NewWireguard(ctx context.Context, config interface{}) (interface{}, error) {$/;"	f	package:wireguard	typeref:typename:(interface{}, error)
NewWithContext	v2ray.go	/^func NewWithContext(config *Config, ctx context.Context) (*Instance, error) {$/;"	f	package:core	typeref:typename:(*Instance, error)
NewWriter	common/buf/io.go	/^func NewWriter(writer io.Writer) Writer {$/;"	f	package:buf	typeref:typename:Writer
NewWriter	common/mux/writer.go	/^func NewWriter(id uint16, dest net.Destination, writer buf.Writer, transferType protocol.Transfe/;"	f	package:mux	typeref:typename:*Writer
NewWriter	testing/mocks/io.go	/^func NewWriter(ctrl *gomock.Controller) *Writer {$/;"	f	package:mocks	typeref:typename:*Writer
NextNumber	transport/internet/kcp/receiving.go	/^func (w *ReceivingWorker) NextNumber() uint32 {$/;"	f	struct:kcp.ReceivingWorker	typeref:typename:uint32
NextPaddingLen	common/crypto/chunk.go	/^	NextPaddingLen() uint16$/;"	n	interface:crypto.PaddingLengthGenerator	typeref:typename:uint16
NextPaddingLen	proxy/vmess/encoding/auth.go	/^func (s *ShakeSizeParser) NextPaddingLen() uint16 {$/;"	f	struct:encoding.ShakeSizeParser	typeref:typename:uint16
NextProtocol	transport/internet/tls/config.pb.go	/^	NextProtocol []string `protobuf:"bytes,4,rep,name=next_protocol,json=nextProtocol,proto3" json:/;"	m	struct:tls.Config	typeref:typename:[]string
NextProtocol	transport/internet/xtls/config.pb.go	/^	NextProtocol []string `protobuf:"bytes,4,rep,name=next_protocol,json=nextProtocol,proto3" json:/;"	m	struct:xtls.Config	typeref:typename:[]string
NoNewPrivileges	release/config/systemd/system/v2ray.service	/^NoNewPrivileges=true$/;"	k	section:Service
NoNewPrivileges	release/config/systemd/system/v2ray@.service	/^NoNewPrivileges=true$/;"	k	section:Service
NoOpAuthenticator	infra/conf/transport_authenticators.go	/^type NoOpAuthenticator struct{}$/;"	s	package:conf
NoOpAuthenticator	proxy/vmess/encoding/auth.go	/^type NoOpAuthenticator struct{}$/;"	s	package:encoding
NoOpCloser	transport/internet/kcp/connection_test.go	/^type NoOpCloser int$/;"	t	package:kcp_test	typeref:typename:int
NoOpConnectionAuthenticator	infra/conf/transport_authenticators.go	/^type NoOpConnectionAuthenticator struct{}$/;"	s	package:conf
NoOpConnectionHeader	transport/internet/headers/noop/noop.go	/^type NoOpConnectionHeader struct{}$/;"	s	package:noop
NoOpHeader	transport/internet/headers/noop/noop.go	/^type NoOpHeader struct{}$/;"	s	package:noop
NoOpReader	transport/internet/headers/http/http.go	/^type NoOpReader struct{}$/;"	s	package:http
NoOpWriter	transport/internet/headers/http/http.go	/^type NoOpWriter struct{}$/;"	s	package:http
NodeId	app/p2p/wire/seedlist.pb.go	/^	NodeId               string   `protobuf:"bytes,5,opt,name=nodeId,proto3" json:"nodeId,omitempty/;"	m	struct:wire.MessageData	typeref:typename:string
NodePubKey	app/p2p/wire/seedlist.pb.go	/^	NodePubKey           []byte   `protobuf:"bytes,6,opt,name=nodePubKey,proto3" json:"nodePubKey,o/;"	m	struct:wire.MessageData	typeref:typename:[]byte
Nonce	app/p2p/wire/seedlist.pb.go	/^	Nonce                string     `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty/;"	m	struct:wire.HelloSeedList	typeref:typename:string
NonceGenerator	common/crypto/auth.go	/^	NonceGenerator          BytesGenerator$/;"	m	struct:crypto.AEADAuthenticator	typeref:typename:BytesGenerator
NonceSize	common/crypto/auth.go	/^	NonceSize() int$/;"	n	interface:crypto.Authenticator	typeref:typename:int
NonceSize	proxy/vmess/encoding/auth.go	/^func (*FnvAuthenticator) NonceSize() int {$/;"	f	struct:encoding.FnvAuthenticator	typeref:typename:int
NonceSize	proxy/vmess/encoding/auth.go	/^func (NoOpAuthenticator) NonceSize() int {$/;"	f	struct:encoding.NoOpAuthenticator	typeref:typename:int
NonceSize	transport/internet/kcp/crypt.go	/^func (*SimpleAuthenticator) NonceSize() int {$/;"	f	struct:kcp.SimpleAuthenticator	typeref:typename:int
None	app/log/config.proto	/^  None = 0;$/;"	e	enum:v2ray.core.app.log.LogType
NoneCipher	proxy/shadowsocks/config.go	/^type NoneCipher struct{}$/;"	s	package:shadowsocks
NoneResponse	infra/conf/blackhole.go	/^type NoneResponse struct{}$/;"	s	package:conf
NoneResponse	proxy/blackhole/config.pb.go	/^type NoneResponse struct {$/;"	s	package:blackhole
NoneResponse	proxy/blackhole/config.proto	/^message NoneResponse {}$/;"	m	package:v2ray.core.proxy.blackhole
NoopManager	features/stats/stats.go	/^type NoopManager struct{}$/;"	s	package:stats
NormalizeEnvName	common/platform/platform.go	/^func NormalizeEnvName(name string) string {$/;"	f	package:platform	typeref:typename:string
NotAfter	common/protocol/tls/cert/cert.go	/^func NotAfter(t time.Time) Option {$/;"	f	package:cert	typeref:typename:Option
NotBefore	common/protocol/tls/cert/cert.go	/^func NotBefore(t time.Time) Option {$/;"	f	package:cert	typeref:typename:Option
Notifier	app/p2p/wire/notifier.proto	/^service Notifier {$/;"	s	package:wire
Notifier	common/signal/notifier.go	/^type Notifier struct {$/;"	s	package:signal
NotifierClient	app/p2p/wire/notifier.pb.go	/^type NotifierClient interface {$/;"	i	package:wire
NotifierServer	app/p2p/wire/notifier.pb.go	/^type NotifierServer interface {$/;"	i	package:wire
NowTime	common/protocol/time.go	/^func NowTime() Timestamp {$/;"	f	package:protocol	typeref:typename:Timestamp
NumGC	app/stats/command/command.pb.go	/^	NumGC        uint32 `protobuf:"varint,2,opt,name=NumGC,proto3" json:"NumGC,omitempty"`$/;"	m	struct:command.SysStatsResponse	typeref:typename:uint32
NumGC	app/stats/command/command.proto	/^  uint32 NumGC = 2;$/;"	f	message:v2ray.core.app.stats.command.SysStatsResponse	typeref:typename:uint32
NumGoroutine	app/stats/command/command.pb.go	/^	NumGoroutine uint32 `protobuf:"varint,1,opt,name=NumGoroutine,proto3" json:"NumGoroutine,omitem/;"	m	struct:command.SysStatsResponse	typeref:typename:uint32
NumGoroutine	app/stats/command/command.proto	/^  uint32 NumGoroutine = 1;$/;"	f	message:v2ray.core.app.stats.command.SysStatsResponse	typeref:typename:uint32
Number	app/dns/config.pb.go	/^func (x DomainMatchingType) Number() protoreflect.EnumNumber {$/;"	f	type:dns.DomainMatchingType	typeref:typename:protoreflect.EnumNumber
Number	app/log/config.pb.go	/^func (x LogType) Number() protoreflect.EnumNumber {$/;"	f	type:log.LogType	typeref:typename:protoreflect.EnumNumber
Number	app/proxyman/config.pb.go	/^func (x AllocationStrategy_Type) Number() protoreflect.EnumNumber {$/;"	f	type:proxyman.AllocationStrategy_Type	typeref:typename:protoreflect.EnumNumber
Number	app/proxyman/config.pb.go	/^func (x KnownProtocols) Number() protoreflect.EnumNumber {$/;"	f	type:proxyman.KnownProtocols	typeref:typename:protoreflect.EnumNumber
Number	app/reverse/config.pb.go	/^func (x Control_State) Number() protoreflect.EnumNumber {$/;"	f	type:reverse.Control_State	typeref:typename:protoreflect.EnumNumber
Number	app/router/config.pb.go	/^func (x Config_DomainStrategy) Number() protoreflect.EnumNumber {$/;"	f	type:router.Config_DomainStrategy	typeref:typename:protoreflect.EnumNumber
Number	app/router/config.pb.go	/^func (x Domain_Type) Number() protoreflect.EnumNumber {$/;"	f	type:router.Domain_Type	typeref:typename:protoreflect.EnumNumber
Number	common/log/log.pb.go	/^func (x Severity) Number() protoreflect.EnumNumber {$/;"	f	type:log.Severity	typeref:typename:protoreflect.EnumNumber
Number	common/net/network.pb.go	/^func (x Network) Number() protoreflect.EnumNumber {$/;"	f	type:net.Network	typeref:typename:protoreflect.EnumNumber
Number	common/protocol/headers.pb.go	/^func (x SecurityType) Number() protoreflect.EnumNumber {$/;"	f	type:protocol.SecurityType	typeref:typename:protoreflect.EnumNumber
Number	proxy/freedom/config.pb.go	/^func (x Config_DomainStrategy) Number() protoreflect.EnumNumber {$/;"	f	type:freedom.Config_DomainStrategy	typeref:typename:protoreflect.EnumNumber
Number	proxy/shadowsocks/config.pb.go	/^func (x CipherType) Number() protoreflect.EnumNumber {$/;"	f	type:shadowsocks.CipherType	typeref:typename:protoreflect.EnumNumber
Number	proxy/socks/config.pb.go	/^func (x AuthType) Number() protoreflect.EnumNumber {$/;"	f	type:socks.AuthType	typeref:typename:protoreflect.EnumNumber
Number	transport/internet/config.pb.go	/^func (x SocketConfig_TCPFastOpenState) Number() protoreflect.EnumNumber {$/;"	f	type:internet.SocketConfig_TCPFastOpenState	typeref:typename:protoreflect.EnumNumber
Number	transport/internet/config.pb.go	/^func (x SocketConfig_TProxyMode) Number() protoreflect.EnumNumber {$/;"	f	type:internet.SocketConfig_TProxyMode	typeref:typename:protoreflect.EnumNumber
Number	transport/internet/config.pb.go	/^func (x TransportProtocol) Number() protoreflect.EnumNumber {$/;"	f	type:internet.TransportProtocol	typeref:typename:protoreflect.EnumNumber
Number	transport/internet/kcp/segment.go	/^	Number      uint32$/;"	m	struct:kcp.DataSegment	typeref:typename:uint32
Number	transport/internet/tls/config.pb.go	/^func (x Certificate_Usage) Number() protoreflect.EnumNumber {$/;"	f	type:tls.Certificate_Usage	typeref:typename:protoreflect.EnumNumber
Number	transport/internet/xtls/config.pb.go	/^func (x Certificate_Usage) Number() protoreflect.EnumNumber {$/;"	f	type:xtls.Certificate_Usage	typeref:typename:protoreflect.EnumNumber
NumberList	transport/internet/kcp/segment.go	/^	NumberList      []uint32$/;"	m	struct:kcp.AckSegment	typeref:typename:[]uint32
Off	transport/internet/config.proto	/^    Off = 0;$/;"	e	enum:v2ray.core.transport.internet.SocketConfig.TProxyMode
On	common/retry/retry.go	/^	On(func() error) error$/;"	n	interface:retry.Strategy	typeref:typename:error
On	common/retry/retry.go	/^func (r *retryer) On(method func() error) error {$/;"	f	struct:retry.retryer	typeref:typename:error
OnDispatch	transport/internet/udp/dispatcher_test.go	/^	OnDispatch func(ctx context.Context, dest net.Destination) (*transport.Link, error)$/;"	m	struct:udp_test.TestDispatcher	typeref:typename:func(ctx context.Context, dest net.Destination) (*transport.Link, error)
OnPacketLoss	transport/internet/kcp/sending.go	/^func (w *SendingWorker) OnPacketLoss(lossRate uint32) {$/;"	f	struct:kcp.SendingWorker
OnPeerClosed	transport/internet/kcp/connection.go	/^func (c *Connection) OnPeerClosed() {$/;"	f	struct:kcp.Connection
OnReceive	transport/internet/kcp/listener.go	/^func (l *Listener) OnReceive(payload *buf.Buffer, src net.Destination) {$/;"	f	struct:kcp.Listener
OnSuccess	common/task/task.go	/^func OnSuccess(f func() error, g func() error) func() error {$/;"	f	package:task	typeref:typename:func() error
Open	common/crypto/auth.go	/^	Open(dst, cipherText []byte) ([]byte, error)$/;"	n	interface:crypto.Authenticator	typeref:typename:([]byte, error)
Open	common/crypto/auth.go	/^func (v *AEADAuthenticator) Open(dst, cipherText []byte) ([]byte, error) {$/;"	f	struct:crypto.AEADAuthenticator	typeref:typename:([]byte, error)
Open	proxy/vmess/encoding/auth.go	/^func (*FnvAuthenticator) Open(dst, nonce, ciphertext, additionalData []byte) ([]byte, error) {$/;"	f	struct:encoding.FnvAuthenticator	typeref:typename:([]byte, error)
Open	proxy/vmess/encoding/auth.go	/^func (NoOpAuthenticator) Open(dst, nonce, ciphertext, additionalData []byte) ([]byte, error) {$/;"	f	struct:encoding.NoOpAuthenticator	typeref:typename:([]byte, error)
Open	transport/internet/kcp/crypt.go	/^func (a *SimpleAuthenticator) Open(dst, nonce, cipherText, extra []byte) ([]byte, error) {$/;"	f	struct:kcp.SimpleAuthenticator	typeref:typename:([]byte, error)
OpenSocksDB	app/p2p/account/account.go	/^func OpenSocksDB(path string) (*SocksDB, error) {$/;"	f	package:account	typeref:typename:(*SocksDB, error)
OpenVMessAEADHeader	proxy/vmess/aead/encrypt.go	/^func OpenVMessAEADHeader(key [16]byte, authid [16]byte, data io.Reader) ([]byte, bool, error, in/;"	f	package:aead	typeref:typename:([]byte, bool, error, int)
Operation	app/proxyman/command/command.pb.go	/^	Operation *serial.TypedMessage `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,om/;"	m	struct:command.AlterInboundRequest	typeref:typename:*serial.TypedMessage
Operation	app/proxyman/command/command.pb.go	/^	Operation *serial.TypedMessage `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,om/;"	m	struct:command.AlterOutboundRequest	typeref:typename:*serial.TypedMessage
Option	common/mux/frame.go	/^	Option        bitmask.Byte$/;"	m	struct:mux.FrameMetadata	typeref:typename:bitmask.Byte
Option	common/protocol/headers.go	/^	Option   bitmask.Byte$/;"	m	struct:protocol.RequestHeader	typeref:typename:bitmask.Byte
Option	common/protocol/headers.go	/^	Option  bitmask.Byte$/;"	m	struct:protocol.ResponseHeader	typeref:typename:bitmask.Byte
Option	common/protocol/tls/cert/cert.go	/^type Option func(*x509.Certificate)$/;"	t	package:cert	typeref:typename:func(*x509.Certificate)
Option	transport/internet/kcp/segment.go	/^	Option          SegmentOption$/;"	m	struct:kcp.AckSegment	typeref:typename:SegmentOption
Option	transport/internet/kcp/segment.go	/^	Option        SegmentOption$/;"	m	struct:kcp.CmdOnlySegment	typeref:typename:SegmentOption
Option	transport/internet/kcp/segment.go	/^	Option      SegmentOption$/;"	m	struct:kcp.DataSegment	typeref:typename:SegmentOption
Option	transport/internet/tls/config.go	/^type Option func(*tls.Config)$/;"	t	package:tls	typeref:typename:func(*tls.Config)
Option	transport/internet/xtls/config.go	/^type Option func(*xtls.Config)$/;"	t	package:xtls	typeref:typename:func(*xtls.Config)
Option	transport/pipe/pipe.go	/^type Option func(*pipeOption)$/;"	t	package:pipe	typeref:typename:func(*pipeOption)
OptionData	common/mux/frame.go	/^	OptionData  bitmask.Byte = 0x01$/;"	c	package:mux	typeref:typename:bitmask.Byte
OptionError	common/mux/frame.go	/^	OptionError bitmask.Byte = 0x02$/;"	c	package:mux	typeref:typename:bitmask.Byte
OptionsFromContext	transport/pipe/pipe.go	/^func OptionsFromContext(ctx context.Context) []Option {$/;"	f	package:pipe	typeref:typename:[]Option
Organization	common/protocol/tls/cert/cert.go	/^func Organization(org string) Option {$/;"	f	package:cert	typeref:typename:Option
OriginalDst	transport/internet/sockopt_freebsd.go	/^func OriginalDst(la, ra net.Addr) (net.IP, int, error) {$/;"	f	package:internet	typeref:typename:(net.IP, int, error)
OriginalRule	app/dns/config.proto	/^  message OriginalRule {$/;"	m	message:v2ray.core.app.dns.NameServer
OriginalRules	app/dns/config.pb.go	/^	OriginalRules     []*NameServer_OriginalRule   `protobuf:"bytes,4,rep,name=original_rules,json=/;"	m	struct:dns.NameServer	typeref:typename:[]*NameServer_OriginalRule
Ota	infra/conf/shadowsocks.go	/^	Ota      bool     `json:"ota"`$/;"	m	struct:conf.ShadowsocksServerTarget	typeref:typename:bool
Our Pledge	.github/CODE_OF_CONDUCT.md	/^## Our Pledge$/;"	s	chapter:Contributor Covenant Code of Conduct
Our Responsibilities	.github/CODE_OF_CONDUCT.md	/^## Our Responsibilities$/;"	s	chapter:Contributor Covenant Code of Conduct
Our Standards	.github/CODE_OF_CONDUCT.md	/^## Our Standards$/;"	s	chapter:Contributor Covenant Code of Conduct
Outbound	app/commander/outbound.go	/^type Outbound struct {$/;"	s	package:commander
Outbound	app/proxyman/command/command.pb.go	/^	Outbound *core.OutboundHandlerConfig `protobuf:"bytes,1,opt,name=outbound,proto3" json:"outboun/;"	m	struct:command.AddOutboundRequest	typeref:typename:*core.OutboundHandlerConfig
Outbound	app/reverse/portal.go	/^type Outbound struct {$/;"	s	package:reverse
Outbound	common/session/session.go	/^type Outbound struct {$/;"	s	package:session
Outbound	config.pb.go	/^	Outbound []*OutboundHandlerConfig `protobuf:"bytes,2,rep,name=outbound,proto3" json:"outbound,o/;"	m	struct:core.Config	typeref:typename:[]*OutboundHandlerConfig
Outbound	features/routing/session/context.go	/^	Outbound *session.Outbound$/;"	m	struct:session.Context	typeref:typename:*session.Outbound
Outbound	proxy/proxy.go	/^type Outbound interface {$/;"	i	package:proxy
OutboundConfig	app/proxyman/config.pb.go	/^type OutboundConfig struct {$/;"	s	package:proxyman
OutboundConfig	app/proxyman/config.proto	/^message OutboundConfig {}$/;"	m	package:v2ray.core.app.proxyman
OutboundConfig	infra/conf/v2ray.go	/^	OutboundConfig  *OutboundDetourConfig  `json:"outbound"`       \/\/ Deprecated.$/;"	m	struct:conf.Config	typeref:typename:*OutboundDetourConfig
OutboundConfigs	infra/conf/v2ray.go	/^	OutboundConfigs []OutboundDetourConfig `json:"outbounds"`$/;"	m	struct:conf.Config	typeref:typename:[]OutboundDetourConfig
OutboundDetourConfig	infra/conf/v2ray.go	/^type OutboundDetourConfig struct {$/;"	s	package:conf
OutboundDetours	infra/conf/v2ray.go	/^	OutboundDetours []OutboundDetourConfig `json:"outboundDetour"` \/\/ Deprecated.$/;"	m	struct:conf.Config	typeref:typename:[]OutboundDetourConfig
OutboundDownlink	app/policy/config.pb.go	/^	OutboundDownlink bool `protobuf:"varint,4,opt,name=outbound_downlink,json=outboundDownlink,prot/;"	m	struct:policy.SystemPolicy_Stats	typeref:typename:bool
OutboundDownlink	features/policy/policy.go	/^	OutboundDownlink bool$/;"	m	struct:policy.SystemStats	typeref:typename:bool
OutboundFromContext	common/session/context.go	/^func OutboundFromContext(ctx context.Context) *Outbound {$/;"	f	package:session	typeref:typename:*Outbound
OutboundGroupTags	app/router/command/command.pb.go	/^	OutboundGroupTags []string          `protobuf:"bytes,11,rep,name=OutboundGroupTags,proto3" json/;"	m	struct:command.RoutingContext	typeref:typename:[]string
OutboundGroupTags	app/router/command/command.proto	/^  repeated string OutboundGroupTags = 11;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:string
OutboundHandlerConfig	config.pb.go	/^type OutboundHandlerConfig struct {$/;"	s	package:core
OutboundHandlerConfig	config.proto	/^message OutboundHandlerConfig {$/;"	m	package:v2ray.core
OutboundHandlerSelector	testing/mocks/outbound.go	/^type OutboundHandlerSelector struct {$/;"	s	package:mocks
OutboundHandlerSelectorMockRecorder	testing/mocks/outbound.go	/^type OutboundHandlerSelectorMockRecorder struct {$/;"	s	package:mocks
OutboundListener	app/commander/outbound.go	/^type OutboundListener struct {$/;"	s	package:commander
OutboundManager	testing/mocks/outbound.go	/^type OutboundManager struct {$/;"	s	package:mocks
OutboundManagerMockRecorder	testing/mocks/outbound.go	/^type OutboundManagerMockRecorder struct {$/;"	s	package:mocks
OutboundOperation	app/proxyman/command/command.go	/^type OutboundOperation interface {$/;"	i	package:command
OutboundSelector	app/router/config.pb.go	/^	OutboundSelector []string `protobuf:"bytes,2,rep,name=outbound_selector,json=outboundSelector,p/;"	m	struct:router.BalancingRule	typeref:typename:[]string
OutboundTag	app/router/command/command.pb.go	/^	OutboundTag       string            `protobuf:"bytes,12,opt,name=OutboundTag,proto3" json:"Outb/;"	m	struct:command.RoutingContext	typeref:typename:string
OutboundTag	app/router/command/command.proto	/^  string OutboundTag = 12;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:string
OutboundTag	infra/conf/router.go	/^	OutboundTag string `json:"outboundTag"`$/;"	m	struct:conf.RouterRule	typeref:typename:string
OutboundUplink	app/policy/config.pb.go	/^	OutboundUplink   bool `protobuf:"varint,3,opt,name=outbound_uplink,json=outboundUplink,proto3" /;"	m	struct:policy.SystemPolicy_Stats	typeref:typename:bool
OutboundUplink	features/policy/policy.go	/^	OutboundUplink bool$/;"	m	struct:policy.SystemStats	typeref:typename:bool
Output	infra/conf/general_test.go	/^	Output proto.Message$/;"	m	struct:conf_test.TestCase	typeref:typename:proto.Message
Overhead	common/crypto/auth.go	/^	Overhead() int$/;"	n	interface:crypto.Authenticator	typeref:typename:int
Overhead	proxy/vmess/encoding/auth.go	/^func (*FnvAuthenticator) Overhead() int {$/;"	f	struct:encoding.FnvAuthenticator	typeref:typename:int
Overhead	proxy/vmess/encoding/auth.go	/^func (NoOpAuthenticator) Overhead() int {$/;"	f	struct:encoding.NoOpAuthenticator	typeref:typename:int
Overhead	transport/internet/kcp/crypt.go	/^func (*SimpleAuthenticator) Overhead() int {$/;"	f	struct:kcp.SimpleAuthenticator	typeref:typename:int
Overhead	transport/internet/kcp/io.go	/^	Overhead() int$/;"	n	interface:kcp.PacketWriter	typeref:typename:int
Overhead	transport/internet/kcp/io.go	/^func (w *KCPPacketWriter) Overhead() int {$/;"	f	struct:kcp.KCPPacketWriter	typeref:typename:int
Override	infra/conf/v2ray.go	/^func (c *Config) Override(o *Config, fn string) {$/;"	f	struct:conf.Config
OverrideDestinationForProtocol	common/session/session.go	/^	OverrideDestinationForProtocol []string$/;"	m	struct:session.SniffingRequest	typeref:typename:[]string
P	common/protocol/tls/cert/privateKey.go	/^	P       *big.Int$/;"	m	struct:cert.pkcs1PrivateKey	typeref:typename:*big.Int
P2P	infra/conf/v2ray.go	/^	P2P         	*P2PConfig             `json:"p2p"`$/;"	m	struct:conf.Config	typeref:typename:*P2PConfig
P2PConfig	infra/conf/p2p.go	/^type P2PConfig struct {$/;"	s	package:conf
P2PNode	app/p2p/api.go	/^type P2PNode struct {$/;"	s	package:p2p
PASSWORD	proxy/socks/config.proto	/^  PASSWORD = 1;$/;"	e	enum:v2ray.core.proxy.socks.AuthType
PackMessage	common/protocol/dns/io.go	/^func PackMessage(msg *dnsmessage.Message) (*buf.Buffer, error) {$/;"	f	package:dns	typeref:typename:(*buf.Buffer, error)
Packet	common/protocol/udp/packet.go	/^type Packet struct {$/;"	s	package:udp
PacketConfig	transport/internet/headers/tls/config.pb.go	/^type PacketConfig struct {$/;"	s	package:tls
PacketConfig	transport/internet/headers/tls/config.proto	/^message PacketConfig {}$/;"	m	package:v2ray.core.transport.internet.headers.tls
PacketConn	common/net/system.go	/^type PacketConn = net.PacketConn$/;"	a	package:net	typeref:typename:net.PacketConn
PacketHeader	transport/internet/header.go	/^type PacketHeader interface {$/;"	i	package:internet
PacketPayload	proxy/trojan/protocol.go	/^type PacketPayload struct {$/;"	s	package:trojan
PacketReader	common/buf/reader.go	/^type PacketReader struct {$/;"	s	package:buf
PacketReader	common/mux/reader.go	/^type PacketReader struct {$/;"	s	package:mux
PacketReader	proxy/trojan/protocol.go	/^type PacketReader struct {$/;"	s	package:trojan
PacketReader	transport/internet/kcp/io.go	/^type PacketReader interface {$/;"	i	package:kcp
PacketWriter	proxy/trojan/protocol.go	/^type PacketWriter struct {$/;"	s	package:trojan
PacketWriter	transport/internet/kcp/io.go	/^type PacketWriter interface {$/;"	i	package:kcp
Pad	transport/internet/sockopt_freebsd.go	/^	Pad       [1]byte$/;"	m	struct:internet.pfiocNatlook	typeref:typename:[1]byte
Padding	infra/conf/transport_internet.go	/^	Padding             bool   `json:"padding"`$/;"	m	struct:conf.DomainSocketConfig	typeref:typename:bool
Padding	transport/internet/domainsocket/config.pb.go	/^	Padding             bool `protobuf:"varint,3,opt,name=padding,proto3" json:"padding,omitempty"`$/;"	m	struct:domainsocket.Config	typeref:typename:bool
Padding	transport/internet/headers/srtp/config.pb.go	/^	Padding     bool   `protobuf:"varint,2,opt,name=padding,proto3" json:"padding,omitempty"`$/;"	m	struct:srtp.Config	typeref:typename:bool
PaddingLengthGenerator	common/crypto/chunk.go	/^type PaddingLengthGenerator interface {$/;"	i	package:crypto
ParseAddress	common/net/address.go	/^func ParseAddress(addr string) Address {$/;"	f	package:net	typeref:typename:Address
ParseBytes	common/uuid/uuid.go	/^func ParseBytes(b []byte) (UUID, error) {$/;"	f	package:uuid	typeref:typename:(UUID, error)
ParseCertificate	common/protocol/tls/cert/cert.go	/^func ParseCertificate(certPEM []byte, keyPEM []byte) (*Certificate, error) {$/;"	f	package:cert	typeref:typename:(*Certificate, error)
ParseCertificate	transport/internet/tls/config.go	/^func ParseCertificate(c *cert.Certificate) *Certificate {$/;"	f	package:tls	typeref:typename:*Certificate
ParseCertificate	transport/internet/xtls/config.go	/^func ParseCertificate(c *cert.Certificate) *Certificate {$/;"	f	package:xtls	typeref:typename:*Certificate
ParseDestination	common/net/destination.go	/^func ParseDestination(dest string) (Destination, error) {$/;"	f	package:net	typeref:typename:(Destination, error)
ParseHeader	proxy/trojan/protocol.go	/^func (c *ConnReader) ParseHeader() error {$/;"	f	struct:trojan.ConnReader	typeref:typename:error
ParseHost	common/protocol/http/headers.go	/^func ParseHost(rawHost string, defaultPort net.Port) (net.Destination, error) {$/;"	f	package:http	typeref:typename:(net.Destination, error)
ParseIP	common/net/system.go	/^var ParseIP = net.ParseIP$/;"	v	package:net
ParseIP	infra/conf/router.go	/^func ParseIP(s string) (*router.CIDR, error) {$/;"	f	package:conf	typeref:typename:(*router.CIDR, error)
ParseRule	infra/conf/router.go	/^func ParseRule(msg json.RawMessage) (*router.RoutingRule, error) {$/;"	f	package:conf	typeref:typename:(*router.RoutingRule, error)
ParseString	common/uuid/uuid.go	/^func ParseString(str string) (UUID, error) {$/;"	f	package:uuid	typeref:typename:(UUID, error)
ParseXForwardedFor	common/protocol/http/headers.go	/^func ParseXForwardedFor(header http.Header) []net.Address {$/;"	f	package:http	typeref:typename:[]net.Address
Parser	infra/conf/general_test.go	/^	Parser func(string) (proto.Message, error)$/;"	m	struct:conf_test.TestCase	typeref:typename:func(string) (proto.Message, error)
Password	bin/config/config-server.json	/^    "InfluxDB":{"URL":"http:\/\/192.168.1.115:8086","DBName":"metric","UserName":"saveio","Passw/;"	s	object:porter.InfluxDB
Password	infra/conf/http.go	/^	Password string `json:"pass"`$/;"	m	struct:conf.HttpAccount	typeref:typename:string
Password	infra/conf/shadowsocks.go	/^	Password    string       `json:"password"`$/;"	m	struct:conf.ShadowsocksServerConfig	typeref:typename:string
Password	infra/conf/shadowsocks.go	/^	Password string   `json:"password"`$/;"	m	struct:conf.ShadowsocksServerTarget	typeref:typename:string
Password	infra/conf/socks.go	/^	Password string `json:"pass"`$/;"	m	struct:conf.SocksAccount	typeref:typename:string
Password	infra/conf/trojan.go	/^	Password string   `json:"password"`$/;"	m	struct:conf.TrojanServerTarget	typeref:typename:string
Password	infra/conf/trojan.go	/^	Password string `json:"password"`$/;"	m	struct:conf.TrojanUserConfig	typeref:typename:string
Password	proxy/http/config.pb.go	/^	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`$/;"	m	struct:http.Account	typeref:typename:string
Password	proxy/shadowsocks/config.pb.go	/^	Password   string     `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`$/;"	m	struct:shadowsocks.Account	typeref:typename:string
Password	proxy/socks/config.pb.go	/^	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`$/;"	m	struct:socks.Account	typeref:typename:string
Password	proxy/trojan/config.go	/^	Password string$/;"	m	struct:trojan.MemoryAccount	typeref:typename:string
Password	proxy/trojan/config.pb.go	/^	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`$/;"	m	struct:trojan.Account	typeref:typename:string
Path	app/log/log_creator.go	/^	Path string$/;"	m	struct:log.HandlerCreatorOptions	typeref:typename:string
Path	infra/conf/transport_authenticators.go	/^	Path    StringList             `json:"path"`$/;"	m	struct:conf.HTTPAuthenticatorRequest	typeref:typename:StringList
Path	infra/conf/transport_internet.go	/^	Path                string            `json:"path"`$/;"	m	struct:conf.WebSocketConfig	typeref:typename:string
Path	infra/conf/transport_internet.go	/^	Path                string `json:"path"`$/;"	m	struct:conf.DomainSocketConfig	typeref:typename:string
Path	infra/conf/transport_internet.go	/^	Path string      `json:"path"`$/;"	m	struct:conf.HTTPConfig	typeref:typename:string
Path	infra/conf/trojan.go	/^	Path string          `json:"path"`$/;"	m	struct:conf.TrojanInboundFallback	typeref:typename:string
Path	infra/conf/vless.go	/^	Path string          `json:"path"`$/;"	m	struct:conf.VLessInboundFallback	typeref:typename:string
Path	proxy/trojan/config.pb.go	/^	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`$/;"	m	struct:trojan.Fallback	typeref:typename:string
Path	proxy/vless/inbound/config.pb.go	/^	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`$/;"	m	struct:inbound.Fallback	typeref:typename:string
Path	transport/internet/domainsocket/config.pb.go	/^	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`$/;"	m	struct:domainsocket.Config	typeref:typename:string
Path	transport/internet/http/config.pb.go	/^	Path string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`$/;"	m	struct:http.Config	typeref:typename:string
Path	transport/internet/websocket/config.pb.go	/^	Path                string    `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`$/;"	m	struct:websocket.Config	typeref:typename:string
Path2	infra/conf/transport_internet.go	/^	Path2               string            `json:"Path"` \/\/ The key was misspelled. For backward c/;"	m	struct:conf.WebSocketConfig	typeref:typename:string
PathHandler	testing/servers/http/http.go	/^	PathHandler map[string]http.HandlerFunc$/;"	m	struct:tcp.Server	typeref:typename:map[string]http.HandlerFunc
Pattern	app/stats/command/command.pb.go	/^	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`$/;"	m	struct:command.QueryStatsRequest	typeref:typename:string
PauseTotalNs	app/stats/command/command.pb.go	/^	PauseTotalNs uint64 `protobuf:"varint,9,opt,name=PauseTotalNs,proto3" json:"PauseTotalNs,omitem/;"	m	struct:command.SysStatsResponse	typeref:typename:uint64
PauseTotalNs	app/stats/command/command.proto	/^  uint64 PauseTotalNs = 9;$/;"	f	message:v2ray.core.app.stats.command.SysStatsResponse	typeref:typename:uint64
Payload	common/protocol/udp/packet.go	/^	Payload *buf.Buffer$/;"	m	struct:udp.Packet	typeref:typename:*buf.Buffer
PayloadType	transport/internet/headers/srtp/config.pb.go	/^	PayloadType uint32 `protobuf:"varint,6,opt,name=payload_type,json=payloadType,proto3" json:"pay/;"	m	struct:srtp.Config	typeref:typename:uint32
PeerRTO	transport/internet/kcp/segment.go	/^	PeerRTO       uint32$/;"	m	struct:kcp.CmdOnlySegment	typeref:typename:uint32
PerConnection	features/policy/policy.go	/^	PerConnection int32$/;"	m	struct:policy.Buffer	typeref:typename:int32
Periodic	common/task/periodic.go	/^type Periodic struct {$/;"	s	package:task
PickAvailable	app/reverse/portal.go	/^func (p *StaticMuxPicker) PickAvailable() (*mux.ClientWorker, error) {$/;"	f	struct:reverse.StaticMuxPicker	typeref:typename:(*mux.ClientWorker, error)
PickAvailable	common/mux/client.go	/^	PickAvailable() (*ClientWorker, error)$/;"	n	interface:mux.WorkerPicker	typeref:typename:(*ClientWorker, error)
PickAvailable	common/mux/client.go	/^func (p *IncrementalWorkerPicker) PickAvailable() (*ClientWorker, error) {$/;"	f	struct:mux.IncrementalWorkerPicker	typeref:typename:(*ClientWorker, error)
PickHeaders	transport/internet/headers/http/config.go	/^func (v *RequestConfig) PickHeaders() []string {$/;"	f	unknown:http.RequestConfig	typeref:typename:[]string
PickHeaders	transport/internet/headers/http/config.go	/^func (v *ResponseConfig) PickHeaders() []string {$/;"	f	unknown:http.ResponseConfig	typeref:typename:[]string
PickOutbound	app/router/balancing.go	/^	PickOutbound([]string) string$/;"	n	interface:router.BalancingStrategy	typeref:typename:string
PickOutbound	app/router/balancing.go	/^func (b *Balancer) PickOutbound() (string, error) {$/;"	f	struct:router.Balancer	typeref:typename:(string, error)
PickOutbound	app/router/balancing.go	/^func (s *RandomStrategy) PickOutbound(tags []string) string {$/;"	f	struct:router.RandomStrategy	typeref:typename:string
PickPort	testing/servers/tcp/port.go	/^func PickPort() net.Port {$/;"	f	package:tcp	typeref:typename:net.Port
PickPort	testing/servers/udp/port.go	/^func PickPort() net.Port {$/;"	f	package:udp	typeref:typename:net.Port
PickRoute	app/router/router.go	/^func (r *Router) PickRoute(ctx routing.Context) (routing.Route, error) {$/;"	f	struct:router.Router	typeref:typename:(routing.Route, error)
PickRoute	features/routing/router.go	/^	PickRoute(ctx Context) (Route, error)$/;"	n	interface:routing.Router	typeref:typename:(Route, error)
PickRoute	features/routing/router.go	/^func (DefaultRouter) PickRoute(ctx Context) (Route, error) {$/;"	f	struct:routing.DefaultRouter	typeref:typename:(Route, error)
PickServer	common/protocol/server_picker.go	/^	PickServer() *ServerSpec$/;"	n	interface:protocol.ServerPicker	typeref:typename:*ServerSpec
PickServer	common/protocol/server_picker.go	/^func (p *RoundRobinServerPicker) PickServer() *ServerSpec {$/;"	f	struct:protocol.RoundRobinServerPicker	typeref:typename:*ServerSpec
PickUri	transport/internet/headers/http/config.go	/^func (v *RequestConfig) PickUri() string {$/;"	f	unknown:http.RequestConfig	typeref:typename:string
PickUser	common/protocol/server_spec.go	/^func (s *ServerSpec) PickUser() *MemoryUser {$/;"	f	struct:protocol.ServerSpec	typeref:typename:*MemoryUser
Picker	common/mux/client.go	/^	Picker  WorkerPicker$/;"	m	struct:mux.ClientManager	typeref:typename:WorkerPicker
Ping	transport/internet/kcp/connection.go	/^func (c *Connection) Ping(current uint32, cmd Command) {$/;"	f	struct:kcp.Connection
Plain	app/router/config.proto	/^    Plain = 0;$/;"	e	enum:v2ray.core.app.router.Domain.Type
PlainChunkSizeParser	common/crypto/chunk.go	/^type PlainChunkSizeParser struct{}$/;"	s	package:crypto
Policy	app/policy/config.pb.go	/^type Policy struct {$/;"	s	package:policy
Policy	app/policy/config.proto	/^message Policy {$/;"	m	package:v2ray.core.app.policy
Policy	infra/conf/policy.go	/^type Policy struct {$/;"	s	package:conf
Policy	infra/conf/v2ray.go	/^	Policy          *PolicyConfig          `json:"policy"`$/;"	m	struct:conf.Config	typeref:typename:*PolicyConfig
PolicyConfig	infra/conf/policy.go	/^type PolicyConfig struct {$/;"	s	package:conf
Policy_Buffer	app/policy/config.pb.go	/^type Policy_Buffer struct {$/;"	s	package:policy
Policy_Stats	app/policy/config.pb.go	/^type Policy_Stats struct {$/;"	s	package:policy
Policy_Timeout	app/policy/config.pb.go	/^type Policy_Timeout struct {$/;"	s	package:policy
PoolSwap	common/antireplay/antireplay.go	/^	PoolSwap       bool$/;"	m	struct:antireplay.AntiReplayWindow	typeref:typename:bool
Port	app/p2p/config.pb.go	/^	Port                 int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`$/;"	m	struct:p2p.Config	typeref:typename:int32
Port	app/p2p/config.pb.go	/^	Port                 int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`$/;"	m	struct:p2p.Seed	typeref:typename:int32
Port	app/p2p/wire/seedlist.pb.go	/^	Port                 int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`$/;"	m	struct:wire.SeedInfo	typeref:typename:int32
Port	app/proxyman/inbound/worker.go	/^	Port() net.Port$/;"	n	interface:inbound.worker	typeref:typename:net.Port
Port	app/proxyman/inbound/worker.go	/^func (w *tcpWorker) Port() net.Port {$/;"	f	struct:inbound.tcpWorker	typeref:typename:net.Port
Port	app/proxyman/inbound/worker.go	/^func (w *udpWorker) Port() net.Port {$/;"	f	struct:inbound.udpWorker	typeref:typename:net.Port
Port	common/net/destination.go	/^	Port    Port$/;"	m	struct:net.Destination	typeref:typename:Port
Port	common/net/destination.pb.go	/^	Port    uint32      `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`$/;"	m	struct:net.Endpoint	typeref:typename:uint32
Port	common/net/port.go	/^type Port uint16$/;"	t	package:net	typeref:typename:uint16
Port	common/protocol/headers.go	/^	Port     net.Port$/;"	m	struct:protocol.CommandSwitchAccount	typeref:typename:net.Port
Port	common/protocol/headers.go	/^	Port     net.Port$/;"	m	struct:protocol.RequestHeader	typeref:typename:net.Port
Port	common/protocol/server_spec.pb.go	/^	Port    uint32          `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`$/;"	m	struct:protocol.ServerEndpoint	typeref:typename:uint32
Port	infra/conf/dns.go	/^	Port      uint16$/;"	m	struct:conf.NameServerConfig	typeref:typename:uint16
Port	infra/conf/dns_proxy.go	/^	Port    uint16   `json:"port"`$/;"	m	struct:conf.DnsOutboundConfig	typeref:typename:uint16
Port	infra/conf/http.go	/^	Port    uint16            `json:"port"`$/;"	m	struct:conf.HttpRemoteConfig	typeref:typename:uint16
Port	infra/conf/p2p.go	/^	Port     int32  `json:"port"`$/;"	m	struct:conf.P2PConfig	typeref:typename:int32
Port	infra/conf/p2p.go	/^	Port     int32  `json:"port"`$/;"	m	struct:conf.seed	typeref:typename:int32
Port	infra/conf/shadowsocks.go	/^	Port     uint16   `json:"port"`$/;"	m	struct:conf.ShadowsocksServerTarget	typeref:typename:uint16
Port	infra/conf/socks.go	/^	Port    uint16            `json:"port"`$/;"	m	struct:conf.SocksRemoteConfig	typeref:typename:uint16
Port	infra/conf/trojan.go	/^	Port     uint16   `json:"port"`$/;"	m	struct:conf.TrojanServerTarget	typeref:typename:uint16
Port	infra/conf/v2ray.go	/^	Port            uint16                 `json:"port"` \/\/ Port of this Point server. Deprecated/;"	m	struct:conf.Config	typeref:typename:uint16
Port	infra/conf/vless.go	/^	Port    uint16            `json:"port"`$/;"	m	struct:conf.VLessOutboundVnext	typeref:typename:uint16
Port	infra/conf/vmess.go	/^	Port    uint16            `json:"port"`$/;"	m	struct:conf.VMessOutboundTarget	typeref:typename:uint16
Port	proxy/dokodemo/config.pb.go	/^	Port    uint32          `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`$/;"	m	struct:dokodemo.Config	typeref:typename:uint32
Port	testing/servers/http/http.go	/^	Port        net.Port$/;"	m	struct:tcp.Server	typeref:typename:net.Port
Port	testing/servers/tcp/tcp.go	/^	Port         net.Port$/;"	m	struct:tcp.Server	typeref:typename:net.Port
Port	testing/servers/udp/udp.go	/^	Port         net.Port$/;"	m	struct:udp.Server	typeref:typename:net.Port
Port	transport/internet/kcp/listener.go	/^	Port   net.Port$/;"	m	struct:kcp.ConnectionID	typeref:typename:net.Port
PortFromBytes	common/net/port.go	/^func PortFromBytes(port []byte) Port {$/;"	f	package:net	typeref:typename:Port
PortFromInt	common/net/port.go	/^func PortFromInt(val uint32) (Port, error) {$/;"	f	package:net	typeref:typename:(Port, error)
PortFromString	common/net/port.go	/^func PortFromString(s string) (Port, error) {$/;"	f	package:net	typeref:typename:(Port, error)
PortList	app/router/config.pb.go	/^	PortList *net.PortList `protobuf:"bytes,14,opt,name=port_list,json=portList,proto3" json:"port_/;"	m	struct:router.RoutingRule	typeref:typename:*net.PortList
PortList	common/net/port.pb.go	/^type PortList struct {$/;"	s	package:net
PortList	common/net/port.proto	/^message PortList {$/;"	m	package:v2ray.core.common.net
PortList	infra/conf/common.go	/^type PortList struct {$/;"	s	package:conf
PortListFromProto	common/net/port.go	/^func PortListFromProto(l *PortList) MemoryPortList {$/;"	f	package:net	typeref:typename:MemoryPortList
PortMatcher	app/router/condition.go	/^type PortMatcher struct {$/;"	s	package:router
PortRange	app/proxyman/config.pb.go	/^	PortRange *net.PortRange `protobuf:"bytes,1,opt,name=port_range,json=portRange,proto3" json:"po/;"	m	struct:proxyman.ReceiverConfig	typeref:typename:*net.PortRange
PortRange	app/router/config.pb.go	/^	PortRange *net.PortRange `protobuf:"bytes,4,opt,name=port_range,json=portRange,proto3" json:"po/;"	m	struct:router.RoutingRule	typeref:typename:*net.PortRange
PortRange	common/net/port.pb.go	/^type PortRange struct {$/;"	s	package:net
PortRange	common/net/port.proto	/^message PortRange {$/;"	m	package:v2ray.core.common.net
PortRange	infra/conf/common.go	/^type PortRange struct {$/;"	s	package:conf
PortRange	infra/conf/v2ray.go	/^	PortRange      *PortRange                     `json:"port"`$/;"	m	struct:conf.InboundDetourConfig	typeref:typename:*PortRange
PortThenAddress	common/protocol/address.go	/^func PortThenAddress() AddressOption {$/;"	f	package:protocol	typeref:typename:AddressOption
PortTimeout	bin/config/config-server.json	/^    "PortTimeout":180,$/;"	n	object:porter
PortValue	infra/conf/dokodemo.go	/^	PortValue    uint16       `json:"port"`$/;"	m	struct:conf.DokodemoConfig	typeref:typename:uint16
Portal	app/reverse/portal.go	/^type Portal struct {$/;"	s	package:reverse
PortalConfig	app/reverse/config.pb.go	/^	PortalConfig []*PortalConfig `protobuf:"bytes,2,rep,name=portal_config,json=portalConfig,proto3/;"	m	struct:reverse.Config	typeref:typename:[]*PortalConfig
PortalConfig	app/reverse/config.pb.go	/^type PortalConfig struct {$/;"	s	package:reverse
PortalConfig	app/reverse/config.proto	/^message PortalConfig {$/;"	m	package:v2ray.core.app.reverse
PortalConfig	infra/conf/reverse.go	/^type PortalConfig struct {$/;"	s	package:conf
PortalWorker	app/reverse/portal.go	/^type PortalWorker struct {$/;"	s	package:reverse
Portals	infra/conf/reverse.go	/^	Portals []PortalConfig `json:"portals"`$/;"	m	struct:conf.ReverseConfig	typeref:typename:[]PortalConfig
PorterDBPath	bin/config/config-server.json	/^    "PorterDBPath":".\/porterdb",$/;"	s	object:porter
Prefix	app/router/config.pb.go	/^	Prefix uint32 `protobuf:"varint,2,opt,name=prefix,proto3" json:"prefix,omitempty"`$/;"	m	struct:router.CIDR	typeref:typename:uint32
Prime	common/protocol/tls/cert/privateKey.go	/^	Prime *big.Int$/;"	m	struct:cert.pkcs1AdditionalRSAPrime	typeref:typename:*big.Int
PrintDeprecatedFeatureWarning	features/feature.go	/^func PrintDeprecatedFeatureWarning(feature string) {$/;"	f	package:features
PrintUsage	infra/control/command.go	/^func PrintUsage() {$/;"	f	package:control
PrioritizedDomain	app/dns/config.pb.go	/^	PrioritizedDomain []*NameServer_PriorityDomain `protobuf:"bytes,2,rep,name=prioritized_domain,j/;"	m	struct:dns.NameServer	typeref:typename:[]*NameServer_PriorityDomain
PriorityDomain	app/dns/config.proto	/^  message PriorityDomain {$/;"	m	message:v2ray.core.app.dns.NameServer
PrivateKey	common/protocol/tls/cert/cert.go	/^	PrivateKey []byte$/;"	m	struct:cert.Certificate	typeref:typename:[]byte
PrivateKey	common/protocol/tls/cert/privateKey.go	/^	PrivateKey    []byte$/;"	m	struct:cert.ecPrivateKey	typeref:typename:[]byte
PrivateKey	common/protocol/tls/cert/privateKey.go	/^	PrivateKey []byte$/;"	m	struct:cert.pkcs8	typeref:typename:[]byte
Process	proxy/blackhole/blackhole.go	/^func (h *Handler) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) err/;"	f	struct:blackhole.Handler	typeref:typename:error
Process	proxy/dns/dns.go	/^func (h *Handler) Process(ctx context.Context, link *transport.Link, d internet.Dialer) error {$/;"	f	struct:dns.Handler	typeref:typename:error
Process	proxy/dokodemo/dokodemo.go	/^func (d *DokodemoDoor) Process(ctx context.Context, network net.Network, conn internet.Connectio/;"	f	struct:dokodemo.DokodemoDoor	typeref:typename:error
Process	proxy/freedom/freedom.go	/^func (h *Handler) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) err/;"	f	struct:freedom.Handler	typeref:typename:error
Process	proxy/http/client.go	/^func (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) erro/;"	f	struct:http.Client	typeref:typename:error
Process	proxy/http/server.go	/^func (s *Server) Process(ctx context.Context, network net.Network, conn internet.Connection, dis/;"	f	struct:http.Server	typeref:typename:error
Process	proxy/mtproto/client.go	/^func (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) erro/;"	f	struct:mtproto.Client	typeref:typename:error
Process	proxy/mtproto/server.go	/^func (s *Server) Process(ctx context.Context, network net.Network, conn internet.Connection, dis/;"	f	struct:mtproto.Server	typeref:typename:error
Process	proxy/proxy.go	/^	Process(context.Context, *transport.Link, internet.Dialer) error$/;"	n	interface:proxy.Outbound	typeref:typename:error
Process	proxy/proxy.go	/^	Process(context.Context, net.Network, internet.Connection, routing.Dispatcher) error$/;"	n	interface:proxy.Inbound	typeref:typename:error
Process	proxy/shadowsocks/client.go	/^func (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) erro/;"	f	struct:shadowsocks.Client	typeref:typename:error
Process	proxy/shadowsocks/server.go	/^func (s *Server) Process(ctx context.Context, network net.Network, conn internet.Connection, dis/;"	f	struct:shadowsocks.Server	typeref:typename:error
Process	proxy/socks/client.go	/^func (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) erro/;"	f	struct:socks.Client	typeref:typename:error
Process	proxy/socks/server.go	/^func (s *Server) Process(ctx context.Context, network net.Network, conn internet.Connection, dis/;"	f	struct:socks.Server	typeref:typename:error
Process	proxy/trojan/client.go	/^func (c *Client) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) erro/;"	f	struct:trojan.Client	typeref:typename:error
Process	proxy/trojan/server.go	/^func (s *Server) Process(ctx context.Context, network net.Network, conn internet.Connection, dis/;"	f	struct:trojan.Server	typeref:typename:error
Process	proxy/vless/inbound/inbound.go	/^func (h *Handler) Process(ctx context.Context, network net.Network, connection internet.Connecti/;"	f	struct:inbound.Handler	typeref:typename:error
Process	proxy/vless/outbound/outbound.go	/^func (h *Handler) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) err/;"	f	struct:outbound.Handler	typeref:typename:error
Process	proxy/vmess/inbound/inbound.go	/^func (h *Handler) Process(ctx context.Context, network net.Network, connection internet.Connecti/;"	f	struct:inbound.Handler	typeref:typename:error
Process	proxy/vmess/outbound/outbound.go	/^func (h *Handler) Process(ctx context.Context, link *transport.Link, dialer internet.Dialer) err/;"	f	struct:outbound.Handler	typeref:typename:error
Process	testing/mocks/proxy.go	/^func (m *ProxyInbound) Process(arg0 context.Context, arg1 net.Network, arg2 internet.Connection,/;"	f	struct:mocks.ProxyInbound	typeref:typename:error
Process	testing/mocks/proxy.go	/^func (m *ProxyOutbound) Process(arg0 context.Context, arg1 *transport.Link, arg2 internet.Dialer/;"	f	struct:mocks.ProxyOutbound	typeref:typename:error
Process	testing/mocks/proxy.go	/^func (mr *ProxyInboundMockRecorder) Process(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {$/;"	f	struct:mocks.ProxyInboundMockRecorder	typeref:typename:*gomock.Call
Process	testing/mocks/proxy.go	/^func (mr *ProxyOutboundMockRecorder) Process(arg0, arg1, arg2 interface{}) *gomock.Call {$/;"	f	struct:mocks.ProxyOutboundMockRecorder	typeref:typename:*gomock.Call
ProcessReceivingNext	transport/internet/kcp/sending.go	/^func (w *SendingWorker) ProcessReceivingNext(nextNumber uint32) {$/;"	f	struct:kcp.SendingWorker
ProcessReceivingNextWithoutLock	transport/internet/kcp/sending.go	/^func (w *SendingWorker) ProcessReceivingNextWithoutLock(nextNumber uint32) {$/;"	f	struct:kcp.SendingWorker
ProcessSegment	transport/internet/kcp/receiving.go	/^func (w *ReceivingWorker) ProcessSegment(seg *DataSegment) {$/;"	f	struct:kcp.ReceivingWorker
ProcessSegment	transport/internet/kcp/sending.go	/^func (w *SendingWorker) ProcessSegment(current uint32, seg *AckSegment, rto uint32) {$/;"	f	struct:kcp.SendingWorker
ProcessSendingNext	transport/internet/kcp/receiving.go	/^func (w *ReceivingWorker) ProcessSendingNext(number uint32) {$/;"	f	struct:kcp.ReceivingWorker
Project V	README.md	/^# Project V$/;"	c
Proto	transport/internet/sockopt_freebsd.go	/^	Proto     uint8$/;"	m	struct:internet.pfiocNatlook	typeref:typename:uint8
ProtoFilesUsingProtocGenGoFast	proto.go	/^var ProtoFilesUsingProtocGenGoFast = map[string]bool{"proxy\/vless\/encoding\/addons.proto": tru/;"	v	package:core
ProtoMessage	app/commander/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:commander.Config
ProtoMessage	app/dispatcher/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:dispatcher.Config
ProtoMessage	app/dispatcher/config.pb.go	/^func (*SessionConfig) ProtoMessage() {}$/;"	f	struct:dispatcher.SessionConfig
ProtoMessage	app/dns/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:dns.Config
ProtoMessage	app/dns/config.pb.go	/^func (*Config_HostMapping) ProtoMessage() {}$/;"	f	struct:dns.Config_HostMapping
ProtoMessage	app/dns/config.pb.go	/^func (*NameServer) ProtoMessage() {}$/;"	f	struct:dns.NameServer
ProtoMessage	app/dns/config.pb.go	/^func (*NameServer_OriginalRule) ProtoMessage() {}$/;"	f	struct:dns.NameServer_OriginalRule
ProtoMessage	app/dns/config.pb.go	/^func (*NameServer_PriorityDomain) ProtoMessage() {}$/;"	f	struct:dns.NameServer_PriorityDomain
ProtoMessage	app/log/command/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:command.Config
ProtoMessage	app/log/command/config.pb.go	/^func (*RestartLoggerRequest) ProtoMessage() {}$/;"	f	struct:command.RestartLoggerRequest
ProtoMessage	app/log/command/config.pb.go	/^func (*RestartLoggerResponse) ProtoMessage() {}$/;"	f	struct:command.RestartLoggerResponse
ProtoMessage	app/log/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:log.Config
ProtoMessage	app/p2p/config.pb.go	/^func (*Config) ProtoMessage()    {}$/;"	f	struct:p2p.Config
ProtoMessage	app/p2p/config.pb.go	/^func (*Seed) ProtoMessage()    {}$/;"	f	struct:p2p.Seed
ProtoMessage	app/p2p/wire/notifier.pb.go	/^func (*HelloReply) ProtoMessage()    {}$/;"	f	struct:wire.HelloReply
ProtoMessage	app/p2p/wire/notifier.pb.go	/^func (*HelloRequest) ProtoMessage()    {}$/;"	f	struct:wire.HelloRequest
ProtoMessage	app/p2p/wire/seedlist.pb.go	/^func (*HelloSeedList) ProtoMessage() {}$/;"	f	struct:wire.HelloSeedList
ProtoMessage	app/p2p/wire/seedlist.pb.go	/^func (*MessageData) ProtoMessage() {}$/;"	f	struct:wire.MessageData
ProtoMessage	app/p2p/wire/seedlist.pb.go	/^func (*SeedInfo) ProtoMessage() {}$/;"	f	struct:wire.SeedInfo
ProtoMessage	app/p2p/wire/seedlist.pb.go	/^func (*SeedListRequest) ProtoMessage() {}$/;"	f	struct:wire.SeedListRequest
ProtoMessage	app/p2p/wire/seedlist.pb.go	/^func (*SeedListResponse) ProtoMessage() {}$/;"	f	struct:wire.SeedListResponse
ProtoMessage	app/policy/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:policy.Config
ProtoMessage	app/policy/config.pb.go	/^func (*Policy) ProtoMessage() {}$/;"	f	struct:policy.Policy
ProtoMessage	app/policy/config.pb.go	/^func (*Policy_Buffer) ProtoMessage() {}$/;"	f	struct:policy.Policy_Buffer
ProtoMessage	app/policy/config.pb.go	/^func (*Policy_Stats) ProtoMessage() {}$/;"	f	struct:policy.Policy_Stats
ProtoMessage	app/policy/config.pb.go	/^func (*Policy_Timeout) ProtoMessage() {}$/;"	f	struct:policy.Policy_Timeout
ProtoMessage	app/policy/config.pb.go	/^func (*Second) ProtoMessage() {}$/;"	f	struct:policy.Second
ProtoMessage	app/policy/config.pb.go	/^func (*SystemPolicy) ProtoMessage() {}$/;"	f	struct:policy.SystemPolicy
ProtoMessage	app/policy/config.pb.go	/^func (*SystemPolicy_Stats) ProtoMessage() {}$/;"	f	struct:policy.SystemPolicy_Stats
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*AddInboundRequest) ProtoMessage() {}$/;"	f	struct:command.AddInboundRequest
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*AddInboundResponse) ProtoMessage() {}$/;"	f	struct:command.AddInboundResponse
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*AddOutboundRequest) ProtoMessage() {}$/;"	f	struct:command.AddOutboundRequest
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*AddOutboundResponse) ProtoMessage() {}$/;"	f	struct:command.AddOutboundResponse
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*AddUserOperation) ProtoMessage() {}$/;"	f	struct:command.AddUserOperation
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*AlterInboundRequest) ProtoMessage() {}$/;"	f	struct:command.AlterInboundRequest
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*AlterInboundResponse) ProtoMessage() {}$/;"	f	struct:command.AlterInboundResponse
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*AlterOutboundRequest) ProtoMessage() {}$/;"	f	struct:command.AlterOutboundRequest
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*AlterOutboundResponse) ProtoMessage() {}$/;"	f	struct:command.AlterOutboundResponse
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:command.Config
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*RemoveInboundRequest) ProtoMessage() {}$/;"	f	struct:command.RemoveInboundRequest
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*RemoveInboundResponse) ProtoMessage() {}$/;"	f	struct:command.RemoveInboundResponse
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*RemoveOutboundRequest) ProtoMessage() {}$/;"	f	struct:command.RemoveOutboundRequest
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*RemoveOutboundResponse) ProtoMessage() {}$/;"	f	struct:command.RemoveOutboundResponse
ProtoMessage	app/proxyman/command/command.pb.go	/^func (*RemoveUserOperation) ProtoMessage() {}$/;"	f	struct:command.RemoveUserOperation
ProtoMessage	app/proxyman/config.pb.go	/^func (*AllocationStrategy) ProtoMessage() {}$/;"	f	struct:proxyman.AllocationStrategy
ProtoMessage	app/proxyman/config.pb.go	/^func (*AllocationStrategy_AllocationStrategyConcurrency) ProtoMessage() {}$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyConcurrency
ProtoMessage	app/proxyman/config.pb.go	/^func (*AllocationStrategy_AllocationStrategyRefresh) ProtoMessage() {}$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyRefresh
ProtoMessage	app/proxyman/config.pb.go	/^func (*InboundConfig) ProtoMessage() {}$/;"	f	struct:proxyman.InboundConfig
ProtoMessage	app/proxyman/config.pb.go	/^func (*InboundHandlerConfig) ProtoMessage() {}$/;"	f	struct:proxyman.InboundHandlerConfig
ProtoMessage	app/proxyman/config.pb.go	/^func (*MultiplexingConfig) ProtoMessage() {}$/;"	f	struct:proxyman.MultiplexingConfig
ProtoMessage	app/proxyman/config.pb.go	/^func (*OutboundConfig) ProtoMessage() {}$/;"	f	struct:proxyman.OutboundConfig
ProtoMessage	app/proxyman/config.pb.go	/^func (*ReceiverConfig) ProtoMessage() {}$/;"	f	struct:proxyman.ReceiverConfig
ProtoMessage	app/proxyman/config.pb.go	/^func (*SenderConfig) ProtoMessage() {}$/;"	f	struct:proxyman.SenderConfig
ProtoMessage	app/proxyman/config.pb.go	/^func (*SniffingConfig) ProtoMessage() {}$/;"	f	struct:proxyman.SniffingConfig
ProtoMessage	app/reverse/config.pb.go	/^func (*BridgeConfig) ProtoMessage() {}$/;"	f	struct:reverse.BridgeConfig
ProtoMessage	app/reverse/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:reverse.Config
ProtoMessage	app/reverse/config.pb.go	/^func (*Control) ProtoMessage() {}$/;"	f	struct:reverse.Control
ProtoMessage	app/reverse/config.pb.go	/^func (*PortalConfig) ProtoMessage() {}$/;"	f	struct:reverse.PortalConfig
ProtoMessage	app/router/command/command.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:command.Config
ProtoMessage	app/router/command/command.pb.go	/^func (*RoutingContext) ProtoMessage() {}$/;"	f	struct:command.RoutingContext
ProtoMessage	app/router/command/command.pb.go	/^func (*SubscribeRoutingStatsRequest) ProtoMessage() {}$/;"	f	struct:command.SubscribeRoutingStatsRequest
ProtoMessage	app/router/command/command.pb.go	/^func (*TestRouteRequest) ProtoMessage() {}$/;"	f	struct:command.TestRouteRequest
ProtoMessage	app/router/config.pb.go	/^func (*BalancingRule) ProtoMessage() {}$/;"	f	struct:router.BalancingRule
ProtoMessage	app/router/config.pb.go	/^func (*CIDR) ProtoMessage() {}$/;"	f	struct:router.CIDR
ProtoMessage	app/router/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:router.Config
ProtoMessage	app/router/config.pb.go	/^func (*Domain) ProtoMessage() {}$/;"	f	struct:router.Domain
ProtoMessage	app/router/config.pb.go	/^func (*Domain_Attribute) ProtoMessage() {}$/;"	f	struct:router.Domain_Attribute
ProtoMessage	app/router/config.pb.go	/^func (*GeoIP) ProtoMessage() {}$/;"	f	struct:router.GeoIP
ProtoMessage	app/router/config.pb.go	/^func (*GeoIPList) ProtoMessage() {}$/;"	f	struct:router.GeoIPList
ProtoMessage	app/router/config.pb.go	/^func (*GeoSite) ProtoMessage() {}$/;"	f	struct:router.GeoSite
ProtoMessage	app/router/config.pb.go	/^func (*GeoSiteList) ProtoMessage() {}$/;"	f	struct:router.GeoSiteList
ProtoMessage	app/router/config.pb.go	/^func (*RoutingRule) ProtoMessage() {}$/;"	f	struct:router.RoutingRule
ProtoMessage	app/stats/command/command.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:command.Config
ProtoMessage	app/stats/command/command.pb.go	/^func (*GetStatsRequest) ProtoMessage() {}$/;"	f	struct:command.GetStatsRequest
ProtoMessage	app/stats/command/command.pb.go	/^func (*GetStatsResponse) ProtoMessage() {}$/;"	f	struct:command.GetStatsResponse
ProtoMessage	app/stats/command/command.pb.go	/^func (*QueryStatsRequest) ProtoMessage() {}$/;"	f	struct:command.QueryStatsRequest
ProtoMessage	app/stats/command/command.pb.go	/^func (*QueryStatsResponse) ProtoMessage() {}$/;"	f	struct:command.QueryStatsResponse
ProtoMessage	app/stats/command/command.pb.go	/^func (*Stat) ProtoMessage() {}$/;"	f	struct:command.Stat
ProtoMessage	app/stats/command/command.pb.go	/^func (*SysStatsRequest) ProtoMessage() {}$/;"	f	struct:command.SysStatsRequest
ProtoMessage	app/stats/command/command.pb.go	/^func (*SysStatsResponse) ProtoMessage() {}$/;"	f	struct:command.SysStatsResponse
ProtoMessage	app/stats/config.pb.go	/^func (*ChannelConfig) ProtoMessage() {}$/;"	f	struct:stats.ChannelConfig
ProtoMessage	app/stats/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:stats.Config
ProtoMessage	common/net/address.pb.go	/^func (*IPOrDomain) ProtoMessage() {}$/;"	f	struct:net.IPOrDomain
ProtoMessage	common/net/destination.pb.go	/^func (*Endpoint) ProtoMessage() {}$/;"	f	struct:net.Endpoint
ProtoMessage	common/net/network.pb.go	/^func (*NetworkList) ProtoMessage() {}$/;"	f	struct:net.NetworkList
ProtoMessage	common/net/port.pb.go	/^func (*PortList) ProtoMessage() {}$/;"	f	struct:net.PortList
ProtoMessage	common/net/port.pb.go	/^func (*PortRange) ProtoMessage() {}$/;"	f	struct:net.PortRange
ProtoMessage	common/protocol/headers.pb.go	/^func (*SecurityConfig) ProtoMessage() {}$/;"	f	struct:protocol.SecurityConfig
ProtoMessage	common/protocol/server_spec.pb.go	/^func (*ServerEndpoint) ProtoMessage() {}$/;"	f	struct:protocol.ServerEndpoint
ProtoMessage	common/protocol/user.pb.go	/^func (*User) ProtoMessage() {}$/;"	f	struct:protocol.User
ProtoMessage	common/serial/typed_message.pb.go	/^func (*TypedMessage) ProtoMessage() {}$/;"	f	struct:serial.TypedMessage
ProtoMessage	config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:core.Config
ProtoMessage	config.pb.go	/^func (*InboundHandlerConfig) ProtoMessage() {}$/;"	f	struct:core.InboundHandlerConfig
ProtoMessage	config.pb.go	/^func (*OutboundHandlerConfig) ProtoMessage() {}$/;"	f	struct:core.OutboundHandlerConfig
ProtoMessage	proxy/blackhole/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:blackhole.Config
ProtoMessage	proxy/blackhole/config.pb.go	/^func (*HTTPResponse) ProtoMessage() {}$/;"	f	struct:blackhole.HTTPResponse
ProtoMessage	proxy/blackhole/config.pb.go	/^func (*NoneResponse) ProtoMessage() {}$/;"	f	struct:blackhole.NoneResponse
ProtoMessage	proxy/dns/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:dns.Config
ProtoMessage	proxy/dokodemo/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:dokodemo.Config
ProtoMessage	proxy/freedom/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:freedom.Config
ProtoMessage	proxy/freedom/config.pb.go	/^func (*DestinationOverride) ProtoMessage() {}$/;"	f	struct:freedom.DestinationOverride
ProtoMessage	proxy/http/config.pb.go	/^func (*Account) ProtoMessage() {}$/;"	f	struct:http.Account
ProtoMessage	proxy/http/config.pb.go	/^func (*ClientConfig) ProtoMessage() {}$/;"	f	struct:http.ClientConfig
ProtoMessage	proxy/http/config.pb.go	/^func (*ServerConfig) ProtoMessage() {}$/;"	f	struct:http.ServerConfig
ProtoMessage	proxy/mtproto/config.pb.go	/^func (*Account) ProtoMessage() {}$/;"	f	struct:mtproto.Account
ProtoMessage	proxy/mtproto/config.pb.go	/^func (*ClientConfig) ProtoMessage() {}$/;"	f	struct:mtproto.ClientConfig
ProtoMessage	proxy/mtproto/config.pb.go	/^func (*ServerConfig) ProtoMessage() {}$/;"	f	struct:mtproto.ServerConfig
ProtoMessage	proxy/shadowsocks/config.pb.go	/^func (*Account) ProtoMessage() {}$/;"	f	struct:shadowsocks.Account
ProtoMessage	proxy/shadowsocks/config.pb.go	/^func (*ClientConfig) ProtoMessage() {}$/;"	f	struct:shadowsocks.ClientConfig
ProtoMessage	proxy/shadowsocks/config.pb.go	/^func (*ServerConfig) ProtoMessage() {}$/;"	f	struct:shadowsocks.ServerConfig
ProtoMessage	proxy/socks/config.pb.go	/^func (*Account) ProtoMessage() {}$/;"	f	struct:socks.Account
ProtoMessage	proxy/socks/config.pb.go	/^func (*ClientConfig) ProtoMessage() {}$/;"	f	struct:socks.ClientConfig
ProtoMessage	proxy/socks/config.pb.go	/^func (*ServerConfig) ProtoMessage() {}$/;"	f	struct:socks.ServerConfig
ProtoMessage	proxy/trojan/config.pb.go	/^func (*Account) ProtoMessage() {}$/;"	f	struct:trojan.Account
ProtoMessage	proxy/trojan/config.pb.go	/^func (*ClientConfig) ProtoMessage() {}$/;"	f	struct:trojan.ClientConfig
ProtoMessage	proxy/trojan/config.pb.go	/^func (*Fallback) ProtoMessage() {}$/;"	f	struct:trojan.Fallback
ProtoMessage	proxy/trojan/config.pb.go	/^func (*ServerConfig) ProtoMessage() {}$/;"	f	struct:trojan.ServerConfig
ProtoMessage	proxy/vless/account.pb.go	/^func (*Account) ProtoMessage() {}$/;"	f	struct:vless.Account
ProtoMessage	proxy/vless/encoding/addons.pb.go	/^func (*Addons) ProtoMessage()    {}$/;"	f	struct:encoding.Addons
ProtoMessage	proxy/vless/inbound/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:inbound.Config
ProtoMessage	proxy/vless/inbound/config.pb.go	/^func (*Fallback) ProtoMessage() {}$/;"	f	struct:inbound.Fallback
ProtoMessage	proxy/vless/outbound/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:outbound.Config
ProtoMessage	proxy/vmess/account.pb.go	/^func (*Account) ProtoMessage() {}$/;"	f	struct:vmess.Account
ProtoMessage	proxy/vmess/inbound/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:inbound.Config
ProtoMessage	proxy/vmess/inbound/config.pb.go	/^func (*DefaultConfig) ProtoMessage() {}$/;"	f	struct:inbound.DefaultConfig
ProtoMessage	proxy/vmess/inbound/config.pb.go	/^func (*DetourConfig) ProtoMessage() {}$/;"	f	struct:inbound.DetourConfig
ProtoMessage	proxy/vmess/outbound/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:outbound.Config
ProtoMessage	transport/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:transport.Config
ProtoMessage	transport/internet/config.pb.go	/^func (*ProxyConfig) ProtoMessage() {}$/;"	f	struct:internet.ProxyConfig
ProtoMessage	transport/internet/config.pb.go	/^func (*SocketConfig) ProtoMessage() {}$/;"	f	struct:internet.SocketConfig
ProtoMessage	transport/internet/config.pb.go	/^func (*StreamConfig) ProtoMessage() {}$/;"	f	struct:internet.StreamConfig
ProtoMessage	transport/internet/config.pb.go	/^func (*TransportConfig) ProtoMessage() {}$/;"	f	struct:internet.TransportConfig
ProtoMessage	transport/internet/domainsocket/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:domainsocket.Config
ProtoMessage	transport/internet/headers/http/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:http.Config
ProtoMessage	transport/internet/headers/http/config.pb.go	/^func (*Header) ProtoMessage() {}$/;"	f	struct:http.Header
ProtoMessage	transport/internet/headers/http/config.pb.go	/^func (*Method) ProtoMessage() {}$/;"	f	struct:http.Method
ProtoMessage	transport/internet/headers/http/config.pb.go	/^func (*RequestConfig) ProtoMessage() {}$/;"	f	struct:http.RequestConfig
ProtoMessage	transport/internet/headers/http/config.pb.go	/^func (*ResponseConfig) ProtoMessage() {}$/;"	f	struct:http.ResponseConfig
ProtoMessage	transport/internet/headers/http/config.pb.go	/^func (*Status) ProtoMessage() {}$/;"	f	struct:http.Status
ProtoMessage	transport/internet/headers/http/config.pb.go	/^func (*Version) ProtoMessage() {}$/;"	f	struct:http.Version
ProtoMessage	transport/internet/headers/noop/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:noop.Config
ProtoMessage	transport/internet/headers/noop/config.pb.go	/^func (*ConnectionConfig) ProtoMessage() {}$/;"	f	struct:noop.ConnectionConfig
ProtoMessage	transport/internet/headers/srtp/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:srtp.Config
ProtoMessage	transport/internet/headers/tls/config.pb.go	/^func (*PacketConfig) ProtoMessage() {}$/;"	f	struct:tls.PacketConfig
ProtoMessage	transport/internet/headers/utp/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:utp.Config
ProtoMessage	transport/internet/headers/wechat/config.pb.go	/^func (*VideoConfig) ProtoMessage() {}$/;"	f	struct:wechat.VideoConfig
ProtoMessage	transport/internet/headers/wireguard/config.pb.go	/^func (*WireguardConfig) ProtoMessage() {}$/;"	f	struct:wireguard.WireguardConfig
ProtoMessage	transport/internet/http/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:http.Config
ProtoMessage	transport/internet/kcp/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:kcp.Config
ProtoMessage	transport/internet/kcp/config.pb.go	/^func (*ConnectionReuse) ProtoMessage() {}$/;"	f	struct:kcp.ConnectionReuse
ProtoMessage	transport/internet/kcp/config.pb.go	/^func (*DownlinkCapacity) ProtoMessage() {}$/;"	f	struct:kcp.DownlinkCapacity
ProtoMessage	transport/internet/kcp/config.pb.go	/^func (*EncryptionSeed) ProtoMessage() {}$/;"	f	struct:kcp.EncryptionSeed
ProtoMessage	transport/internet/kcp/config.pb.go	/^func (*MTU) ProtoMessage() {}$/;"	f	struct:kcp.MTU
ProtoMessage	transport/internet/kcp/config.pb.go	/^func (*ReadBuffer) ProtoMessage() {}$/;"	f	struct:kcp.ReadBuffer
ProtoMessage	transport/internet/kcp/config.pb.go	/^func (*TTI) ProtoMessage() {}$/;"	f	struct:kcp.TTI
ProtoMessage	transport/internet/kcp/config.pb.go	/^func (*UplinkCapacity) ProtoMessage() {}$/;"	f	struct:kcp.UplinkCapacity
ProtoMessage	transport/internet/kcp/config.pb.go	/^func (*WriteBuffer) ProtoMessage() {}$/;"	f	struct:kcp.WriteBuffer
ProtoMessage	transport/internet/quic/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:quic.Config
ProtoMessage	transport/internet/tcp/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:tcp.Config
ProtoMessage	transport/internet/tls/config.pb.go	/^func (*Certificate) ProtoMessage() {}$/;"	f	struct:tls.Certificate
ProtoMessage	transport/internet/tls/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:tls.Config
ProtoMessage	transport/internet/udp/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:udp.Config
ProtoMessage	transport/internet/websocket/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:websocket.Config
ProtoMessage	transport/internet/websocket/config.pb.go	/^func (*Header) ProtoMessage() {}$/;"	f	struct:websocket.Header
ProtoMessage	transport/internet/xtls/config.pb.go	/^func (*Certificate) ProtoMessage() {}$/;"	f	struct:xtls.Certificate
ProtoMessage	transport/internet/xtls/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f	struct:xtls.Config
ProtoReflect	app/commander/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:commander.Config	typeref:typename:protoreflect.Message
ProtoReflect	app/dispatcher/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:dispatcher.Config	typeref:typename:protoreflect.Message
ProtoReflect	app/dispatcher/config.pb.go	/^func (x *SessionConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:dispatcher.SessionConfig	typeref:typename:protoreflect.Message
ProtoReflect	app/dns/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:dns.Config	typeref:typename:protoreflect.Message
ProtoReflect	app/dns/config.pb.go	/^func (x *Config_HostMapping) ProtoReflect() protoreflect.Message {$/;"	f	struct:dns.Config_HostMapping	typeref:typename:protoreflect.Message
ProtoReflect	app/dns/config.pb.go	/^func (x *NameServer) ProtoReflect() protoreflect.Message {$/;"	f	struct:dns.NameServer	typeref:typename:protoreflect.Message
ProtoReflect	app/dns/config.pb.go	/^func (x *NameServer_OriginalRule) ProtoReflect() protoreflect.Message {$/;"	f	struct:dns.NameServer_OriginalRule	typeref:typename:protoreflect.Message
ProtoReflect	app/dns/config.pb.go	/^func (x *NameServer_PriorityDomain) ProtoReflect() protoreflect.Message {$/;"	f	struct:dns.NameServer_PriorityDomain	typeref:typename:protoreflect.Message
ProtoReflect	app/log/command/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.Config	typeref:typename:protoreflect.Message
ProtoReflect	app/log/command/config.pb.go	/^func (x *RestartLoggerRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.RestartLoggerRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/log/command/config.pb.go	/^func (x *RestartLoggerResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.RestartLoggerResponse	typeref:typename:protoreflect.Message
ProtoReflect	app/log/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:log.Config	typeref:typename:protoreflect.Message
ProtoReflect	app/policy/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:policy.Config	typeref:typename:protoreflect.Message
ProtoReflect	app/policy/config.pb.go	/^func (x *Policy) ProtoReflect() protoreflect.Message {$/;"	f	struct:policy.Policy	typeref:typename:protoreflect.Message
ProtoReflect	app/policy/config.pb.go	/^func (x *Policy_Buffer) ProtoReflect() protoreflect.Message {$/;"	f	struct:policy.Policy_Buffer	typeref:typename:protoreflect.Message
ProtoReflect	app/policy/config.pb.go	/^func (x *Policy_Stats) ProtoReflect() protoreflect.Message {$/;"	f	struct:policy.Policy_Stats	typeref:typename:protoreflect.Message
ProtoReflect	app/policy/config.pb.go	/^func (x *Policy_Timeout) ProtoReflect() protoreflect.Message {$/;"	f	struct:policy.Policy_Timeout	typeref:typename:protoreflect.Message
ProtoReflect	app/policy/config.pb.go	/^func (x *Second) ProtoReflect() protoreflect.Message {$/;"	f	struct:policy.Second	typeref:typename:protoreflect.Message
ProtoReflect	app/policy/config.pb.go	/^func (x *SystemPolicy) ProtoReflect() protoreflect.Message {$/;"	f	struct:policy.SystemPolicy	typeref:typename:protoreflect.Message
ProtoReflect	app/policy/config.pb.go	/^func (x *SystemPolicy_Stats) ProtoReflect() protoreflect.Message {$/;"	f	struct:policy.SystemPolicy_Stats	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *AddInboundRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.AddInboundRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *AddInboundResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.AddInboundResponse	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *AddOutboundRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.AddOutboundRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *AddOutboundResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.AddOutboundResponse	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *AddUserOperation) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.AddUserOperation	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *AlterInboundRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.AlterInboundRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *AlterInboundResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.AlterInboundResponse	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *AlterOutboundRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.AlterOutboundRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *AlterOutboundResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.AlterOutboundResponse	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.Config	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *RemoveInboundRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.RemoveInboundRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *RemoveInboundResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.RemoveInboundResponse	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *RemoveOutboundRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.RemoveOutboundRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *RemoveOutboundResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.RemoveOutboundResponse	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/command/command.pb.go	/^func (x *RemoveUserOperation) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.RemoveUserOperation	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/config.pb.go	/^func (x *AllocationStrategy) ProtoReflect() protoreflect.Message {$/;"	f	struct:proxyman.AllocationStrategy	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/config.pb.go	/^func (x *AllocationStrategy_AllocationStrategyConcurrency) ProtoReflect() protoreflect.Message {$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyConcurrency	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/config.pb.go	/^func (x *AllocationStrategy_AllocationStrategyRefresh) ProtoReflect() protoreflect.Message {$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyRefresh	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/config.pb.go	/^func (x *InboundConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:proxyman.InboundConfig	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/config.pb.go	/^func (x *InboundHandlerConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:proxyman.InboundHandlerConfig	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/config.pb.go	/^func (x *MultiplexingConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:proxyman.MultiplexingConfig	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/config.pb.go	/^func (x *OutboundConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:proxyman.OutboundConfig	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/config.pb.go	/^func (x *ReceiverConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:proxyman.ReceiverConfig	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/config.pb.go	/^func (x *SenderConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:proxyman.SenderConfig	typeref:typename:protoreflect.Message
ProtoReflect	app/proxyman/config.pb.go	/^func (x *SniffingConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:proxyman.SniffingConfig	typeref:typename:protoreflect.Message
ProtoReflect	app/reverse/config.pb.go	/^func (x *BridgeConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:reverse.BridgeConfig	typeref:typename:protoreflect.Message
ProtoReflect	app/reverse/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:reverse.Config	typeref:typename:protoreflect.Message
ProtoReflect	app/reverse/config.pb.go	/^func (x *Control) ProtoReflect() protoreflect.Message {$/;"	f	struct:reverse.Control	typeref:typename:protoreflect.Message
ProtoReflect	app/reverse/config.pb.go	/^func (x *PortalConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:reverse.PortalConfig	typeref:typename:protoreflect.Message
ProtoReflect	app/router/command/command.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.Config	typeref:typename:protoreflect.Message
ProtoReflect	app/router/command/command.pb.go	/^func (x *RoutingContext) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.RoutingContext	typeref:typename:protoreflect.Message
ProtoReflect	app/router/command/command.pb.go	/^func (x *SubscribeRoutingStatsRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.SubscribeRoutingStatsRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/router/command/command.pb.go	/^func (x *TestRouteRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.TestRouteRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/router/config.pb.go	/^func (x *BalancingRule) ProtoReflect() protoreflect.Message {$/;"	f	struct:router.BalancingRule	typeref:typename:protoreflect.Message
ProtoReflect	app/router/config.pb.go	/^func (x *CIDR) ProtoReflect() protoreflect.Message {$/;"	f	struct:router.CIDR	typeref:typename:protoreflect.Message
ProtoReflect	app/router/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:router.Config	typeref:typename:protoreflect.Message
ProtoReflect	app/router/config.pb.go	/^func (x *Domain) ProtoReflect() protoreflect.Message {$/;"	f	struct:router.Domain	typeref:typename:protoreflect.Message
ProtoReflect	app/router/config.pb.go	/^func (x *Domain_Attribute) ProtoReflect() protoreflect.Message {$/;"	f	struct:router.Domain_Attribute	typeref:typename:protoreflect.Message
ProtoReflect	app/router/config.pb.go	/^func (x *GeoIP) ProtoReflect() protoreflect.Message {$/;"	f	struct:router.GeoIP	typeref:typename:protoreflect.Message
ProtoReflect	app/router/config.pb.go	/^func (x *GeoIPList) ProtoReflect() protoreflect.Message {$/;"	f	struct:router.GeoIPList	typeref:typename:protoreflect.Message
ProtoReflect	app/router/config.pb.go	/^func (x *GeoSite) ProtoReflect() protoreflect.Message {$/;"	f	struct:router.GeoSite	typeref:typename:protoreflect.Message
ProtoReflect	app/router/config.pb.go	/^func (x *GeoSiteList) ProtoReflect() protoreflect.Message {$/;"	f	struct:router.GeoSiteList	typeref:typename:protoreflect.Message
ProtoReflect	app/router/config.pb.go	/^func (x *RoutingRule) ProtoReflect() protoreflect.Message {$/;"	f	struct:router.RoutingRule	typeref:typename:protoreflect.Message
ProtoReflect	app/stats/command/command.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.Config	typeref:typename:protoreflect.Message
ProtoReflect	app/stats/command/command.pb.go	/^func (x *GetStatsRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.GetStatsRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/stats/command/command.pb.go	/^func (x *GetStatsResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.GetStatsResponse	typeref:typename:protoreflect.Message
ProtoReflect	app/stats/command/command.pb.go	/^func (x *QueryStatsRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.QueryStatsRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/stats/command/command.pb.go	/^func (x *QueryStatsResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.QueryStatsResponse	typeref:typename:protoreflect.Message
ProtoReflect	app/stats/command/command.pb.go	/^func (x *Stat) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.Stat	typeref:typename:protoreflect.Message
ProtoReflect	app/stats/command/command.pb.go	/^func (x *SysStatsRequest) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.SysStatsRequest	typeref:typename:protoreflect.Message
ProtoReflect	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:command.SysStatsResponse	typeref:typename:protoreflect.Message
ProtoReflect	app/stats/config.pb.go	/^func (x *ChannelConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:stats.ChannelConfig	typeref:typename:protoreflect.Message
ProtoReflect	app/stats/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:stats.Config	typeref:typename:protoreflect.Message
ProtoReflect	common/net/address.pb.go	/^func (x *IPOrDomain) ProtoReflect() protoreflect.Message {$/;"	f	struct:net.IPOrDomain	typeref:typename:protoreflect.Message
ProtoReflect	common/net/destination.pb.go	/^func (x *Endpoint) ProtoReflect() protoreflect.Message {$/;"	f	struct:net.Endpoint	typeref:typename:protoreflect.Message
ProtoReflect	common/net/network.pb.go	/^func (x *NetworkList) ProtoReflect() protoreflect.Message {$/;"	f	struct:net.NetworkList	typeref:typename:protoreflect.Message
ProtoReflect	common/net/port.pb.go	/^func (x *PortList) ProtoReflect() protoreflect.Message {$/;"	f	struct:net.PortList	typeref:typename:protoreflect.Message
ProtoReflect	common/net/port.pb.go	/^func (x *PortRange) ProtoReflect() protoreflect.Message {$/;"	f	struct:net.PortRange	typeref:typename:protoreflect.Message
ProtoReflect	common/protocol/headers.pb.go	/^func (x *SecurityConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:protocol.SecurityConfig	typeref:typename:protoreflect.Message
ProtoReflect	common/protocol/server_spec.pb.go	/^func (x *ServerEndpoint) ProtoReflect() protoreflect.Message {$/;"	f	struct:protocol.ServerEndpoint	typeref:typename:protoreflect.Message
ProtoReflect	common/protocol/user.pb.go	/^func (x *User) ProtoReflect() protoreflect.Message {$/;"	f	struct:protocol.User	typeref:typename:protoreflect.Message
ProtoReflect	common/serial/typed_message.pb.go	/^func (x *TypedMessage) ProtoReflect() protoreflect.Message {$/;"	f	struct:serial.TypedMessage	typeref:typename:protoreflect.Message
ProtoReflect	config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:core.Config	typeref:typename:protoreflect.Message
ProtoReflect	config.pb.go	/^func (x *InboundHandlerConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:core.InboundHandlerConfig	typeref:typename:protoreflect.Message
ProtoReflect	config.pb.go	/^func (x *OutboundHandlerConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:core.OutboundHandlerConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/blackhole/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:blackhole.Config	typeref:typename:protoreflect.Message
ProtoReflect	proxy/blackhole/config.pb.go	/^func (x *HTTPResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:blackhole.HTTPResponse	typeref:typename:protoreflect.Message
ProtoReflect	proxy/blackhole/config.pb.go	/^func (x *NoneResponse) ProtoReflect() protoreflect.Message {$/;"	f	struct:blackhole.NoneResponse	typeref:typename:protoreflect.Message
ProtoReflect	proxy/dns/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:dns.Config	typeref:typename:protoreflect.Message
ProtoReflect	proxy/dokodemo/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:dokodemo.Config	typeref:typename:protoreflect.Message
ProtoReflect	proxy/freedom/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:freedom.Config	typeref:typename:protoreflect.Message
ProtoReflect	proxy/freedom/config.pb.go	/^func (x *DestinationOverride) ProtoReflect() protoreflect.Message {$/;"	f	struct:freedom.DestinationOverride	typeref:typename:protoreflect.Message
ProtoReflect	proxy/http/config.pb.go	/^func (x *Account) ProtoReflect() protoreflect.Message {$/;"	f	struct:http.Account	typeref:typename:protoreflect.Message
ProtoReflect	proxy/http/config.pb.go	/^func (x *ClientConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:http.ClientConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/http/config.pb.go	/^func (x *ServerConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:http.ServerConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/mtproto/config.pb.go	/^func (x *Account) ProtoReflect() protoreflect.Message {$/;"	f	struct:mtproto.Account	typeref:typename:protoreflect.Message
ProtoReflect	proxy/mtproto/config.pb.go	/^func (x *ClientConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:mtproto.ClientConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/mtproto/config.pb.go	/^func (x *ServerConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:mtproto.ServerConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/shadowsocks/config.pb.go	/^func (x *Account) ProtoReflect() protoreflect.Message {$/;"	f	struct:shadowsocks.Account	typeref:typename:protoreflect.Message
ProtoReflect	proxy/shadowsocks/config.pb.go	/^func (x *ClientConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:shadowsocks.ClientConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/shadowsocks/config.pb.go	/^func (x *ServerConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:shadowsocks.ServerConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/socks/config.pb.go	/^func (x *Account) ProtoReflect() protoreflect.Message {$/;"	f	struct:socks.Account	typeref:typename:protoreflect.Message
ProtoReflect	proxy/socks/config.pb.go	/^func (x *ClientConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:socks.ClientConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/socks/config.pb.go	/^func (x *ServerConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:socks.ServerConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/trojan/config.pb.go	/^func (x *Account) ProtoReflect() protoreflect.Message {$/;"	f	struct:trojan.Account	typeref:typename:protoreflect.Message
ProtoReflect	proxy/trojan/config.pb.go	/^func (x *ClientConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:trojan.ClientConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/trojan/config.pb.go	/^func (x *Fallback) ProtoReflect() protoreflect.Message {$/;"	f	struct:trojan.Fallback	typeref:typename:protoreflect.Message
ProtoReflect	proxy/trojan/config.pb.go	/^func (x *ServerConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:trojan.ServerConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/vless/account.pb.go	/^func (x *Account) ProtoReflect() protoreflect.Message {$/;"	f	struct:vless.Account	typeref:typename:protoreflect.Message
ProtoReflect	proxy/vless/inbound/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:inbound.Config	typeref:typename:protoreflect.Message
ProtoReflect	proxy/vless/inbound/config.pb.go	/^func (x *Fallback) ProtoReflect() protoreflect.Message {$/;"	f	struct:inbound.Fallback	typeref:typename:protoreflect.Message
ProtoReflect	proxy/vless/outbound/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:outbound.Config	typeref:typename:protoreflect.Message
ProtoReflect	proxy/vmess/account.pb.go	/^func (x *Account) ProtoReflect() protoreflect.Message {$/;"	f	struct:vmess.Account	typeref:typename:protoreflect.Message
ProtoReflect	proxy/vmess/inbound/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:inbound.Config	typeref:typename:protoreflect.Message
ProtoReflect	proxy/vmess/inbound/config.pb.go	/^func (x *DefaultConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:inbound.DefaultConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/vmess/inbound/config.pb.go	/^func (x *DetourConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:inbound.DetourConfig	typeref:typename:protoreflect.Message
ProtoReflect	proxy/vmess/outbound/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:outbound.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:transport.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/config.pb.go	/^func (x *ProxyConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:internet.ProxyConfig	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/config.pb.go	/^func (x *SocketConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:internet.SocketConfig	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/config.pb.go	/^func (x *StreamConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:internet.StreamConfig	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/config.pb.go	/^func (x *TransportConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:internet.TransportConfig	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/domainsocket/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:domainsocket.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/http/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:http.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/http/config.pb.go	/^func (x *Header) ProtoReflect() protoreflect.Message {$/;"	f	struct:http.Header	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/http/config.pb.go	/^func (x *Method) ProtoReflect() protoreflect.Message {$/;"	f	struct:http.Method	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/http/config.pb.go	/^func (x *RequestConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:http.RequestConfig	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/http/config.pb.go	/^func (x *ResponseConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:http.ResponseConfig	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/http/config.pb.go	/^func (x *Status) ProtoReflect() protoreflect.Message {$/;"	f	struct:http.Status	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/http/config.pb.go	/^func (x *Version) ProtoReflect() protoreflect.Message {$/;"	f	struct:http.Version	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/noop/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:noop.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/noop/config.pb.go	/^func (x *ConnectionConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:noop.ConnectionConfig	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/srtp/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:srtp.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/tls/config.pb.go	/^func (x *PacketConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:tls.PacketConfig	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/utp/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:utp.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/wechat/config.pb.go	/^func (x *VideoConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:wechat.VideoConfig	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/headers/wireguard/config.pb.go	/^func (x *WireguardConfig) ProtoReflect() protoreflect.Message {$/;"	f	struct:wireguard.WireguardConfig	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/http/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:http.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/kcp/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:kcp.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/kcp/config.pb.go	/^func (x *ConnectionReuse) ProtoReflect() protoreflect.Message {$/;"	f	struct:kcp.ConnectionReuse	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/kcp/config.pb.go	/^func (x *DownlinkCapacity) ProtoReflect() protoreflect.Message {$/;"	f	struct:kcp.DownlinkCapacity	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/kcp/config.pb.go	/^func (x *EncryptionSeed) ProtoReflect() protoreflect.Message {$/;"	f	struct:kcp.EncryptionSeed	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/kcp/config.pb.go	/^func (x *MTU) ProtoReflect() protoreflect.Message {$/;"	f	struct:kcp.MTU	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/kcp/config.pb.go	/^func (x *ReadBuffer) ProtoReflect() protoreflect.Message {$/;"	f	struct:kcp.ReadBuffer	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/kcp/config.pb.go	/^func (x *TTI) ProtoReflect() protoreflect.Message {$/;"	f	struct:kcp.TTI	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/kcp/config.pb.go	/^func (x *UplinkCapacity) ProtoReflect() protoreflect.Message {$/;"	f	struct:kcp.UplinkCapacity	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/kcp/config.pb.go	/^func (x *WriteBuffer) ProtoReflect() protoreflect.Message {$/;"	f	struct:kcp.WriteBuffer	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/quic/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:quic.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/tcp/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:tcp.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/tls/config.pb.go	/^func (x *Certificate) ProtoReflect() protoreflect.Message {$/;"	f	struct:tls.Certificate	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/tls/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:tls.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/udp/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:udp.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/websocket/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:websocket.Config	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/websocket/config.pb.go	/^func (x *Header) ProtoReflect() protoreflect.Message {$/;"	f	struct:websocket.Header	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/xtls/config.pb.go	/^func (x *Certificate) ProtoReflect() protoreflect.Message {$/;"	f	struct:xtls.Certificate	typeref:typename:protoreflect.Message
ProtoReflect	transport/internet/xtls/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f	struct:xtls.Config	typeref:typename:protoreflect.Message
ProtocMap	proto.go	/^var ProtocMap = map[string]string{$/;"	v	package:core
Protocol	app/dispatcher/sniffer.go	/^	Protocol() string$/;"	n	interface:dispatcher.SniffResult	typeref:typename:string
Protocol	app/p2p/config.pb.go	/^	Protocol             string   `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omite/;"	m	struct:p2p.Config	typeref:typename:string
Protocol	app/p2p/config.pb.go	/^	Protocol             string   `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omite/;"	m	struct:p2p.Seed	typeref:typename:string
Protocol	app/p2p/protocol/protocol.go	/^type Protocol struct {$/;"	s	package:protocol
Protocol	app/p2p/wire/seedlist.pb.go	/^	Protocol             string   `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omite/;"	m	struct:wire.SeedInfo	typeref:typename:string
Protocol	app/router/command/command.pb.go	/^	Protocol          string            `protobuf:"bytes,8,opt,name=Protocol,proto3" json:"Protocol/;"	m	struct:command.RoutingContext	typeref:typename:string
Protocol	app/router/command/command.proto	/^  string Protocol = 8;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:string
Protocol	app/router/config.pb.go	/^	Protocol       []string      `protobuf:"bytes,9,rep,name=protocol,proto3" json:"protocol,omitem/;"	m	struct:router.RoutingRule	typeref:typename:[]string
Protocol	bin/config/config-server.json	/^    "Protocol":"tcp",$/;"	s	object:porter
Protocol	common/protocol/bittorrent/bittorrent.go	/^func (h *SniffHeader) Protocol() string {$/;"	f	struct:bittorrent.SniffHeader	typeref:typename:string
Protocol	common/protocol/http/sniff.go	/^func (h *SniffHeader) Protocol() string {$/;"	f	struct:http.SniffHeader	typeref:typename:string
Protocol	common/protocol/tls/sniff.go	/^func (h *SniffHeader) Protocol() string {$/;"	f	struct:tls.SniffHeader	typeref:typename:string
Protocol	common/session/session.go	/^	Protocol string$/;"	m	struct:session.Content	typeref:typename:string
Protocol	infra/conf/p2p.go	/^	Protocol string `json:"protocol"`$/;"	m	struct:conf.P2PConfig	typeref:typename:string
Protocol	infra/conf/p2p.go	/^	Protocol string `json:"protocol"`$/;"	m	struct:conf.seed	typeref:typename:string
Protocol	infra/conf/v2ray.go	/^	Protocol       string                         `json:"protocol"`$/;"	m	struct:conf.InboundDetourConfig	typeref:typename:string
Protocol	infra/conf/v2ray.go	/^	Protocol      string           `json:"protocol"`$/;"	m	struct:conf.OutboundDetourConfig	typeref:typename:string
Protocol	transport/internet/config.pb.go	/^	Protocol TransportProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=v2ray.core.transpo/;"	m	struct:internet.StreamConfig	typeref:typename:TransportProtocol
Protocol	transport/internet/config.pb.go	/^	Protocol TransportProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=v2ray.core.transpo/;"	m	struct:internet.TransportConfig	typeref:typename:TransportProtocol
ProtocolMatcher	app/router/condition.go	/^type ProtocolMatcher struct {$/;"	s	package:router
ProtocolName	transport/internet/config.pb.go	/^	ProtocolName      string             `protobuf:"bytes,5,opt,name=protocol_name,json=protocolNam/;"	m	struct:internet.StreamConfig	typeref:typename:string
ProtocolName	transport/internet/config.pb.go	/^	ProtocolName string `protobuf:"bytes,3,opt,name=protocol_name,json=protocolName,proto3" json:"p/;"	m	struct:internet.TransportConfig	typeref:typename:string
ProtocolName	transport/internet/memory_settings.go	/^	ProtocolName     string$/;"	m	struct:internet.MemoryStreamConfig	typeref:typename:string
ProtocolSettings	transport/internet/memory_settings.go	/^	ProtocolSettings interface{}$/;"	m	struct:internet.MemoryStreamConfig	typeref:typename:interface{}
Protocols	app/p2p/api.go	/^	Protocols protocol.Protocol$/;"	m	struct:p2p.P2PNode	typeref:typename:protocol.Protocol
ProxiedDomain	app/dns/config.pb.go	/^	ProxiedDomain string `protobuf:"bytes,4,opt,name=proxied_domain,json=proxiedDomain,proto3" json/;"	m	struct:dns.Config_HostMapping	typeref:typename:string
Proxy	app/proxyman/inbound/worker.go	/^	Proxy() proxy.Inbound$/;"	n	interface:inbound.worker	typeref:typename:proxy.Inbound
Proxy	app/proxyman/inbound/worker.go	/^func (w *tcpWorker) Proxy() proxy.Inbound {$/;"	f	struct:inbound.tcpWorker	typeref:typename:proxy.Inbound
Proxy	app/proxyman/inbound/worker.go	/^func (w *udpWorker) Proxy() proxy.Inbound {$/;"	f	struct:inbound.udpWorker	typeref:typename:proxy.Inbound
Proxy	common/mux/client.go	/^	Proxy    proxy.Outbound$/;"	m	struct:mux.DialingWorkerFactory	typeref:typename:proxy.Outbound
ProxyConfig	infra/conf/transport_internet.go	/^type ProxyConfig struct {$/;"	s	package:conf
ProxyConfig	transport/internet/config.pb.go	/^type ProxyConfig struct {$/;"	s	package:internet
ProxyConfig	transport/internet/config.proto	/^message ProxyConfig {$/;"	m	package:v2ray.core.transport.internet
ProxyInbound	testing/mocks/proxy.go	/^type ProxyInbound struct {$/;"	s	package:mocks
ProxyInboundMockRecorder	testing/mocks/proxy.go	/^type ProxyInboundMockRecorder struct {$/;"	s	package:mocks
ProxyOutbound	testing/mocks/proxy.go	/^type ProxyOutbound struct {$/;"	s	package:mocks
ProxyOutboundMockRecorder	testing/mocks/proxy.go	/^type ProxyOutboundMockRecorder struct {$/;"	s	package:mocks
ProxySettings	app/proxyman/config.pb.go	/^	ProxySettings     *internet.ProxyConfig  `protobuf:"bytes,3,opt,name=proxy_settings,json=proxyS/;"	m	struct:proxyman.SenderConfig	typeref:typename:*internet.ProxyConfig
ProxySettings	app/proxyman/config.pb.go	/^	ProxySettings    *serial.TypedMessage `protobuf:"bytes,3,opt,name=proxy_settings,json=proxySett/;"	m	struct:proxyman.InboundHandlerConfig	typeref:typename:*serial.TypedMessage
ProxySettings	config.pb.go	/^	ProxySettings *serial.TypedMessage `protobuf:"bytes,3,opt,name=proxy_settings,json=proxySetting/;"	m	struct:core.InboundHandlerConfig	typeref:typename:*serial.TypedMessage
ProxySettings	config.pb.go	/^	ProxySettings *serial.TypedMessage `protobuf:"bytes,3,opt,name=proxy_settings,json=proxySetting/;"	m	struct:core.OutboundHandlerConfig	typeref:typename:*serial.TypedMessage
ProxySettings	infra/conf/v2ray.go	/^	ProxySettings *ProxyConfig     `json:"proxySettings"`$/;"	m	struct:conf.OutboundDetourConfig	typeref:typename:*ProxyConfig
PubID	infra/conf/p2p.go	/^	PubID    string `json:"pub_id"`$/;"	m	struct:conf.P2PConfig	typeref:typename:string
PubID	infra/conf/p2p.go	/^	PubID    string `json:"pub_id"`$/;"	m	struct:conf.seed	typeref:typename:string
PubId	app/p2p/config.pb.go	/^	PubId                string   `protobuf:"bytes,4,opt,name=pub_id,json=pubId,proto3" json:"pub_i/;"	m	struct:p2p.Config	typeref:typename:string
PubId	app/p2p/config.pb.go	/^	PubId                string   `protobuf:"bytes,4,opt,name=pub_id,json=pubId,proto3" json:"pub_i/;"	m	struct:p2p.Seed	typeref:typename:string
PubKey	bin/config/config-server.json	/^    "PubKey":"86bfd182fffba4ebf289fdab8962d4934453ce329665bb2cc287005fc2e6b678",$/;"	s	object:porter
PublicIP	bin/config/config-server.json	/^    "PublicIP": "192.168.1.115",$/;"	s	object:porter
PublicKey	common/protocol/tls/cert/privateKey.go	/^	PublicKey     asn1.BitString        `asn1:"optional,explicit,tag:1"`$/;"	m	struct:cert.ecPrivateKey	typeref:typename:asn1.BitString
Publish	app/stats/channel.go	/^func (c *Channel) Publish(ctx context.Context, msg interface{}) {$/;"	f	struct:stats.Channel
Publish	common/signal/pubsub/pubsub.go	/^func (s *Service) Publish(name string, message interface{}) {$/;"	f	struct:pubsub.Service
Publish	features/stats/stats.go	/^	Publish(context.Context, interface{})$/;"	n	interface:stats.Channel
PublishResult	app/router/command/command.pb.go	/^	PublishResult  bool            `protobuf:"varint,3,opt,name=PublishResult,proto3" json:"Publish/;"	m	struct:command.TestRouteRequest	typeref:typename:bool
PublishResult	app/router/command/command.proto	/^  bool PublishResult = 3;$/;"	f	message:v2ray.core.app.router.command.TestRouteRequest	typeref:typename:bool
Push	transport/internet/kcp/sending.go	/^func (sw *SendingWindow) Push(number uint32, b *buf.Buffer) {$/;"	f	struct:kcp.SendingWindow
Push	transport/internet/kcp/sending.go	/^func (w *SendingWorker) Push(b *buf.Buffer) bool {$/;"	f	struct:kcp.SendingWorker	typeref:typename:bool
Put	store/db.go	/^	Put(key string, value interface{}) error$/;"	n	interface:store.Store	typeref:typename:error
Put	store/leveldb.go	/^func (self *LevelDBStore) Put(key []byte, value []byte) error {$/;"	f	struct:store.LevelDBStore	typeref:typename:error
PutNumber	transport/internet/kcp/segment.go	/^func (s *AckSegment) PutNumber(number uint32) {$/;"	f	struct:kcp.AckSegment
PutTimestamp	transport/internet/kcp/segment.go	/^func (s *AckSegment) PutTimestamp(timestamp uint32) {$/;"	f	struct:kcp.AckSegment
Q	common/protocol/tls/cert/privateKey.go	/^	Q       *big.Int$/;"	m	struct:cert.pkcs1PrivateKey	typeref:typename:*big.Int
QPort	bin/config/config-server.json	/^    "QPort":6008,$/;"	n	object:porter
QUICConfig	infra/conf/transport.go	/^	QUICConfig *QUICConfig         `json:"quicSettings"`$/;"	m	struct:conf.TransportConfig	typeref:typename:*QUICConfig
QUICConfig	infra/conf/transport_internet.go	/^type QUICConfig struct {$/;"	s	package:conf
QUICSettings	infra/conf/transport_internet.go	/^	QUICSettings   *QUICConfig         `json:"quicSettings"`$/;"	m	struct:conf.StreamConfig	typeref:typename:*QUICConfig
Qinv	common/protocol/tls/cert/privateKey.go	/^	Qinv *big.Int `asn1:"optional"`$/;"	m	struct:cert.pkcs1PrivateKey	typeref:typename:*big.Int
Query	store/sqlite.go	/^func (this *SQLiteStorage) Query(query string, args ...interface{}) (*sql.Rows, error) {$/;"	f	struct:store.SQLiteStorage	typeref:typename:(*sql.Rows, error)
QueryAccount	app/p2p/account/account.go	/^func (this *SocksDB) QueryAccount(label string) (*Account, error) {$/;"	f	struct:account.SocksDB	typeref:typename:(*Account, error)
QueryDefaultAccount	app/p2p/account/account.go	/^func (this *SocksDB) QueryDefaultAccount() (*Account, error) {$/;"	f	struct:account.SocksDB	typeref:typename:(*Account, error)
QueryIP	app/dns/dohdns.go	/^func (s *DoHNameServer) QueryIP(ctx context.Context, domain string, option IPOption) ([]net.IP, /;"	f	struct:dns.DoHNameServer	typeref:typename:([]net.IP, error)
QueryIP	app/dns/nameserver.go	/^	QueryIP(ctx context.Context, domain string, option IPOption) ([]net.IP, error)$/;"	n	interface:dns.Client	typeref:typename:([]net.IP, error)
QueryIP	app/dns/nameserver.go	/^func (s *localNameServer) QueryIP(ctx context.Context, domain string, option IPOption) ([]net.IP/;"	f	struct:dns.localNameServer	typeref:typename:([]net.IP, error)
QueryIP	app/dns/udpns.go	/^func (s *ClassicNameServer) QueryIP(ctx context.Context, domain string, option IPOption) ([]net./;"	f	struct:dns.ClassicNameServer	typeref:typename:([]net.IP, error)
QueryKeysByPrefix	store/leveldb.go	/^func (self *LevelDBStore) QueryKeysByPrefix(prefix []byte) ([][]byte, error) {$/;"	f	struct:store.LevelDBStore	typeref:typename:([][]byte, error)
QueryStats	app/stats/command/command.go	/^func (s *statsServer) QueryStats(ctx context.Context, request *QueryStatsRequest) (*QueryStatsRe/;"	f	struct:command.statsServer	typeref:typename:(*QueryStatsResponse, error)
QueryStats	app/stats/command/command.proto	/^  rpc QueryStats(QueryStatsRequest) returns (QueryStatsResponse) {}$/;"	r	service:v2ray.core.app.stats.command.StatsService	typeref:typename:QueryStatsResponse
QueryStats	app/stats/command/command_grpc.pb.go	/^	QueryStats(context.Context, *QueryStatsRequest) (*QueryStatsResponse, error)$/;"	n	interface:command.StatsServiceServer	typeref:typename:(*QueryStatsResponse, error)
QueryStats	app/stats/command/command_grpc.pb.go	/^	QueryStats(ctx context.Context, in *QueryStatsRequest, opts ...grpc.CallOption) (*QueryStatsRes/;"	n	interface:command.StatsServiceClient	typeref:typename:(*QueryStatsResponse, error)
QueryStats	app/stats/command/command_grpc.pb.go	/^func (UnimplementedStatsServiceServer) QueryStats(context.Context, *QueryStatsRequest) (*QuerySt/;"	f	struct:command.UnimplementedStatsServiceServer	typeref:typename:(*QueryStatsResponse, error)
QueryStats	app/stats/command/command_grpc.pb.go	/^func (c *statsServiceClient) QueryStats(ctx context.Context, in *QueryStatsRequest, opts ...grpc/;"	f	struct:command.statsServiceClient	typeref:typename:(*QueryStatsResponse, error)
QueryStatsRequest	app/stats/command/command.pb.go	/^type QueryStatsRequest struct {$/;"	s	package:command
QueryStatsRequest	app/stats/command/command.proto	/^message QueryStatsRequest {$/;"	m	package:v2ray.core.app.stats.command
QueryStatsResponse	app/stats/command/command.pb.go	/^type QueryStatsResponse struct {$/;"	s	package:command
QueryStatsResponse	app/stats/command/command.proto	/^message QueryStatsResponse {$/;"	m	package:v2ray.core.app.stats.command
QueryStringKeysByPrefix	store/leveldb.go	/^func (self *LevelDBStore) QueryStringKeysByPrefix(prefix []byte) ([]string, error) {$/;"	f	struct:store.LevelDBStore	typeref:typename:([]string, error)
RCode	app/dns/dnscommon.go	/^	RCode  dnsmessage.RCode$/;"	m	struct:dns.IPRecord	typeref:typename:dnsmessage.RCode
RCodeError	features/dns/client.go	/^type RCodeError uint16$/;"	t	package:dns	typeref:typename:uint16
RCodeFromError	features/dns/client.go	/^func RCodeFromError(err error) uint16 {$/;"	f	package:dns	typeref:typename:uint16
RWMutex	app/dns/dohdns.go	/^	sync.RWMutex$/;"	M	struct:dns.DoHNameServer	typeref:typename:sync.RWMutex
RWMutex	app/dns/udpns.go	/^	sync.RWMutex$/;"	M	struct:dns.ClassicNameServer	typeref:typename:sync.RWMutex
RWMutex	app/log/log.go	/^	sync.RWMutex$/;"	M	struct:log.Instance	typeref:typename:sync.RWMutex
RWMutex	app/p2p/p2p.go	/^	sync.RWMutex$/;"	M	struct:p2p.Instance	typeref:typename:sync.RWMutex
RWMutex	app/proxyman/inbound/worker.go	/^	sync.RWMutex$/;"	M	struct:inbound.udpWorker	typeref:typename:sync.RWMutex
RWMutex	common/log/log.go	/^	sync.RWMutex$/;"	M	struct:log.syncHandler	typeref:typename:sync.RWMutex
RWMutex	common/mux/session.go	/^	sync.RWMutex$/;"	M	struct:mux.SessionManager	typeref:typename:sync.RWMutex
RWMutex	common/protocol/server_picker.go	/^	sync.RWMutex$/;"	M	struct:protocol.ServerList	typeref:typename:sync.RWMutex
RWMutex	common/protocol/server_spec.go	/^	sync.RWMutex$/;"	M	struct:protocol.ServerSpec	typeref:typename:sync.RWMutex
RWMutex	common/signal/pubsub/pubsub.go	/^	sync.RWMutex$/;"	M	struct:pubsub.Service	typeref:typename:sync.RWMutex
RWMutex	common/signal/timer.go	/^	sync.RWMutex$/;"	M	struct:signal.ActivityTimer	typeref:typename:sync.RWMutex
RWMutex	proxy/vmess/encoding/server.go	/^	sync.RWMutex$/;"	M	struct:encoding.SessionHistory	typeref:typename:sync.RWMutex
RWMutex	proxy/vmess/validator.go	/^	sync.RWMutex$/;"	M	struct:vmess.TimedUserValidator	typeref:typename:sync.RWMutex
RWMutex	transport/internet/kcp/connection.go	/^	sync.RWMutex$/;"	M	struct:kcp.RoundTripInfo	typeref:typename:sync.RWMutex
RWMutex	transport/internet/kcp/receiving.go	/^	sync.RWMutex$/;"	M	struct:kcp.ReceivingWorker	typeref:typename:sync.RWMutex
RWMutex	transport/internet/kcp/sending.go	/^	sync.RWMutex$/;"	M	struct:kcp.SendingWorker	typeref:typename:sync.RWMutex
RWMutex	transport/internet/udp/dispatcher.go	/^	sync.RWMutex$/;"	M	struct:udp.Dispatcher	typeref:typename:sync.RWMutex
Rand	common/dice/dice.go	/^	*rand.Rand$/;"	M	struct:dice.deterministicDice	typeref:typename:*rand.Rand
Random	app/proxyman/config.proto	/^    Random = 1;$/;"	e	enum:v2ray.core.app.proxyman.AllocationStrategy.Type
Random	app/reverse/config.pb.go	/^	Random []byte        `protobuf:"bytes,99,opt,name=random,proto3" json:"random,omitempty"`$/;"	m	struct:reverse.Control	typeref:typename:[]byte
RandomPortBegin	bin/config/config-server.json	/^    "RandomPortBegin": 55535,$/;"	n	object:porter
RandomPortRange	bin/config/config-server.json	/^    "RandomPortRange": 10000,$/;"	n	object:porter
RandomStrategy	app/router/balancing.go	/^type RandomStrategy struct {$/;"	s	package:router
Range	common/net/port.pb.go	/^	Range []*PortRange `protobuf:"bytes,1,rep,name=range,proto3" json:"range,omitempty"`$/;"	m	struct:net.PortList	typeref:typename:[]*PortRange
Range	infra/conf/common.go	/^	Range []PortRange$/;"	m	struct:conf.PortList	typeref:typename:[]PortRange
RawTCP	common/net/network.proto	/^  RawTCP = 1 [deprecated = true];$/;"	e	enum:v2ray.core.common.net.Network
Rdaddr	transport/internet/sockopt_freebsd.go	/^	Rdaddr    [16]byte \/* pf_addr *\/$/;"	m	struct:internet.pfiocNatlook	typeref:typename:[16]byte
Rdport	transport/internet/sockopt_freebsd.go	/^	Rdport    uint16$/;"	m	struct:internet.pfiocNatlook	typeref:typename:uint16
Read	app/proxyman/inbound/worker.go	/^func (c *udpConn) Read(buf []byte) (int, error) {$/;"	f	struct:inbound.udpConn	typeref:typename:(int, error)
Read	common/buf/buffer.go	/^func (b *Buffer) Read(data []byte) (int, error) {$/;"	f	struct:buf.Buffer	typeref:typename:(int, error)
Read	common/buf/copy_test.go	/^func (TestReader) Read(b []byte) (int, error) {$/;"	f	struct:buf_test.TestReader	typeref:typename:(int, error)
Read	common/buf/multi_buffer.go	/^func (c *MultiBufferContainer) Read(b []byte) (int, error) {$/;"	f	struct:buf.MultiBufferContainer	typeref:typename:(int, error)
Read	common/buf/reader.go	/^func (r *BufferedReader) Read(b []byte) (int, error) {$/;"	f	struct:buf.BufferedReader	typeref:typename:(int, error)
Read	common/buf/readv_posix.go	/^func (r *posixReader) Read(fd uintptr) int32 {$/;"	f	struct:buf.posixReader	typeref:typename:int32
Read	common/buf/readv_reader.go	/^	Read(fd uintptr) int32$/;"	n	interface:buf.multiReader	typeref:typename:int32
Read	common/buf/readv_unix.go	/^func (r *unixReader) Read(fd uintptr) int32 {$/;"	f	struct:buf.unixReader	typeref:typename:int32
Read	common/buf/readv_windows.go	/^func (r *windowsReader) Read(fd uintptr) int32 {$/;"	f	struct:buf.windowsReader	typeref:typename:int32
Read	common/crypto/io.go	/^func (r *CryptionReader) Read(data []byte) (int, error) {$/;"	f	struct:crypto.CryptionReader	typeref:typename:(int, error)
Read	common/net/connection.go	/^func (c *connection) Read(b []byte) (int, error) {$/;"	f	struct:net.connection	typeref:typename:(int, error)
Read	infra/conf/json/reader.go	/^func (v *Reader) Read(b []byte) (int, error) {$/;"	f	struct:json.Reader	typeref:typename:(int, error)
Read	proxy/dns/dns.go	/^func (c *outboundConn) Read(b []byte) (int, error) {$/;"	f	struct:dns.outboundConn	typeref:typename:(int, error)
Read	proxy/http/client.go	/^func (h *http2Conn) Read(p []byte) (n int, err error) {$/;"	f	struct:http.http2Conn	typeref:typename:(n int, err error)
Read	proxy/trojan/protocol.go	/^func (c *ConnReader) Read(p []byte) (int, error) {$/;"	f	struct:trojan.ConnReader	typeref:typename:(int, error)
Read	testing/mocks/io.go	/^func (m *Reader) Read(arg0 []byte) (int, error) {$/;"	f	struct:mocks.Reader	typeref:typename:(int, error)
Read	testing/mocks/io.go	/^func (mr *ReaderMockRecorder) Read(arg0 interface{}) *gomock.Call {$/;"	f	struct:mocks.ReaderMockRecorder	typeref:typename:*gomock.Call
Read	transport/internet/connection.go	/^func (c *StatCouterConnection) Read(b []byte) (int, error) {$/;"	f	struct:internet.StatCouterConnection	typeref:typename:(int, error)
Read	transport/internet/headers/http/http.go	/^	Read(io.Reader) (*buf.Buffer, error)$/;"	n	interface:http.Reader	typeref:typename:(*buf.Buffer, error)
Read	transport/internet/headers/http/http.go	/^func (NoOpReader) Read(io.Reader) (*buf.Buffer, error) {$/;"	f	struct:http.NoOpReader	typeref:typename:(*buf.Buffer, error)
Read	transport/internet/headers/http/http.go	/^func (c *HttpConn) Read(b []byte) (int, error) {$/;"	f	struct:http.HttpConn	typeref:typename:(int, error)
Read	transport/internet/headers/http/http.go	/^func (h *HeaderReader) Read(reader io.Reader) (*buf.Buffer, error) {$/;"	f	struct:http.HeaderReader	typeref:typename:(*buf.Buffer, error)
Read	transport/internet/kcp/connection.go	/^func (c *Connection) Read(b []byte) (int, error) {$/;"	f	struct:kcp.Connection	typeref:typename:(int, error)
Read	transport/internet/kcp/io.go	/^	Read([]byte) []Segment$/;"	n	interface:kcp.PacketReader	typeref:typename:[]Segment
Read	transport/internet/kcp/io.go	/^func (r *KCPPacketReader) Read(b []byte) []Segment {$/;"	f	struct:kcp.KCPPacketReader	typeref:typename:[]Segment
Read	transport/internet/kcp/receiving.go	/^func (w *ReceivingWorker) Read(b []byte) int {$/;"	f	struct:kcp.ReceivingWorker	typeref:typename:int
Read	transport/internet/quic/conn.go	/^func (c *interConn) Read(b []byte) (int, error) {$/;"	f	struct:quic.interConn	typeref:typename:(int, error)
Read	transport/internet/system_dialer.go	/^func (c *packetConnWrapper) Read(p []byte) (int, error) {$/;"	f	struct:internet.packetConnWrapper	typeref:typename:(int, error)
Read	transport/internet/websocket/connection.go	/^func (c *connection) Read(b []byte) (int, error) {$/;"	f	struct:websocket.connection	typeref:typename:(int, error)
ReadAddressPort	common/protocol/address.go	/^	ReadAddressPort(buffer *buf.Buffer, input io.Reader) (net.Address, net.Port, error)$/;"	n	interface:protocol.AddressSerializer	typeref:typename:(net.Address, net.Port, error)
ReadAddressPort	common/protocol/address.go	/^func (p portFirstAddressParser) ReadAddressPort(buffer *buf.Buffer, input io.Reader) (net.Addres/;"	f	struct:protocol.portFirstAddressParser	typeref:typename:(net.Address, net.Port, error)
ReadAddressPort	common/protocol/address.go	/^func (p portLastAddressParser) ReadAddressPort(buffer *buf.Buffer, input io.Reader) (net.Address/;"	f	struct:protocol.portLastAddressParser	typeref:typename:(net.Address, net.Port, error)
ReadAllToBytes	common/buf/multi_buffer.go	/^func ReadAllToBytes(reader io.Reader) ([]byte, error) {$/;"	f	package:buf	typeref:typename:([]byte, error)
ReadAsset	common/platform/filesystem/file.go	/^func ReadAsset(file string) ([]byte, error) {$/;"	f	package:filesystem	typeref:typename:([]byte, error)
ReadAtMost	common/buf/reader.go	/^func (r *BufferedReader) ReadAtMost(size int32) (MultiBuffer, error) {$/;"	f	struct:buf.BufferedReader	typeref:typename:(MultiBuffer, error)
ReadAuthentication	proxy/mtproto/auth.go	/^func ReadAuthentication(reader io.Reader) (*Authentication, error) {$/;"	f	package:mtproto	typeref:typename:(*Authentication, error)
ReadBuffer	common/buf/reader.go	/^func ReadBuffer(r io.Reader) (*Buffer, error) {$/;"	f	package:buf	typeref:typename:(*Buffer, error)
ReadBuffer	transport/internet/kcp/config.pb.go	/^	ReadBuffer       *ReadBuffer          `protobuf:"bytes,7,opt,name=read_buffer,json=readBuffer,p/;"	m	struct:kcp.Config	typeref:typename:*ReadBuffer
ReadBuffer	transport/internet/kcp/config.pb.go	/^type ReadBuffer struct {$/;"	s	package:kcp
ReadBuffer	transport/internet/kcp/config.proto	/^message ReadBuffer {$/;"	m	package:v2ray.core.transport.internet.kcp
ReadBufferSize	infra/conf/transport_internet.go	/^	ReadBufferSize  *uint32         `json:"readBufferSize"`$/;"	m	struct:conf.KCPConfig	typeref:typename:*uint32
ReadByte	common/buf/reader.go	/^func (r *BufferedReader) ReadByte() (byte, error) {$/;"	f	struct:buf.BufferedReader	typeref:typename:(byte, error)
ReadClientHello	common/protocol/tls/sniff.go	/^func ReadClientHello(data []byte, h *SniffHeader) error {$/;"	f	package:tls	typeref:typename:error
ReadCounter	transport/internet/connection.go	/^	ReadCounter  stats.Counter$/;"	m	struct:internet.StatCouterConnection	typeref:typename:stats.Counter
ReadFile	common/platform/filesystem/file.go	/^func ReadFile(path string) ([]byte, error) {$/;"	f	package:filesystem	typeref:typename:([]byte, error)
ReadFrom	common/buf/buffer.go	/^func (b *Buffer) ReadFrom(reader io.Reader) (int64, error) {$/;"	f	struct:buf.Buffer	typeref:typename:(int64, error)
ReadFrom	common/buf/multi_buffer.go	/^func ReadFrom(reader io.Reader) (MultiBuffer, error) {$/;"	f	package:buf	typeref:typename:(MultiBuffer, error)
ReadFrom	common/buf/writer.go	/^func (noOpWriter) ReadFrom(reader io.Reader) (int64, error) {$/;"	f	type:buf.noOpWriter	typeref:typename:(int64, error)
ReadFrom	common/buf/writer.go	/^func (w *BufferToBytesWriter) ReadFrom(reader io.Reader) (int64, error) {$/;"	f	struct:buf.BufferToBytesWriter	typeref:typename:(int64, error)
ReadFrom	common/buf/writer.go	/^func (w *BufferedWriter) ReadFrom(reader io.Reader) (int64, error) {$/;"	f	struct:buf.BufferedWriter	typeref:typename:(int64, error)
ReadFrom	transport/internet/quic/conn.go	/^func (c *sysConn) ReadFrom(p []byte) (int, net.Addr, error) {$/;"	f	struct:quic.sysConn	typeref:typename:(int, net.Addr, error)
ReadFrom	transport/internet/udp/dispatcher.go	/^func (c *dispatcherConn) ReadFrom(p []byte) (int, net.Addr, error) {$/;"	f	struct:udp.dispatcherConn	typeref:typename:(int, net.Addr, error)
ReadFullFrom	common/buf/buffer.go	/^func (b *Buffer) ReadFullFrom(reader io.Reader, size int32) (int64, error) {$/;"	f	struct:buf.Buffer	typeref:typename:(int64, error)
ReadMessage	common/protocol/dns/io.go	/^	ReadMessage() (*buf.Buffer, error)$/;"	n	interface:dns.MessageReader	typeref:typename:(*buf.Buffer, error)
ReadMessage	common/protocol/dns/io.go	/^func (r *TCPReader) ReadMessage() (*buf.Buffer, error) {$/;"	f	struct:dns.TCPReader	typeref:typename:(*buf.Buffer, error)
ReadMessage	common/protocol/dns/io.go	/^func (r *UDPReader) ReadMessage() (*buf.Buffer, error) {$/;"	f	struct:dns.UDPReader	typeref:typename:(*buf.Buffer, error)
ReadMultiBuffer	app/dispatcher/default.go	/^func (r *cachedReader) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:dispatcher.cachedReader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	app/proxyman/inbound/worker.go	/^func (c *udpConn) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:inbound.udpConn	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	common/buf/io.go	/^	ReadMultiBuffer() (MultiBuffer, error)$/;"	n	interface:buf.Reader	typeref:typename:(MultiBuffer, error)
ReadMultiBuffer	common/buf/multi_buffer.go	/^func (c *MultiBufferContainer) ReadMultiBuffer() (MultiBuffer, error) {$/;"	f	struct:buf.MultiBufferContainer	typeref:typename:(MultiBuffer, error)
ReadMultiBuffer	common/buf/reader.go	/^func (r *BufferedReader) ReadMultiBuffer() (MultiBuffer, error) {$/;"	f	struct:buf.BufferedReader	typeref:typename:(MultiBuffer, error)
ReadMultiBuffer	common/buf/reader.go	/^func (r *PacketReader) ReadMultiBuffer() (MultiBuffer, error) {$/;"	f	struct:buf.PacketReader	typeref:typename:(MultiBuffer, error)
ReadMultiBuffer	common/buf/reader.go	/^func (r *SingleReader) ReadMultiBuffer() (MultiBuffer, error) {$/;"	f	struct:buf.SingleReader	typeref:typename:(MultiBuffer, error)
ReadMultiBuffer	common/buf/readv_reader.go	/^func (r *ReadVReader) ReadMultiBuffer() (MultiBuffer, error) {$/;"	f	struct:buf.ReadVReader	typeref:typename:(MultiBuffer, error)
ReadMultiBuffer	common/crypto/auth.go	/^func (r *AuthenticationReader) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:crypto.AuthenticationReader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	common/crypto/chunk.go	/^func (r *ChunkStreamReader) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:crypto.ChunkStreamReader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	common/mux/reader.go	/^func (r *PacketReader) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:mux.PacketReader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	common/net/connection.go	/^func (c *connection) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:net.connection	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	proxy/shadowsocks/protocol.go	/^func (v *UDPReader) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:shadowsocks.UDPReader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	proxy/socks/protocol.go	/^func (r *UDPReader) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:socks.UDPReader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	proxy/trojan/protocol.go	/^func (c *ConnReader) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:trojan.ConnReader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	proxy/trojan/protocol.go	/^func (r *PacketReader) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:trojan.PacketReader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	proxy/vless/encoding/addons.go	/^func (r *LengthPacketReader) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:encoding.LengthPacketReader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	transport/internet/kcp/connection.go	/^func (c *Connection) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:kcp.Connection	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	transport/internet/kcp/receiving.go	/^func (w *ReceivingWorker) ReadMultiBuffer() buf.MultiBuffer {$/;"	f	struct:kcp.ReceivingWorker	typeref:typename:buf.MultiBuffer
ReadMultiBuffer	transport/pipe/impl.go	/^func (p *pipe) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:pipe.pipe	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBuffer	transport/pipe/reader.go	/^func (r *Reader) ReadMultiBuffer() (buf.MultiBuffer, error) {$/;"	f	struct:pipe.Reader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBufferTimeout	app/dispatcher/default.go	/^func (r *cachedReader) ReadMultiBufferTimeout(timeout time.Duration) (buf.MultiBuffer, error) {$/;"	f	struct:dispatcher.cachedReader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBufferTimeout	common/buf/io.go	/^	ReadMultiBufferTimeout(time.Duration) (MultiBuffer, error)$/;"	n	interface:buf.TimeoutReader	typeref:typename:(MultiBuffer, error)
ReadMultiBufferTimeout	transport/pipe/impl.go	/^func (p *pipe) ReadMultiBufferTimeout(d time.Duration) (buf.MultiBuffer, error) {$/;"	f	struct:pipe.pipe	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBufferTimeout	transport/pipe/reader.go	/^func (r *Reader) ReadMultiBufferTimeout(d time.Duration) (buf.MultiBuffer, error) {$/;"	f	struct:pipe.Reader	typeref:typename:(buf.MultiBuffer, error)
ReadMultiBufferWithMetadata	proxy/trojan/protocol.go	/^func (r *PacketReader) ReadMultiBufferWithMetadata() (*PacketPayload, error) {$/;"	f	struct:trojan.PacketReader	typeref:typename:(*PacketPayload, error)
ReadSegment	transport/internet/kcp/segment.go	/^func ReadSegment(buf []byte) (Segment, []byte) {$/;"	f	package:kcp	typeref:typename:(Segment, []byte)
ReadTCPResponse	proxy/shadowsocks/protocol.go	/^func ReadTCPResponse(user *protocol.MemoryUser, reader io.Reader) (buf.Reader, error) {$/;"	f	package:shadowsocks	typeref:typename:(buf.Reader, error)
ReadTCPSession	proxy/shadowsocks/protocol.go	/^func ReadTCPSession(user *protocol.MemoryUser, reader io.Reader) (*protocol.RequestHeader, buf.R/;"	f	package:shadowsocks	typeref:typename:(*protocol.RequestHeader, buf.Reader, error)
ReadUDPMsg	transport/internet/udp/hub_freebsd.go	/^func ReadUDPMsg(conn *net.UDPConn, payload []byte, oob []byte) (int, int, int, *net.UDPAddr, err/;"	f	package:udp	typeref:typename:(int, int, int, *net.UDPAddr, error)
ReadUDPMsg	transport/internet/udp/hub_linux.go	/^func ReadUDPMsg(conn *net.UDPConn, payload []byte, oob []byte) (int, int, int, *net.UDPAddr, err/;"	f	package:udp	typeref:typename:(int, int, int, *net.UDPAddr, error)
ReadUDPMsg	transport/internet/udp/hub_other.go	/^func ReadUDPMsg(conn *net.UDPConn, payload []byte, oob []byte) (int, int, int, *net.UDPAddr, err/;"	f	package:udp	typeref:typename:(int, int, int, *net.UDPAddr, error)
ReadUint16	common/serial/serial.go	/^func ReadUint16(reader io.Reader) (uint16, error) {$/;"	f	package:serial	typeref:typename:(uint16, error)
ReadUntilNull	proxy/socks/protocol.go	/^func ReadUntilNull(reader io.Reader) (string, error) {$/;"	f	package:socks	typeref:typename:(string, error)
ReadUsernamePassword	proxy/socks/protocol.go	/^func ReadUsernamePassword(reader io.Reader) (string, string, error) {$/;"	f	package:socks	typeref:typename:(string, string, error)
ReadVReader	common/buf/readv_reader.go	/^type ReadVReader struct {$/;"	s	package:buf
Reader	common/buf/io.go	/^type Reader interface {$/;"	i	package:buf
Reader	common/buf/reader.go	/^	Reader Reader$/;"	m	struct:buf.BufferedReader	typeref:typename:Reader
Reader	common/buf/reader.go	/^	io.Reader$/;"	M	struct:buf.PacketReader	typeref:typename:io.Reader
Reader	common/buf/reader.go	/^	io.Reader$/;"	M	struct:buf.SingleReader	typeref:typename:io.Reader
Reader	common/buf/readv_reader.go	/^	io.Reader$/;"	M	struct:buf.ReadVReader	typeref:typename:io.Reader
Reader	common/protocol/dns/io.go	/^	buf.Reader$/;"	M	struct:dns.UDPReader	typeref:typename:buf.Reader
Reader	infra/conf/json/reader.go	/^	io.Reader$/;"	M	struct:json.Reader	typeref:typename:io.Reader
Reader	infra/conf/json/reader.go	/^type Reader struct {$/;"	s	package:json
Reader	proxy/http/server.go	/^	io.Reader$/;"	M	struct:http.readerOnly	typeref:typename:io.Reader
Reader	proxy/shadowsocks/protocol.go	/^	Reader io.Reader$/;"	m	struct:shadowsocks.UDPReader	typeref:typename:io.Reader
Reader	proxy/trojan/protocol.go	/^	io.Reader$/;"	M	struct:trojan.ConnReader	typeref:typename:io.Reader
Reader	proxy/trojan/protocol.go	/^	io.Reader$/;"	M	struct:trojan.PacketReader	typeref:typename:io.Reader
Reader	proxy/vless/encoding/addons.go	/^	io.Reader$/;"	M	struct:encoding.LengthPacketReader	typeref:typename:io.Reader
Reader	testing/mocks/io.go	/^type Reader struct {$/;"	s	package:mocks
Reader	transport/internet/headers/http/http.go	/^type Reader interface {$/;"	i	package:http
Reader	transport/link.go	/^	Reader buf.Reader$/;"	m	struct:transport.Link	typeref:typename:buf.Reader
Reader	transport/pipe/reader.go	/^type Reader struct {$/;"	s	package:pipe
ReaderMockRecorder	testing/mocks/io.go	/^type ReaderMockRecorder struct {$/;"	s	package:mocks
Reason	common/log/access.go	/^	Reason interface{}$/;"	m	struct:log.AccessMessage	typeref:typename:interface{}
Reason	infra/conf/transport_authenticators.go	/^	Reason  string                 `json:"reason"`$/;"	m	struct:conf.HTTPAuthenticatorResponse	typeref:typename:string
Reason	transport/internet/headers/http/config.pb.go	/^	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`$/;"	m	struct:http.Status	typeref:typename:string
Receive	transport/internet/udp/hub.go	/^func (h *Hub) Receive() <-chan *udp.Packet {$/;"	f	struct:udp.Hub	typeref:typename:<-chan *udp.Packet
ReceiveOriginalDestAddress	transport/internet/config.pb.go	/^	ReceiveOriginalDestAddress bool   `protobuf:"varint,4,opt,name=receive_original_dest_address,js/;"	m	struct:internet.SocketConfig	typeref:typename:bool
ReceiveOriginalDestination	app/proxyman/config.pb.go	/^	ReceiveOriginalDestination bool                   `protobuf:"varint,5,opt,name=receive_original/;"	m	struct:proxyman.ReceiverConfig	typeref:typename:bool
Receiver	proxy/vmess/outbound/config.pb.go	/^	Receiver []*protocol.ServerEndpoint `protobuf:"bytes,1,rep,name=Receiver,proto3" json:"Receiver/;"	m	struct:outbound.Config	typeref:typename:[]*protocol.ServerEndpoint
Receiver	proxy/vmess/outbound/config.proto	/^  repeated v2ray.core.common.protocol.ServerEndpoint Receiver = 1;$/;"	f	message:v2ray.core.proxy.vmess.outbound.Config	typeref:typename:v2ray.core.common.protocol.ServerEndpoint
ReceiverConfig	app/proxyman/config.pb.go	/^type ReceiverConfig struct {$/;"	s	package:proxyman
ReceiverConfig	app/proxyman/config.proto	/^message ReceiverConfig {$/;"	m	package:v2ray.core.app.proxyman
ReceiverSettings	app/proxyman/config.pb.go	/^	ReceiverSettings *serial.TypedMessage `protobuf:"bytes,2,opt,name=receiver_settings,json=receiv/;"	m	struct:proxyman.InboundHandlerConfig	typeref:typename:*serial.TypedMessage
ReceiverSettings	config.pb.go	/^	ReceiverSettings *serial.TypedMessage `protobuf:"bytes,2,opt,name=receiver_settings,json=receiv/;"	m	struct:core.InboundHandlerConfig	typeref:typename:*serial.TypedMessage
Receivers	infra/conf/vmess.go	/^	Receivers []*VMessOutboundTarget `json:"vnext"`$/;"	m	struct:conf.VMessOutboundConfig	typeref:typename:[]*VMessOutboundTarget
ReceivingNext	transport/internet/kcp/segment.go	/^	ReceivingNext   uint32$/;"	m	struct:kcp.AckSegment	typeref:typename:uint32
ReceivingNext	transport/internet/kcp/segment.go	/^	ReceivingNext uint32$/;"	m	struct:kcp.CmdOnlySegment	typeref:typename:uint32
ReceivingWindow	transport/internet/kcp/receiving.go	/^type ReceivingWindow struct {$/;"	s	package:kcp
ReceivingWindow	transport/internet/kcp/segment.go	/^	ReceivingWindow uint32$/;"	m	struct:kcp.AckSegment	typeref:typename:uint32
ReceivingWorker	transport/internet/kcp/receiving.go	/^type ReceivingWorker struct {$/;"	s	package:kcp
Record	common/log/log.go	/^func Record(msg Message) {$/;"	f	package:log
Recv	app/router/command/command_grpc.pb.go	/^	Recv() (*RoutingContext, error)$/;"	n	interface:command.RoutingService_SubscribeRoutingStatsClient	typeref:typename:(*RoutingContext, error)
Recv	app/router/command/command_grpc.pb.go	/^func (x *routingServiceSubscribeRoutingStatsClient) Recv() (*RoutingContext, error) {$/;"	f	struct:command.routingServiceSubscribeRoutingStatsClient	typeref:typename:(*RoutingContext, error)
Redirect	infra/conf/dokodemo.go	/^	Redirect     bool         `json:"followRedirect"`$/;"	m	struct:conf.DokodemoConfig	typeref:typename:bool
Redirect	infra/conf/freedom.go	/^	Redirect       string  `json:"redirect"`$/;"	m	struct:conf.FreedomConfig	typeref:typename:string
Redirect	transport/internet/config.proto	/^    Redirect = 2;$/;"	e	enum:v2ray.core.transport.internet.SocketConfig.TProxyMode
Refresh	app/proxyman/config.pb.go	/^	Refresh *AllocationStrategy_AllocationStrategyRefresh `protobuf:"bytes,3,opt,name=refresh,proto/;"	m	struct:proxyman.AllocationStrategy	typeref:typename:*AllocationStrategy_AllocationStrategyRefresh
RefreshMin	infra/conf/v2ray.go	/^	RefreshMin  *uint32 `json:"refresh"`$/;"	m	struct:conf.InboundDetourAllocationConfig	typeref:typename:*uint32
Regex	app/dns/config.proto	/^  Regex = 3;$/;"	e	enum:v2ray.core.app.dns.DomainMatchingType
Regex	app/router/config.proto	/^    Regex = 1;$/;"	e	enum:v2ray.core.app.router.Domain.Type
Regex	common/strmatcher/strmatcher.go	/^	Regex$/;"	c	package:strmatcher
Register	app/commander/service.go	/^	Register(*grpc.Server)$/;"	n	interface:commander.Service
Register	app/log/command/command.go	/^func (s *service) Register(server *grpc.Server) {$/;"	f	struct:command.service
Register	app/proxyman/command/command.go	/^func (s *service) Register(server *grpc.Server) {$/;"	f	struct:command.service
Register	app/router/command/command.go	/^func (s *service) Register(server *grpc.Server) {$/;"	f	struct:command.service
Register	app/stats/command/command.go	/^func (s *service) Register(server *grpc.Server) {$/;"	f	struct:command.service
RegisterChannel	app/stats/stats.go	/^func (m *Manager) RegisterChannel(name string) (stats.Channel, error) {$/;"	f	struct:stats.Manager	typeref:typename:(stats.Channel, error)
RegisterChannel	features/stats/stats.go	/^	RegisterChannel(string) (Channel, error)$/;"	n	interface:stats.Manager	typeref:typename:(Channel, error)
RegisterChannel	features/stats/stats.go	/^func (NoopManager) RegisterChannel(string) (Channel, error) {$/;"	f	struct:stats.NoopManager	typeref:typename:(Channel, error)
RegisterCommand	infra/control/command.go	/^func RegisterCommand(cmd Command) error {$/;"	f	package:control	typeref:typename:error
RegisterConfig	common/type.go	/^func RegisterConfig(config interface{}, configCreator ConfigCreator) error {$/;"	f	package:common	typeref:typename:error
RegisterConfigLoader	config.go	/^func RegisterConfigLoader(format *ConfigFormat) error {$/;"	f	package:core	typeref:typename:error
RegisterCounter	app/stats/stats.go	/^func (m *Manager) RegisterCounter(name string) (stats.Counter, error) {$/;"	f	struct:stats.Manager	typeref:typename:(stats.Counter, error)
RegisterCounter	features/stats/stats.go	/^	RegisterCounter(string) (Counter, error)$/;"	n	interface:stats.Manager	typeref:typename:(Counter, error)
RegisterCounter	features/stats/stats.go	/^func (NoopManager) RegisterCounter(string) (Counter, error) {$/;"	f	struct:stats.NoopManager	typeref:typename:(Counter, error)
RegisterCreator	infra/conf/loader.go	/^func (v ConfigCreatorCache) RegisterCreator(id string, creator ConfigCreator) error {$/;"	f	type:conf.ConfigCreatorCache	typeref:typename:error
RegisterDialerController	transport/internet/system_dialer.go	/^func RegisterDialerController(ctl func(network, address string, fd uintptr) error) error {$/;"	f	package:internet	typeref:typename:error
RegisterHandler	common/log/log.go	/^func RegisterHandler(handler Handler) {$/;"	f	package:log
RegisterHandlerCreator	app/log/log_creator.go	/^func RegisterHandlerCreator(logType LogType, f HandlerCreator) error {$/;"	f	package:log	typeref:typename:error
RegisterHandlerServiceServer	app/proxyman/command/command_grpc.pb.go	/^func RegisterHandlerServiceServer(s *grpc.Server, srv HandlerServiceServer) {$/;"	f	package:command
RegisterListenerController	transport/internet/system_listener.go	/^func RegisterListenerController(controller func(network, address string, fd uintptr) error) erro/;"	f	package:internet	typeref:typename:error
RegisterLoggerServiceServer	app/log/command/config_grpc.pb.go	/^func RegisterLoggerServiceServer(s *grpc.Server, srv LoggerServiceServer) {$/;"	f	package:command
RegisterNotifierServer	app/p2p/wire/notifier.pb.go	/^func RegisterNotifierServer(s *grpc.Server, srv NotifierServer) {$/;"	f	package:wire
RegisterProtocolConfigCreator	transport/internet/config.go	/^func RegisterProtocolConfigCreator(name string, creator ConfigCreator) error {$/;"	f	package:internet	typeref:typename:error
RegisterRoutingServiceServer	app/router/command/command_grpc.pb.go	/^func RegisterRoutingServiceServer(s *grpc.Server, srv RoutingServiceServer) {$/;"	f	package:command
RegisterStatsServiceServer	app/stats/command/command_grpc.pb.go	/^func RegisterStatsServiceServer(s *grpc.Server, srv StatsServiceServer) {$/;"	f	package:command
RegisterTransportDialer	transport/internet/dialer.go	/^func RegisterTransportDialer(protocol string, dialer dialFunc) error {$/;"	f	package:internet	typeref:typename:error
RegisterTransportListener	transport/internet/tcp_hub.go	/^func RegisterTransportListener(protocol string, listener ListenFunc) error {$/;"	f	package:internet	typeref:typename:error
Release	common/buf/buffer.go	/^func (b *Buffer) Release() {$/;"	f	struct:buf.Buffer
Release	transport/internet/domainsocket/listener.go	/^func (fl *fileLocker) Release() {$/;"	f	struct:domainsocket.fileLocker
Release	transport/internet/kcp/receiving.go	/^func (w *ReceivingWorker) Release() {$/;"	f	struct:kcp.ReceivingWorker
Release	transport/internet/kcp/segment.go	/^	Release()$/;"	n	interface:kcp.Segment
Release	transport/internet/kcp/segment.go	/^func (*CmdOnlySegment) Release() {}$/;"	f	struct:kcp.CmdOnlySegment
Release	transport/internet/kcp/segment.go	/^func (s *AckSegment) Release() {}$/;"	f	struct:kcp.AckSegment
Release	transport/internet/kcp/segment.go	/^func (s *DataSegment) Release() {$/;"	f	struct:kcp.DataSegment
Release	transport/internet/kcp/sending.go	/^func (sw *SendingWindow) Release() {$/;"	f	struct:kcp.SendingWindow
Release	transport/internet/kcp/sending.go	/^func (w *SendingWorker) Release() {$/;"	f	struct:kcp.SendingWorker
ReleaseMulti	common/buf/multi_buffer.go	/^func ReleaseMulti(mb MultiBuffer) MultiBuffer {$/;"	f	package:buf	typeref:typename:MultiBuffer
Remote	transport/internet/kcp/listener.go	/^	Remote net.Address$/;"	m	struct:kcp.ConnectionID	typeref:typename:net.Address
RemoteAddr	app/proxyman/inbound/worker.go	/^func (c *udpConn) RemoteAddr() net.Addr {$/;"	f	struct:inbound.udpConn	typeref:typename:net.Addr
RemoteAddr	common/net/connection.go	/^func (c *connection) RemoteAddr() net.Addr {$/;"	f	struct:net.connection	typeref:typename:net.Addr
RemoteAddr	transport/internet/kcp/connection.go	/^	RemoteAddr   net.Addr$/;"	m	struct:kcp.ConnMetadata	typeref:typename:net.Addr
RemoteAddr	transport/internet/kcp/connection.go	/^func (c *Connection) RemoteAddr() net.Addr {$/;"	f	struct:kcp.Connection	typeref:typename:net.Addr
RemoteAddr	transport/internet/quic/conn.go	/^func (c *interConn) RemoteAddr() net.Addr {$/;"	f	struct:quic.interConn	typeref:typename:net.Addr
RemoteAddr	transport/internet/system_dialer.go	/^func (c *packetConnWrapper) RemoteAddr() net.Addr {$/;"	f	struct:internet.packetConnWrapper	typeref:typename:net.Addr
RemoteAddr	transport/internet/websocket/connection.go	/^func (c *connection) RemoteAddr() net.Addr {$/;"	f	struct:websocket.connection	typeref:typename:net.Addr
Remove	common/mux/session.go	/^func (m *SessionManager) Remove(id uint16) {$/;"	f	struct:mux.SessionManager
Remove	proxy/vmess/inbound/inbound.go	/^func (v *userByEmail) Remove(email string) bool {$/;"	f	struct:inbound.userByEmail	typeref:typename:bool
Remove	proxy/vmess/validator.go	/^func (v *TimedUserValidator) Remove(email string) bool {$/;"	f	struct:vmess.TimedUserValidator	typeref:typename:bool
Remove	transport/internet/kcp/listener.go	/^func (l *Listener) Remove(id ConnectionID) {$/;"	f	struct:kcp.Listener
Remove	transport/internet/kcp/receiving.go	/^func (w *ReceivingWindow) Remove(id uint32) *DataSegment {$/;"	f	struct:kcp.ReceivingWindow	typeref:typename:*DataSegment
Remove	transport/internet/kcp/sending.go	/^func (sw *SendingWindow) Remove(number uint32) bool {$/;"	f	struct:kcp.SendingWindow	typeref:typename:bool
RemoveHandler	app/proxyman/inbound/inbound.go	/^func (m *Manager) RemoveHandler(ctx context.Context, tag string) error {$/;"	f	struct:inbound.Manager	typeref:typename:error
RemoveHandler	app/proxyman/outbound/outbound.go	/^func (m *Manager) RemoveHandler(ctx context.Context, tag string) error {$/;"	f	struct:outbound.Manager	typeref:typename:error
RemoveHandler	features/inbound/inbound.go	/^	RemoveHandler(ctx context.Context, tag string) error$/;"	n	interface:inbound.Manager	typeref:typename:error
RemoveHandler	features/outbound/outbound.go	/^	RemoveHandler(ctx context.Context, tag string) error$/;"	n	interface:outbound.Manager	typeref:typename:error
RemoveHandler	testing/mocks/outbound.go	/^func (m *OutboundManager) RemoveHandler(arg0 context.Context, arg1 string) error {$/;"	f	struct:mocks.OutboundManager	typeref:typename:error
RemoveHandler	testing/mocks/outbound.go	/^func (mr *OutboundManagerMockRecorder) RemoveHandler(arg0, arg1 interface{}) *gomock.Call {$/;"	f	struct:mocks.OutboundManagerMockRecorder	typeref:typename:*gomock.Call
RemoveHopByHopHeaders	common/protocol/http/headers.go	/^func RemoveHopByHopHeaders(header http.Header) {$/;"	f	package:http
RemoveInbound	app/proxyman/command/command.go	/^func (s *handlerServer) RemoveInbound(ctx context.Context, request *RemoveInboundRequest) (*Remo/;"	f	struct:command.handlerServer	typeref:typename:(*RemoveInboundResponse, error)
RemoveInbound	app/proxyman/command/command.proto	/^  rpc RemoveInbound(RemoveInboundRequest) returns (RemoveInboundResponse) {}$/;"	r	service:v2ray.core.app.proxyman.command.HandlerService	typeref:typename:RemoveInboundResponse
RemoveInbound	app/proxyman/command/command_grpc.pb.go	/^	RemoveInbound(context.Context, *RemoveInboundRequest) (*RemoveInboundResponse, error)$/;"	n	interface:command.HandlerServiceServer	typeref:typename:(*RemoveInboundResponse, error)
RemoveInbound	app/proxyman/command/command_grpc.pb.go	/^	RemoveInbound(ctx context.Context, in *RemoveInboundRequest, opts ...grpc.CallOption) (*RemoveI/;"	n	interface:command.HandlerServiceClient	typeref:typename:(*RemoveInboundResponse, error)
RemoveInbound	app/proxyman/command/command_grpc.pb.go	/^func (UnimplementedHandlerServiceServer) RemoveInbound(context.Context, *RemoveInboundRequest) (/;"	f	struct:command.UnimplementedHandlerServiceServer	typeref:typename:(*RemoveInboundResponse, error)
RemoveInbound	app/proxyman/command/command_grpc.pb.go	/^func (c *handlerServiceClient) RemoveInbound(ctx context.Context, in *RemoveInboundRequest, opts/;"	f	struct:command.handlerServiceClient	typeref:typename:(*RemoveInboundResponse, error)
RemoveInboundRequest	app/proxyman/command/command.pb.go	/^type RemoveInboundRequest struct {$/;"	s	package:command
RemoveInboundRequest	app/proxyman/command/command.proto	/^message RemoveInboundRequest {$/;"	m	package:v2ray.core.app.proxyman.command
RemoveInboundResponse	app/proxyman/command/command.pb.go	/^type RemoveInboundResponse struct {$/;"	s	package:command
RemoveInboundResponse	app/proxyman/command/command.proto	/^message RemoveInboundResponse {}$/;"	m	package:v2ray.core.app.proxyman.command
RemoveOutbound	app/proxyman/command/command.go	/^func (s *handlerServer) RemoveOutbound(ctx context.Context, request *RemoveOutboundRequest) (*Re/;"	f	struct:command.handlerServer	typeref:typename:(*RemoveOutboundResponse, error)
RemoveOutbound	app/proxyman/command/command.proto	/^  rpc RemoveOutbound(RemoveOutboundRequest) returns (RemoveOutboundResponse) {}$/;"	r	service:v2ray.core.app.proxyman.command.HandlerService	typeref:typename:RemoveOutboundResponse
RemoveOutbound	app/proxyman/command/command_grpc.pb.go	/^	RemoveOutbound(context.Context, *RemoveOutboundRequest) (*RemoveOutboundResponse, error)$/;"	n	interface:command.HandlerServiceServer	typeref:typename:(*RemoveOutboundResponse, error)
RemoveOutbound	app/proxyman/command/command_grpc.pb.go	/^	RemoveOutbound(ctx context.Context, in *RemoveOutboundRequest, opts ...grpc.CallOption) (*Remov/;"	n	interface:command.HandlerServiceClient	typeref:typename:(*RemoveOutboundResponse, error)
RemoveOutbound	app/proxyman/command/command_grpc.pb.go	/^func (UnimplementedHandlerServiceServer) RemoveOutbound(context.Context, *RemoveOutboundRequest)/;"	f	struct:command.UnimplementedHandlerServiceServer	typeref:typename:(*RemoveOutboundResponse, error)
RemoveOutbound	app/proxyman/command/command_grpc.pb.go	/^func (c *handlerServiceClient) RemoveOutbound(ctx context.Context, in *RemoveOutboundRequest, op/;"	f	struct:command.handlerServiceClient	typeref:typename:(*RemoveOutboundResponse, error)
RemoveOutboundRequest	app/proxyman/command/command.pb.go	/^type RemoveOutboundRequest struct {$/;"	s	package:command
RemoveOutboundRequest	app/proxyman/command/command.proto	/^message RemoveOutboundRequest {$/;"	m	package:v2ray.core.app.proxyman.command
RemoveOutboundResponse	app/proxyman/command/command.pb.go	/^type RemoveOutboundResponse struct {$/;"	s	package:command
RemoveOutboundResponse	app/proxyman/command/command.proto	/^message RemoveOutboundResponse {}$/;"	m	package:v2ray.core.app.proxyman.command
RemoveRay	transport/internet/udp/dispatcher.go	/^func (v *Dispatcher) RemoveRay(dest net.Destination) {$/;"	f	struct:udp.Dispatcher
RemoveUser	proxy/proxy.go	/^	RemoveUser(context.Context, string) error$/;"	n	interface:proxy.UserManager	typeref:typename:error
RemoveUser	proxy/vless/inbound/inbound.go	/^func (h *Handler) RemoveUser(ctx context.Context, e string) error {$/;"	f	struct:inbound.Handler	typeref:typename:error
RemoveUser	proxy/vmess/aead/authid.go	/^func (a *AuthIDDecoderHolder) RemoveUser(key [16]byte) {$/;"	f	struct:aead.AuthIDDecoderHolder
RemoveUser	proxy/vmess/inbound/inbound.go	/^func (h *Handler) RemoveUser(ctx context.Context, email string) error {$/;"	f	struct:inbound.Handler	typeref:typename:error
RemoveUserOperation	app/proxyman/command/command.pb.go	/^type RemoveUserOperation struct {$/;"	s	package:command
RemoveUserOperation	app/proxyman/command/command.proto	/^message RemoveUserOperation {$/;"	m	package:v2ray.core.app.proxyman.command
ReqID	app/dns/dnscommon.go	/^	ReqID  uint16$/;"	m	struct:dns.IPRecord	typeref:typename:uint16
Request	infra/conf/transport_authenticators.go	/^	Request  HTTPAuthenticatorRequest  `json:"request"`$/;"	m	struct:conf.HTTPAuthenticator	typeref:typename:HTTPAuthenticatorRequest
Request	proxy/shadowsocks/protocol.go	/^	Request *protocol.RequestHeader$/;"	m	struct:shadowsocks.UDPWriter	typeref:typename:*protocol.RequestHeader
Request	transport/internet/headers/http/config.pb.go	/^	Request *RequestConfig `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`$/;"	m	struct:http.Config	typeref:typename:*RequestConfig
RequestCommand	common/protocol/headers.go	/^type RequestCommand byte$/;"	t	package:protocol	typeref:typename:byte
RequestCommandMux	common/protocol/headers.go	/^	RequestCommandMux = RequestCommand(0x03)$/;"	c	package:protocol
RequestCommandTCP	common/protocol/headers.go	/^	RequestCommandTCP = RequestCommand(0x01)$/;"	c	package:protocol
RequestCommandUDP	common/protocol/headers.go	/^	RequestCommandUDP = RequestCommand(0x02)$/;"	c	package:protocol
RequestConfig	transport/internet/headers/http/config.pb.go	/^type RequestConfig struct {$/;"	s	package:http
RequestConfig	transport/internet/headers/http/config.proto	/^message RequestConfig {$/;"	m	package:v2ray.core.transport.internet.headers.http
RequestHeader	common/protocol/headers.go	/^type RequestHeader struct {$/;"	s	package:protocol
RequestHeaderFromContext	common/protocol/context.go	/^func RequestHeaderFromContext(ctx context.Context) *RequestHeader {$/;"	f	package:protocol	typeref:typename:*RequestHeader
RequestOptionChunkMasking	common/protocol/headers.go	/^	RequestOptionChunkMasking bitmask.Byte = 0x04$/;"	c	package:protocol	typeref:typename:bitmask.Byte
RequestOptionChunkStream	common/protocol/headers.go	/^	RequestOptionChunkStream bitmask.Byte = 0x01$/;"	c	package:protocol	typeref:typename:bitmask.Byte
RequestOptionConnectionReuse	common/protocol/headers.go	/^	RequestOptionConnectionReuse bitmask.Byte = 0x02$/;"	c	package:protocol	typeref:typename:bitmask.Byte
RequestOptionGlobalPadding	common/protocol/headers.go	/^	RequestOptionGlobalPadding bitmask.Byte = 0x08$/;"	c	package:protocol	typeref:typename:bitmask.Byte
RequestSeedList	app/p2p/protocol/seedlist/seedlist.go	/^func (seed *SeedListProtocol) RequestSeedList(pid peer.ID) bool {$/;"	f	struct:seedlist.SeedListProtocol	typeref:typename:bool
RequireFeatures	v2ray.go	/^func (s *Instance) RequireFeatures(callback interface{}) error {$/;"	f	struct:core.Instance	typeref:typename:error
RequireFeatures	v2ray.go	/^func RequireFeatures(ctx context.Context, callback interface{}) error {$/;"	f	package:core	typeref:typename:error
Reset	app/commander/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:commander.Config
Reset	app/dispatcher/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:dispatcher.Config
Reset	app/dispatcher/config.pb.go	/^func (x *SessionConfig) Reset() {$/;"	f	struct:dispatcher.SessionConfig
Reset	app/dns/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:dns.Config
Reset	app/dns/config.pb.go	/^func (x *Config_HostMapping) Reset() {$/;"	f	struct:dns.Config_HostMapping
Reset	app/dns/config.pb.go	/^func (x *NameServer) Reset() {$/;"	f	struct:dns.NameServer
Reset	app/dns/config.pb.go	/^func (x *NameServer_OriginalRule) Reset() {$/;"	f	struct:dns.NameServer_OriginalRule
Reset	app/dns/config.pb.go	/^func (x *NameServer_PriorityDomain) Reset() {$/;"	f	struct:dns.NameServer_PriorityDomain
Reset	app/log/command/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:command.Config
Reset	app/log/command/config.pb.go	/^func (x *RestartLoggerRequest) Reset() {$/;"	f	struct:command.RestartLoggerRequest
Reset	app/log/command/config.pb.go	/^func (x *RestartLoggerResponse) Reset() {$/;"	f	struct:command.RestartLoggerResponse
Reset	app/log/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:log.Config
Reset	app/p2p/config.pb.go	/^func (m *Config) Reset()         { *m = Config{} }$/;"	f	struct:p2p.Config
Reset	app/p2p/config.pb.go	/^func (m *Seed) Reset()         { *m = Seed{} }$/;"	f	struct:p2p.Seed
Reset	app/p2p/wire/notifier.pb.go	/^func (m *HelloReply) Reset()         { *m = HelloReply{} }$/;"	f	struct:wire.HelloReply
Reset	app/p2p/wire/notifier.pb.go	/^func (m *HelloRequest) Reset()         { *m = HelloRequest{} }$/;"	f	struct:wire.HelloRequest
Reset	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) Reset()      { *m = HelloSeedList{} }$/;"	f	struct:wire.HelloSeedList
Reset	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) Reset()      { *m = MessageData{} }$/;"	f	struct:wire.MessageData
Reset	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) Reset()      { *m = SeedInfo{} }$/;"	f	struct:wire.SeedInfo
Reset	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListRequest) Reset()      { *m = SeedListRequest{} }$/;"	f	struct:wire.SeedListRequest
Reset	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListResponse) Reset()      { *m = SeedListResponse{} }$/;"	f	struct:wire.SeedListResponse
Reset	app/policy/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:policy.Config
Reset	app/policy/config.pb.go	/^func (x *Policy) Reset() {$/;"	f	struct:policy.Policy
Reset	app/policy/config.pb.go	/^func (x *Policy_Buffer) Reset() {$/;"	f	struct:policy.Policy_Buffer
Reset	app/policy/config.pb.go	/^func (x *Policy_Stats) Reset() {$/;"	f	struct:policy.Policy_Stats
Reset	app/policy/config.pb.go	/^func (x *Policy_Timeout) Reset() {$/;"	f	struct:policy.Policy_Timeout
Reset	app/policy/config.pb.go	/^func (x *Second) Reset() {$/;"	f	struct:policy.Second
Reset	app/policy/config.pb.go	/^func (x *SystemPolicy) Reset() {$/;"	f	struct:policy.SystemPolicy
Reset	app/policy/config.pb.go	/^func (x *SystemPolicy_Stats) Reset() {$/;"	f	struct:policy.SystemPolicy_Stats
Reset	app/proxyman/command/command.pb.go	/^func (x *AddInboundRequest) Reset() {$/;"	f	struct:command.AddInboundRequest
Reset	app/proxyman/command/command.pb.go	/^func (x *AddInboundResponse) Reset() {$/;"	f	struct:command.AddInboundResponse
Reset	app/proxyman/command/command.pb.go	/^func (x *AddOutboundRequest) Reset() {$/;"	f	struct:command.AddOutboundRequest
Reset	app/proxyman/command/command.pb.go	/^func (x *AddOutboundResponse) Reset() {$/;"	f	struct:command.AddOutboundResponse
Reset	app/proxyman/command/command.pb.go	/^func (x *AddUserOperation) Reset() {$/;"	f	struct:command.AddUserOperation
Reset	app/proxyman/command/command.pb.go	/^func (x *AlterInboundRequest) Reset() {$/;"	f	struct:command.AlterInboundRequest
Reset	app/proxyman/command/command.pb.go	/^func (x *AlterInboundResponse) Reset() {$/;"	f	struct:command.AlterInboundResponse
Reset	app/proxyman/command/command.pb.go	/^func (x *AlterOutboundRequest) Reset() {$/;"	f	struct:command.AlterOutboundRequest
Reset	app/proxyman/command/command.pb.go	/^func (x *AlterOutboundResponse) Reset() {$/;"	f	struct:command.AlterOutboundResponse
Reset	app/proxyman/command/command.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:command.Config
Reset	app/proxyman/command/command.pb.go	/^func (x *RemoveInboundRequest) Reset() {$/;"	f	struct:command.RemoveInboundRequest
Reset	app/proxyman/command/command.pb.go	/^func (x *RemoveInboundResponse) Reset() {$/;"	f	struct:command.RemoveInboundResponse
Reset	app/proxyman/command/command.pb.go	/^func (x *RemoveOutboundRequest) Reset() {$/;"	f	struct:command.RemoveOutboundRequest
Reset	app/proxyman/command/command.pb.go	/^func (x *RemoveOutboundResponse) Reset() {$/;"	f	struct:command.RemoveOutboundResponse
Reset	app/proxyman/command/command.pb.go	/^func (x *RemoveUserOperation) Reset() {$/;"	f	struct:command.RemoveUserOperation
Reset	app/proxyman/config.pb.go	/^func (x *AllocationStrategy) Reset() {$/;"	f	struct:proxyman.AllocationStrategy
Reset	app/proxyman/config.pb.go	/^func (x *AllocationStrategy_AllocationStrategyConcurrency) Reset() {$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyConcurrency
Reset	app/proxyman/config.pb.go	/^func (x *AllocationStrategy_AllocationStrategyRefresh) Reset() {$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyRefresh
Reset	app/proxyman/config.pb.go	/^func (x *InboundConfig) Reset() {$/;"	f	struct:proxyman.InboundConfig
Reset	app/proxyman/config.pb.go	/^func (x *InboundHandlerConfig) Reset() {$/;"	f	struct:proxyman.InboundHandlerConfig
Reset	app/proxyman/config.pb.go	/^func (x *MultiplexingConfig) Reset() {$/;"	f	struct:proxyman.MultiplexingConfig
Reset	app/proxyman/config.pb.go	/^func (x *OutboundConfig) Reset() {$/;"	f	struct:proxyman.OutboundConfig
Reset	app/proxyman/config.pb.go	/^func (x *ReceiverConfig) Reset() {$/;"	f	struct:proxyman.ReceiverConfig
Reset	app/proxyman/config.pb.go	/^func (x *SenderConfig) Reset() {$/;"	f	struct:proxyman.SenderConfig
Reset	app/proxyman/config.pb.go	/^func (x *SniffingConfig) Reset() {$/;"	f	struct:proxyman.SniffingConfig
Reset	app/reverse/config.pb.go	/^func (x *BridgeConfig) Reset() {$/;"	f	struct:reverse.BridgeConfig
Reset	app/reverse/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:reverse.Config
Reset	app/reverse/config.pb.go	/^func (x *Control) Reset() {$/;"	f	struct:reverse.Control
Reset	app/reverse/config.pb.go	/^func (x *PortalConfig) Reset() {$/;"	f	struct:reverse.PortalConfig
Reset	app/router/command/command.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:command.Config
Reset	app/router/command/command.pb.go	/^func (x *RoutingContext) Reset() {$/;"	f	struct:command.RoutingContext
Reset	app/router/command/command.pb.go	/^func (x *SubscribeRoutingStatsRequest) Reset() {$/;"	f	struct:command.SubscribeRoutingStatsRequest
Reset	app/router/command/command.pb.go	/^func (x *TestRouteRequest) Reset() {$/;"	f	struct:command.TestRouteRequest
Reset	app/router/config.pb.go	/^func (x *BalancingRule) Reset() {$/;"	f	struct:router.BalancingRule
Reset	app/router/config.pb.go	/^func (x *CIDR) Reset() {$/;"	f	struct:router.CIDR
Reset	app/router/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:router.Config
Reset	app/router/config.pb.go	/^func (x *Domain) Reset() {$/;"	f	struct:router.Domain
Reset	app/router/config.pb.go	/^func (x *Domain_Attribute) Reset() {$/;"	f	struct:router.Domain_Attribute
Reset	app/router/config.pb.go	/^func (x *GeoIP) Reset() {$/;"	f	struct:router.GeoIP
Reset	app/router/config.pb.go	/^func (x *GeoIPList) Reset() {$/;"	f	struct:router.GeoIPList
Reset	app/router/config.pb.go	/^func (x *GeoSite) Reset() {$/;"	f	struct:router.GeoSite
Reset	app/router/config.pb.go	/^func (x *GeoSiteList) Reset() {$/;"	f	struct:router.GeoSiteList
Reset	app/router/config.pb.go	/^func (x *RoutingRule) Reset() {$/;"	f	struct:router.RoutingRule
Reset	app/stats/command/command.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:command.Config
Reset	app/stats/command/command.pb.go	/^func (x *GetStatsRequest) Reset() {$/;"	f	struct:command.GetStatsRequest
Reset	app/stats/command/command.pb.go	/^func (x *GetStatsResponse) Reset() {$/;"	f	struct:command.GetStatsResponse
Reset	app/stats/command/command.pb.go	/^func (x *QueryStatsRequest) Reset() {$/;"	f	struct:command.QueryStatsRequest
Reset	app/stats/command/command.pb.go	/^func (x *QueryStatsResponse) Reset() {$/;"	f	struct:command.QueryStatsResponse
Reset	app/stats/command/command.pb.go	/^func (x *Stat) Reset() {$/;"	f	struct:command.Stat
Reset	app/stats/command/command.pb.go	/^func (x *SysStatsRequest) Reset() {$/;"	f	struct:command.SysStatsRequest
Reset	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) Reset() {$/;"	f	struct:command.SysStatsResponse
Reset	app/stats/config.pb.go	/^func (x *ChannelConfig) Reset() {$/;"	f	struct:stats.ChannelConfig
Reset	app/stats/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:stats.Config
Reset	common/net/address.pb.go	/^func (x *IPOrDomain) Reset() {$/;"	f	struct:net.IPOrDomain
Reset	common/net/destination.pb.go	/^func (x *Endpoint) Reset() {$/;"	f	struct:net.Endpoint
Reset	common/net/network.pb.go	/^func (x *NetworkList) Reset() {$/;"	f	struct:net.NetworkList
Reset	common/net/port.pb.go	/^func (x *PortList) Reset() {$/;"	f	struct:net.PortList
Reset	common/net/port.pb.go	/^func (x *PortRange) Reset() {$/;"	f	struct:net.PortRange
Reset	common/protocol/headers.pb.go	/^func (x *SecurityConfig) Reset() {$/;"	f	struct:protocol.SecurityConfig
Reset	common/protocol/server_spec.pb.go	/^func (x *ServerEndpoint) Reset() {$/;"	f	struct:protocol.ServerEndpoint
Reset	common/protocol/user.pb.go	/^func (x *User) Reset() {$/;"	f	struct:protocol.User
Reset	common/serial/typed_message.pb.go	/^func (x *TypedMessage) Reset() {$/;"	f	struct:serial.TypedMessage
Reset	config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:core.Config
Reset	config.pb.go	/^func (x *InboundHandlerConfig) Reset() {$/;"	f	struct:core.InboundHandlerConfig
Reset	config.pb.go	/^func (x *OutboundHandlerConfig) Reset() {$/;"	f	struct:core.OutboundHandlerConfig
Reset	proxy/blackhole/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:blackhole.Config
Reset	proxy/blackhole/config.pb.go	/^func (x *HTTPResponse) Reset() {$/;"	f	struct:blackhole.HTTPResponse
Reset	proxy/blackhole/config.pb.go	/^func (x *NoneResponse) Reset() {$/;"	f	struct:blackhole.NoneResponse
Reset	proxy/dns/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:dns.Config
Reset	proxy/dokodemo/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:dokodemo.Config
Reset	proxy/freedom/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:freedom.Config
Reset	proxy/freedom/config.pb.go	/^func (x *DestinationOverride) Reset() {$/;"	f	struct:freedom.DestinationOverride
Reset	proxy/http/config.pb.go	/^func (x *Account) Reset() {$/;"	f	struct:http.Account
Reset	proxy/http/config.pb.go	/^func (x *ClientConfig) Reset() {$/;"	f	struct:http.ClientConfig
Reset	proxy/http/config.pb.go	/^func (x *ServerConfig) Reset() {$/;"	f	struct:http.ServerConfig
Reset	proxy/mtproto/config.pb.go	/^func (x *Account) Reset() {$/;"	f	struct:mtproto.Account
Reset	proxy/mtproto/config.pb.go	/^func (x *ClientConfig) Reset() {$/;"	f	struct:mtproto.ClientConfig
Reset	proxy/mtproto/config.pb.go	/^func (x *ServerConfig) Reset() {$/;"	f	struct:mtproto.ServerConfig
Reset	proxy/shadowsocks/config.pb.go	/^func (x *Account) Reset() {$/;"	f	struct:shadowsocks.Account
Reset	proxy/shadowsocks/config.pb.go	/^func (x *ClientConfig) Reset() {$/;"	f	struct:shadowsocks.ClientConfig
Reset	proxy/shadowsocks/config.pb.go	/^func (x *ServerConfig) Reset() {$/;"	f	struct:shadowsocks.ServerConfig
Reset	proxy/socks/config.pb.go	/^func (x *Account) Reset() {$/;"	f	struct:socks.Account
Reset	proxy/socks/config.pb.go	/^func (x *ClientConfig) Reset() {$/;"	f	struct:socks.ClientConfig
Reset	proxy/socks/config.pb.go	/^func (x *ServerConfig) Reset() {$/;"	f	struct:socks.ServerConfig
Reset	proxy/trojan/config.pb.go	/^func (x *Account) Reset() {$/;"	f	struct:trojan.Account
Reset	proxy/trojan/config.pb.go	/^func (x *ClientConfig) Reset() {$/;"	f	struct:trojan.ClientConfig
Reset	proxy/trojan/config.pb.go	/^func (x *Fallback) Reset() {$/;"	f	struct:trojan.Fallback
Reset	proxy/trojan/config.pb.go	/^func (x *ServerConfig) Reset() {$/;"	f	struct:trojan.ServerConfig
Reset	proxy/vless/account.pb.go	/^func (x *Account) Reset() {$/;"	f	struct:vless.Account
Reset	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) Reset()         { *m = Addons{} }$/;"	f	struct:encoding.Addons
Reset	proxy/vless/inbound/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:inbound.Config
Reset	proxy/vless/inbound/config.pb.go	/^func (x *Fallback) Reset() {$/;"	f	struct:inbound.Fallback
Reset	proxy/vless/outbound/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:outbound.Config
Reset	proxy/vmess/account.pb.go	/^func (x *Account) Reset() {$/;"	f	struct:vmess.Account
Reset	proxy/vmess/inbound/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:inbound.Config
Reset	proxy/vmess/inbound/config.pb.go	/^func (x *DefaultConfig) Reset() {$/;"	f	struct:inbound.DefaultConfig
Reset	proxy/vmess/inbound/config.pb.go	/^func (x *DetourConfig) Reset() {$/;"	f	struct:inbound.DetourConfig
Reset	proxy/vmess/outbound/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:outbound.Config
Reset	transport/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:transport.Config
Reset	transport/internet/config.pb.go	/^func (x *ProxyConfig) Reset() {$/;"	f	struct:internet.ProxyConfig
Reset	transport/internet/config.pb.go	/^func (x *SocketConfig) Reset() {$/;"	f	struct:internet.SocketConfig
Reset	transport/internet/config.pb.go	/^func (x *StreamConfig) Reset() {$/;"	f	struct:internet.StreamConfig
Reset	transport/internet/config.pb.go	/^func (x *TransportConfig) Reset() {$/;"	f	struct:internet.TransportConfig
Reset	transport/internet/domainsocket/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:domainsocket.Config
Reset	transport/internet/headers/http/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:http.Config
Reset	transport/internet/headers/http/config.pb.go	/^func (x *Header) Reset() {$/;"	f	struct:http.Header
Reset	transport/internet/headers/http/config.pb.go	/^func (x *Method) Reset() {$/;"	f	struct:http.Method
Reset	transport/internet/headers/http/config.pb.go	/^func (x *RequestConfig) Reset() {$/;"	f	struct:http.RequestConfig
Reset	transport/internet/headers/http/config.pb.go	/^func (x *ResponseConfig) Reset() {$/;"	f	struct:http.ResponseConfig
Reset	transport/internet/headers/http/config.pb.go	/^func (x *Status) Reset() {$/;"	f	struct:http.Status
Reset	transport/internet/headers/http/config.pb.go	/^func (x *Version) Reset() {$/;"	f	struct:http.Version
Reset	transport/internet/headers/noop/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:noop.Config
Reset	transport/internet/headers/noop/config.pb.go	/^func (x *ConnectionConfig) Reset() {$/;"	f	struct:noop.ConnectionConfig
Reset	transport/internet/headers/srtp/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:srtp.Config
Reset	transport/internet/headers/tls/config.pb.go	/^func (x *PacketConfig) Reset() {$/;"	f	struct:tls.PacketConfig
Reset	transport/internet/headers/utp/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:utp.Config
Reset	transport/internet/headers/wechat/config.pb.go	/^func (x *VideoConfig) Reset() {$/;"	f	struct:wechat.VideoConfig
Reset	transport/internet/headers/wireguard/config.pb.go	/^func (x *WireguardConfig) Reset() {$/;"	f	struct:wireguard.WireguardConfig
Reset	transport/internet/http/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:http.Config
Reset	transport/internet/kcp/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:kcp.Config
Reset	transport/internet/kcp/config.pb.go	/^func (x *ConnectionReuse) Reset() {$/;"	f	struct:kcp.ConnectionReuse
Reset	transport/internet/kcp/config.pb.go	/^func (x *DownlinkCapacity) Reset() {$/;"	f	struct:kcp.DownlinkCapacity
Reset	transport/internet/kcp/config.pb.go	/^func (x *EncryptionSeed) Reset() {$/;"	f	struct:kcp.EncryptionSeed
Reset	transport/internet/kcp/config.pb.go	/^func (x *MTU) Reset() {$/;"	f	struct:kcp.MTU
Reset	transport/internet/kcp/config.pb.go	/^func (x *ReadBuffer) Reset() {$/;"	f	struct:kcp.ReadBuffer
Reset	transport/internet/kcp/config.pb.go	/^func (x *TTI) Reset() {$/;"	f	struct:kcp.TTI
Reset	transport/internet/kcp/config.pb.go	/^func (x *UplinkCapacity) Reset() {$/;"	f	struct:kcp.UplinkCapacity
Reset	transport/internet/kcp/config.pb.go	/^func (x *WriteBuffer) Reset() {$/;"	f	struct:kcp.WriteBuffer
Reset	transport/internet/quic/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:quic.Config
Reset	transport/internet/tcp/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:tcp.Config
Reset	transport/internet/tls/config.pb.go	/^func (x *Certificate) Reset() {$/;"	f	struct:tls.Certificate
Reset	transport/internet/tls/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:tls.Config
Reset	transport/internet/udp/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:udp.Config
Reset	transport/internet/websocket/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:websocket.Config
Reset	transport/internet/websocket/config.pb.go	/^func (x *Header) Reset() {$/;"	f	struct:websocket.Header
Reset	transport/internet/xtls/config.pb.go	/^func (x *Certificate) Reset() {$/;"	f	struct:xtls.Certificate
Reset	transport/internet/xtls/config.pb.go	/^func (x *Config) Reset() {$/;"	f	struct:xtls.Config
Reset_	app/stats/command/command.pb.go	/^	Reset_  bool   `protobuf:"varint,2,opt,name=reset,proto3" json:"reset,omitempty"`$/;"	m	struct:command.QueryStatsRequest	typeref:typename:bool
Reset_	app/stats/command/command.pb.go	/^	Reset_ bool `protobuf:"varint,2,opt,name=reset,proto3" json:"reset,omitempty"`$/;"	m	struct:command.GetStatsRequest	typeref:typename:bool
Resize	common/buf/buffer.go	/^func (b *Buffer) Resize(from, to int32) {$/;"	f	struct:buf.Buffer
ResolvableContext	features/routing/dns/context.go	/^type ResolvableContext struct {$/;"	s	package:dns
ResolveUDPAddr	common/net/system.go	/^var ResolveUDPAddr = net.ResolveUDPAddr$/;"	v	package:net
ResolveUnixAddr	common/net/system.go	/^var ResolveUnixAddr = net.ResolveUnixAddr$/;"	v	package:net
Resolver	common/net/system.go	/^type Resolver = net.Resolver$/;"	a	package:net	typeref:typename:net.Resolver
Response	infra/conf/blackhole.go	/^	Response json.RawMessage `json:"response"`$/;"	m	struct:conf.BlackholeConfig	typeref:typename:json.RawMessage
Response	infra/conf/transport_authenticators.go	/^	Response HTTPAuthenticatorResponse `json:"response"`$/;"	m	struct:conf.HTTPAuthenticator	typeref:typename:HTTPAuthenticatorResponse
Response	proxy/blackhole/config.pb.go	/^	Response *serial.TypedMessage `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omite/;"	m	struct:blackhole.Config	typeref:typename:*serial.TypedMessage
Response	transport/internet/headers/http/config.pb.go	/^	Response *ResponseConfig `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"/;"	m	struct:http.Config	typeref:typename:*ResponseConfig
ResponseCallback	transport/internet/udp/dispatcher.go	/^type ResponseCallback func(ctx context.Context, packet *udp.Packet)$/;"	t	package:udp	typeref:typename:func(ctx context.Context, packet *udp.Packet)
ResponseCommand	common/protocol/headers.go	/^type ResponseCommand interface{}$/;"	i	package:protocol
ResponseConfig	proxy/blackhole/config.go	/^type ResponseConfig interface {$/;"	i	package:blackhole
ResponseConfig	transport/internet/headers/http/config.pb.go	/^type ResponseConfig struct {$/;"	s	package:http
ResponseConfig	transport/internet/headers/http/config.proto	/^message ResponseConfig {$/;"	m	package:v2ray.core.transport.internet.headers.http
ResponseHeader	common/protocol/headers.go	/^type ResponseHeader struct {$/;"	s	package:protocol
ResponseOptionConnectionReuse	common/protocol/headers.go	/^	ResponseOptionConnectionReuse bitmask.Byte = 0x01$/;"	c	package:protocol	typeref:typename:bitmask.Byte
Restart	release/config/systemd/system/v2ray.service	/^Restart=on-failure$/;"	k	section:Service
Restart	release/config/systemd/system/v2ray@.service	/^Restart=on-failure$/;"	k	section:Service
RestartLogger	app/log/command/command.go	/^func (s *LoggerServer) RestartLogger(ctx context.Context, request *RestartLoggerRequest) (*Resta/;"	f	struct:command.LoggerServer	typeref:typename:(*RestartLoggerResponse, error)
RestartLogger	app/log/command/config.proto	/^  rpc RestartLogger(RestartLoggerRequest) returns (RestartLoggerResponse) {}$/;"	r	service:v2ray.core.app.log.command.LoggerService	typeref:typename:RestartLoggerResponse
RestartLogger	app/log/command/config_grpc.pb.go	/^	RestartLogger(context.Context, *RestartLoggerRequest) (*RestartLoggerResponse, error)$/;"	n	interface:command.LoggerServiceServer	typeref:typename:(*RestartLoggerResponse, error)
RestartLogger	app/log/command/config_grpc.pb.go	/^	RestartLogger(ctx context.Context, in *RestartLoggerRequest, opts ...grpc.CallOption) (*Restart/;"	n	interface:command.LoggerServiceClient	typeref:typename:(*RestartLoggerResponse, error)
RestartLogger	app/log/command/config_grpc.pb.go	/^func (UnimplementedLoggerServiceServer) RestartLogger(context.Context, *RestartLoggerRequest) (*/;"	f	struct:command.UnimplementedLoggerServiceServer	typeref:typename:(*RestartLoggerResponse, error)
RestartLogger	app/log/command/config_grpc.pb.go	/^func (c *loggerServiceClient) RestartLogger(ctx context.Context, in *RestartLoggerRequest, opts /;"	f	struct:command.loggerServiceClient	typeref:typename:(*RestartLoggerResponse, error)
RestartLoggerRequest	app/log/command/config.pb.go	/^type RestartLoggerRequest struct {$/;"	s	package:command
RestartLoggerRequest	app/log/command/config.proto	/^message RestartLoggerRequest {}$/;"	m	package:v2ray.core.app.log.command
RestartLoggerResponse	app/log/command/config.pb.go	/^type RestartLoggerResponse struct {$/;"	s	package:command
RestartLoggerResponse	app/log/command/config.proto	/^message RestartLoggerResponse {}$/;"	m	package:v2ray.core.app.log.command
RestartPreventExitStatus	release/config/systemd/system/v2ray.service	/^RestartPreventExitStatus=23$/;"	k	section:Service
RestartPreventExitStatus	release/config/systemd/system/v2ray@.service	/^RestartPreventExitStatus=23$/;"	k	section:Service
RetrieveOriginalDest	transport/internet/udp/hub_freebsd.go	/^func RetrieveOriginalDest(oob []byte) net.Destination {$/;"	f	package:udp	typeref:typename:net.Destination
RetrieveOriginalDest	transport/internet/udp/hub_linux.go	/^func RetrieveOriginalDest(oob []byte) net.Destination {$/;"	f	package:udp	typeref:typename:net.Destination
RetrieveOriginalDest	transport/internet/udp/hub_other.go	/^func RetrieveOriginalDest(oob []byte) net.Destination {$/;"	f	package:udp	typeref:typename:net.Destination
RetryableWriter	transport/internet/kcp/output.go	/^type RetryableWriter struct {$/;"	s	package:kcp
Reverse	app/reverse/reverse.go	/^type Reverse struct {$/;"	s	package:reverse
Reverse	infra/conf/v2ray.go	/^	Reverse         *ReverseConfig         `json:"reverse"`$/;"	m	struct:conf.Config	typeref:typename:*ReverseConfig
ReverseConfig	infra/conf/reverse.go	/^type ReverseConfig struct {$/;"	s	package:conf
Roll	common/dice/dice.go	/^func (dd *deterministicDice) Roll(n int) int {$/;"	f	struct:dice.deterministicDice	typeref:typename:int
Roll	common/dice/dice.go	/^func Roll(n int) int {$/;"	f	package:dice	typeref:typename:int
RollDeterministic	common/dice/dice.go	/^func RollDeterministic(n int, seed int64) int {$/;"	f	package:dice	typeref:typename:int
RollUint16	common/dice/dice.go	/^func RollUint16() uint16 {$/;"	f	package:dice	typeref:typename:uint16
RollUint64	common/dice/dice.go	/^func RollUint64() uint64 {$/;"	f	package:dice	typeref:typename:uint64
RoundRobinServerPicker	common/protocol/server_picker.go	/^type RoundRobinServerPicker struct {$/;"	s	package:protocol
RoundTripInfo	transport/internet/kcp/connection.go	/^type RoundTripInfo struct {$/;"	s	package:kcp
Route	app/router/router.go	/^type Route struct {$/;"	s	package:router
Route	features/routing/router.go	/^type Route interface {$/;"	i	package:routing
Router	app/router/router.go	/^type Router struct {$/;"	s	package:router
Router	features/routing/router.go	/^type Router interface {$/;"	i	package:routing
RouterConfig	infra/conf/router.go	/^type RouterConfig struct {$/;"	s	package:conf
RouterConfig	infra/conf/v2ray.go	/^	RouterConfig    *RouterConfig          `json:"routing"`$/;"	m	struct:conf.Config	typeref:typename:*RouterConfig
RouterRule	infra/conf/router.go	/^type RouterRule struct {$/;"	s	package:conf
RouterRulesConfig	infra/conf/router.go	/^type RouterRulesConfig struct {$/;"	s	package:conf
RouterType	features/routing/router.go	/^func RouterType() interface{} {$/;"	f	package:routing	typeref:typename:interface{}
RoutingContext	app/router/command/command.pb.go	/^	RoutingContext *RoutingContext `protobuf:"bytes,1,opt,name=RoutingContext,proto3" json:"Routing/;"	m	struct:command.TestRouteRequest	typeref:typename:*RoutingContext
RoutingContext	app/router/command/command.pb.go	/^type RoutingContext struct {$/;"	s	package:command
RoutingContext	app/router/command/command.proto	/^  RoutingContext RoutingContext = 1;$/;"	f	message:v2ray.core.app.router.command.TestRouteRequest	typeref:typename:RoutingContext
RoutingContext	app/router/command/command.proto	/^message RoutingContext {$/;"	m	package:v2ray.core.app.router.command
RoutingContext	app/router/command/config.go	/^	*RoutingContext$/;"	M	struct:command.routingContext	typeref:typename:*RoutingContext
RoutingRule	app/router/config.pb.go	/^type RoutingRule struct {$/;"	s	package:router
RoutingRule	app/router/config.proto	/^message RoutingRule {$/;"	m	package:v2ray.core.app.router
RoutingRule_BalancingTag	app/router/config.pb.go	/^type RoutingRule_BalancingTag struct {$/;"	s	package:router
RoutingRule_Tag	app/router/config.pb.go	/^type RoutingRule_Tag struct {$/;"	s	package:router
RoutingService	app/router/command/command.proto	/^service RoutingService {$/;"	s	package:v2ray.core.app.router.command
RoutingServiceClient	app/router/command/command_grpc.pb.go	/^type RoutingServiceClient interface {$/;"	i	package:command
RoutingServiceServer	app/router/command/command_grpc.pb.go	/^type RoutingServiceServer interface {$/;"	i	package:command
RoutingService_SubscribeRoutingStatsClient	app/router/command/command_grpc.pb.go	/^type RoutingService_SubscribeRoutingStatsClient interface {$/;"	i	package:command
RoutingService_SubscribeRoutingStatsServer	app/router/command/command_grpc.pb.go	/^type RoutingService_SubscribeRoutingStatsServer interface {$/;"	i	package:command
Rsaddr	transport/internet/sockopt_freebsd.go	/^	Rsaddr    [16]byte \/* pf_addr *\/$/;"	m	struct:internet.pfiocNatlook	typeref:typename:[16]byte
Rsport	transport/internet/sockopt_freebsd.go	/^	Rsport    uint16$/;"	m	struct:internet.pfiocNatlook	typeref:typename:uint16
Rule	app/dns/config.pb.go	/^	Rule string `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`$/;"	m	struct:dns.NameServer_OriginalRule	typeref:typename:string
Rule	app/router/config.go	/^type Rule struct {$/;"	s	package:router
Rule	app/router/config.pb.go	/^	Rule           []*RoutingRule        `protobuf:"bytes,2,rep,name=rule,proto3" json:"rule,omitem/;"	m	struct:router.Config	typeref:typename:[]*RoutingRule
RuleList	infra/conf/router.go	/^	RuleList       []json.RawMessage  `json:"rules"`$/;"	m	struct:conf.RouterConfig	typeref:typename:[]json.RawMessage
RuleList	infra/conf/router.go	/^	RuleList       []json.RawMessage `json:"rules"`$/;"	m	struct:conf.RouterRulesConfig	typeref:typename:[]json.RawMessage
Run	common/platform/ctlcmd/ctlcmd.go	/^func Run(args []string, input io.Reader) (buf.MultiBuffer, error) {$/;"	f	package:ctlcmd	typeref:typename:(buf.MultiBuffer, error)
Run	common/task/task.go	/^func Run(ctx context.Context, tasks ...func() error) error {$/;"	f	package:task	typeref:typename:error
RunV2RayProtobuf	testing/scenarios/common_coverage.go	/^func RunV2RayProtobuf(config []byte) *exec.Cmd {$/;"	f	package:scenarios	typeref:typename:*exec.Cmd
RunV2RayProtobuf	testing/scenarios/common_regular.go	/^func RunV2RayProtobuf(config []byte) *exec.Cmd {$/;"	f	package:scenarios	typeref:typename:*exec.Cmd
Runnable	common/interfaces.go	/^type Runnable interface {$/;"	i	package:common
Running	app/stats/channel.go	/^func (c *Channel) Running() bool {$/;"	f	struct:stats.Channel	typeref:typename:bool
SEED_OFFLINE	app/p2p/wire/seedlist.proto	/^    SEED_OFFLINE = 1;$/;"	e	enum:wire.ActionType
SEED_ONLINE	app/p2p/wire/seedlist.proto	/^    SEED_ONLINE = 0;$/;"	e	enum:wire.ActionType
SEED_SUSPEND	app/p2p/wire/seedlist.proto	/^    SEED_SUSPEND = 2;$/;"	e	enum:wire.ActionType
SEED_UPDATE	app/p2p/wire/seedlist.proto	/^    SEED_UPDATE = 3;$/;"	e	enum:wire.ActionType
SO_ORIGINAL_DST	transport/internet/tcp/sockopt_linux.go	/^const SO_ORIGINAL_DST = 80$/;"	c	package:tcp
SQLiteStorage	store/sqlite.go	/^type SQLiteStorage struct {$/;"	s	package:store
SRTP	transport/internet/headers/srtp/srtp.go	/^type SRTP struct {$/;"	s	package:srtp
SRTPAuthenticator	infra/conf/transport_authenticators.go	/^type SRTPAuthenticator struct{}$/;"	s	package:conf
Saddr	transport/internet/sockopt_freebsd.go	/^	Saddr     [16]byte \/* pf_addr *\/$/;"	m	struct:internet.pfiocNatlook	typeref:typename:[16]byte
SayHello	app/p2p/api.go	/^func (s *gRpcService) SayHello(ctx context.Context, in *wire.HelloSeedList) (*wire.HelloReply, e/;"	f	struct:p2p.gRpcService	typeref:typename:(*wire.HelloReply, error)
SayHello	app/p2p/wire/notifier.pb.go	/^	SayHello(context.Context, *HelloSeedList) (*HelloReply, error)$/;"	n	interface:wire.NotifierServer	typeref:typename:(*HelloReply, error)
SayHello	app/p2p/wire/notifier.pb.go	/^	SayHello(ctx context.Context, in *HelloSeedList, opts ...grpc.CallOption) (*HelloReply, error)$/;"	n	interface:wire.NotifierClient	typeref:typename:(*HelloReply, error)
SayHello	app/p2p/wire/notifier.pb.go	/^func (c *notifierClient) SayHello(ctx context.Context, in *HelloSeedList, opts ...grpc.CallOptio/;"	f	struct:wire.notifierClient	typeref:typename:(*HelloReply, error)
SayHello	app/p2p/wire/notifier.proto	/^    rpc SayHello (HelloSeedList) returns (HelloReply) {}$/;"	r	service:wire.Notifier	typeref:typename:HelloReply
Scope	.github/CODE_OF_CONDUCT.md	/^## Scope$/;"	s	chapter:Contributor Covenant Code of Conduct
ScriptCreateTables	store/utils.go	/^const ScriptCreateTables string = `PRAGMA foreign_keys=off;$/;"	c	package:store	typeref:typename:string
Seal	common/crypto/auth.go	/^	Seal(dst, plainText []byte) ([]byte, error)$/;"	n	interface:crypto.Authenticator	typeref:typename:([]byte, error)
Seal	common/crypto/auth.go	/^func (v *AEADAuthenticator) Seal(dst, plainText []byte) ([]byte, error) {$/;"	f	struct:crypto.AEADAuthenticator	typeref:typename:([]byte, error)
Seal	proxy/vmess/encoding/auth.go	/^func (*FnvAuthenticator) Seal(dst, nonce, plaintext, additionalData []byte) []byte {$/;"	f	struct:encoding.FnvAuthenticator	typeref:typename:[]byte
Seal	proxy/vmess/encoding/auth.go	/^func (NoOpAuthenticator) Seal(dst, nonce, plaintext, additionalData []byte) []byte {$/;"	f	struct:encoding.NoOpAuthenticator	typeref:typename:[]byte
Seal	transport/internet/kcp/crypt.go	/^func (a *SimpleAuthenticator) Seal(dst, nonce, plain, extra []byte) []byte {$/;"	f	struct:kcp.SimpleAuthenticator	typeref:typename:[]byte
SealVMessAEADHeader	proxy/vmess/aead/encrypt.go	/^func SealVMessAEADHeader(key [16]byte, data []byte) []byte {$/;"	f	package:aead	typeref:typename:[]byte
Second	app/policy/config.pb.go	/^type Second struct {$/;"	s	package:policy
Second	app/policy/config.proto	/^message Second {$/;"	m	package:v2ray.core.app.policy
Secret	infra/conf/mtproto.go	/^	Secret string `json:"secret"`$/;"	m	struct:conf.MTProtoAccount	typeref:typename:string
Secret	proxy/mtproto/config.pb.go	/^	Secret []byte `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`$/;"	m	struct:mtproto.Account	typeref:typename:[]byte
SecureEncryptionOnly	proxy/vmess/inbound/config.pb.go	/^	SecureEncryptionOnly bool             `protobuf:"varint,4,opt,name=secure_encryption_only,json=/;"	m	struct:inbound.Config	typeref:typename:bool
SecureOnly	infra/conf/vmess.go	/^	SecureOnly   bool                `json:"disableInsecureEncryption"`$/;"	m	struct:conf.VMessInboundConfig	typeref:typename:bool
Security	common/protocol/headers.go	/^	Security SecurityType$/;"	m	struct:protocol.RequestHeader	typeref:typename:SecurityType
Security	infra/conf/transport_internet.go	/^	Security       string              `json:"security"`$/;"	m	struct:conf.StreamConfig	typeref:typename:string
Security	infra/conf/transport_internet.go	/^	Security string          `json:"security"`$/;"	m	struct:conf.QUICConfig	typeref:typename:string
Security	infra/conf/vmess.go	/^	Security string `json:"security"`$/;"	m	struct:conf.VMessAccount	typeref:typename:string
Security	proxy/vmess/account.go	/^	Security protocol.SecurityType$/;"	m	struct:vmess.MemoryAccount	typeref:typename:protocol.SecurityType
Security	transport/internet/kcp/io.go	/^	Security cipher.AEAD$/;"	m	struct:kcp.KCPPacketReader	typeref:typename:cipher.AEAD
Security	transport/internet/kcp/io.go	/^	Security cipher.AEAD$/;"	m	struct:kcp.KCPPacketWriter	typeref:typename:cipher.AEAD
Security	transport/internet/quic/config.pb.go	/^	Security *protocol.SecurityConfig `protobuf:"bytes,2,opt,name=security,proto3" json:"security,o/;"	m	struct:quic.Config	typeref:typename:*protocol.SecurityConfig
SecurityConfig	common/protocol/headers.pb.go	/^type SecurityConfig struct {$/;"	s	package:protocol
SecurityConfig	common/protocol/headers.proto	/^message SecurityConfig {$/;"	m	package:v2ray.core.common.protocol
SecuritySettings	proxy/vmess/account.pb.go	/^	SecuritySettings *protocol.SecurityConfig `protobuf:"bytes,3,opt,name=security_settings,json=se/;"	m	struct:vmess.Account	typeref:typename:*protocol.SecurityConfig
SecuritySettings	transport/internet/config.pb.go	/^	SecuritySettings []*serial.TypedMessage `protobuf:"bytes,4,rep,name=security_settings,json=secu/;"	m	struct:internet.StreamConfig	typeref:typename:[]*serial.TypedMessage
SecuritySettings	transport/internet/memory_settings.go	/^	SecuritySettings interface{}$/;"	m	struct:internet.MemoryStreamConfig	typeref:typename:interface{}
SecurityType	common/protocol/headers.pb.go	/^type SecurityType int32$/;"	t	package:protocol	typeref:typename:int32
SecurityType	common/protocol/headers.proto	/^enum SecurityType {$/;"	g	package:v2ray.core.common.protocol
SecurityType	transport/internet/config.pb.go	/^	SecurityType string `protobuf:"bytes,3,opt,name=security_type,json=securityType,proto3" json:"s/;"	m	struct:internet.StreamConfig	typeref:typename:string
SecurityType	transport/internet/memory_settings.go	/^	SecurityType     string$/;"	m	struct:internet.MemoryStreamConfig	typeref:typename:string
SecurityType_AES128_GCM	common/protocol/headers.pb.go	/^	SecurityType_AES128_GCM        SecurityType = 3$/;"	c	package:protocol	typeref:type:SecurityType
SecurityType_AUTO	common/protocol/headers.pb.go	/^	SecurityType_AUTO              SecurityType = 2$/;"	c	package:protocol	typeref:type:SecurityType
SecurityType_CHACHA20_POLY1305	common/protocol/headers.pb.go	/^	SecurityType_CHACHA20_POLY1305 SecurityType = 4$/;"	c	package:protocol	typeref:type:SecurityType
SecurityType_LEGACY	common/protocol/headers.pb.go	/^	SecurityType_LEGACY            SecurityType = 1$/;"	c	package:protocol	typeref:type:SecurityType
SecurityType_NONE	common/protocol/headers.pb.go	/^	SecurityType_NONE              SecurityType = 5$/;"	c	package:protocol	typeref:type:SecurityType
SecurityType_UNKNOWN	common/protocol/headers.pb.go	/^	SecurityType_UNKNOWN           SecurityType = 0$/;"	c	package:protocol	typeref:type:SecurityType
SecurityType_name	common/protocol/headers.pb.go	/^	SecurityType_name = map[int32]string{$/;"	v	package:protocol
SecurityType_value	common/protocol/headers.pb.go	/^	SecurityType_value = map[string]int32{$/;"	v	package:protocol
Seed	app/p2p/config.pb.go	/^type Seed struct {$/;"	s	package:p2p
Seed	app/p2p/protocol/seedlist/seedlist.go	/^type Seed struct {$/;"	s	package:seedlist
Seed	app/p2p/wire/seedlist.pb.go	/^	Seed                 *SeedInfo  `protobuf:"bytes,2,opt,name=seed" json:"seed,omitempty"`$/;"	m	struct:wire.HelloSeedList	typeref:typename:*SeedInfo
Seed	infra/conf/transport_internet.go	/^	Seed            *string         `json:"seed"`$/;"	m	struct:conf.KCPConfig	typeref:typename:*string
Seed	proxy/vless/encoding/addons.pb.go	/^	Seed                 []byte   `protobuf:"bytes,2,opt,name=Seed,proto3" json:"Seed,omitempty"`$/;"	m	struct:encoding.Addons	typeref:typename:[]byte
Seed	proxy/vless/encoding/addons.proto	/^  bytes Seed = 2;$/;"	f	message:v2ray.core.proxy.vless.encoding.Addons	typeref:typename:bytes
Seed	transport/internet/kcp/config.pb.go	/^	Seed             *EncryptionSeed      `protobuf:"bytes,10,opt,name=seed,proto3" json:"seed,omit/;"	m	struct:kcp.Config	typeref:typename:*EncryptionSeed
Seed	transport/internet/kcp/config.pb.go	/^	Seed string `protobuf:"bytes,1,opt,name=seed,proto3" json:"seed,omitempty"`$/;"	m	struct:kcp.EncryptionSeed	typeref:typename:string
SeedInfo	app/p2p/wire/seedlist.pb.go	/^type SeedInfo struct {$/;"	s	package:wire
SeedInfo	app/p2p/wire/seedlist.proto	/^message SeedInfo {$/;"	m	package:wire
SeedList	infra/conf/p2p.go	/^	SeedList []seed `json:"seedlist"`$/;"	m	struct:conf.P2PConfig	typeref:typename:[]seed
SeedListProtocol	app/p2p/protocol/protocol.go	/^	*seedlist.SeedListProtocol$/;"	M	struct:protocol.Protocol	typeref:typename:*seedlist.SeedListProtocol
SeedListProtocol	app/p2p/protocol/seedlist/seedlist.go	/^	*SeedListProtocol \/\/ seedlist protocol impl$/;"	M	struct:seedlist.SeedNode	typeref:typename:*SeedListProtocol
SeedListProtocol	app/p2p/protocol/seedlist/seedlist.go	/^type SeedListProtocol struct {$/;"	s	package:seedlist
SeedListRequest	app/p2p/wire/seedlist.pb.go	/^type SeedListRequest struct {$/;"	s	package:wire
SeedListRequest	app/p2p/wire/seedlist.proto	/^message SeedListRequest {$/;"	m	package:wire
SeedListResponse	app/p2p/wire/seedlist.pb.go	/^type SeedListResponse struct {$/;"	s	package:wire
SeedListResponse	app/p2p/wire/seedlist.proto	/^message SeedListResponse {$/;"	m	package:wire
SeedNode	app/p2p/protocol/seedlist/seedlist.go	/^type SeedNode struct {$/;"	s	package:seedlist
Seedlist	app/p2p/config.pb.go	/^	Seedlist             []*Seed  `protobuf:"bytes,5,rep,name=seedlist,proto3" json:"seedlist,omite/;"	m	struct:p2p.Config	typeref:typename:[]*Seed
SeedlistNotice	app/p2p/wire/init.go	/^var SeedlistNotice chan HelloSeedList$/;"	v	package:wire	typeref:typename:chan HelloSeedList
Segment	transport/internet/kcp/segment.go	/^type Segment interface {$/;"	i	package:kcp
SegmentOption	transport/internet/kcp/segment.go	/^type SegmentOption byte$/;"	t	package:kcp	typeref:typename:byte
SegmentOptionClose	transport/internet/kcp/segment.go	/^	SegmentOptionClose SegmentOption = 1$/;"	c	package:kcp	typeref:type:SegmentOption
SegmentWriter	transport/internet/kcp/output.go	/^type SegmentWriter interface {$/;"	i	package:kcp
Select	app/proxyman/outbound/outbound.go	/^func (m *Manager) Select(selectors []string) []string {$/;"	f	struct:outbound.Manager	typeref:typename:[]string
Select	features/outbound/outbound.go	/^	Select([]string) []string$/;"	n	interface:outbound.HandlerSelector	typeref:typename:[]string
Select	testing/mocks/outbound.go	/^func (m *OutboundHandlerSelector) Select(arg0 []string) []string {$/;"	f	struct:mocks.OutboundHandlerSelector	typeref:typename:[]string
Select	testing/mocks/outbound.go	/^func (mr *OutboundHandlerSelectorMockRecorder) Select(arg0 interface{}) *gomock.Call {$/;"	f	struct:mocks.OutboundHandlerSelectorMockRecorder	typeref:typename:*gomock.Call
Selectors	infra/conf/router.go	/^	Selectors StringList `json:"selector"`$/;"	m	struct:conf.BalancingRule	typeref:typename:StringList
Send	app/router/command/command_grpc.pb.go	/^	Send(*RoutingContext) error$/;"	n	interface:command.RoutingService_SubscribeRoutingStatsServer	typeref:typename:error
Send	app/router/command/command_grpc.pb.go	/^func (x *routingServiceSubscribeRoutingStatsServer) Send(m *RoutingContext) error {$/;"	f	struct:command.routingServiceSubscribeRoutingStatsServer	typeref:typename:error
SendFirst	testing/servers/tcp/tcp.go	/^	SendFirst    []byte$/;"	m	struct:tcp.Server	typeref:typename:[]byte
SendProtoMessage	app/p2p/protocol/seedlist/message.go	/^func SendProtoMessage(data proto.Message, s core.Stream) bool {$/;"	f	package:seedlist	typeref:typename:bool
SendThrough	infra/conf/v2ray.go	/^	SendThrough   *Address         `json:"sendThrough"`$/;"	m	struct:conf.OutboundDetourConfig	typeref:typename:*Address
SenderConfig	app/proxyman/config.pb.go	/^type SenderConfig struct {$/;"	s	package:proxyman
SenderConfig	app/proxyman/config.proto	/^message SenderConfig {$/;"	m	package:v2ray.core.app.proxyman
SenderSettings	config.pb.go	/^	SenderSettings *serial.TypedMessage `protobuf:"bytes,2,opt,name=sender_settings,json=senderSett/;"	m	struct:core.OutboundHandlerConfig	typeref:typename:*serial.TypedMessage
SendingNext	transport/internet/kcp/segment.go	/^	SendingNext   uint32$/;"	m	struct:kcp.CmdOnlySegment	typeref:typename:uint32
SendingNext	transport/internet/kcp/segment.go	/^	SendingNext uint32$/;"	m	struct:kcp.DataSegment	typeref:typename:uint32
SendingWindow	transport/internet/kcp/sending.go	/^type SendingWindow struct {$/;"	s	package:kcp
SendingWorker	transport/internet/kcp/sending.go	/^type SendingWorker struct {$/;"	s	package:kcp
SequentialWriter	common/buf/writer.go	/^type SequentialWriter struct {$/;"	s	package:buf
Serialize	transport/internet/header.go	/^	Serialize([]byte)$/;"	n	interface:internet.PacketHeader
Serialize	transport/internet/headers/noop/noop.go	/^func (NoOpHeader) Serialize([]byte) {}$/;"	f	struct:noop.NoOpHeader
Serialize	transport/internet/headers/srtp/srtp.go	/^func (s *SRTP) Serialize(b []byte) {$/;"	f	struct:srtp.SRTP
Serialize	transport/internet/headers/tls/dtls.go	/^func (d *DTLS) Serialize(b []byte) {$/;"	f	struct:tls.DTLS
Serialize	transport/internet/headers/utp/utp.go	/^func (u *UTP) Serialize(b []byte) {$/;"	f	struct:utp.UTP
Serialize	transport/internet/headers/wechat/wechat.go	/^func (vc *VideoChat) Serialize(b []byte) {$/;"	f	struct:wechat.VideoChat
Serialize	transport/internet/headers/wireguard/wireguard.go	/^func (Wireguard) Serialize(b []byte) {$/;"	f	struct:wireguard.Wireguard
Serialize	transport/internet/kcp/segment.go	/^	Serialize([]byte)$/;"	n	interface:kcp.Segment
Serialize	transport/internet/kcp/segment.go	/^func (s *AckSegment) Serialize(b []byte) {$/;"	f	struct:kcp.AckSegment
Serialize	transport/internet/kcp/segment.go	/^func (s *CmdOnlySegment) Serialize(b []byte) {$/;"	f	struct:kcp.CmdOnlySegment
Serialize	transport/internet/kcp/segment.go	/^func (s *DataSegment) Serialize(b []byte) {$/;"	f	struct:kcp.DataSegment
ServeDNS	app/dns/server_test.go	/^func (*staticHandler) ServeDNS(w dns.ResponseWriter, r *dns.Msg) {$/;"	f	struct:dns_test.staticHandler
ServeDNS	proxy/dns/dns_test.go	/^func (*staticHandler) ServeDNS(w dns.ResponseWriter, r *dns.Msg) {$/;"	f	struct:dns_test.staticHandler
ServeHTTP	testing/servers/http/http.go	/^func (s *Server) ServeHTTP(resp http.ResponseWriter, req *http.Request) {$/;"	f	struct:tcp.Server
ServeHTTP	transport/internet/http/hub.go	/^func (l *Listener) ServeHTTP(writer http.ResponseWriter, request *http.Request) {$/;"	f	struct:http.Listener
ServeHTTP	transport/internet/websocket/hub.go	/^func (h *requestHandler) ServeHTTP(writer http.ResponseWriter, request *http.Request) {$/;"	f	struct:websocket.requestHandler
Server	app/dns/server.go	/^type Server struct {$/;"	s	package:dns
Server	common/mux/server.go	/^type Server struct {$/;"	s	package:mux
Server	proxy/dns/config.pb.go	/^	Server *net.Endpoint `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`$/;"	m	struct:dns.Config	typeref:typename:*net.Endpoint
Server	proxy/freedom/config.pb.go	/^	Server *protocol.ServerEndpoint `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitemp/;"	m	struct:freedom.DestinationOverride	typeref:typename:*protocol.ServerEndpoint
Server	proxy/http/config.pb.go	/^	Server []*protocol.ServerEndpoint `protobuf:"bytes,1,rep,name=server,proto3" json:"server,omite/;"	m	struct:http.ClientConfig	typeref:typename:[]*protocol.ServerEndpoint
Server	proxy/http/server.go	/^type Server struct {$/;"	s	package:http
Server	proxy/mtproto/server.go	/^type Server struct {$/;"	s	package:mtproto
Server	proxy/shadowsocks/config.pb.go	/^	Server []*protocol.ServerEndpoint `protobuf:"bytes,1,rep,name=server,proto3" json:"server,omite/;"	m	struct:shadowsocks.ClientConfig	typeref:typename:[]*protocol.ServerEndpoint
Server	proxy/shadowsocks/server.go	/^type Server struct {$/;"	s	package:shadowsocks
Server	proxy/socks/config.pb.go	/^	Server []*protocol.ServerEndpoint `protobuf:"bytes,1,rep,name=server,proto3" json:"server,omite/;"	m	struct:socks.ClientConfig	typeref:typename:[]*protocol.ServerEndpoint
Server	proxy/socks/server.go	/^type Server struct {$/;"	s	package:socks
Server	proxy/trojan/config.pb.go	/^	Server []*protocol.ServerEndpoint `protobuf:"bytes,1,rep,name=server,proto3" json:"server,omite/;"	m	struct:trojan.ClientConfig	typeref:typename:[]*protocol.ServerEndpoint
Server	proxy/trojan/server.go	/^type Server struct {$/;"	s	package:trojan
Server	testing/servers/http/http.go	/^type Server struct {$/;"	s	package:tcp
Server	testing/servers/tcp/tcp.go	/^type Server struct {$/;"	s	package:tcp
Server	testing/servers/udp/udp.go	/^type Server struct {$/;"	s	package:udp
Server	transport/internet/header.go	/^	Server(net.Conn) net.Conn$/;"	n	interface:internet.ConnectionAuthenticator	typeref:typename:net.Conn
Server	transport/internet/headers/http/http.go	/^func (a HttpAuthenticator) Server(conn net.Conn) net.Conn {$/;"	f	struct:http.HttpAuthenticator	typeref:typename:net.Conn
Server	transport/internet/headers/noop/noop.go	/^func (NoOpConnectionHeader) Server(conn net.Conn) net.Conn {$/;"	f	struct:noop.NoOpConnectionHeader	typeref:typename:net.Conn
Server	transport/internet/tls/tls.go	/^func Server(c net.Conn, config *tls.Config) net.Conn {$/;"	f	package:tls	typeref:typename:net.Conn
Server	transport/internet/xtls/xtls.go	/^func Server(c net.Conn, config *xtls.Config) net.Conn {$/;"	f	package:xtls	typeref:typename:net.Conn
Server	v2ray.go	/^type Server interface {$/;"	i	package:core
ServerConfig	proxy/http/config.pb.go	/^type ServerConfig struct {$/;"	s	package:http
ServerConfig	proxy/http/config.proto	/^message ServerConfig {$/;"	m	package:v2ray.core.proxy.http
ServerConfig	proxy/mtproto/config.pb.go	/^type ServerConfig struct {$/;"	s	package:mtproto
ServerConfig	proxy/mtproto/config.proto	/^message ServerConfig {$/;"	m	package:v2ray.core.proxy.mtproto
ServerConfig	proxy/shadowsocks/config.pb.go	/^type ServerConfig struct {$/;"	s	package:shadowsocks
ServerConfig	proxy/shadowsocks/config.proto	/^message ServerConfig {$/;"	m	package:v2ray.core.proxy.shadowsocks
ServerConfig	proxy/socks/config.pb.go	/^type ServerConfig struct {$/;"	s	package:socks
ServerConfig	proxy/socks/config.proto	/^message ServerConfig {$/;"	m	package:v2ray.core.proxy.socks
ServerConfig	proxy/trojan/config.pb.go	/^type ServerConfig struct {$/;"	s	package:trojan
ServerConfig	proxy/trojan/config.proto	/^message ServerConfig {$/;"	m	package:v2ray.core.proxy.trojan
ServerEndpoint	common/protocol/server_spec.pb.go	/^type ServerEndpoint struct {$/;"	s	package:protocol
ServerEndpoint	common/protocol/server_spec.proto	/^message ServerEndpoint {$/;"	m	package:v2ray.core.common.protocol
ServerList	common/protocol/server_picker.go	/^type ServerList struct {$/;"	s	package:protocol
ServerName	infra/conf/transport_internet.go	/^	ServerName               string            `json:"serverName"`$/;"	m	struct:conf.XTLSConfig	typeref:typename:string
ServerName	infra/conf/transport_internet.go	/^	ServerName               string           `json:"serverName"`$/;"	m	struct:conf.TLSConfig	typeref:typename:string
ServerName	transport/internet/tls/config.pb.go	/^	ServerName string `protobuf:"bytes,3,opt,name=server_name,json=serverName,proto3" json:"server_/;"	m	struct:tls.Config	typeref:typename:string
ServerName	transport/internet/xtls/config.pb.go	/^	ServerName string `protobuf:"bytes,3,opt,name=server_name,json=serverName,proto3" json:"server_/;"	m	struct:xtls.Config	typeref:typename:string
ServerPicker	common/protocol/server_picker.go	/^type ServerPicker interface {$/;"	i	package:protocol
ServerSession	proxy/socks/protocol.go	/^type ServerSession struct {$/;"	s	package:socks
ServerSession	proxy/vmess/encoding/server.go	/^type ServerSession struct {$/;"	s	package:encoding
ServerSpec	common/protocol/server_spec.go	/^type ServerSpec struct {$/;"	s	package:protocol
ServerStream	app/router/command/command_grpc.pb.go	/^	grpc.ServerStream$/;"	M	struct:command.routingServiceSubscribeRoutingStatsServer	typeref:typename:grpc.ServerStream
ServerType	v2ray.go	/^func ServerType() interface{} {$/;"	f	package:core	typeref:typename:interface{}
ServerWorker	common/mux/server.go	/^type ServerWorker struct {$/;"	s	package:mux
Servers	infra/conf/dns.go	/^	Servers  []*NameServerConfig `json:"servers"`$/;"	m	struct:conf.DnsConfig	typeref:typename:[]*NameServerConfig
Servers	infra/conf/http.go	/^	Servers []*HttpRemoteConfig `json:"servers"`$/;"	m	struct:conf.HttpClientConfig	typeref:typename:[]*HttpRemoteConfig
Servers	infra/conf/shadowsocks.go	/^	Servers []*ShadowsocksServerTarget `json:"servers"`$/;"	m	struct:conf.ShadowsocksClientConfig	typeref:typename:[]*ShadowsocksServerTarget
Servers	infra/conf/socks.go	/^	Servers []*SocksRemoteConfig `json:"servers"`$/;"	m	struct:conf.SocksClientConfig	typeref:typename:[]*SocksRemoteConfig
Servers	infra/conf/trojan.go	/^	Servers []*TrojanServerTarget `json:"servers"`$/;"	m	struct:conf.TrojanClientConfig	typeref:typename:[]*TrojanServerTarget
Service	app/commander/config.pb.go	/^	Service []*serial.TypedMessage `protobuf:"bytes,2,rep,name=service,proto3" json:"service,omitem/;"	m	struct:commander.Config	typeref:typename:[]*serial.TypedMessage
Service	app/commander/service.go	/^type Service interface {$/;"	i	package:commander
Service	common/signal/pubsub/pubsub.go	/^type Service struct {$/;"	s	package:pubsub
Service	release/config/systemd/system/v2ray.service	/^[Service]$/;"	s
Service	release/config/systemd/system/v2ray@.service	/^[Service]$/;"	s
ServiceStart	app/p2p/grpc/server.go	/^func ServiceStart(srv wire.NotifierServer) {$/;"	f	package:grpc
Services	infra/conf/api.go	/^	Services []string `json:"services"`$/;"	m	struct:conf.ApiConfig	typeref:typename:[]string
Session	common/mux/session.go	/^type Session struct {$/;"	s	package:mux
Session	features/policy/policy.go	/^type Session struct {$/;"	s	package:policy
SessionConfig	app/dispatcher/config.pb.go	/^type SessionConfig struct {$/;"	s	package:dispatcher
SessionConfig	app/dispatcher/config.proto	/^message SessionConfig {$/;"	m	package:v2ray.core.app.dispatcher
SessionContext	proxy/mtproto/auth.go	/^type SessionContext struct {$/;"	s	package:mtproto
SessionContextFromContext	proxy/mtproto/auth.go	/^func SessionContextFromContext(ctx context.Context) SessionContext {$/;"	f	package:mtproto	typeref:typename:SessionContext
SessionDefault	features/policy/policy.go	/^func SessionDefault() Session {$/;"	f	package:policy	typeref:typename:Session
SessionHistory	proxy/vmess/encoding/server.go	/^type SessionHistory struct {$/;"	s	package:encoding
SessionID	common/errors/errors.go	/^	SessionID uint32$/;"	m	struct:errors.ExportOptionHolder	typeref:typename:uint32
SessionID	common/mux/frame.go	/^	SessionID     uint16$/;"	m	struct:mux.FrameMetadata	typeref:typename:uint16
SessionManager	common/mux/session.go	/^type SessionManager struct {$/;"	s	package:mux
SessionStatus	common/mux/frame.go	/^	SessionStatus SessionStatus$/;"	m	struct:mux.FrameMetadata	typeref:typename:SessionStatus
SessionStatus	common/mux/frame.go	/^type SessionStatus byte$/;"	t	package:mux	typeref:typename:byte
SessionStatusEnd	common/mux/frame.go	/^	SessionStatusEnd       SessionStatus = 0x03$/;"	c	package:mux	typeref:type:SessionStatus
SessionStatusKeep	common/mux/frame.go	/^	SessionStatusKeep      SessionStatus = 0x02$/;"	c	package:mux	typeref:type:SessionStatus
SessionStatusKeepAlive	common/mux/frame.go	/^	SessionStatusKeepAlive SessionStatus = 0x04$/;"	c	package:mux	typeref:type:SessionStatus
SessionStatusNew	common/mux/frame.go	/^	SessionStatusNew       SessionStatus = 0x01$/;"	c	package:mux	typeref:type:SessionStatus
Set	app/dispatcher/stats_test.go	/^func (c *TestCounter) Set(v int64) int64 {$/;"	f	type:dispatcher_test.TestCounter	typeref:typename:int64
Set	app/stats/counter.go	/^func (c *Counter) Set(newValue int64) int64 {$/;"	f	struct:stats.Counter	typeref:typename:int64
Set	common/bitmask/byte.go	/^func (b *Byte) Set(bb Byte) {$/;"	f	type:bitmask.Byte
Set	common/cmdarg/cmdarg.go	/^func (c *Arg) Set(value string) error {$/;"	f	type:cmdarg.Arg	typeref:typename:error
Set	common/log/log.go	/^func (h *syncHandler) Set(handler Handler) {$/;"	f	struct:log.syncHandler
Set	features/stats/stats.go	/^	Set(int64) int64$/;"	n	interface:stats.Counter	typeref:typename:int64
Set	infra/control/cert.go	/^func (l *stringList) Set(v string) error {$/;"	f	type:control.stringList	typeref:typename:error
Set	transport/internet/kcp/receiving.go	/^func (w *ReceivingWindow) Set(id uint32, value *DataSegment) bool {$/;"	f	struct:kcp.ReceivingWindow	typeref:typename:bool
SetAttribute	common/session/session.go	/^func (c *Content) SetAttribute(name string, value string) {$/;"	f	struct:session.Content
SetBuffered	common/buf/writer.go	/^func (w *BufferedWriter) SetBuffered(f bool) error {$/;"	f	struct:buf.BufferedWriter	typeref:typename:error
SetByte	common/buf/buffer.go	/^func (b *Buffer) SetByte(index int32, value byte) {$/;"	f	struct:buf.Buffer
SetDeadline	app/proxyman/inbound/worker.go	/^func (*udpConn) SetDeadline(time.Time) error {$/;"	f	struct:inbound.udpConn	typeref:typename:error
SetDeadline	common/net/connection.go	/^func (c *connection) SetDeadline(t time.Time) error {$/;"	f	struct:net.connection	typeref:typename:error
SetDeadline	transport/internet/kcp/connection.go	/^func (c *Connection) SetDeadline(t time.Time) error {$/;"	f	struct:kcp.Connection	typeref:typename:error
SetDeadline	transport/internet/quic/conn.go	/^func (c *interConn) SetDeadline(t time.Time) error {$/;"	f	struct:quic.interConn	typeref:typename:error
SetDeadline	transport/internet/quic/conn.go	/^func (c *sysConn) SetDeadline(t time.Time) error {$/;"	f	struct:quic.sysConn	typeref:typename:error
SetDeadline	transport/internet/system_dialer.go	/^func (c *packetConnWrapper) SetDeadline(t time.Time) error {$/;"	f	struct:internet.packetConnWrapper	typeref:typename:error
SetDeadline	transport/internet/udp/dispatcher.go	/^func (c *dispatcherConn) SetDeadline(t time.Time) error {$/;"	f	struct:udp.dispatcherConn	typeref:typename:error
SetDeadline	transport/internet/websocket/connection.go	/^func (c *connection) SetDeadline(t time.Time) error {$/;"	f	struct:websocket.connection	typeref:typename:error
SetInterval	transport/internet/kcp/connection.go	/^func (u *Updater) SetInterval(d time.Duration) {$/;"	f	struct:kcp.Updater
SetReadDeadline	app/proxyman/inbound/worker.go	/^func (*udpConn) SetReadDeadline(time.Time) error {$/;"	f	struct:inbound.udpConn	typeref:typename:error
SetReadDeadline	common/net/connection.go	/^func (c *connection) SetReadDeadline(t time.Time) error {$/;"	f	struct:net.connection	typeref:typename:error
SetReadDeadline	transport/internet/kcp/connection.go	/^func (c *Connection) SetReadDeadline(t time.Time) error {$/;"	f	struct:kcp.Connection	typeref:typename:error
SetReadDeadline	transport/internet/quic/conn.go	/^func (c *interConn) SetReadDeadline(t time.Time) error {$/;"	f	struct:quic.interConn	typeref:typename:error
SetReadDeadline	transport/internet/quic/conn.go	/^func (c *sysConn) SetReadDeadline(t time.Time) error {$/;"	f	struct:quic.sysConn	typeref:typename:error
SetReadDeadline	transport/internet/system_dialer.go	/^func (c *packetConnWrapper) SetReadDeadline(t time.Time) error {$/;"	f	struct:internet.packetConnWrapper	typeref:typename:error
SetReadDeadline	transport/internet/udp/dispatcher.go	/^func (c *dispatcherConn) SetReadDeadline(t time.Time) error {$/;"	f	struct:udp.dispatcherConn	typeref:typename:error
SetReadDeadline	transport/internet/websocket/connection.go	/^func (c *connection) SetReadDeadline(t time.Time) error {$/;"	f	struct:websocket.connection	typeref:typename:error
SetState	transport/internet/kcp/connection.go	/^func (c *Connection) SetState(state State) {$/;"	f	struct:kcp.Connection
SetTimeout	common/signal/timer.go	/^func (t *ActivityTimer) SetTimeout(timeout time.Duration) {$/;"	f	struct:signal.ActivityTimer
SetWriteDeadline	app/proxyman/inbound/worker.go	/^func (*udpConn) SetWriteDeadline(time.Time) error {$/;"	f	struct:inbound.udpConn	typeref:typename:error
SetWriteDeadline	common/net/connection.go	/^func (c *connection) SetWriteDeadline(t time.Time) error {$/;"	f	struct:net.connection	typeref:typename:error
SetWriteDeadline	transport/internet/kcp/connection.go	/^func (c *Connection) SetWriteDeadline(t time.Time) error {$/;"	f	struct:kcp.Connection	typeref:typename:error
SetWriteDeadline	transport/internet/quic/conn.go	/^func (c *interConn) SetWriteDeadline(t time.Time) error {$/;"	f	struct:quic.interConn	typeref:typename:error
SetWriteDeadline	transport/internet/quic/conn.go	/^func (c *sysConn) SetWriteDeadline(t time.Time) error {$/;"	f	struct:quic.sysConn	typeref:typename:error
SetWriteDeadline	transport/internet/system_dialer.go	/^func (c *packetConnWrapper) SetWriteDeadline(t time.Time) error {$/;"	f	struct:internet.packetConnWrapper	typeref:typename:error
SetWriteDeadline	transport/internet/udp/dispatcher.go	/^func (c *dispatcherConn) SetWriteDeadline(t time.Time) error {$/;"	f	struct:udp.dispatcherConn	typeref:typename:error
SetWriteDeadline	transport/internet/websocket/connection.go	/^func (c *connection) SetWriteDeadline(t time.Time) error {$/;"	f	struct:websocket.connection	typeref:typename:error
Settings	app/dispatcher/config.pb.go	/^	Settings *SessionConfig `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`$/;"	m	struct:dispatcher.Config	typeref:typename:*SessionConfig
Settings	infra/conf/router.go	/^	Settings       *RouterRulesConfig `json:"settings"` \/\/ Deprecated$/;"	m	struct:conf.RouterConfig	typeref:typename:*RouterRulesConfig
Settings	infra/conf/v2ray.go	/^	Settings       *json.RawMessage               `json:"settings"`$/;"	m	struct:conf.InboundDetourConfig	typeref:typename:*json.RawMessage
Settings	infra/conf/v2ray.go	/^	Settings      *json.RawMessage `json:"settings"`$/;"	m	struct:conf.OutboundDetourConfig	typeref:typename:*json.RawMessage
Settings	transport/internet/config.pb.go	/^	Settings *serial.TypedMessage `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omite/;"	m	struct:internet.TransportConfig	typeref:typename:*serial.TypedMessage
Severity	common/errors/errors.go	/^	Severity() log.Severity$/;"	n	interface:errors.hasSeverity	typeref:typename:log.Severity
Severity	common/errors/errors.go	/^func (err *Error) Severity() log.Severity {$/;"	f	struct:errors.Error	typeref:typename:log.Severity
Severity	common/log/log.go	/^	Severity Severity$/;"	m	struct:log.GeneralMessage	typeref:typename:Severity
Severity	common/log/log.pb.go	/^type Severity int32$/;"	t	package:log	typeref:typename:int32
Severity	common/log/log.proto	/^enum Severity {$/;"	g	package:v2ray.core.common.log
Severity_Debug	common/log/log.pb.go	/^	Severity_Debug   Severity = 4$/;"	c	package:log	typeref:type:Severity
Severity_Error	common/log/log.pb.go	/^	Severity_Error   Severity = 1$/;"	c	package:log	typeref:type:Severity
Severity_Info	common/log/log.pb.go	/^	Severity_Info    Severity = 3$/;"	c	package:log	typeref:type:Severity
Severity_Unknown	common/log/log.pb.go	/^	Severity_Unknown Severity = 0$/;"	c	package:log	typeref:type:Severity
Severity_Warning	common/log/log.pb.go	/^	Severity_Warning Severity = 2$/;"	c	package:log	typeref:type:Severity
Severity_name	common/log/log.pb.go	/^	Severity_name = map[int32]string{$/;"	v	package:log
Severity_value	common/log/log.pb.go	/^	Severity_value = map[string]int32{$/;"	v	package:log
ShadowsocksClientConfig	infra/conf/shadowsocks.go	/^type ShadowsocksClientConfig struct {$/;"	s	package:conf
ShadowsocksServerConfig	infra/conf/shadowsocks.go	/^type ShadowsocksServerConfig struct {$/;"	s	package:conf
ShadowsocksServerTarget	infra/conf/shadowsocks.go	/^type ShadowsocksServerTarget struct {$/;"	s	package:conf
ShakeSizeParser	proxy/vmess/encoding/auth.go	/^type ShakeSizeParser struct {$/;"	s	package:encoding
Short	infra/control/command.go	/^	Short string$/;"	m	struct:control.Description	typeref:typename:string
ShouldClose	testing/servers/tcp/tcp.go	/^	ShouldClose  bool$/;"	m	struct:tcp.Server	typeref:typename:bool
Sign	app/p2p/wire/seedlist.pb.go	/^	Sign                 []byte   `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`$/;"	m	struct:wire.MessageData	typeref:typename:[]byte
SignData	app/p2p/protocol/seedlist/message.go	/^func SignData(n *SeedNode, data []byte) ([]byte, error) {$/;"	f	package:seedlist	typeref:typename:([]byte, error)
SignProtoMessage	app/p2p/protocol/seedlist/message.go	/^func SignProtoMessage(n *SeedNode, message proto.Message) ([]byte, error) {$/;"	f	package:seedlist	typeref:typename:([]byte, error)
Signal	common/signal/notifier.go	/^func (n *Notifier) Signal() {$/;"	f	struct:signal.Notifier
Signal	common/signal/semaphore/semaphore.go	/^func (s *Instance) Signal() {$/;"	f	struct:semaphore.Instance
SimpleAuthenticator	transport/internet/kcp/crypt.go	/^type SimpleAuthenticator struct{}$/;"	s	package:kcp
SimpleSegmentWriter	transport/internet/kcp/output.go	/^type SimpleSegmentWriter struct {$/;"	s	package:kcp
SimpleSystemDialer	transport/internet/system_dialer.go	/^type SimpleSystemDialer struct {$/;"	s	package:internet
SinglePortRange	common/net/port.go	/^func SinglePortRange(p Port) *PortRange {$/;"	f	package:net	typeref:typename:*PortRange
SingleReader	common/buf/reader.go	/^type SingleReader struct {$/;"	s	package:buf
Size	app/dns/config.pb.go	/^	Size uint32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`$/;"	m	struct:dns.NameServer_OriginalRule	typeref:typename:uint32
Size	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) Size() (n int) {$/;"	f	struct:wire.HelloSeedList	typeref:typename:(n int)
Size	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) Size() (n int) {$/;"	f	struct:wire.MessageData	typeref:typename:(n int)
Size	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) Size() (n int) {$/;"	f	struct:wire.SeedInfo	typeref:typename:(n int)
Size	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListRequest) Size() (n int) {$/;"	f	struct:wire.SeedListRequest	typeref:typename:(n int)
Size	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListResponse) Size() (n int) {$/;"	f	struct:wire.SeedListResponse	typeref:typename:(n int)
Size	common/buf/buffer.go	/^	Size = 2048$/;"	c	package:buf
Size	common/buf/copy.go	/^	Size int64$/;"	m	struct:buf.SizeCounter	typeref:typename:int64
Size	common/mux/session.go	/^func (m *SessionManager) Size() int {$/;"	f	struct:mux.SessionManager	typeref:typename:int
Size	common/protocol/server_picker.go	/^func (sl *ServerList) Size() uint32 {$/;"	f	struct:protocol.ServerList	typeref:typename:uint32
Size	common/strmatcher/strmatcher.go	/^func (g *MatcherGroup) Size() uint32 {$/;"	f	struct:strmatcher.MatcherGroup	typeref:typename:uint32
Size	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) Size() (n int) {$/;"	f	struct:encoding.Addons	typeref:typename:(n int)
Size	transport/internet/header.go	/^	Size() int32$/;"	n	interface:internet.PacketHeader	typeref:typename:int32
Size	transport/internet/headers/noop/noop.go	/^func (NoOpHeader) Size() int32 {$/;"	f	struct:noop.NoOpHeader	typeref:typename:int32
Size	transport/internet/headers/srtp/srtp.go	/^func (*SRTP) Size() int32 {$/;"	f	struct:srtp.SRTP	typeref:typename:int32
Size	transport/internet/headers/tls/dtls.go	/^func (*DTLS) Size() int32 {$/;"	f	struct:tls.DTLS	typeref:typename:int32
Size	transport/internet/headers/utp/utp.go	/^func (*UTP) Size() int32 {$/;"	f	struct:utp.UTP	typeref:typename:int32
Size	transport/internet/headers/wechat/wechat.go	/^func (vc *VideoChat) Size() int32 {$/;"	f	struct:wechat.VideoChat	typeref:typename:int32
Size	transport/internet/headers/wireguard/wireguard.go	/^func (Wireguard) Size() int32 {$/;"	f	struct:wireguard.Wireguard	typeref:typename:int32
Size	transport/internet/kcp/config.pb.go	/^	Size uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`$/;"	m	struct:kcp.ReadBuffer	typeref:typename:uint32
Size	transport/internet/kcp/config.pb.go	/^	Size uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`$/;"	m	struct:kcp.WriteBuffer	typeref:typename:uint32
SizeBytes	common/crypto/chunk.go	/^	SizeBytes() int32$/;"	n	interface:crypto.ChunkSizeDecoder	typeref:typename:int32
SizeBytes	common/crypto/chunk.go	/^	SizeBytes() int32$/;"	n	interface:crypto.ChunkSizeEncoder	typeref:typename:int32
SizeBytes	common/crypto/chunk.go	/^func (PlainChunkSizeParser) SizeBytes() int32 {$/;"	f	struct:crypto.PlainChunkSizeParser	typeref:typename:int32
SizeBytes	common/crypto/chunk.go	/^func (p *AEADChunkSizeParser) SizeBytes() int32 {$/;"	f	struct:crypto.AEADChunkSizeParser	typeref:typename:int32
SizeBytes	proxy/vmess/encoding/auth.go	/^func (*ShakeSizeParser) SizeBytes() int32 {$/;"	f	struct:encoding.ShakeSizeParser	typeref:typename:int32
SizeCounter	common/buf/copy.go	/^type SizeCounter struct {$/;"	s	package:buf
SizeStatWriter	app/dispatcher/stats.go	/^type SizeStatWriter struct {$/;"	s	package:dispatcher
SkipRoutePick	common/session/session.go	/^	SkipRoutePick bool$/;"	m	struct:session.Content	typeref:typename:bool
SmoothedTime	transport/internet/kcp/connection.go	/^func (info *RoundTripInfo) SmoothedTime() uint32 {$/;"	f	struct:kcp.RoundTripInfo	typeref:typename:uint32
Sniff	app/dispatcher/sniffer.go	/^func (s *Sniffer) Sniff(payload []byte) (SniffResult, error) {$/;"	f	struct:dispatcher.Sniffer	typeref:typename:(SniffResult, error)
SniffBittorrent	common/protocol/bittorrent/bittorrent.go	/^func SniffBittorrent(b []byte) (*SniffHeader, error) {$/;"	f	package:bittorrent	typeref:typename:(*SniffHeader, error)
SniffHTTP	common/protocol/http/sniff.go	/^func SniffHTTP(b []byte) (*SniffHeader, error) {$/;"	f	package:http	typeref:typename:(*SniffHeader, error)
SniffHeader	common/protocol/bittorrent/bittorrent.go	/^type SniffHeader struct {$/;"	s	package:bittorrent
SniffHeader	common/protocol/http/sniff.go	/^type SniffHeader struct {$/;"	s	package:http
SniffHeader	common/protocol/tls/sniff.go	/^type SniffHeader struct {$/;"	s	package:tls
SniffResult	app/dispatcher/sniffer.go	/^type SniffResult interface {$/;"	i	package:dispatcher
SniffTLS	common/protocol/tls/sniff.go	/^func SniffTLS(b []byte) (*SniffHeader, error) {$/;"	f	package:tls	typeref:typename:(*SniffHeader, error)
Sniffer	app/dispatcher/sniffer.go	/^type Sniffer struct {$/;"	s	package:dispatcher
SniffingConfig	app/proxyman/config.pb.go	/^type SniffingConfig struct {$/;"	s	package:proxyman
SniffingConfig	app/proxyman/config.proto	/^message SniffingConfig {$/;"	m	package:v2ray.core.app.proxyman
SniffingConfig	infra/conf/v2ray.go	/^	SniffingConfig *SniffingConfig                `json:"sniffing"`$/;"	m	struct:conf.InboundDetourConfig	typeref:typename:*SniffingConfig
SniffingConfig	infra/conf/v2ray.go	/^type SniffingConfig struct {$/;"	s	package:conf
SniffingRequest	common/session/session.go	/^	SniffingRequest SniffingRequest$/;"	m	struct:session.Content	typeref:typename:SniffingRequest
SniffingRequest	common/session/session.go	/^type SniffingRequest struct {$/;"	s	package:session
SniffingSettings	app/proxyman/config.pb.go	/^	SniffingSettings *SniffingConfig  `protobuf:"bytes,8,opt,name=sniffing_settings,json=sniffingSe/;"	m	struct:proxyman.ReceiverConfig	typeref:typename:*SniffingConfig
SocketConfig	infra/conf/transport_internet.go	/^type SocketConfig struct {$/;"	s	package:conf
SocketConfig	transport/internet/config.pb.go	/^type SocketConfig struct {$/;"	s	package:internet
SocketConfig	transport/internet/config.proto	/^message SocketConfig {$/;"	m	package:v2ray.core.transport.internet
SocketConfig_AsIs	transport/internet/config.pb.go	/^	SocketConfig_AsIs SocketConfig_TCPFastOpenState = 0$/;"	c	package:internet	typeref:type:SocketConfig_TCPFastOpenState
SocketConfig_Disable	transport/internet/config.pb.go	/^	SocketConfig_Disable SocketConfig_TCPFastOpenState = 2$/;"	c	package:internet	typeref:type:SocketConfig_TCPFastOpenState
SocketConfig_Enable	transport/internet/config.pb.go	/^	SocketConfig_Enable SocketConfig_TCPFastOpenState = 1$/;"	c	package:internet	typeref:type:SocketConfig_TCPFastOpenState
SocketConfig_Off	transport/internet/config.pb.go	/^	SocketConfig_Off SocketConfig_TProxyMode = 0$/;"	c	package:internet	typeref:type:SocketConfig_TProxyMode
SocketConfig_Redirect	transport/internet/config.pb.go	/^	SocketConfig_Redirect SocketConfig_TProxyMode = 2$/;"	c	package:internet	typeref:type:SocketConfig_TProxyMode
SocketConfig_TCPFastOpenState	transport/internet/config.pb.go	/^type SocketConfig_TCPFastOpenState int32$/;"	t	package:internet	typeref:typename:int32
SocketConfig_TCPFastOpenState_name	transport/internet/config.pb.go	/^	SocketConfig_TCPFastOpenState_name = map[int32]string{$/;"	v	package:internet
SocketConfig_TCPFastOpenState_value	transport/internet/config.pb.go	/^	SocketConfig_TCPFastOpenState_value = map[string]int32{$/;"	v	package:internet
SocketConfig_TProxy	transport/internet/config.pb.go	/^	SocketConfig_TProxy SocketConfig_TProxyMode = 1$/;"	c	package:internet	typeref:type:SocketConfig_TProxyMode
SocketConfig_TProxyMode	transport/internet/config.pb.go	/^type SocketConfig_TProxyMode int32$/;"	t	package:internet	typeref:typename:int32
SocketConfig_TProxyMode_name	transport/internet/config.pb.go	/^	SocketConfig_TProxyMode_name = map[int32]string{$/;"	v	package:internet
SocketConfig_TProxyMode_value	transport/internet/config.pb.go	/^	SocketConfig_TProxyMode_value = map[string]int32{$/;"	v	package:internet
SocketSettings	infra/conf/transport_internet.go	/^	SocketSettings *SocketConfig       `json:"sockopt"`$/;"	m	struct:conf.StreamConfig	typeref:typename:*SocketConfig
SocketSettings	transport/internet/config.pb.go	/^	SocketSettings   *SocketConfig          `protobuf:"bytes,6,opt,name=socket_settings,json=socket/;"	m	struct:internet.StreamConfig	typeref:typename:*SocketConfig
SocketSettings	transport/internet/memory_settings.go	/^	SocketSettings   *SocketConfig$/;"	m	struct:internet.MemoryStreamConfig	typeref:typename:*SocketConfig
Sockopt	common/session/session.go	/^type Sockopt struct {$/;"	s	package:session
SockoptFromContext	common/session/context.go	/^func SockoptFromContext(ctx context.Context) *Sockopt {$/;"	f	package:session	typeref:typename:*Sockopt
SocksAccount	infra/conf/socks.go	/^type SocksAccount struct {$/;"	s	package:conf
SocksClientConfig	infra/conf/socks.go	/^type SocksClientConfig struct {$/;"	s	package:conf
SocksDB	app/p2p/account/account.go	/^type SocksDB struct {$/;"	s	package:account
SocksRemoteConfig	infra/conf/socks.go	/^type SocksRemoteConfig struct {$/;"	s	package:conf
SocksServerConfig	infra/conf/socks.go	/^type SocksServerConfig struct {$/;"	s	package:conf
Source	common/protocol/udp/packet.go	/^	Source  net.Destination$/;"	m	struct:udp.Packet	typeref:typename:net.Destination
Source	common/session/session.go	/^	Source net.Destination$/;"	m	struct:session.Inbound	typeref:typename:net.Destination
SourceCidr	app/router/config.pb.go	/^	SourceCidr []*CIDR `protobuf:"bytes,6,rep,name=source_cidr,json=sourceCidr,proto3" json:"source/;"	m	struct:router.RoutingRule	typeref:typename:[]*CIDR
SourceGeoip	app/router/config.pb.go	/^	SourceGeoip []*GeoIP `protobuf:"bytes,11,rep,name=source_geoip,json=sourceGeoip,proto3" json:"s/;"	m	struct:router.RoutingRule	typeref:typename:[]*GeoIP
SourceIPs	app/router/command/command.pb.go	/^	SourceIPs         [][]byte          `protobuf:"bytes,3,rep,name=SourceIPs,proto3" json:"SourceI/;"	m	struct:command.RoutingContext	typeref:typename:[][]byte
SourceIPs	app/router/command/command.proto	/^  repeated bytes SourceIPs = 3;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:bytes
SourcePort	app/router/command/command.pb.go	/^	SourcePort        uint32            `protobuf:"varint,5,opt,name=SourcePort,proto3" json:"Sourc/;"	m	struct:command.RoutingContext	typeref:typename:uint32
SourcePort	app/router/command/command.proto	/^  uint32 SourcePort = 5;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:uint32
SourcePortList	app/router/config.pb.go	/^	SourcePortList *net.PortList `protobuf:"bytes,16,opt,name=source_port_list,json=sourcePortList,/;"	m	struct:router.RoutingRule	typeref:typename:*net.PortList
SplitBytes	common/buf/multi_buffer.go	/^func SplitBytes(mb MultiBuffer, b []byte) (MultiBuffer, int) {$/;"	f	package:buf	typeref:typename:(MultiBuffer, int)
SplitFirst	common/buf/multi_buffer.go	/^func SplitFirst(mb MultiBuffer) (MultiBuffer, *Buffer) {$/;"	f	package:buf	typeref:typename:(MultiBuffer, *Buffer)
SplitFirstBytes	common/buf/multi_buffer.go	/^func SplitFirstBytes(mb MultiBuffer, p []byte) (MultiBuffer, int) {$/;"	f	package:buf	typeref:typename:(MultiBuffer, int)
SplitHostPort	common/net/system.go	/^var SplitHostPort = net.SplitHostPort$/;"	v	package:net
SplitSize	common/buf/multi_buffer.go	/^func SplitSize(mb MultiBuffer, size int32) (MultiBuffer, MultiBuffer) {$/;"	f	package:buf	typeref:typename:(MultiBuffer, MultiBuffer)
Spliter	common/buf/reader.go	/^	Spliter func(MultiBuffer, []byte) (MultiBuffer, int)$/;"	m	struct:buf.BufferedReader	typeref:typename:func(MultiBuffer, []byte) (MultiBuffer, int)
Sport	transport/internet/sockopt_freebsd.go	/^	Sport     uint16$/;"	m	struct:internet.pfiocNatlook	typeref:typename:uint16
StackNew	common/buf/buffer.go	/^func StackNew() Buffer {$/;"	f	package:buf	typeref:typename:Buffer
Start	app/commander/commander.go	/^func (c *Commander) Start() error {$/;"	f	struct:commander.Commander	typeref:typename:error
Start	app/commander/outbound.go	/^func (co *Outbound) Start() error {$/;"	f	struct:commander.Outbound	typeref:typename:error
Start	app/dispatcher/default.go	/^func (*DefaultDispatcher) Start() error {$/;"	f	struct:dispatcher.DefaultDispatcher	typeref:typename:error
Start	app/dns/server.go	/^func (s *Server) Start() error {$/;"	f	struct:dns.Server	typeref:typename:error
Start	app/log/log.go	/^func (g *Instance) Start() error {$/;"	f	struct:log.Instance	typeref:typename:error
Start	app/p2p/p2p.go	/^func (g *Instance) Start() error {$/;"	f	struct:p2p.Instance	typeref:typename:error
Start	app/policy/manager.go	/^func (m *Instance) Start() error {$/;"	f	struct:policy.Instance	typeref:typename:error
Start	app/proxyman/inbound/always.go	/^func (h *AlwaysOnInboundHandler) Start() error {$/;"	f	struct:inbound.AlwaysOnInboundHandler	typeref:typename:error
Start	app/proxyman/inbound/dynamic.go	/^func (h *DynamicInboundHandler) Start() error {$/;"	f	struct:inbound.DynamicInboundHandler	typeref:typename:error
Start	app/proxyman/inbound/inbound.go	/^func (m *Manager) Start() error {$/;"	f	struct:inbound.Manager	typeref:typename:error
Start	app/proxyman/inbound/worker.go	/^	Start() error$/;"	n	interface:inbound.worker	typeref:typename:error
Start	app/proxyman/inbound/worker.go	/^func (w *tcpWorker) Start() error {$/;"	f	struct:inbound.tcpWorker	typeref:typename:error
Start	app/proxyman/inbound/worker.go	/^func (w *udpWorker) Start() error {$/;"	f	struct:inbound.udpWorker	typeref:typename:error
Start	app/proxyman/outbound/handler.go	/^func (h *Handler) Start() error {$/;"	f	struct:outbound.Handler	typeref:typename:error
Start	app/proxyman/outbound/outbound.go	/^func (m *Manager) Start() error {$/;"	f	struct:outbound.Manager	typeref:typename:error
Start	app/reverse/bridge.go	/^func (b *Bridge) Start() error {$/;"	f	struct:reverse.Bridge	typeref:typename:error
Start	app/reverse/bridge.go	/^func (w *BridgeWorker) Start() error {$/;"	f	struct:reverse.BridgeWorker	typeref:typename:error
Start	app/reverse/portal.go	/^func (o *Outbound) Start() error {$/;"	f	struct:reverse.Outbound	typeref:typename:error
Start	app/reverse/portal.go	/^func (p *Portal) Start() error {$/;"	f	struct:reverse.Portal	typeref:typename:error
Start	app/reverse/reverse.go	/^func (r *Reverse) Start() error {$/;"	f	struct:reverse.Reverse	typeref:typename:error
Start	app/router/router.go	/^func (*Router) Start() error {$/;"	f	struct:router.Router	typeref:typename:error
Start	app/stats/channel.go	/^func (c *Channel) Start() error {$/;"	f	struct:stats.Channel	typeref:typename:error
Start	app/stats/stats.go	/^func (m *Manager) Start() error {$/;"	f	struct:stats.Manager	typeref:typename:error
Start	common/interfaces.go	/^	Start() error$/;"	n	interface:common.Runnable	typeref:typename:error
Start	common/mux/server.go	/^func (s *Server) Start() error {$/;"	f	struct:mux.Server	typeref:typename:error
Start	common/task/periodic.go	/^func (t *Periodic) Start() error {$/;"	f	struct:task.Periodic	typeref:typename:error
Start	features/dns/localdns/client.go	/^func (*Client) Start() error { return nil }$/;"	f	struct:localdns.Client	typeref:typename:error
Start	features/policy/default.go	/^func (DefaultManager) Start() error {$/;"	f	struct:policy.DefaultManager	typeref:typename:error
Start	features/routing/router.go	/^func (DefaultRouter) Start() error {$/;"	f	struct:routing.DefaultRouter	typeref:typename:error
Start	features/stats/stats.go	/^func (NoopManager) Start() error { return nil }$/;"	f	struct:stats.NoopManager	typeref:typename:error
Start	testing/mocks/dns.go	/^func (m *DNSClient) Start() error {$/;"	f	struct:mocks.DNSClient	typeref:typename:error
Start	testing/mocks/dns.go	/^func (mr *DNSClientMockRecorder) Start() *gomock.Call {$/;"	f	struct:mocks.DNSClientMockRecorder	typeref:typename:*gomock.Call
Start	testing/mocks/outbound.go	/^func (m *OutboundManager) Start() error {$/;"	f	struct:mocks.OutboundManager	typeref:typename:error
Start	testing/mocks/outbound.go	/^func (mr *OutboundManagerMockRecorder) Start() *gomock.Call {$/;"	f	struct:mocks.OutboundManagerMockRecorder	typeref:typename:*gomock.Call
Start	testing/servers/http/http.go	/^func (s *Server) Start() (net.Destination, error) {$/;"	f	struct:tcp.Server	typeref:typename:(net.Destination, error)
Start	testing/servers/tcp/tcp.go	/^func (server *Server) Start() (net.Destination, error) {$/;"	f	struct:tcp.Server	typeref:typename:(net.Destination, error)
Start	testing/servers/udp/udp.go	/^func (server *Server) Start() (net.Destination, error) {$/;"	f	struct:udp.Server	typeref:typename:(net.Destination, error)
Start	transport/internet/udp/dispatcher_test.go	/^func (d *TestDispatcher) Start() error {$/;"	f	struct:udp_test.TestDispatcher	typeref:typename:error
Start	v2ray.go	/^func (s *Instance) Start() error {$/;"	f	struct:core.Instance	typeref:typename:error
StartContext	testing/servers/tcp/tcp.go	/^func (server *Server) StartContext(ctx context.Context, sockopt *internet.SocketConfig) (net.Des/;"	f	struct:tcp.Server	typeref:typename:(net.Destination, error)
StartGrpcServer	app/p2p/api.go	/^func (this *P2PNode) StartGrpcServer() {$/;"	f	struct:p2p.P2PNode
StartInstance	functions.go	/^func StartInstance(configFormat string, configBytes []byte) (*Instance, error) {$/;"	f	package:core	typeref:typename:(*Instance, error)
StartListen	app/p2p/api.go	/^func (this *P2PNode) StartListen(done chan struct{}) {$/;"	f	struct:p2p.P2PNode
StartSeedlistGossipPubSub	app/p2p/protocol/seedlist/pubsub.go	/^func (*SeedListProtocol) StartSeedlistGossipPubSub(ctx context.Context, host core.Host) {$/;"	f	unknown:seedlist.SeedListProtocol
StartService	app/p2p/api.go	/^func (this *P2PNode) StartService() {$/;"	f	struct:p2p.P2PNode
Stat	app/stats/command/command.pb.go	/^	Stat *Stat `protobuf:"bytes,1,opt,name=stat,proto3" json:"stat,omitempty"`$/;"	m	struct:command.GetStatsResponse	typeref:typename:*Stat
Stat	app/stats/command/command.pb.go	/^	Stat []*Stat `protobuf:"bytes,1,rep,name=stat,proto3" json:"stat,omitempty"`$/;"	m	struct:command.QueryStatsResponse	typeref:typename:[]*Stat
Stat	app/stats/command/command.pb.go	/^type Stat struct {$/;"	s	package:command
Stat	app/stats/command/command.proto	/^message Stat {$/;"	m	package:v2ray.core.app.stats.command
StatCouterConnection	transport/internet/connection.go	/^type StatCouterConnection struct {$/;"	s	package:internet
State	app/reverse/config.pb.go	/^	State  Control_State `protobuf:"varint,1,opt,name=state,proto3,enum=v2ray.core.app.reverse.Cont/;"	m	struct:reverse.Control	typeref:typename:Control_State
State	app/reverse/config.proto	/^  enum State {$/;"	g	message:v2ray.core.app.reverse.Control
State	infra/conf/json/reader.go	/^type State byte$/;"	t	package:json	typeref:typename:byte
State	transport/internet/kcp/connection.go	/^func (c *Connection) State() State {$/;"	f	struct:kcp.Connection	typeref:typename:State
State	transport/internet/kcp/connection.go	/^type State int32$/;"	t	package:kcp	typeref:typename:int32
StateActive	transport/internet/kcp/connection.go	/^	StateActive          State = 0 \/\/ Connection is active$/;"	c	package:kcp	typeref:type:State
StateComment	infra/conf/json/reader.go	/^	StateComment$/;"	c	package:json
StateContent	infra/conf/json/reader.go	/^	StateContent State = iota$/;"	c	package:json	typeref:type:State
StateDoubleQuote	infra/conf/json/reader.go	/^	StateDoubleQuote$/;"	c	package:json
StateDoubleQuoteEscape	infra/conf/json/reader.go	/^	StateDoubleQuoteEscape$/;"	c	package:json
StateEscape	infra/conf/json/reader.go	/^	StateEscape$/;"	c	package:json
StateMultilineComment	infra/conf/json/reader.go	/^	StateMultilineComment$/;"	c	package:json
StateMultilineCommentStar	infra/conf/json/reader.go	/^	StateMultilineCommentStar$/;"	c	package:json
StatePeerClosed	transport/internet/kcp/connection.go	/^	StatePeerClosed      State = 2 \/\/ Connection is closed on remote$/;"	c	package:kcp	typeref:type:State
StatePeerTerminating	transport/internet/kcp/connection.go	/^	StatePeerTerminating State = 4 \/\/ Connection is ready to be destroyed on remote$/;"	c	package:kcp	typeref:type:State
StateReadyToClose	transport/internet/kcp/connection.go	/^	StateReadyToClose    State = 1 \/\/ Connection is closed locally$/;"	c	package:kcp	typeref:type:State
StateSingleQuote	infra/conf/json/reader.go	/^	StateSingleQuote$/;"	c	package:json
StateSingleQuoteEscape	infra/conf/json/reader.go	/^	StateSingleQuoteEscape$/;"	c	package:json
StateSlash	infra/conf/json/reader.go	/^	StateSlash$/;"	c	package:json
StateTerminated	transport/internet/kcp/connection.go	/^	StateTerminated      State = 5 \/\/ Connection is destroyed.$/;"	c	package:kcp	typeref:type:State
StateTerminating	transport/internet/kcp/connection.go	/^	StateTerminating     State = 3 \/\/ Connection is ready to be destroyed locally$/;"	c	package:kcp	typeref:type:State
StaticHosts	app/dns/config.pb.go	/^	StaticHosts []*Config_HostMapping `protobuf:"bytes,4,rep,name=static_hosts,json=staticHosts,pro/;"	m	struct:dns.Config	typeref:typename:[]*Config_HostMapping
StaticHosts	app/dns/hosts.go	/^type StaticHosts struct {$/;"	s	package:dns
StaticMuxPicker	app/reverse/portal.go	/^type StaticMuxPicker struct {$/;"	s	package:reverse
Stats	app/policy/config.pb.go	/^	Stats   *Policy_Stats   `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`$/;"	m	struct:policy.Policy	typeref:typename:*Policy_Stats
Stats	app/policy/config.pb.go	/^	Stats *SystemPolicy_Stats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`$/;"	m	struct:policy.SystemPolicy	typeref:typename:*SystemPolicy_Stats
Stats	app/policy/config.proto	/^  message Stats {$/;"	m	message:v2ray.core.app.policy.Policy
Stats	app/policy/config.proto	/^  message Stats {$/;"	m	message:v2ray.core.app.policy.SystemPolicy
Stats	features/policy/policy.go	/^	Stats    Stats$/;"	m	struct:policy.Session	typeref:typename:Stats
Stats	features/policy/policy.go	/^	Stats  SystemStats$/;"	m	struct:policy.System	typeref:typename:SystemStats
Stats	features/policy/policy.go	/^type Stats struct {$/;"	s	package:policy
Stats	infra/conf/v2ray.go	/^	Stats           *StatsConfig           `json:"stats"`$/;"	m	struct:conf.Config	typeref:typename:*StatsConfig
StatsConfig	infra/conf/v2ray.go	/^type StatsConfig struct{}$/;"	s	package:conf
StatsInboundDownlink	infra/conf/policy.go	/^	StatsInboundDownlink  bool `json:"statsInboundDownlink"`$/;"	m	struct:conf.SystemPolicy	typeref:typename:bool
StatsInboundUplink	infra/conf/policy.go	/^	StatsInboundUplink    bool `json:"statsInboundUplink"`$/;"	m	struct:conf.SystemPolicy	typeref:typename:bool
StatsOutboundDownlink	infra/conf/policy.go	/^	StatsOutboundDownlink bool `json:"statsOutboundDownlink"`$/;"	m	struct:conf.SystemPolicy	typeref:typename:bool
StatsOutboundUplink	infra/conf/policy.go	/^	StatsOutboundUplink   bool `json:"statsOutboundUplink"`$/;"	m	struct:conf.SystemPolicy	typeref:typename:bool
StatsService	app/stats/command/command.proto	/^service StatsService {$/;"	s	package:v2ray.core.app.stats.command
StatsServiceClient	app/stats/command/command_grpc.pb.go	/^type StatsServiceClient interface {$/;"	i	package:command
StatsServiceServer	app/stats/command/command_grpc.pb.go	/^type StatsServiceServer interface {$/;"	i	package:command
StatsUserDownlink	infra/conf/policy.go	/^	StatsUserDownlink bool    `json:"statsUserDownlink"`$/;"	m	struct:conf.Policy	typeref:typename:bool
StatsUserUplink	infra/conf/policy.go	/^	StatsUserUplink   bool    `json:"statsUserUplink"`$/;"	m	struct:conf.Policy	typeref:typename:bool
Status	common/log/access.go	/^	Status AccessStatus$/;"	m	struct:log.AccessMessage	typeref:typename:AccessStatus
Status	infra/conf/transport_authenticators.go	/^	Status  string                 `json:"status"`$/;"	m	struct:conf.HTTPAuthenticatorResponse	typeref:typename:string
Status	transport/internet/headers/http/config.pb.go	/^	Status  *Status   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`$/;"	m	struct:http.ResponseConfig	typeref:typename:*Status
Status	transport/internet/headers/http/config.pb.go	/^type Status struct {$/;"	s	package:http
Status	transport/internet/headers/http/config.proto	/^message Status {$/;"	m	package:v2ray.core.transport.internet.headers.http
Store	store/db.go	/^type Store interface {$/;"	i	package:store
Strategy	common/mux/client.go	/^	Strategy ClientStrategy$/;"	m	struct:mux.DialingWorkerFactory	typeref:typename:ClientStrategy
Strategy	common/retry/retry.go	/^type Strategy interface {$/;"	i	package:retry
Strategy	infra/conf/v2ray.go	/^	Strategy    string  `json:"strategy"`$/;"	m	struct:conf.InboundDetourAllocationConfig	typeref:typename:string
StreamConfig	infra/conf/transport_internet.go	/^type StreamConfig struct {$/;"	s	package:conf
StreamConfig	transport/internet/config.pb.go	/^type StreamConfig struct {$/;"	s	package:internet
StreamConfig	transport/internet/config.proto	/^message StreamConfig {$/;"	m	package:v2ray.core.transport.internet
StreamSetting	infra/conf/v2ray.go	/^	StreamSetting  *StreamConfig                  `json:"streamSettings"`$/;"	m	struct:conf.InboundDetourConfig	typeref:typename:*StreamConfig
StreamSetting	infra/conf/v2ray.go	/^	StreamSetting *StreamConfig    `json:"streamSettings"`$/;"	m	struct:conf.OutboundDetourConfig	typeref:typename:*StreamConfig
StreamSettings	app/proxyman/config.pb.go	/^	StreamSettings             *internet.StreamConfig `protobuf:"bytes,4,opt,name=stream_settings,j/;"	m	struct:proxyman.ReceiverConfig	typeref:typename:*internet.StreamConfig
StreamSettings	app/proxyman/config.pb.go	/^	StreamSettings    *internet.StreamConfig `protobuf:"bytes,2,opt,name=stream_settings,json=strea/;"	m	struct:proxyman.SenderConfig	typeref:typename:*internet.StreamConfig
String	app/commander/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:commander.Config	typeref:typename:string
String	app/dispatcher/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:dispatcher.Config	typeref:typename:string
String	app/dispatcher/config.pb.go	/^func (x *SessionConfig) String() string {$/;"	f	struct:dispatcher.SessionConfig	typeref:typename:string
String	app/dns/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:dns.Config	typeref:typename:string
String	app/dns/config.pb.go	/^func (x *Config_HostMapping) String() string {$/;"	f	struct:dns.Config_HostMapping	typeref:typename:string
String	app/dns/config.pb.go	/^func (x *NameServer) String() string {$/;"	f	struct:dns.NameServer	typeref:typename:string
String	app/dns/config.pb.go	/^func (x *NameServer_OriginalRule) String() string {$/;"	f	struct:dns.NameServer_OriginalRule	typeref:typename:string
String	app/dns/config.pb.go	/^func (x *NameServer_PriorityDomain) String() string {$/;"	f	struct:dns.NameServer_PriorityDomain	typeref:typename:string
String	app/dns/config.pb.go	/^func (x DomainMatchingType) String() string {$/;"	f	type:dns.DomainMatchingType	typeref:typename:string
String	app/log/command/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:command.Config	typeref:typename:string
String	app/log/command/config.pb.go	/^func (x *RestartLoggerRequest) String() string {$/;"	f	struct:command.RestartLoggerRequest	typeref:typename:string
String	app/log/command/config.pb.go	/^func (x *RestartLoggerResponse) String() string {$/;"	f	struct:command.RestartLoggerResponse	typeref:typename:string
String	app/log/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:log.Config	typeref:typename:string
String	app/log/config.pb.go	/^func (x LogType) String() string {$/;"	f	type:log.LogType	typeref:typename:string
String	app/p2p/config.pb.go	/^func (m *Config) String() string { return proto.CompactTextString(m) }$/;"	f	struct:p2p.Config	typeref:typename:string
String	app/p2p/config.pb.go	/^func (m *Seed) String() string { return proto.CompactTextString(m) }$/;"	f	struct:p2p.Seed	typeref:typename:string
String	app/p2p/wire/notifier.pb.go	/^func (m *HelloReply) String() string { return proto.CompactTextString(m) }$/;"	f	struct:wire.HelloReply	typeref:typename:string
String	app/p2p/wire/notifier.pb.go	/^func (m *HelloRequest) String() string { return proto.CompactTextString(m) }$/;"	f	struct:wire.HelloRequest	typeref:typename:string
String	app/p2p/wire/seedlist.pb.go	/^func (this *HelloSeedList) String() string {$/;"	f	struct:wire.HelloSeedList	typeref:typename:string
String	app/p2p/wire/seedlist.pb.go	/^func (this *MessageData) String() string {$/;"	f	struct:wire.MessageData	typeref:typename:string
String	app/p2p/wire/seedlist.pb.go	/^func (this *SeedInfo) String() string {$/;"	f	struct:wire.SeedInfo	typeref:typename:string
String	app/p2p/wire/seedlist.pb.go	/^func (this *SeedListRequest) String() string {$/;"	f	struct:wire.SeedListRequest	typeref:typename:string
String	app/p2p/wire/seedlist.pb.go	/^func (this *SeedListResponse) String() string {$/;"	f	struct:wire.SeedListResponse	typeref:typename:string
String	app/p2p/wire/seedlist.pb.go	/^func (x ActionType) String() string {$/;"	f	type:wire.ActionType	typeref:typename:string
String	app/policy/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:policy.Config	typeref:typename:string
String	app/policy/config.pb.go	/^func (x *Policy) String() string {$/;"	f	struct:policy.Policy	typeref:typename:string
String	app/policy/config.pb.go	/^func (x *Policy_Buffer) String() string {$/;"	f	struct:policy.Policy_Buffer	typeref:typename:string
String	app/policy/config.pb.go	/^func (x *Policy_Stats) String() string {$/;"	f	struct:policy.Policy_Stats	typeref:typename:string
String	app/policy/config.pb.go	/^func (x *Policy_Timeout) String() string {$/;"	f	struct:policy.Policy_Timeout	typeref:typename:string
String	app/policy/config.pb.go	/^func (x *Second) String() string {$/;"	f	struct:policy.Second	typeref:typename:string
String	app/policy/config.pb.go	/^func (x *SystemPolicy) String() string {$/;"	f	struct:policy.SystemPolicy	typeref:typename:string
String	app/policy/config.pb.go	/^func (x *SystemPolicy_Stats) String() string {$/;"	f	struct:policy.SystemPolicy_Stats	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *AddInboundRequest) String() string {$/;"	f	struct:command.AddInboundRequest	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *AddInboundResponse) String() string {$/;"	f	struct:command.AddInboundResponse	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *AddOutboundRequest) String() string {$/;"	f	struct:command.AddOutboundRequest	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *AddOutboundResponse) String() string {$/;"	f	struct:command.AddOutboundResponse	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *AddUserOperation) String() string {$/;"	f	struct:command.AddUserOperation	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *AlterInboundRequest) String() string {$/;"	f	struct:command.AlterInboundRequest	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *AlterInboundResponse) String() string {$/;"	f	struct:command.AlterInboundResponse	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *AlterOutboundRequest) String() string {$/;"	f	struct:command.AlterOutboundRequest	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *AlterOutboundResponse) String() string {$/;"	f	struct:command.AlterOutboundResponse	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *Config) String() string {$/;"	f	struct:command.Config	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *RemoveInboundRequest) String() string {$/;"	f	struct:command.RemoveInboundRequest	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *RemoveInboundResponse) String() string {$/;"	f	struct:command.RemoveInboundResponse	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *RemoveOutboundRequest) String() string {$/;"	f	struct:command.RemoveOutboundRequest	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *RemoveOutboundResponse) String() string {$/;"	f	struct:command.RemoveOutboundResponse	typeref:typename:string
String	app/proxyman/command/command.pb.go	/^func (x *RemoveUserOperation) String() string {$/;"	f	struct:command.RemoveUserOperation	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x *AllocationStrategy) String() string {$/;"	f	struct:proxyman.AllocationStrategy	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x *AllocationStrategy_AllocationStrategyConcurrency) String() string {$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyConcurrency	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x *AllocationStrategy_AllocationStrategyRefresh) String() string {$/;"	f	struct:proxyman.AllocationStrategy_AllocationStrategyRefresh	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x *InboundConfig) String() string {$/;"	f	struct:proxyman.InboundConfig	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x *InboundHandlerConfig) String() string {$/;"	f	struct:proxyman.InboundHandlerConfig	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x *MultiplexingConfig) String() string {$/;"	f	struct:proxyman.MultiplexingConfig	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x *OutboundConfig) String() string {$/;"	f	struct:proxyman.OutboundConfig	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x *ReceiverConfig) String() string {$/;"	f	struct:proxyman.ReceiverConfig	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x *SenderConfig) String() string {$/;"	f	struct:proxyman.SenderConfig	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x *SniffingConfig) String() string {$/;"	f	struct:proxyman.SniffingConfig	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x AllocationStrategy_Type) String() string {$/;"	f	type:proxyman.AllocationStrategy_Type	typeref:typename:string
String	app/proxyman/config.pb.go	/^func (x KnownProtocols) String() string {$/;"	f	type:proxyman.KnownProtocols	typeref:typename:string
String	app/reverse/config.pb.go	/^func (x *BridgeConfig) String() string {$/;"	f	struct:reverse.BridgeConfig	typeref:typename:string
String	app/reverse/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:reverse.Config	typeref:typename:string
String	app/reverse/config.pb.go	/^func (x *Control) String() string {$/;"	f	struct:reverse.Control	typeref:typename:string
String	app/reverse/config.pb.go	/^func (x *PortalConfig) String() string {$/;"	f	struct:reverse.PortalConfig	typeref:typename:string
String	app/reverse/config.pb.go	/^func (x Control_State) String() string {$/;"	f	type:reverse.Control_State	typeref:typename:string
String	app/router/command/command.pb.go	/^func (x *Config) String() string {$/;"	f	struct:command.Config	typeref:typename:string
String	app/router/command/command.pb.go	/^func (x *RoutingContext) String() string {$/;"	f	struct:command.RoutingContext	typeref:typename:string
String	app/router/command/command.pb.go	/^func (x *SubscribeRoutingStatsRequest) String() string {$/;"	f	struct:command.SubscribeRoutingStatsRequest	typeref:typename:string
String	app/router/command/command.pb.go	/^func (x *TestRouteRequest) String() string {$/;"	f	struct:command.TestRouteRequest	typeref:typename:string
String	app/router/config.pb.go	/^func (x *BalancingRule) String() string {$/;"	f	struct:router.BalancingRule	typeref:typename:string
String	app/router/config.pb.go	/^func (x *CIDR) String() string {$/;"	f	struct:router.CIDR	typeref:typename:string
String	app/router/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:router.Config	typeref:typename:string
String	app/router/config.pb.go	/^func (x *Domain) String() string {$/;"	f	struct:router.Domain	typeref:typename:string
String	app/router/config.pb.go	/^func (x *Domain_Attribute) String() string {$/;"	f	struct:router.Domain_Attribute	typeref:typename:string
String	app/router/config.pb.go	/^func (x *GeoIP) String() string {$/;"	f	struct:router.GeoIP	typeref:typename:string
String	app/router/config.pb.go	/^func (x *GeoIPList) String() string {$/;"	f	struct:router.GeoIPList	typeref:typename:string
String	app/router/config.pb.go	/^func (x *GeoSite) String() string {$/;"	f	struct:router.GeoSite	typeref:typename:string
String	app/router/config.pb.go	/^func (x *GeoSiteList) String() string {$/;"	f	struct:router.GeoSiteList	typeref:typename:string
String	app/router/config.pb.go	/^func (x *RoutingRule) String() string {$/;"	f	struct:router.RoutingRule	typeref:typename:string
String	app/router/config.pb.go	/^func (x Config_DomainStrategy) String() string {$/;"	f	type:router.Config_DomainStrategy	typeref:typename:string
String	app/router/config.pb.go	/^func (x Domain_Type) String() string {$/;"	f	type:router.Domain_Type	typeref:typename:string
String	app/stats/command/command.pb.go	/^func (x *Config) String() string {$/;"	f	struct:command.Config	typeref:typename:string
String	app/stats/command/command.pb.go	/^func (x *GetStatsRequest) String() string {$/;"	f	struct:command.GetStatsRequest	typeref:typename:string
String	app/stats/command/command.pb.go	/^func (x *GetStatsResponse) String() string {$/;"	f	struct:command.GetStatsResponse	typeref:typename:string
String	app/stats/command/command.pb.go	/^func (x *QueryStatsRequest) String() string {$/;"	f	struct:command.QueryStatsRequest	typeref:typename:string
String	app/stats/command/command.pb.go	/^func (x *QueryStatsResponse) String() string {$/;"	f	struct:command.QueryStatsResponse	typeref:typename:string
String	app/stats/command/command.pb.go	/^func (x *Stat) String() string {$/;"	f	struct:command.Stat	typeref:typename:string
String	app/stats/command/command.pb.go	/^func (x *SysStatsRequest) String() string {$/;"	f	struct:command.SysStatsRequest	typeref:typename:string
String	app/stats/command/command.pb.go	/^func (x *SysStatsResponse) String() string {$/;"	f	struct:command.SysStatsResponse	typeref:typename:string
String	app/stats/config.pb.go	/^func (x *ChannelConfig) String() string {$/;"	f	struct:stats.ChannelConfig	typeref:typename:string
String	app/stats/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:stats.Config	typeref:typename:string
String	common/buf/buffer.go	/^func (b *Buffer) String() string {$/;"	f	struct:buf.Buffer	typeref:typename:string
String	common/buf/multi_buffer.go	/^func (mb MultiBuffer) String() string {$/;"	f	type:buf.MultiBuffer	typeref:typename:string
String	common/cmdarg/cmdarg.go	/^func (c *Arg) String() string {$/;"	f	type:cmdarg.Arg	typeref:typename:string
String	common/errors/errors.go	/^func (err *Error) String() string {$/;"	f	struct:errors.Error	typeref:typename:string
String	common/log/access.go	/^func (m *AccessMessage) String() string {$/;"	f	struct:log.AccessMessage	typeref:typename:string
String	common/log/log.go	/^	String() string$/;"	n	interface:log.Message	typeref:typename:string
String	common/log/log.go	/^func (m *GeneralMessage) String() string {$/;"	f	struct:log.GeneralMessage	typeref:typename:string
String	common/log/log.pb.go	/^func (x Severity) String() string {$/;"	f	type:log.Severity	typeref:typename:string
String	common/net/address.go	/^	String() string \/\/ String representation of this Address$/;"	n	interface:net.Address	typeref:typename:string
String	common/net/address.go	/^func (a domainAddress) String() string {$/;"	f	type:net.domainAddress	typeref:typename:string
String	common/net/address.go	/^func (a ipv4Address) String() string {$/;"	f	type:net.ipv4Address	typeref:typename:string
String	common/net/address.go	/^func (a ipv6Address) String() string {$/;"	f	type:net.ipv6Address	typeref:typename:string
String	common/net/address.pb.go	/^func (x *IPOrDomain) String() string {$/;"	f	struct:net.IPOrDomain	typeref:typename:string
String	common/net/destination.go	/^func (d Destination) String() string {$/;"	f	struct:net.Destination	typeref:typename:string
String	common/net/destination.pb.go	/^func (x *Endpoint) String() string {$/;"	f	struct:net.Endpoint	typeref:typename:string
String	common/net/network.pb.go	/^func (x *NetworkList) String() string {$/;"	f	struct:net.NetworkList	typeref:typename:string
String	common/net/network.pb.go	/^func (x Network) String() string {$/;"	f	type:net.Network	typeref:typename:string
String	common/net/port.go	/^func (p Port) String() string {$/;"	f	type:net.Port	typeref:typename:string
String	common/net/port.pb.go	/^func (x *PortList) String() string {$/;"	f	struct:net.PortList	typeref:typename:string
String	common/net/port.pb.go	/^func (x *PortRange) String() string {$/;"	f	struct:net.PortRange	typeref:typename:string
String	common/protocol/headers.pb.go	/^func (x *SecurityConfig) String() string {$/;"	f	struct:protocol.SecurityConfig	typeref:typename:string
String	common/protocol/headers.pb.go	/^func (x SecurityType) String() string {$/;"	f	type:protocol.SecurityType	typeref:typename:string
String	common/protocol/id.go	/^func (id *ID) String() string {$/;"	f	struct:protocol.ID	typeref:typename:string
String	common/protocol/server_spec.pb.go	/^func (x *ServerEndpoint) String() string {$/;"	f	struct:protocol.ServerEndpoint	typeref:typename:string
String	common/protocol/user.pb.go	/^func (x *User) String() string {$/;"	f	struct:protocol.User	typeref:typename:string
String	common/serial/typed_message.pb.go	/^func (x *TypedMessage) String() string {$/;"	f	struct:serial.TypedMessage	typeref:typename:string
String	common/strmatcher/matchers.go	/^func (m *regexMatcher) String() string {$/;"	f	struct:strmatcher.regexMatcher	typeref:typename:string
String	common/strmatcher/matchers.go	/^func (m domainMatcher) String() string {$/;"	f	type:strmatcher.domainMatcher	typeref:typename:string
String	common/strmatcher/matchers.go	/^func (m fullMatcher) String() string {$/;"	f	type:strmatcher.fullMatcher	typeref:typename:string
String	common/strmatcher/matchers.go	/^func (m substrMatcher) String() string {$/;"	f	type:strmatcher.substrMatcher	typeref:typename:string
String	common/strmatcher/strmatcher.go	/^	String() string$/;"	n	interface:strmatcher.Matcher	typeref:typename:string
String	common/uuid/uuid.go	/^func (u *UUID) String() string {$/;"	f	type:uuid.UUID	typeref:typename:string
String	config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:core.Config	typeref:typename:string
String	config.pb.go	/^func (x *InboundHandlerConfig) String() string {$/;"	f	struct:core.InboundHandlerConfig	typeref:typename:string
String	config.pb.go	/^func (x *OutboundHandlerConfig) String() string {$/;"	f	struct:core.OutboundHandlerConfig	typeref:typename:string
String	infra/control/cert.go	/^func (l *stringList) String() string {$/;"	f	type:control.stringList	typeref:typename:string
String	proxy/blackhole/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:blackhole.Config	typeref:typename:string
String	proxy/blackhole/config.pb.go	/^func (x *HTTPResponse) String() string {$/;"	f	struct:blackhole.HTTPResponse	typeref:typename:string
String	proxy/blackhole/config.pb.go	/^func (x *NoneResponse) String() string {$/;"	f	struct:blackhole.NoneResponse	typeref:typename:string
String	proxy/dns/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:dns.Config	typeref:typename:string
String	proxy/dokodemo/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:dokodemo.Config	typeref:typename:string
String	proxy/freedom/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:freedom.Config	typeref:typename:string
String	proxy/freedom/config.pb.go	/^func (x *DestinationOverride) String() string {$/;"	f	struct:freedom.DestinationOverride	typeref:typename:string
String	proxy/freedom/config.pb.go	/^func (x Config_DomainStrategy) String() string {$/;"	f	type:freedom.Config_DomainStrategy	typeref:typename:string
String	proxy/http/config.pb.go	/^func (x *Account) String() string {$/;"	f	struct:http.Account	typeref:typename:string
String	proxy/http/config.pb.go	/^func (x *ClientConfig) String() string {$/;"	f	struct:http.ClientConfig	typeref:typename:string
String	proxy/http/config.pb.go	/^func (x *ServerConfig) String() string {$/;"	f	struct:http.ServerConfig	typeref:typename:string
String	proxy/mtproto/config.pb.go	/^func (x *Account) String() string {$/;"	f	struct:mtproto.Account	typeref:typename:string
String	proxy/mtproto/config.pb.go	/^func (x *ClientConfig) String() string {$/;"	f	struct:mtproto.ClientConfig	typeref:typename:string
String	proxy/mtproto/config.pb.go	/^func (x *ServerConfig) String() string {$/;"	f	struct:mtproto.ServerConfig	typeref:typename:string
String	proxy/shadowsocks/config.pb.go	/^func (x *Account) String() string {$/;"	f	struct:shadowsocks.Account	typeref:typename:string
String	proxy/shadowsocks/config.pb.go	/^func (x *ClientConfig) String() string {$/;"	f	struct:shadowsocks.ClientConfig	typeref:typename:string
String	proxy/shadowsocks/config.pb.go	/^func (x *ServerConfig) String() string {$/;"	f	struct:shadowsocks.ServerConfig	typeref:typename:string
String	proxy/shadowsocks/config.pb.go	/^func (x CipherType) String() string {$/;"	f	type:shadowsocks.CipherType	typeref:typename:string
String	proxy/socks/config.pb.go	/^func (x *Account) String() string {$/;"	f	struct:socks.Account	typeref:typename:string
String	proxy/socks/config.pb.go	/^func (x *ClientConfig) String() string {$/;"	f	struct:socks.ClientConfig	typeref:typename:string
String	proxy/socks/config.pb.go	/^func (x *ServerConfig) String() string {$/;"	f	struct:socks.ServerConfig	typeref:typename:string
String	proxy/socks/config.pb.go	/^func (x AuthType) String() string {$/;"	f	type:socks.AuthType	typeref:typename:string
String	proxy/trojan/config.pb.go	/^func (x *Account) String() string {$/;"	f	struct:trojan.Account	typeref:typename:string
String	proxy/trojan/config.pb.go	/^func (x *ClientConfig) String() string {$/;"	f	struct:trojan.ClientConfig	typeref:typename:string
String	proxy/trojan/config.pb.go	/^func (x *Fallback) String() string {$/;"	f	struct:trojan.Fallback	typeref:typename:string
String	proxy/trojan/config.pb.go	/^func (x *ServerConfig) String() string {$/;"	f	struct:trojan.ServerConfig	typeref:typename:string
String	proxy/vless/account.pb.go	/^func (x *Account) String() string {$/;"	f	struct:vless.Account	typeref:typename:string
String	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) String() string { return proto.CompactTextString(m) }$/;"	f	struct:encoding.Addons	typeref:typename:string
String	proxy/vless/inbound/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:inbound.Config	typeref:typename:string
String	proxy/vless/inbound/config.pb.go	/^func (x *Fallback) String() string {$/;"	f	struct:inbound.Fallback	typeref:typename:string
String	proxy/vless/outbound/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:outbound.Config	typeref:typename:string
String	proxy/vmess/account.pb.go	/^func (x *Account) String() string {$/;"	f	struct:vmess.Account	typeref:typename:string
String	proxy/vmess/inbound/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:inbound.Config	typeref:typename:string
String	proxy/vmess/inbound/config.pb.go	/^func (x *DefaultConfig) String() string {$/;"	f	struct:inbound.DefaultConfig	typeref:typename:string
String	proxy/vmess/inbound/config.pb.go	/^func (x *DetourConfig) String() string {$/;"	f	struct:inbound.DetourConfig	typeref:typename:string
String	proxy/vmess/outbound/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:outbound.Config	typeref:typename:string
String	transport/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:transport.Config	typeref:typename:string
String	transport/internet/config.pb.go	/^func (x *ProxyConfig) String() string {$/;"	f	struct:internet.ProxyConfig	typeref:typename:string
String	transport/internet/config.pb.go	/^func (x *SocketConfig) String() string {$/;"	f	struct:internet.SocketConfig	typeref:typename:string
String	transport/internet/config.pb.go	/^func (x *StreamConfig) String() string {$/;"	f	struct:internet.StreamConfig	typeref:typename:string
String	transport/internet/config.pb.go	/^func (x *TransportConfig) String() string {$/;"	f	struct:internet.TransportConfig	typeref:typename:string
String	transport/internet/config.pb.go	/^func (x SocketConfig_TCPFastOpenState) String() string {$/;"	f	type:internet.SocketConfig_TCPFastOpenState	typeref:typename:string
String	transport/internet/config.pb.go	/^func (x SocketConfig_TProxyMode) String() string {$/;"	f	type:internet.SocketConfig_TProxyMode	typeref:typename:string
String	transport/internet/config.pb.go	/^func (x TransportProtocol) String() string {$/;"	f	type:internet.TransportProtocol	typeref:typename:string
String	transport/internet/domainsocket/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:domainsocket.Config	typeref:typename:string
String	transport/internet/headers/http/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:http.Config	typeref:typename:string
String	transport/internet/headers/http/config.pb.go	/^func (x *Header) String() string {$/;"	f	struct:http.Header	typeref:typename:string
String	transport/internet/headers/http/config.pb.go	/^func (x *Method) String() string {$/;"	f	struct:http.Method	typeref:typename:string
String	transport/internet/headers/http/config.pb.go	/^func (x *RequestConfig) String() string {$/;"	f	struct:http.RequestConfig	typeref:typename:string
String	transport/internet/headers/http/config.pb.go	/^func (x *ResponseConfig) String() string {$/;"	f	struct:http.ResponseConfig	typeref:typename:string
String	transport/internet/headers/http/config.pb.go	/^func (x *Status) String() string {$/;"	f	struct:http.Status	typeref:typename:string
String	transport/internet/headers/http/config.pb.go	/^func (x *Version) String() string {$/;"	f	struct:http.Version	typeref:typename:string
String	transport/internet/headers/noop/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:noop.Config	typeref:typename:string
String	transport/internet/headers/noop/config.pb.go	/^func (x *ConnectionConfig) String() string {$/;"	f	struct:noop.ConnectionConfig	typeref:typename:string
String	transport/internet/headers/srtp/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:srtp.Config	typeref:typename:string
String	transport/internet/headers/tls/config.pb.go	/^func (x *PacketConfig) String() string {$/;"	f	struct:tls.PacketConfig	typeref:typename:string
String	transport/internet/headers/utp/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:utp.Config	typeref:typename:string
String	transport/internet/headers/wechat/config.pb.go	/^func (x *VideoConfig) String() string {$/;"	f	struct:wechat.VideoConfig	typeref:typename:string
String	transport/internet/headers/wireguard/config.pb.go	/^func (x *WireguardConfig) String() string {$/;"	f	struct:wireguard.WireguardConfig	typeref:typename:string
String	transport/internet/http/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:http.Config	typeref:typename:string
String	transport/internet/kcp/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:kcp.Config	typeref:typename:string
String	transport/internet/kcp/config.pb.go	/^func (x *ConnectionReuse) String() string {$/;"	f	struct:kcp.ConnectionReuse	typeref:typename:string
String	transport/internet/kcp/config.pb.go	/^func (x *DownlinkCapacity) String() string {$/;"	f	struct:kcp.DownlinkCapacity	typeref:typename:string
String	transport/internet/kcp/config.pb.go	/^func (x *EncryptionSeed) String() string {$/;"	f	struct:kcp.EncryptionSeed	typeref:typename:string
String	transport/internet/kcp/config.pb.go	/^func (x *MTU) String() string {$/;"	f	struct:kcp.MTU	typeref:typename:string
String	transport/internet/kcp/config.pb.go	/^func (x *ReadBuffer) String() string {$/;"	f	struct:kcp.ReadBuffer	typeref:typename:string
String	transport/internet/kcp/config.pb.go	/^func (x *TTI) String() string {$/;"	f	struct:kcp.TTI	typeref:typename:string
String	transport/internet/kcp/config.pb.go	/^func (x *UplinkCapacity) String() string {$/;"	f	struct:kcp.UplinkCapacity	typeref:typename:string
String	transport/internet/kcp/config.pb.go	/^func (x *WriteBuffer) String() string {$/;"	f	struct:kcp.WriteBuffer	typeref:typename:string
String	transport/internet/quic/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:quic.Config	typeref:typename:string
String	transport/internet/tcp/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:tcp.Config	typeref:typename:string
String	transport/internet/tls/config.pb.go	/^func (x *Certificate) String() string {$/;"	f	struct:tls.Certificate	typeref:typename:string
String	transport/internet/tls/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:tls.Config	typeref:typename:string
String	transport/internet/tls/config.pb.go	/^func (x Certificate_Usage) String() string {$/;"	f	type:tls.Certificate_Usage	typeref:typename:string
String	transport/internet/udp/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:udp.Config	typeref:typename:string
String	transport/internet/websocket/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:websocket.Config	typeref:typename:string
String	transport/internet/websocket/config.pb.go	/^func (x *Header) String() string {$/;"	f	struct:websocket.Header	typeref:typename:string
String	transport/internet/xtls/config.pb.go	/^func (x *Certificate) String() string {$/;"	f	struct:xtls.Certificate	typeref:typename:string
String	transport/internet/xtls/config.pb.go	/^func (x *Config) String() string {$/;"	f	struct:xtls.Config	typeref:typename:string
String	transport/internet/xtls/config.pb.go	/^func (x Certificate_Usage) String() string {$/;"	f	type:xtls.Certificate_Usage	typeref:typename:string
StringList	infra/conf/common.go	/^type StringList []string$/;"	t	package:conf	typeref:typename:[]string
Subdomain	app/dns/config.proto	/^  Subdomain = 1;$/;"	e	enum:v2ray.core.app.dns.DomainMatchingType
Subscribe	app/stats/channel.go	/^func (c *Channel) Subscribe() (chan interface{}, error) {$/;"	f	struct:stats.Channel	typeref:typename:(chan interface{}, error)
Subscribe	common/signal/pubsub/pubsub.go	/^func (s *Service) Subscribe(name string) *Subscriber {$/;"	f	struct:pubsub.Service	typeref:typename:*Subscriber
Subscribe	features/stats/stats.go	/^	Subscribe() (chan interface{}, error)$/;"	n	interface:stats.Channel	typeref:typename:(chan interface{}, error)
SubscribeRoutingStats	app/router/command/command.go	/^func (s *routingServer) SubscribeRoutingStats(request *SubscribeRoutingStatsRequest, stream Rout/;"	f	struct:command.routingServer	typeref:typename:error
SubscribeRoutingStats	app/router/command/command.proto	/^  rpc SubscribeRoutingStats(SubscribeRoutingStatsRequest)$/;"	r	service:v2ray.core.app.router.command.RoutingService	typeref:typename:streamRoutingContext
SubscribeRoutingStats	app/router/command/command_grpc.pb.go	/^	SubscribeRoutingStats(*SubscribeRoutingStatsRequest, RoutingService_SubscribeRoutingStatsServer/;"	n	interface:command.RoutingServiceServer	typeref:typename:error
SubscribeRoutingStats	app/router/command/command_grpc.pb.go	/^	SubscribeRoutingStats(ctx context.Context, in *SubscribeRoutingStatsRequest, opts ...grpc.CallO/;"	n	interface:command.RoutingServiceClient	typeref:typename:(RoutingService_SubscribeRoutingStatsClient, error)
SubscribeRoutingStats	app/router/command/command_grpc.pb.go	/^func (UnimplementedRoutingServiceServer) SubscribeRoutingStats(*SubscribeRoutingStatsRequest, Ro/;"	f	struct:command.UnimplementedRoutingServiceServer	typeref:typename:error
SubscribeRoutingStats	app/router/command/command_grpc.pb.go	/^func (c *routingServiceClient) SubscribeRoutingStats(ctx context.Context, in *SubscribeRoutingSt/;"	f	struct:command.routingServiceClient	typeref:typename:(RoutingService_SubscribeRoutingStatsClient, error)
SubscribeRoutingStatsRequest	app/router/command/command.pb.go	/^type SubscribeRoutingStatsRequest struct {$/;"	s	package:command
SubscribeRoutingStatsRequest	app/router/command/command.proto	/^message SubscribeRoutingStatsRequest {$/;"	m	package:v2ray.core.app.router.command
SubscribeRunnableChannel	features/stats/stats.go	/^func SubscribeRunnableChannel(c Channel) (chan interface{}, error) {$/;"	f	package:stats	typeref:typename:(chan interface{}, error)
Subscriber	common/signal/pubsub/pubsub.go	/^type Subscriber struct {$/;"	s	package:pubsub
SubscriberLimit	app/stats/config.pb.go	/^	SubscriberLimit int32 `protobuf:"varint,2,opt,name=SubscriberLimit,proto3" json:"SubscriberLimi/;"	m	struct:stats.ChannelConfig	typeref:typename:int32
SubscriberLimit	app/stats/config.proto	/^  int32 SubscriberLimit = 2;$/;"	f	message:v2ray.core.app.stats.ChannelConfig	typeref:typename:int32
Subscribers	app/stats/channel.go	/^func (c *Channel) Subscribers() []chan interface{} {$/;"	f	struct:stats.Channel	typeref:typename:[]chan interface{}
Subscribers	features/stats/stats.go	/^	Subscribers() []chan interface{}$/;"	n	interface:stats.Channel	typeref:typename:[]chan interface{}
Substr	common/strmatcher/strmatcher.go	/^	Substr$/;"	c	package:strmatcher
Swap	app/router/config.go	/^func (l *CIDRList) Swap(i int, j int) {$/;"	f	type:router.CIDRList
Sys	app/stats/command/command.pb.go	/^	Sys          uint64 `protobuf:"varint,5,opt,name=Sys,proto3" json:"Sys,omitempty"`$/;"	m	struct:command.SysStatsResponse	typeref:typename:uint64
Sys	app/stats/command/command.proto	/^  uint64 Sys = 5;$/;"	f	message:v2ray.core.app.stats.command.SysStatsResponse	typeref:typename:uint64
SysStatsRequest	app/stats/command/command.pb.go	/^type SysStatsRequest struct {$/;"	s	package:command
SysStatsRequest	app/stats/command/command.proto	/^message SysStatsRequest {}$/;"	m	package:v2ray.core.app.stats.command
SysStatsResponse	app/stats/command/command.pb.go	/^type SysStatsResponse struct {$/;"	s	package:command
SysStatsResponse	app/stats/command/command.proto	/^message SysStatsResponse {$/;"	m	package:v2ray.core.app.stats.command
System	app/policy/config.pb.go	/^	System *SystemPolicy      `protobuf:"bytes,2,opt,name=system,proto3" json:"system,omitempty"`$/;"	m	struct:policy.Config	typeref:typename:*SystemPolicy
System	features/policy/policy.go	/^type System struct {$/;"	s	package:policy
System	infra/conf/policy.go	/^	System *SystemPolicy      `json:"system"`$/;"	m	struct:conf.PolicyConfig	typeref:typename:*SystemPolicy
SystemDialer	transport/internet/system_dialer.go	/^type SystemDialer interface {$/;"	i	package:internet
SystemDialerAdapter	transport/internet/system_dialer.go	/^type SystemDialerAdapter interface {$/;"	i	package:internet
SystemPolicy	app/policy/config.pb.go	/^type SystemPolicy struct {$/;"	s	package:policy
SystemPolicy	app/policy/config.proto	/^message SystemPolicy {$/;"	m	package:v2ray.core.app.policy
SystemPolicy	infra/conf/policy.go	/^type SystemPolicy struct {$/;"	s	package:conf
SystemPolicy_Stats	app/policy/config.pb.go	/^type SystemPolicy_Stats struct {$/;"	s	package:policy
SystemStats	features/policy/policy.go	/^type SystemStats struct {$/;"	s	package:policy
SystemString	common/net/network.go	/^func (n Network) SystemString() string {$/;"	f	unknown:net.Network	typeref:typename:string
TCP	common/net/network.proto	/^  TCP = 2;$/;"	e	enum:v2ray.core.common.net.Network
TCP	transport/internet/config.proto	/^  TCP = 0;$/;"	e	enum:v2ray.core.transport.internet.TransportProtocol
TCPAddr	common/net/system.go	/^type TCPAddr = net.TCPAddr$/;"	a	package:net	typeref:typename:net.TCPAddr
TCPConfig	infra/conf/transport.go	/^	TCPConfig  *TCPConfig          `json:"tcpSettings"`$/;"	m	struct:conf.TransportConfig	typeref:typename:*TCPConfig
TCPConfig	infra/conf/transport_internet.go	/^type TCPConfig struct {$/;"	s	package:conf
TCPConn	common/net/system.go	/^type TCPConn = net.TCPConn$/;"	a	package:net	typeref:typename:net.TCPConn
TCPDestination	common/net/destination.go	/^func TCPDestination(address Address, port Port) Destination {$/;"	f	package:net	typeref:typename:Destination
TCPFastOpenState	transport/internet/config.proto	/^  enum TCPFastOpenState {$/;"	g	message:v2ray.core.transport.internet.SocketConfig
TCPListener	common/net/system.go	/^type TCPListener = net.TCPListener$/;"	a	package:net	typeref:typename:net.TCPListener
TCPReader	common/protocol/dns/io.go	/^type TCPReader struct {$/;"	s	package:dns
TCPSettings	infra/conf/transport_internet.go	/^	TCPSettings    *TCPConfig          `json:"tcpSettings"`$/;"	m	struct:conf.StreamConfig	typeref:typename:*TCPConfig
TCPWriter	common/protocol/dns/io.go	/^type TCPWriter struct {$/;"	s	package:dns
TCP_FASTOPEN	transport/internet/sockopt_darwin.go	/^	TCP_FASTOPEN = 0x105$/;"	c	package:internet
TCP_FASTOPEN	transport/internet/sockopt_linux.go	/^	TCP_FASTOPEN = 23$/;"	c	package:internet
TCP_FASTOPEN	transport/internet/sockopt_windows.go	/^	TCP_FASTOPEN = 15$/;"	c	package:internet
TCP_FASTOPEN_CLIENT	transport/internet/sockopt_darwin.go	/^	TCP_FASTOPEN_CLIENT = 0x02$/;"	c	package:internet
TCP_FASTOPEN_CONNECT	transport/internet/sockopt_linux.go	/^	TCP_FASTOPEN_CONNECT = 30$/;"	c	package:internet
TCP_FASTOPEN_SERVER	transport/internet/sockopt_darwin.go	/^	TCP_FASTOPEN_SERVER = 0x01$/;"	c	package:internet
TConfig	common/type_test.go	/^type TConfig struct {$/;"	s	package:common_test
TEXT	transport/internet/kcp/xor_amd64.s	/^TEXT ·xorbkd(SB),NOSPLIT,$0$/;"	l
TEXT	transport/internet/kcp/xor_amd64.s	/^TEXT ·xorfwd(SB),NOSPLIT,$0$/;"	l
TFO	infra/conf/transport_internet.go	/^	TFO    *bool  `json:"tcpFastOpen"`$/;"	m	struct:conf.SocketConfig	typeref:typename:*bool
TLS	app/proxyman/config.proto	/^  TLS = 1;$/;"	e	enum:v2ray.core.app.proxyman.KnownProtocols
TLSCertConfig	infra/conf/transport_internet.go	/^type TLSCertConfig struct {$/;"	s	package:conf
TLSConfig	infra/conf/transport_internet.go	/^type TLSConfig struct {$/;"	s	package:conf
TLSSettings	infra/conf/transport_internet.go	/^	TLSSettings    *TLSConfig          `json:"tlsSettings"`$/;"	m	struct:conf.StreamConfig	typeref:typename:*TLSConfig
TPort	bin/config/config-server.json	/^    "TPort":6008,$/;"	n	object:porter
TProxy	infra/conf/transport_internet.go	/^	TProxy string `json:"tproxy"`$/;"	m	struct:conf.SocketConfig	typeref:typename:string
TProxy	transport/internet/config.proto	/^    TProxy = 1;$/;"	e	enum:v2ray.core.transport.internet.SocketConfig.TProxyMode
TProxyMode	transport/internet/config.proto	/^  enum TProxyMode {$/;"	g	message:v2ray.core.transport.internet.SocketConfig
TTI	transport/internet/kcp/config.pb.go	/^type TTI struct {$/;"	s	package:kcp
TTI	transport/internet/kcp/config.proto	/^message TTI {$/;"	m	package:v2ray.core.transport.internet.kcp
Tag	app/commander/config.pb.go	/^	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:commander.Config	typeref:typename:string
Tag	app/commander/outbound.go	/^func (co *Outbound) Tag() string {$/;"	f	struct:commander.Outbound	typeref:typename:string
Tag	app/dns/config.pb.go	/^	Tag string `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:dns.Config	typeref:typename:string
Tag	app/proxyman/command/command.pb.go	/^	Tag       string               `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:command.AlterInboundRequest	typeref:typename:string
Tag	app/proxyman/command/command.pb.go	/^	Tag       string               `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:command.AlterOutboundRequest	typeref:typename:string
Tag	app/proxyman/command/command.pb.go	/^	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:command.RemoveInboundRequest	typeref:typename:string
Tag	app/proxyman/command/command.pb.go	/^	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:command.RemoveOutboundRequest	typeref:typename:string
Tag	app/proxyman/config.pb.go	/^	Tag              string               `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitemp/;"	m	struct:proxyman.InboundHandlerConfig	typeref:typename:string
Tag	app/proxyman/inbound/always.go	/^func (h *AlwaysOnInboundHandler) Tag() string {$/;"	f	struct:inbound.AlwaysOnInboundHandler	typeref:typename:string
Tag	app/proxyman/inbound/dynamic.go	/^func (h *DynamicInboundHandler) Tag() string {$/;"	f	struct:inbound.DynamicInboundHandler	typeref:typename:string
Tag	app/proxyman/outbound/handler.go	/^func (h *Handler) Tag() string {$/;"	f	struct:outbound.Handler	typeref:typename:string
Tag	app/reverse/config.pb.go	/^	Tag    string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:reverse.BridgeConfig	typeref:typename:string
Tag	app/reverse/config.pb.go	/^	Tag    string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:reverse.PortalConfig	typeref:typename:string
Tag	app/reverse/portal.go	/^func (o *Outbound) Tag() string {$/;"	f	struct:reverse.Outbound	typeref:typename:string
Tag	app/router/config.go	/^	Tag       string$/;"	m	struct:router.Rule	typeref:typename:string
Tag	app/router/config.pb.go	/^	Tag              string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:router.BalancingRule	typeref:typename:string
Tag	app/router/config.pb.go	/^	Tag string `protobuf:"bytes,1,opt,name=tag,proto3,oneof"`$/;"	m	struct:router.RoutingRule_Tag	typeref:typename:string
Tag	common/session/session.go	/^	Tag string$/;"	m	struct:session.Inbound	typeref:typename:string
Tag	config.pb.go	/^	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:core.InboundHandlerConfig	typeref:typename:string
Tag	config.pb.go	/^	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:core.OutboundHandlerConfig	typeref:typename:string
Tag	features/inbound/inbound.go	/^	Tag() string$/;"	n	interface:inbound.Handler	typeref:typename:string
Tag	features/outbound/outbound.go	/^	Tag() string$/;"	n	interface:outbound.Handler	typeref:typename:string
Tag	infra/conf/api.go	/^	Tag      string   `json:"tag"`$/;"	m	struct:conf.ApiConfig	typeref:typename:string
Tag	infra/conf/dns.go	/^	Tag      string              `json:"tag"`$/;"	m	struct:conf.DnsConfig	typeref:typename:string
Tag	infra/conf/reverse.go	/^	Tag    string `json:"tag"`$/;"	m	struct:conf.BridgeConfig	typeref:typename:string
Tag	infra/conf/reverse.go	/^	Tag    string `json:"tag"`$/;"	m	struct:conf.PortalConfig	typeref:typename:string
Tag	infra/conf/router.go	/^	Tag       string     `json:"tag"`$/;"	m	struct:conf.BalancingRule	typeref:typename:string
Tag	infra/conf/transport_internet.go	/^	Tag string `json:"tag"`$/;"	m	struct:conf.ProxyConfig	typeref:typename:string
Tag	infra/conf/v2ray.go	/^	Tag            string                         `json:"tag"`$/;"	m	struct:conf.InboundDetourConfig	typeref:typename:string
Tag	infra/conf/v2ray.go	/^	Tag           string           `json:"tag"`$/;"	m	struct:conf.OutboundDetourConfig	typeref:typename:string
Tag	transport/internet/config.pb.go	/^	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`$/;"	m	struct:internet.ProxyConfig	typeref:typename:string
Target	common/mux/frame.go	/^	Target        net.Destination$/;"	m	struct:mux.FrameMetadata	typeref:typename:net.Destination
Target	common/protocol/udp/packet.go	/^	Target  net.Destination$/;"	m	struct:udp.Packet	typeref:typename:net.Destination
Target	common/session/session.go	/^	Target net.Destination$/;"	m	struct:session.Outbound	typeref:typename:net.Destination
Target	proxy/trojan/protocol.go	/^	Target       net.Destination$/;"	m	struct:trojan.ConnReader	typeref:typename:net.Destination
Target	proxy/trojan/protocol.go	/^	Target     net.Destination$/;"	m	struct:trojan.ConnWriter	typeref:typename:net.Destination
Target	proxy/trojan/protocol.go	/^	Target net.Destination$/;"	m	struct:trojan.PacketPayload	typeref:typename:net.Destination
Target	proxy/trojan/protocol.go	/^	Target net.Destination$/;"	m	struct:trojan.PacketWriter	typeref:typename:net.Destination
TargetDomain	app/router/command/command.pb.go	/^	TargetDomain      string            `protobuf:"bytes,7,opt,name=TargetDomain,proto3" json:"Targ/;"	m	struct:command.RoutingContext	typeref:typename:string
TargetDomain	app/router/command/command.proto	/^  string TargetDomain = 7;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:string
TargetIPs	app/router/command/command.pb.go	/^	TargetIPs         [][]byte          `protobuf:"bytes,4,rep,name=TargetIPs,proto3" json:"TargetI/;"	m	struct:command.RoutingContext	typeref:typename:[][]byte
TargetIPs	app/router/command/command.proto	/^  repeated bytes TargetIPs = 4;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:bytes
TargetNetwork	common/mux/frame.go	/^type TargetNetwork byte$/;"	t	package:mux	typeref:typename:byte
TargetNetworkTCP	common/mux/frame.go	/^	TargetNetworkTCP TargetNetwork = 0x01$/;"	c	package:mux	typeref:type:TargetNetwork
TargetNetworkUDP	common/mux/frame.go	/^	TargetNetworkUDP TargetNetwork = 0x02$/;"	c	package:mux	typeref:type:TargetNetwork
TargetPort	app/router/command/command.pb.go	/^	TargetPort        uint32            `protobuf:"varint,6,opt,name=TargetPort,proto3" json:"Targe/;"	m	struct:command.RoutingContext	typeref:typename:uint32
TargetPort	app/router/command/command.proto	/^  uint32 TargetPort = 6;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:uint32
TargetTag	app/router/config.pb.go	/^	TargetTag isRoutingRule_TargetTag `protobuf_oneof:"target_tag"`$/;"	m	struct:router.RoutingRule	typeref:typename:isRoutingRule_TargetTag
Task	store/task.go	/^type Task struct {$/;"	s	package:store
Terminate	transport/internet/kcp/connection.go	/^func (c *Connection) Terminate() {$/;"	f	struct:kcp.Connection
Test1ByteDataSegment	transport/internet/kcp/segment_test.go	/^func Test1ByteDataSegment(t *testing.T) {$/;"	f	package:kcp_test
TestACKSegment	transport/internet/kcp/segment_test.go	/^func TestACKSegment(t *testing.T) {$/;"	f	package:kcp_test
TestAEADCipherUDP	proxy/shadowsocks/config_test.go	/^func TestAEADCipherUDP(t *testing.T) {$/;"	f	package:shadowsocks_test
TestActivityTimer	common/signal/timer_test.go	/^func TestActivityTimer(t *testing.T) {$/;"	f	package:signal_test
TestActivityTimerNonBlocking	common/signal/timer_test.go	/^func TestActivityTimerNonBlocking(t *testing.T) {$/;"	f	package:signal_test
TestActivityTimerUpdate	common/signal/timer_test.go	/^func TestActivityTimerUpdate(t *testing.T) {$/;"	f	package:signal_test
TestActivityTimerZeroTimeout	common/signal/timer_test.go	/^func TestActivityTimerZeroTimeout(t *testing.T) {$/;"	f	package:signal_test
TestAddressProperty	common/net/address_test.go	/^func TestAddressProperty(t *testing.T) {$/;"	f	package:net_test
TestAddressReading	common/protocol/address_test.go	/^func TestAddressReading(t *testing.T) {$/;"	f	package:protocol_test
TestAddressWriting	common/protocol/address_test.go	/^func TestAddressWriting(t *testing.T) {$/;"	f	package:protocol_test
TestAllHeadersLoadable	transport/internet/header_test.go	/^func TestAllHeadersLoadable(t *testing.T) {$/;"	f	package:internet_test
TestAlwaysValidStrategy	common/protocol/server_spec_test.go	/^func TestAlwaysValidStrategy(t *testing.T) {$/;"	f	package:protocol_test
TestArrayNetworkList	infra/conf/common_test.go	/^func TestArrayNetworkList(t *testing.T) {$/;"	f	package:conf_test
TestAuthenticationReadWrite	proxy/mtproto/auth_test.go	/^func TestAuthenticationReadWrite(t *testing.T) {$/;"	f	package:mtproto_test
TestAuthenticationReaderWriter	common/crypto/auth_test.go	/^func TestAuthenticationReaderWriter(t *testing.T) {$/;"	f	package:crypto_test
TestAuthenticationReaderWriterPacket	common/crypto/auth_test.go	/^func TestAuthenticationReaderWriterPacket(t *testing.T) {$/;"	f	package:crypto_test
TestAutoIssuingCertificate	testing/scenarios/tls_test.go	/^func TestAutoIssuingCertificate(t *testing.T) {$/;"	f	package:scenarios
TestBadSegment	transport/internet/kcp/segment_test.go	/^func TestBadSegment(t *testing.T) {$/;"	f	package:kcp_test
TestBitmaskByte	common/bitmask/byte_test.go	/^func TestBitmaskByte(t *testing.T) {$/;"	f	package:bitmask_test
TestBlackhole	testing/scenarios/feature_test.go	/^func TestBlackhole(t *testing.T) {$/;"	f	package:scenarios
TestBlackholeHTTPResponse	proxy/blackhole/blackhole_test.go	/^func TestBlackholeHTTPResponse(t *testing.T) {$/;"	f	package:blackhole_test
TestBufferByte	common/buf/buffer_test.go	/^func TestBufferByte(t *testing.T) {$/;"	f	package:buf_test
TestBufferClear	common/buf/buffer_test.go	/^func TestBufferClear(t *testing.T) {$/;"	f	package:buf_test
TestBufferIsEmpty	common/buf/buffer_test.go	/^func TestBufferIsEmpty(t *testing.T) {$/;"	f	package:buf_test
TestBufferReadFullFrom	common/buf/buffer_test.go	/^func TestBufferReadFullFrom(t *testing.T) {$/;"	f	package:buf_test
TestBufferResize	common/buf/buffer_test.go	/^func TestBufferResize(t *testing.T) {$/;"	f	package:buf_test
TestBufferSize	infra/conf/policy_test.go	/^func TestBufferSize(t *testing.T) {$/;"	f	package:conf_test
TestBufferSlice	common/buf/buffer_test.go	/^func TestBufferSlice(t *testing.T) {$/;"	f	package:buf_test
TestBufferString	common/buf/buffer_test.go	/^func TestBufferString(t *testing.T) {$/;"	f	package:buf_test
TestBytesReaderMultiBuffer	common/buf/reader_test.go	/^func TestBytesReaderMultiBuffer(t *testing.T) {$/;"	f	package:buf_test
TestBytesReaderWriteTo	common/buf/reader_test.go	/^func TestBytesReaderWriteTo(t *testing.T) {$/;"	f	package:buf_test
TestBytesWriterReadFrom	common/buf/writer_test.go	/^func TestBytesWriterReadFrom(t *testing.T) {$/;"	f	package:buf_test
TestCase	infra/conf/general_test.go	/^type TestCase struct {$/;"	s	package:conf_test
TestCertificateIssuing	transport/internet/tls/config_test.go	/^func TestCertificateIssuing(t *testing.T) {$/;"	f	package:tls_test
TestCertificateIssuing	transport/internet/xtls/config_test.go	/^func TestCertificateIssuing(t *testing.T) {$/;"	f	package:xtls_test
TestChaCha20Decoding	common/crypto/chacha20_test.go	/^func TestChaCha20Decoding(t *testing.T) {$/;"	f	package:crypto_test
TestChaCha20Stream	common/crypto/chacha20_test.go	/^func TestChaCha20Stream(t *testing.T) {$/;"	f	package:crypto_test
TestChinaSites	app/router/condition_test.go	/^func TestChinaSites(t *testing.T) {$/;"	f	package:router_test
TestChunkStreamIO	common/crypto/chunk_test.go	/^func TestChunkStreamIO(t *testing.T) {$/;"	f	package:crypto_test
TestClientWorkerClose	common/mux/client_test.go	/^func TestClientWorkerClose(t *testing.T) {$/;"	f	package:mux_test
TestClientWorkerEOF	common/mux/client_test.go	/^func TestClientWorkerEOF(t *testing.T) {$/;"	f	package:mux_test
TestCmdSegment	transport/internet/kcp/segment_test.go	/^func TestCmdSegment(t *testing.T) {$/;"	f	package:kcp_test
TestCommanderAddRemoveUser	testing/scenarios/command_test.go	/^func TestCommanderAddRemoveUser(t *testing.T) {$/;"	f	package:scenarios
TestCommanderRemoveHandler	testing/scenarios/command_test.go	/^func TestCommanderRemoveHandler(t *testing.T) {$/;"	f	package:scenarios
TestCommanderStats	testing/scenarios/command_test.go	/^func TestCommanderStats(t *testing.T) {$/;"	f	package:scenarios
TestCompact	common/buf/multi_buffer_test.go	/^func TestCompact(t *testing.T) {$/;"	f	package:buf_test
TestConcat	common/serial/string_test.go	/^func TestConcat(t *testing.T) {$/;"	f	package:serial_test
TestConfig_Override	infra/conf/v2ray_test.go	/^func TestConfig_Override(t *testing.T) {$/;"	f	package:conf_test
TestConnection	transport/internet/headers/http/http_test.go	/^func TestConnection(t *testing.T) {$/;"	f	package:http_test
TestConnectionInterface	transport/internet/kcp/connection_test.go	/^func TestConnectionInterface(t *testing.T) {$/;"	f	package:kcp_test
TestConnectionInvPath	transport/internet/headers/http/http_test.go	/^func TestConnectionInvPath(t *testing.T) {$/;"	f	package:http_test
TestConnectionInvReq	transport/internet/headers/http/http_test.go	/^func TestConnectionInvReq(t *testing.T) {$/;"	f	package:http_test
TestConnectionReadTimeout	transport/internet/kcp/connection_test.go	/^func TestConnectionReadTimeout(t *testing.T) {$/;"	f	package:kcp_test
TestContextPanic	context_test.go	/^func TestContextPanic(t *testing.T) {$/;"	f	package:core_test
TestConvertingNilMessage	common/serial/typed_message_test.go	/^func TestConvertingNilMessage(t *testing.T) {$/;"	f	package:serial_test
TestCounter	app/dispatcher/stats_test.go	/^type TestCounter int64$/;"	t	package:dispatcher_test	typeref:typename:int64
TestCreateAuthID	proxy/vmess/aead/authid_test.go	/^func TestCreateAuthID(t *testing.T) {$/;"	f	package:aead
TestCreateAuthIDAndDecode	proxy/vmess/aead/authid_test.go	/^func TestCreateAuthIDAndDecode(t *testing.T) {$/;"	f	package:aead
TestCreateAuthIDAndDecode2	proxy/vmess/aead/authid_test.go	/^func TestCreateAuthIDAndDecode2(t *testing.T) {$/;"	f	package:aead
TestCreateAuthIDAndDecodeMassive	proxy/vmess/aead/authid_test.go	/^func TestCreateAuthIDAndDecodeMassive(t *testing.T) {$/;"	f	package:aead
TestCreateAuthIDAndDecodeSuperMassive	proxy/vmess/aead/authid_test.go	/^func TestCreateAuthIDAndDecodeSuperMassive(t *testing.T) {$/;"	f	package:aead
TestCustomLogHandler	app/log/log_test.go	/^func TestCustomLogHandler(t *testing.T) {$/;"	f	package:log_test
TestDTLSWrite	transport/internet/headers/tls/dtls_test.go	/^func TestDTLSWrite(t *testing.T) {$/;"	f	package:tls_test
TestDataSegment	transport/internet/kcp/segment_test.go	/^func TestDataSegment(t *testing.T) {$/;"	f	package:kcp_test
TestDestinationParse	common/net/destination_test.go	/^func TestDestinationParse(t *testing.T) {$/;"	f	package:net_test
TestDestinationProperty	common/net/destination_test.go	/^func TestDestinationProperty(t *testing.T) {$/;"	f	package:net_test
TestDialAndListen	transport/internet/kcp/kcp_test.go	/^func TestDialAndListen(t *testing.T) {$/;"	f	package:kcp_test
TestDialV2Ray	testing/scenarios/feature_test.go	/^func TestDialV2Ray(t *testing.T) {$/;"	f	package:scenarios
TestDialWithLocalAddr	transport/internet/dialer_test.go	/^func TestDialWithLocalAddr(t *testing.T) {$/;"	f	package:internet_test
TestDialWithRemoteAddr	transport/internet/websocket/ws_test.go	/^func TestDialWithRemoteAddr(t *testing.T) {$/;"	f	package:websocket_test
TestDiscardBytes	common/buf/writer_test.go	/^func TestDiscardBytes(t *testing.T) {$/;"	f	package:buf_test
TestDiscardBytesMultiBuffer	common/buf/writer_test.go	/^func TestDiscardBytesMultiBuffer(t *testing.T) {$/;"	f	package:buf_test
TestDispatcher	transport/internet/udp/dispatcher_test.go	/^type TestDispatcher struct {$/;"	s	package:udp_test
TestDnsConfigParsing	infra/conf/dns_test.go	/^func TestDnsConfigParsing(t *testing.T) {$/;"	f	package:conf_test
TestDnsProxyConfig	infra/conf/dns_proxy_test.go	/^func TestDnsProxyConfig(t *testing.T) {$/;"	f	package:conf_test
TestDokodemoConfig	infra/conf/dokodemo_test.go	/^func TestDokodemoConfig(t *testing.T) {$/;"	f	package:conf_test
TestDokodemoTCP	testing/scenarios/dokodemo_test.go	/^func TestDokodemoTCP(t *testing.T) {$/;"	f	package:scenarios
TestDokodemoUDP	testing/scenarios/dokodemo_test.go	/^func TestDokodemoUDP(t *testing.T) {$/;"	f	package:scenarios
TestDomainMatcherGroup	common/strmatcher/domain_matcher_test.go	/^func TestDomainMatcherGroup(t *testing.T) {$/;"	f	package:strmatcher_test
TestDomainParsing	infra/conf/common_test.go	/^func TestDomainParsing(t *testing.T) {$/;"	f	package:conf_test
TestDomainSniffing	testing/scenarios/feature_test.go	/^func TestDomainSniffing(t *testing.T) {$/;"	f	package:scenarios
TestDomainSocket	testing/scenarios/transport_test.go	/^func TestDomainSocket(t *testing.T) {$/;"	f	package:scenarios
TestEmptyDomainMatcherGroup	common/strmatcher/domain_matcher_test.go	/^func TestEmptyDomainMatcherGroup(t *testing.T) {$/;"	f	package:strmatcher_test
TestEmptyFullMatcherGroup	common/strmatcher/full_matcher_test.go	/^func TestEmptyFullMatcherGroup(t *testing.T) {$/;"	f	package:strmatcher_test
TestEnvFlag	common/platform/platform_test.go	/^func TestEnvFlag(t *testing.T) {$/;"	f	package:platform_test
TestEnvPort	infra/conf/common_test.go	/^func TestEnvPort(t *testing.T) {$/;"	f	package:conf_test
TestEquals	common/uuid/uuid_test.go	/^func TestEquals(t *testing.T) {$/;"	f	package:uuid_test
TestError	common/errors/errors_test.go	/^func TestError(t *testing.T) {$/;"	f	package:errors_test
TestErrorMessage	common/errors/errors_test.go	/^func TestErrorMessage(t *testing.T) {$/;"	f	package:errors_test
TestExecuteParallel	common/task/task_test.go	/^func TestExecuteParallel(t *testing.T) {$/;"	f	package:task_test
TestExecuteParallelContextCancel	common/task/task_test.go	/^func TestExecuteParallelContextCancel(t *testing.T) {$/;"	f	package:task_test
TestExpiredCertificate	transport/internet/tls/config_test.go	/^func TestExpiredCertificate(t *testing.T) {$/;"	f	package:tls_test
TestExpiredCertificate	transport/internet/xtls/config_test.go	/^func TestExpiredCertificate(t *testing.T) {$/;"	f	package:xtls_test
TestExponentialBackoff	common/retry/retry_test.go	/^func TestExponentialBackoff(t *testing.T) {$/;"	f	package:retry_test
TestFileLogger	common/log/logger_test.go	/^func TestFileLogger(t *testing.T) {$/;"	f	package:log_test
TestFnvAuth	proxy/vmess/encoding/auth_test.go	/^func TestFnvAuth(t *testing.T) {$/;"	f	package:encoding_test
TestForward	testing/scenarios/feature_test.go	/^func TestForward(t *testing.T) {$/;"	f	package:scenarios
TestFqdn	app/dns/dnscommon_test.go	/^func TestFqdn(t *testing.T) {$/;"	f	package:dns
TestFreedomConfig	infra/conf/freedom_test.go	/^func TestFreedomConfig(t *testing.T) {$/;"	f	package:conf_test
TestFullMatcherGroup	common/strmatcher/full_matcher_test.go	/^func TestFullMatcherGroup(t *testing.T) {$/;"	f	package:strmatcher_test
TestGenerate	common/protocol/tls/cert/cert_test.go	/^func TestGenerate(t *testing.T) {$/;"	f	package:cert
TestGenerateRandomInt64InRange	common/protocol/time_test.go	/^func TestGenerateRandomInt64InRange(t *testing.T) {$/;"	f	package:protocol_test
TestGeoIPMatcher	app/router/condition_geoip_test.go	/^func TestGeoIPMatcher(t *testing.T) {$/;"	f	package:router_test
TestGeoIPMatcher4CN	app/router/condition_geoip_test.go	/^func TestGeoIPMatcher4CN(t *testing.T) {$/;"	f	package:router_test
TestGeoIPMatcher6US	app/router/condition_geoip_test.go	/^func TestGeoIPMatcher6US(t *testing.T) {$/;"	f	package:router_test
TestGeoIPMatcherContainer	app/router/condition_geoip_test.go	/^func TestGeoIPMatcherContainer(t *testing.T) {$/;"	f	package:router_test
TestGetAssetLocation	common/platform/platform_test.go	/^func TestGetAssetLocation(t *testing.T) {$/;"	f	package:platform_test
TestGetInstance	common/serial/typed_message_test.go	/^func TestGetInstance(t *testing.T) {$/;"	f	package:serial_test
TestGetOriginalDestination	transport/internet/tcp/sockopt_linux_test.go	/^func TestGetOriginalDestination(t *testing.T) {$/;"	f	package:tcp_test
TestGetStats	app/stats/command/command_test.go	/^func TestGetStats(t *testing.T) {$/;"	f	package:command_test
TestHTTP2	testing/scenarios/tls_test.go	/^func TestHTTP2(t *testing.T) {$/;"	f	package:scenarios
TestHTTPConnection	transport/internet/http/http_test.go	/^func TestHTTPConnection(t *testing.T) {$/;"	f	package:http_test
TestHTTPHeaders	common/protocol/http/sniff_test.go	/^func TestHTTPHeaders(t *testing.T) {$/;"	f	package:http_test
TestHTTPResponse	proxy/blackhole/config_test.go	/^func TestHTTPResponse(t *testing.T) {$/;"	f	package:blackhole_test
TestHTTPResponseJSON	infra/conf/blackhole_test.go	/^func TestHTTPResponseJSON(t *testing.T) {$/;"	f	package:conf_test
TestHopByHopHeadersRemoving	common/protocol/http/headers_test.go	/^func TestHopByHopHeadersRemoving(t *testing.T) {$/;"	f	package:http_test
TestHttpBasicAuth	testing/scenarios/http_test.go	/^func TestHttpBasicAuth(t *testing.T) {$/;"	f	package:scenarios
TestHttpConformance	testing/scenarios/http_test.go	/^func TestHttpConformance(t *testing.T) {$/;"	f	package:scenarios
TestHttpConnectMethod	testing/scenarios/http_test.go	/^func TestHttpConnectMethod(t *testing.T) {$/;"	f	package:scenarios
TestHttpConnectionHeader	testing/scenarios/transport_test.go	/^func TestHttpConnectionHeader(t *testing.T) {$/;"	f	package:scenarios
TestHttpError	testing/scenarios/http_test.go	/^func TestHttpError(t *testing.T) {$/;"	f	package:scenarios
TestHttpPost	testing/scenarios/http_test.go	/^func TestHttpPost(t *testing.T) {$/;"	f	package:scenarios
TestHttpServerConfig	infra/conf/http_test.go	/^func TestHttpServerConfig(t *testing.T) {$/;"	f	package:conf_test
TestIPIfNonMatchDomain	app/router/router_test.go	/^func TestIPIfNonMatchDomain(t *testing.T) {$/;"	f	package:router_test
TestIPIfNonMatchIP	app/router/router_test.go	/^func TestIPIfNonMatchIP(t *testing.T) {$/;"	f	package:router_test
TestIPMatch	app/dns/server_test.go	/^func TestIPMatch(t *testing.T) {$/;"	f	package:dns_test
TestIPOnDemand	app/router/router_test.go	/^func TestIPOnDemand(t *testing.T) {$/;"	f	package:router_test
TestIPParsing	infra/conf/common_test.go	/^func TestIPParsing(t *testing.T) {$/;"	f	package:conf_test
TestIdEquals	common/protocol/id_test.go	/^func TestIdEquals(t *testing.T) {$/;"	f	package:protocol_test
TestIncrementalPickerFailure	common/mux/client_test.go	/^func TestIncrementalPickerFailure(t *testing.T) {$/;"	f	package:mux_test
TestInsecureCertificates	transport/internet/tls/config_test.go	/^func TestInsecureCertificates(t *testing.T) {$/;"	f	package:tls_test
TestInsecureCertificates	transport/internet/xtls/config_test.go	/^func TestInsecureCertificates(t *testing.T) {$/;"	f	package:xtls_test
TestIntPort	infra/conf/common_test.go	/^func TestIntPort(t *testing.T) {$/;"	f	package:conf_test
TestInterface	app/stats/stats_test.go	/^func TestInterface(t *testing.T) {$/;"	f	package:stats_test
TestInterfaces	app/proxyman/outbound/handler_test.go	/^func TestInterfaces(t *testing.T) {$/;"	f	package:outbound_test
TestInterfaces	transport/pipe/pipe_test.go	/^func TestInterfaces(t *testing.T) {$/;"	f	package:pipe_test
TestInvalidAddressConvertion	common/net/address_test.go	/^func TestInvalidAddressConvertion(t *testing.T) {$/;"	f	package:net_test
TestInvalidAddressJson	infra/conf/common_test.go	/^func TestInvalidAddressJson(t *testing.T) {$/;"	f	package:conf_test
TestInvalidNetworkJson	infra/conf/common_test.go	/^func TestInvalidNetworkJson(t *testing.T) {$/;"	f	package:conf_test
TestInvalidRequest	proxy/vless/encoding/encoding_test.go	/^func TestInvalidRequest(t *testing.T) {$/;"	f	package:encoding_test
TestInvalidRequest	proxy/vmess/encoding/encoding_test.go	/^func TestInvalidRequest(t *testing.T) {$/;"	f	package:encoding_test
TestInvalidUserJson	infra/conf/common_test.go	/^func TestInvalidUserJson(t *testing.T) {$/;"	f	package:conf_test
TestInverse	proxy/mtproto/auth_test.go	/^func TestInverse(t *testing.T) {$/;"	f	package:mtproto_test
TestKCPPacketReader	transport/internet/kcp/io_test.go	/^func TestKCPPacketReader(t *testing.T) {$/;"	f	package:kcp_test
TestListen	transport/internet/domainsocket/listener_test.go	/^func TestListen(t *testing.T) {$/;"	f	package:domainsocket_test
TestListenAbstract	transport/internet/domainsocket/listener_test.go	/^func TestListenAbstract(t *testing.T) {$/;"	f	package:domainsocket_test
TestLoaderError	infra/conf/serial/loader_test.go	/^func TestLoaderError(t *testing.T) {$/;"	f	package:serial_test
TestLocalDomain	app/dns/server_test.go	/^func TestLocalDomain(t *testing.T) {$/;"	f	package:dns_test
TestLocalNameServer	app/dns/nameserver_test.go	/^func TestLocalNameServer(t *testing.T) {$/;"	f	package:dns_test
TestLogRecord	common/log/log_test.go	/^func TestLogRecord(t *testing.T) {$/;"	f	package:log_test
TestLoggerRestart	app/log/command/command_test.go	/^func TestLoggerRestart(t *testing.T) {$/;"	f	package:command_test
TestLongRequestHeader	transport/internet/headers/http/http_test.go	/^func TestLongRequestHeader(t *testing.T) {$/;"	f	package:http_test
TestMTProtoServerConfig	infra/conf/mtproto_test.go	/^func TestMTProtoServerConfig(t *testing.T) {$/;"	f	package:conf_test
TestMatcher	common/strmatcher/matchers_test.go	/^func TestMatcher(t *testing.T) {$/;"	f	package:strmatcher_test
TestMatcherGroup	common/strmatcher/strmatcher_test.go	/^func TestMatcherGroup(t *testing.T) {$/;"	f	package:strmatcher_test
TestMultiBufferAppend	common/buf/multi_buffer_test.go	/^func TestMultiBufferAppend(t *testing.T) {$/;"	f	package:buf_test
TestMultiBufferCopy	common/buf/multi_buffer_test.go	/^func TestMultiBufferCopy(t *testing.T) {$/;"	f	package:buf_test
TestMultiBufferRead	common/buf/multi_buffer_test.go	/^func TestMultiBufferRead(t *testing.T) {$/;"	f	package:buf_test
TestMultiBufferReadAllToByte	common/buf/multi_buffer_test.go	/^func TestMultiBufferReadAllToByte(t *testing.T) {$/;"	f	package:buf_test
TestMultiBufferSliceBySizeLarge	common/buf/multi_buffer_test.go	/^func TestMultiBufferSliceBySizeLarge(t *testing.T) {$/;"	f	package:buf_test
TestMultiBufferSplitFirst	common/buf/multi_buffer_test.go	/^func TestMultiBufferSplitFirst(t *testing.T) {$/;"	f	package:buf_test
TestMultiMatchPrioritizedDomain	app/dns/server_test.go	/^func TestMultiMatchPrioritizedDomain(t *testing.T) {$/;"	f	package:dns_test
TestMust	common/common_test.go	/^func TestMust(t *testing.T) {$/;"	f	package:common_test
TestMuxConfig_Build	infra/conf/v2ray_test.go	/^func TestMuxConfig_Build(t *testing.T) {$/;"	f	package:conf_test
TestMuxRequest	proxy/vless/encoding/encoding_test.go	/^func TestMuxRequest(t *testing.T) {$/;"	f	package:encoding_test
TestMuxRequest	proxy/vmess/encoding/encoding_test.go	/^func TestMuxRequest(t *testing.T) {$/;"	f	package:encoding_test
TestNewUUID	common/uuid/uuid_test.go	/^func TestNewUUID(t *testing.T) {$/;"	f	package:uuid_test
TestNoRetry	common/retry/retry_test.go	/^func TestNoRetry(t *testing.T) {$/;"	f	package:retry_test
TestNormalizeEnvName	common/platform/platform_test.go	/^func TestNormalizeEnvName(t *testing.T) {$/;"	f	package:platform_test
TestNotifierSignal	common/signal/notifier_test.go	/^func TestNotifierSignal(t *testing.T) {$/;"	f	package:signal_test
TestObjectCreation	common/type_test.go	/^func TestObjectCreation(t *testing.T) {$/;"	f	package:common_test
TestOpenVMessAEADHeader	proxy/vmess/aead/encrypt_test.go	/^func TestOpenVMessAEADHeader(t *testing.T) {$/;"	f	package:aead
TestOpenVMessAEADHeader2	proxy/vmess/aead/encrypt_test.go	/^func TestOpenVMessAEADHeader2(t *testing.T) {$/;"	f	package:aead
TestOpenVMessAEADHeader4	proxy/vmess/aead/encrypt_test.go	/^func TestOpenVMessAEADHeader4(t *testing.T) {$/;"	f	package:aead
TestOpenVMessAEADHeader4Massive	proxy/vmess/aead/encrypt_test.go	/^func TestOpenVMessAEADHeader4Massive(t *testing.T) {$/;"	f	package:aead
TestOutboundWithStatCounter	app/proxyman/outbound/handler_test.go	/^func TestOutboundWithStatCounter(t *testing.T) {$/;"	f	package:outbound_test
TestOutboundWithoutStatCounter	app/proxyman/outbound/handler_test.go	/^func TestOutboundWithoutStatCounter(t *testing.T) {$/;"	f	package:outbound_test
TestOverRangeIntPort	infra/conf/common_test.go	/^func TestOverRangeIntPort(t *testing.T) {$/;"	f	package:conf_test
TestOverRangeStringPort	infra/conf/common_test.go	/^func TestOverRangeStringPort(t *testing.T) {$/;"	f	package:conf_test
TestPacketReader_ReadMultiBuffer	common/buf/reader_test.go	/^func TestPacketReader_ReadMultiBuffer(t *testing.T) {$/;"	f	package:buf_test
TestParseBytes	common/uuid/uuid_test.go	/^func TestParseBytes(t *testing.T) {$/;"	f	package:uuid_test
TestParseHost	common/protocol/http/headers_test.go	/^func TestParseHost(t *testing.T) {$/;"	f	package:http_test
TestParseString	common/uuid/uuid_test.go	/^func TestParseString(t *testing.T) {$/;"	f	package:uuid_test
TestParseXForwardedFor	common/protocol/http/headers_test.go	/^func TestParseXForwardedFor(t *testing.T) {$/;"	f	package:http_test
TestPassiveConnection	testing/scenarios/feature_test.go	/^func TestPassiveConnection(t *testing.T) {$/;"	f	package:scenarios
TestPeriodicTaskStop	common/task/periodic_test.go	/^func TestPeriodicTaskStop(t *testing.T) {$/;"	f	package:task_test
TestPickUser	common/protocol/server_spec_test.go	/^func TestPickUser(t *testing.T) {$/;"	f	package:protocol_test
TestPipeClose	transport/pipe/pipe_test.go	/^func TestPipeClose(t *testing.T) {$/;"	f	package:pipe_test
TestPipeInterrupt	transport/pipe/pipe_test.go	/^func TestPipeInterrupt(t *testing.T) {$/;"	f	package:pipe_test
TestPipeLimitZero	transport/pipe/pipe_test.go	/^func TestPipeLimitZero(t *testing.T) {$/;"	f	package:pipe_test
TestPipeReadWrite	transport/pipe/pipe_test.go	/^func TestPipeReadWrite(t *testing.T) {$/;"	f	package:pipe_test
TestPipeWriteMultiThread	transport/pipe/pipe_test.go	/^func TestPipeWriteMultiThread(t *testing.T) {$/;"	f	package:pipe_test
TestPolicy	app/policy/manager_test.go	/^func TestPolicy(t *testing.T) {$/;"	f	package:policy_test
TestPortRangeContains	common/net/port_test.go	/^func TestPortRangeContains(t *testing.T) {$/;"	f	package:net_test
TestPrioritizedDomain	app/dns/server_test.go	/^func TestPrioritizedDomain(t *testing.T) {$/;"	f	package:dns_test
TestProxy	testing/scenarios/feature_test.go	/^func TestProxy(t *testing.T) {$/;"	f	package:scenarios
TestProxyOverKCP	testing/scenarios/feature_test.go	/^func TestProxyOverKCP(t *testing.T) {$/;"	f	package:scenarios
TestPubsub	common/signal/pubsub/pubsub_test.go	/^func TestPubsub(t *testing.T) {$/;"	f	package:pubsub_test
TestQueryStats	app/stats/command/command_test.go	/^func TestQueryStats(t *testing.T) {$/;"	f	package:command_test
TestQuicConnection	transport/internet/quic/quic_test.go	/^func TestQuicConnection(t *testing.T) {$/;"	f	package:quic_test
TestQuicConnectionAuthHeader	transport/internet/quic/quic_test.go	/^func TestQuicConnectionAuthHeader(t *testing.T) {$/;"	f	package:quic_test
TestQuicConnectionWithoutTLS	transport/internet/quic/quic_test.go	/^func TestQuicConnectionWithoutTLS(t *testing.T) {$/;"	f	package:quic_test
TestRandom	common/uuid/uuid_test.go	/^func TestRandom(t *testing.T) {$/;"	f	package:uuid_test
TestReadAtMost	common/buf/reader_test.go	/^func TestReadAtMost(t *testing.T) {$/;"	f	package:buf_test
TestReadBuffer	common/buf/reader_test.go	/^func TestReadBuffer(t *testing.T) {$/;"	f	package:buf_test
TestReadByte	common/buf/reader_test.go	/^func TestReadByte(t *testing.T) {$/;"	f	package:buf_test
TestReadError	common/buf/copy_test.go	/^func TestReadError(t *testing.T) {$/;"	f	package:buf_test
TestReadUint16	common/serial/serial_test.go	/^func TestReadUint16(t *testing.T) {$/;"	f	package:serial_test
TestReadUntilNull	proxy/socks/protocol_test.go	/^func TestReadUntilNull(t *testing.T) {$/;"	f	package:socks_test
TestReadUsernamePassword	proxy/socks/protocol_test.go	/^func TestReadUsernamePassword(t *testing.T) {$/;"	f	package:socks_test
TestReader	common/buf/copy_test.go	/^type TestReader struct{}$/;"	s	package:buf_test
TestReader	infra/conf/json/reader_test.go	/^func TestReader(t *testing.T) {$/;"	f	package:json_test
TestReader1	infra/conf/json/reader_test.go	/^func TestReader1(t *testing.T) {$/;"	f	package:json_test
TestReaderInterface	common/buf/reader_test.go	/^func TestReaderInterface(t *testing.T) {$/;"	f	package:buf_test
TestReaderWriter	common/mux/mux_test.go	/^func TestReaderWriter(t *testing.T) {$/;"	f	package:mux_test
TestReaderWriter	transport/internet/headers/http/http_test.go	/^func TestReaderWriter(t *testing.T) {$/;"	f	package:http_test
TestReadvReader	common/buf/readv_test.go	/^func TestReadvReader(t *testing.T) {$/;"	f	package:buf_test
TestRegisterListenerController	transport/internet/system_listener_test.go	/^func TestRegisterListenerController(t *testing.T) {$/;"	f	package:internet_test
TestRequestHeader	transport/internet/headers/http/http_test.go	/^func TestRequestHeader(t *testing.T) {$/;"	f	package:http_test
TestRequestSerialization	proxy/vless/encoding/encoding_test.go	/^func TestRequestSerialization(t *testing.T) {$/;"	f	package:encoding_test
TestRequestSerialization	proxy/vmess/encoding/encoding_test.go	/^func TestRequestSerialization(t *testing.T) {$/;"	f	package:encoding_test
TestResolveIP	testing/scenarios/dns_test.go	/^func TestResolveIP(t *testing.T) {$/;"	f	package:scenarios
TestRetryExhausted	common/retry/retry_test.go	/^func TestRetryExhausted(t *testing.T) {$/;"	f	package:retry_test
TestRetryMultiple	common/retry/retry_test.go	/^func TestRetryMultiple(t *testing.T) {$/;"	f	package:retry_test
TestRetryOnce	common/retry/retry_test.go	/^func TestRetryOnce(t *testing.T) {$/;"	f	package:retry_test
TestReverseConfig	infra/conf/reverse_test.go	/^func TestReverseConfig(t *testing.T) {$/;"	f	package:conf_test
TestReverseProxy	testing/scenarios/reverse_test.go	/^func TestReverseProxy(t *testing.T) {$/;"	f	package:scenarios
TestReverseProxyLongRunning	testing/scenarios/reverse_test.go	/^func TestReverseProxyLongRunning(t *testing.T) {$/;"	f	package:scenarios
TestRoute	app/router/command/command.go	/^func (s *routingServer) TestRoute(ctx context.Context, request *TestRouteRequest) (*RoutingConte/;"	f	struct:command.routingServer	typeref:typename:(*RoutingContext, error)
TestRoute	app/router/command/command.proto	/^  rpc TestRoute(TestRouteRequest) returns (RoutingContext) {}$/;"	r	service:v2ray.core.app.router.command.RoutingService	typeref:typename:RoutingContext
TestRoute	app/router/command/command_grpc.pb.go	/^	TestRoute(context.Context, *TestRouteRequest) (*RoutingContext, error)$/;"	n	interface:command.RoutingServiceServer	typeref:typename:(*RoutingContext, error)
TestRoute	app/router/command/command_grpc.pb.go	/^	TestRoute(ctx context.Context, in *TestRouteRequest, opts ...grpc.CallOption) (*RoutingContext,/;"	n	interface:command.RoutingServiceClient	typeref:typename:(*RoutingContext, error)
TestRoute	app/router/command/command_grpc.pb.go	/^func (UnimplementedRoutingServiceServer) TestRoute(context.Context, *TestRouteRequest) (*Routing/;"	f	struct:command.UnimplementedRoutingServiceServer	typeref:typename:(*RoutingContext, error)
TestRoute	app/router/command/command_grpc.pb.go	/^func (c *routingServiceClient) TestRoute(ctx context.Context, in *TestRouteRequest, opts ...grpc/;"	f	struct:command.routingServiceClient	typeref:typename:(*RoutingContext, error)
TestRouteRequest	app/router/command/command.pb.go	/^type TestRouteRequest struct {$/;"	s	package:command
TestRouteRequest	app/router/command/command.proto	/^message TestRouteRequest {$/;"	m	package:v2ray.core.app.router.command
TestRouterConfig	infra/conf/router_test.go	/^func TestRouterConfig(t *testing.T) {$/;"	f	package:conf_test
TestRoutingRule	app/router/condition_test.go	/^func TestRoutingRule(t *testing.T) {$/;"	f	package:router_test
TestRunMainForCoverage	main/main_test.go	/^func TestRunMainForCoverage(t *testing.T) {$/;"	f	package:main
TestSRTPWrite	transport/internet/headers/srtp/srtp_test.go	/^func TestSRTPWrite(t *testing.T) {$/;"	f	package:srtp_test
TestSameDestinationDispatching	transport/internet/udp/dispatcher_test.go	/^func TestSameDestinationDispatching(t *testing.T) {$/;"	f	package:udp_test
TestSerivceTestRoute	app/router/command/command_test.go	/^func TestSerivceTestRoute(t *testing.T) {$/;"	f	package:command_test
TestServerList	common/protocol/server_picker_test.go	/^func TestServerList(t *testing.T) {$/;"	f	package:protocol_test
TestServerPicker	common/protocol/server_picker_test.go	/^func TestServerPicker(t *testing.T) {$/;"	f	package:protocol_test
TestServiceSubscribeRoutingStats	app/router/command/command_test.go	/^func TestServiceSubscribeRoutingStats(t *testing.T) {$/;"	f	package:command_test
TestSessionManagerAdd	common/mux/session_test.go	/^func TestSessionManagerAdd(t *testing.T) {$/;"	f	package:mux_test
TestSessionManagerClose	common/mux/session_test.go	/^func TestSessionManagerClose(t *testing.T) {$/;"	f	package:mux_test
TestShadowsocksAES128GCMUDP	testing/scenarios/shadowsocks_test.go	/^func TestShadowsocksAES128GCMUDP(t *testing.T) {$/;"	f	package:scenarios
TestShadowsocksAES128GCMUDPMux	testing/scenarios/shadowsocks_test.go	/^func TestShadowsocksAES128GCMUDPMux(t *testing.T) {$/;"	f	package:scenarios
TestShadowsocksAES128UDP	testing/scenarios/shadowsocks_test.go	/^func TestShadowsocksAES128UDP(t *testing.T) {$/;"	f	package:scenarios
TestShadowsocksAES256GCMTCP	testing/scenarios/shadowsocks_test.go	/^func TestShadowsocksAES256GCMTCP(t *testing.T) {$/;"	f	package:scenarios
TestShadowsocksAES256TCP	testing/scenarios/shadowsocks_test.go	/^func TestShadowsocksAES256TCP(t *testing.T) {$/;"	f	package:scenarios
TestShadowsocksChacha20Poly1305TCP	testing/scenarios/shadowsocks_test.go	/^func TestShadowsocksChacha20Poly1305TCP(t *testing.T) {$/;"	f	package:scenarios
TestShadowsocksChacha20TCP	testing/scenarios/shadowsocks_test.go	/^func TestShadowsocksChacha20TCP(t *testing.T) {$/;"	f	package:scenarios
TestShadowsocksNone	testing/scenarios/shadowsocks_test.go	/^func TestShadowsocksNone(t *testing.T) {$/;"	f	package:scenarios
TestShadowsocksServerConfigParsing	infra/conf/shadowsocks_test.go	/^func TestShadowsocksServerConfigParsing(t *testing.T) {$/;"	f	package:conf_test
TestSimpleAuthenticator	transport/internet/kcp/crypt_test.go	/^func TestSimpleAuthenticator(t *testing.T) {$/;"	f	package:kcp_test
TestSimpleAuthenticator2	transport/internet/kcp/crypt_test.go	/^func TestSimpleAuthenticator2(t *testing.T) {$/;"	f	package:kcp_test
TestSimpleBalancer	app/router/router_test.go	/^func TestSimpleBalancer(t *testing.T) {$/;"	f	package:router_test
TestSimpleRouter	app/router/router_test.go	/^func TestSimpleRouter(t *testing.T) {$/;"	f	package:router_test
TestSimpleTLSConnection	testing/scenarios/tls_test.go	/^func TestSimpleTLSConnection(t *testing.T) {$/;"	f	package:scenarios
TestSingleStringPort	infra/conf/common_test.go	/^func TestSingleStringPort(t *testing.T) {$/;"	f	package:conf_test
TestSockOptMark	transport/internet/sockopt_linux_test.go	/^func TestSockOptMark(t *testing.T) {$/;"	f	package:internet_test
TestSocketConfig	infra/conf/transport_test.go	/^func TestSocketConfig(t *testing.T) {$/;"	f	package:conf_test
TestSocksBridageUDP	testing/scenarios/socks_test.go	/^func TestSocksBridageUDP(t *testing.T) {$/;"	f	package:scenarios
TestSocksBridageUDPWithRouting	testing/scenarios/socks_test.go	/^func TestSocksBridageUDPWithRouting(t *testing.T) {$/;"	f	package:scenarios
TestSocksBridgeTCP	testing/scenarios/socks_test.go	/^func TestSocksBridgeTCP(t *testing.T) {$/;"	f	package:scenarios
TestSocksConformanceMod	testing/scenarios/socks_test.go	/^func TestSocksConformanceMod(t *testing.T) {$/;"	f	package:scenarios
TestSocksInboundConfig	infra/conf/socks_test.go	/^func TestSocksInboundConfig(t *testing.T) {$/;"	f	package:conf_test
TestSocksOutboundConfig	infra/conf/socks_test.go	/^func TestSocksOutboundConfig(t *testing.T) {$/;"	f	package:conf_test
TestSplitFirstBytes	common/buf/multi_buffer_test.go	/^func TestSplitFirstBytes(t *testing.T) {$/;"	f	package:buf_test
TestStaticHostDomain	app/dns/server_test.go	/^func TestStaticHostDomain(t *testing.T) {$/;"	f	package:dns_test
TestStaticHosts	app/dns/hosts_test.go	/^func TestStaticHosts(t *testing.T) {$/;"	f	package:dns_test
TestStaticPickerEmpty	app/reverse/portal_test.go	/^func TestStaticPickerEmpty(t *testing.T) {$/;"	f	package:reverse_test
TestStatsChannel	app/stats/channel_test.go	/^func TestStatsChannel(t *testing.T) {$/;"	f	package:stats_test
TestStatsChannelBlocking	app/stats/channel_test.go	/^func TestStatsChannelBlocking(t *testing.T) {$/;"	f	package:stats_test
TestStatsChannelConcurrency	app/stats/channel_test.go	/^func TestStatsChannelConcurrency(t *testing.T) {$/;"	f	package:stats_test
TestStatsChannelNonBlocking	app/stats/channel_test.go	/^func TestStatsChannelNonBlocking(t *testing.T) {$/;"	f	package:stats_test
TestStatsChannelRunnable	app/stats/stats_test.go	/^func TestStatsChannelRunnable(t *testing.T) {$/;"	f	package:stats_test
TestStatsChannelUnsubcribe	app/stats/channel_test.go	/^func TestStatsChannelUnsubcribe(t *testing.T) {$/;"	f	package:stats_test
TestStatsCounter	app/stats/counter_test.go	/^func TestStatsCounter(t *testing.T) {$/;"	f	package:stats_test
TestStatsWriter	app/dispatcher/stats_test.go	/^func TestStatsWriter(t *testing.T) {$/;"	f	package:dispatcher_test
TestStringListLen	infra/conf/common_test.go	/^func TestStringListLen(t *testing.T) {$/;"	f	package:conf_test
TestStringListUnmarshalError	infra/conf/common_test.go	/^func TestStringListUnmarshalError(t *testing.T) {$/;"	f	package:conf_test
TestStringNetwork	infra/conf/common_test.go	/^func TestStringNetwork(t *testing.T) {$/;"	f	package:conf_test
TestStringNetworkList	infra/conf/common_test.go	/^func TestStringNetworkList(t *testing.T) {$/;"	f	package:conf_test
TestStringPairPort	infra/conf/common_test.go	/^func TestStringPairPort(t *testing.T) {$/;"	f	package:conf_test
TestSwitchAccount	proxy/vmess/encoding/commands_test.go	/^func TestSwitchAccount(t *testing.T) {$/;"	f	package:encoding_test
TestTCPDNSTunnel	proxy/dns/dns_test.go	/^func TestTCPDNSTunnel(t *testing.T) {$/;"	f	package:dns_test
TestTCPFastOpen	transport/internet/sockopt_test.go	/^func TestTCPFastOpen(t *testing.T) {$/;"	f	package:internet_test
TestTCPRequest	proxy/shadowsocks/protocol_test.go	/^func TestTCPRequest(t *testing.T) {$/;"	f	package:shadowsocks_test
TestTCPRequest	proxy/trojan/protocol_test.go	/^func TestTCPRequest(t *testing.T) {$/;"	f	package:trojan_test
TestTLSHeaders	common/protocol/tls/sniff_test.go	/^func TestTLSHeaders(t *testing.T) {$/;"	f	package:tls_test
TestTLSOverKCP	testing/scenarios/tls_test.go	/^func TestTLSOverKCP(t *testing.T) {$/;"	f	package:scenarios
TestTLSOverWebSocket	testing/scenarios/tls_test.go	/^func TestTLSOverWebSocket(t *testing.T) {$/;"	f	package:scenarios
TestTimeoutValidStrategy	common/protocol/server_spec_test.go	/^func TestTimeoutValidStrategy(t *testing.T) {$/;"	f	package:protocol_test
TestToString	common/serial/string_test.go	/^func TestToString(t *testing.T) {$/;"	f	package:serial_test
TestTransportConfig	infra/conf/transport_test.go	/^func TestTransportConfig(t *testing.T) {$/;"	f	package:conf_test
TestUDP2TCPDNSTunnel	proxy/dns/dns_test.go	/^func TestUDP2TCPDNSTunnel(t *testing.T) {$/;"	f	package:dns_test
TestUDPConnection	testing/scenarios/feature_test.go	/^func TestUDPConnection(t *testing.T) {$/;"	f	package:scenarios
TestUDPDNSTunnel	proxy/dns/dns_test.go	/^func TestUDPDNSTunnel(t *testing.T) {$/;"	f	package:dns_test
TestUDPEncoding	proxy/shadowsocks/protocol_test.go	/^func TestUDPEncoding(t *testing.T) {$/;"	f	package:shadowsocks_test
TestUDPEncoding	proxy/socks/protocol_test.go	/^func TestUDPEncoding(t *testing.T) {$/;"	f	package:socks_test
TestUDPReaderWriter	proxy/shadowsocks/protocol_test.go	/^func TestUDPReaderWriter(t *testing.T) {$/;"	f	package:shadowsocks_test
TestUDPRequest	proxy/trojan/protocol_test.go	/^func TestUDPRequest(t *testing.T) {$/;"	f	package:trojan_test
TestUDPServer	app/dns/server_test.go	/^func TestUDPServer(t *testing.T) {$/;"	f	package:dns_test
TestUDPServerIPv6	app/dns/server_test.go	/^func TestUDPServerIPv6(t *testing.T) {$/;"	f	package:dns_test
TestUDPServerSubnet	app/dns/server_test.go	/^func TestUDPServerSubnet(t *testing.T) {$/;"	f	package:dns_test
TestURLParsing	infra/conf/common_test.go	/^func TestURLParsing(t *testing.T) {$/;"	f	package:conf_test
TestUTPWrite	transport/internet/headers/utp/utp_test.go	/^func TestUTPWrite(t *testing.T) {$/;"	f	package:utp_test
TestUTPWrite	transport/internet/headers/wechat/wechat_test.go	/^func TestUTPWrite(t *testing.T) {$/;"	f	package:wechat_test
TestUint16Serial	common/serial/serial_test.go	/^func TestUint16Serial(t *testing.T) {$/;"	f	package:serial_test
TestUint64Serial	common/serial/serial_test.go	/^func TestUint64Serial(t *testing.T) {$/;"	f	package:serial_test
TestUserInServerSpec	common/protocol/server_spec_test.go	/^func TestUserInServerSpec(t *testing.T) {$/;"	f	package:protocol_test
TestUserParsing	infra/conf/common_test.go	/^func TestUserParsing(t *testing.T) {$/;"	f	package:conf_test
TestUserValidator	proxy/vmess/validator_test.go	/^func TestUserValidator(t *testing.T) {$/;"	f	package:vmess_test
TestV2RayClose	v2ray_test.go	/^func TestV2RayClose(t *testing.T) {$/;"	f	package:core_test
TestV2RayConfig	infra/conf/v2ray_test.go	/^func TestV2RayConfig(t *testing.T) {$/;"	f	package:conf_test
TestV2RayDependency	v2ray_test.go	/^func TestV2RayDependency(t *testing.T) {$/;"	f	package:core_test
TestV2RayDial	functions_test.go	/^func TestV2RayDial(t *testing.T) {$/;"	f	package:core_test
TestV2RayDialUDP	functions_test.go	/^func TestV2RayDialUDP(t *testing.T) {$/;"	f	package:core_test
TestV2RayDialUDPConn	functions_test.go	/^func TestV2RayDialUDPConn(t *testing.T) {$/;"	f	package:core_test
TestVLessInbound	infra/conf/vless_test.go	/^func TestVLessInbound(t *testing.T) {$/;"	f	package:conf_test
TestVLessOutbound	infra/conf/vless_test.go	/^func TestVLessOutbound(t *testing.T) {$/;"	f	package:conf_test
TestVMessChacha20	testing/scenarios/vmess_test.go	/^func TestVMessChacha20(t *testing.T) {$/;"	f	package:scenarios
TestVMessClosing	testing/scenarios/policy_test.go	/^func TestVMessClosing(t *testing.T) {$/;"	f	package:scenarios
TestVMessDynamicPort	testing/scenarios/vmess_test.go	/^func TestVMessDynamicPort(t *testing.T) {$/;"	f	package:scenarios
TestVMessGCM	testing/scenarios/vmess_test.go	/^func TestVMessGCM(t *testing.T) {$/;"	f	package:scenarios
TestVMessGCMMux	testing/scenarios/vmess_test.go	/^func TestVMessGCMMux(t *testing.T) {$/;"	f	package:scenarios
TestVMessGCMMuxUDP	testing/scenarios/vmess_test.go	/^func TestVMessGCMMuxUDP(t *testing.T) {$/;"	f	package:scenarios
TestVMessGCMReadv	testing/scenarios/vmess_test.go	/^func TestVMessGCMReadv(t *testing.T) {$/;"	f	package:scenarios
TestVMessGCMUDP	testing/scenarios/vmess_test.go	/^func TestVMessGCMUDP(t *testing.T) {$/;"	f	package:scenarios
TestVMessInbound	infra/conf/vmess_test.go	/^func TestVMessInbound(t *testing.T) {$/;"	f	package:conf_test
TestVMessKCP	testing/scenarios/vmess_test.go	/^func TestVMessKCP(t *testing.T) {$/;"	f	package:scenarios
TestVMessKCPLarge	testing/scenarios/vmess_test.go	/^func TestVMessKCPLarge(t *testing.T) {$/;"	f	package:scenarios
TestVMessNone	testing/scenarios/vmess_test.go	/^func TestVMessNone(t *testing.T) {$/;"	f	package:scenarios
TestVMessOutbound	infra/conf/vmess_test.go	/^func TestVMessOutbound(t *testing.T) {$/;"	f	package:conf_test
TestVMessQuic	testing/scenarios/transport_test.go	/^func TestVMessQuic(t *testing.T) {$/;"	f	package:scenarios
TestWriteError	common/buf/copy_test.go	/^func TestWriteError(t *testing.T) {$/;"	f	package:buf_test
TestWriter	common/buf/writer_test.go	/^func TestWriter(t *testing.T) {$/;"	f	package:buf_test
TestWriterCreation	common/buf/io_test.go	/^func TestWriterCreation(t *testing.T) {$/;"	f	package:buf_test
TestWriterInterface	common/buf/writer_test.go	/^func TestWriterInterface(t *testing.T) {$/;"	f	package:buf_test
TestZeroBuffer	testing/scenarios/policy_test.go	/^func TestZeroBuffer(t *testing.T) {$/;"	f	package:scenarios
Test_buildReqMsgs	app/dns/dnscommon_test.go	/^func Test_buildReqMsgs(t *testing.T) {$/;"	f	package:dns
Test_genEDNS0Options	app/dns/dnscommon_test.go	/^func Test_genEDNS0Options(t *testing.T) {$/;"	f	package:dns
Test_listenWSAndDial	transport/internet/websocket/ws_test.go	/^func Test_listenWSAndDial(t *testing.T) {$/;"	f	package:websocket_test
Test_listenWSAndDial_TLS	transport/internet/websocket/ws_test.go	/^func Test_listenWSAndDial_TLS(t *testing.T) {$/;"	f	package:websocket_test
Test_parseResponse	app/dns/dnscommon_test.go	/^func Test_parseResponse(t *testing.T) {$/;"	f	package:dns
TestsEnabled	proxy/vmess/account.pb.go	/^	TestsEnabled string `protobuf:"bytes,4,opt,name=tests_enabled,json=testsEnabled,proto3" json:"t/;"	m	struct:vmess.Account	typeref:typename:string
Tfo	transport/internet/config.pb.go	/^	Tfo SocketConfig_TCPFastOpenState `protobuf:"varint,2,opt,name=tfo,proto3,enum=v2ray.core.trans/;"	m	struct:internet.SocketConfig	typeref:typename:SocketConfig_TCPFastOpenState
Timed	common/retry/retry.go	/^func Timed(attempts int, delay uint32) Strategy {$/;"	f	package:retry	typeref:typename:Strategy
TimedUserValidator	proxy/vmess/validator.go	/^type TimedUserValidator struct {$/;"	s	package:vmess
Timeout	app/policy/config.pb.go	/^	Timeout *Policy_Timeout `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`$/;"	m	struct:policy.Policy	typeref:typename:*Policy_Timeout
Timeout	app/policy/config.proto	/^  message Timeout {$/;"	m	message:v2ray.core.app.policy.Policy
Timeout	features/policy/policy.go	/^type Timeout struct {$/;"	s	package:policy
Timeout	infra/conf/freedom.go	/^	Timeout        *uint32 `json:"timeout"`$/;"	m	struct:conf.FreedomConfig	typeref:typename:*uint32
Timeout	infra/conf/http.go	/^	Timeout     uint32         `json:"timeout"`$/;"	m	struct:conf.HttpServerConfig	typeref:typename:uint32
Timeout	infra/conf/socks.go	/^	Timeout    uint32          `json:"timeout"`$/;"	m	struct:conf.SocksServerConfig	typeref:typename:uint32
Timeout	proxy/dokodemo/config.pb.go	/^	Timeout        uint32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`$/;"	m	struct:dokodemo.Config	typeref:typename:uint32
Timeout	proxy/freedom/config.pb.go	/^	Timeout             uint32               `protobuf:"varint,2,opt,name=timeout,proto3" json:"tim/;"	m	struct:freedom.Config	typeref:typename:uint32
Timeout	proxy/http/config.pb.go	/^	Timeout          uint32            `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,o/;"	m	struct:http.ServerConfig	typeref:typename:uint32
Timeout	proxy/socks/config.pb.go	/^	Timeout   uint32 `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`$/;"	m	struct:socks.ServerConfig	typeref:typename:uint32
Timeout	transport/internet/kcp/connection.go	/^func (info *RoundTripInfo) Timeout() uint32 {$/;"	f	struct:kcp.RoundTripInfo	typeref:typename:uint32
TimeoutReader	common/buf/io.go	/^type TimeoutReader interface {$/;"	i	package:buf
TimeoutValue	infra/conf/dokodemo.go	/^	TimeoutValue uint32       `json:"timeout"`$/;"	m	struct:conf.DokodemoConfig	typeref:typename:uint32
Timeouts	features/policy/policy.go	/^	Timeouts Timeout \/\/ Timeout settings$/;"	m	struct:policy.Session	typeref:typename:Timeout
Timestamp	app/p2p/protocol/seedlist/seedlist.go	/^	Timestamp time.Time$/;"	m	struct:seedlist.Seed	typeref:typename:time.Time
Timestamp	app/p2p/wire/seedlist.pb.go	/^	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,om/;"	m	struct:wire.MessageData	typeref:typename:int64
Timestamp	common/protocol/time.go	/^type Timestamp int64$/;"	t	package:protocol	typeref:typename:int64
Timestamp	transport/internet/kcp/segment.go	/^	Timestamp       uint32$/;"	m	struct:kcp.AckSegment	typeref:typename:uint32
Timestamp	transport/internet/kcp/segment.go	/^	Timestamp   uint32$/;"	m	struct:kcp.DataSegment	typeref:typename:uint32
TimestampGenerator	common/protocol/time.go	/^type TimestampGenerator func() Timestamp$/;"	t	package:protocol	typeref:typename:func() Timestamp
TlsPingCommand	infra/control/tlsping.go	/^type TlsPingCommand struct{}$/;"	s	package:control
To	common/log/access.go	/^	To     interface{}$/;"	m	struct:log.AccessMessage	typeref:typename:interface{}
To	common/net/port.go	/^	To   Port$/;"	m	struct:net.MemoryPortRange	typeref:typename:Port
To	common/net/port.pb.go	/^	To uint32 `protobuf:"varint,2,opt,name=To,proto3" json:"To,omitempty"`$/;"	m	struct:net.PortRange	typeref:typename:uint32
To	common/net/port.proto	/^  uint32 To = 2;$/;"	f	message:v2ray.core.common.net.PortRange	typeref:typename:uint32
To	infra/conf/common.go	/^	To   uint32$/;"	m	struct:conf.PortRange	typeref:typename:uint32
To	proxy/vmess/inbound/config.pb.go	/^	To string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`$/;"	m	struct:inbound.DetourConfig	typeref:typename:string
ToCorePolicy	app/policy/config.go	/^func (p *Policy) ToCorePolicy() policy.Session {$/;"	f	unknown:policy.Policy	typeref:typename:policy.Session
ToCorePolicy	app/policy/config.go	/^func (p *SystemPolicy) ToCorePolicy() policy.System {$/;"	f	unknown:policy.SystemPolicy	typeref:typename:policy.System
ToMemoryStreamConfig	transport/internet/memory_settings.go	/^func ToMemoryStreamConfig(s *StreamConfig) (*MemoryStreamConfig, error) {$/;"	f	package:internet	typeref:typename:(*MemoryStreamConfig, error)
ToMemoryUser	common/protocol/user.go	/^func (u *User) ToMemoryUser() (*MemoryUser, error) {$/;"	f	unknown:protocol.User	typeref:typename:(*MemoryUser, error)
ToPEM	common/protocol/tls/cert/cert.go	/^func (c *Certificate) ToPEM() ([]byte, []byte) {$/;"	f	struct:cert.Certificate	typeref:typename:([]byte, []byte)
ToPort	common/net/port.go	/^func (p *PortRange) ToPort() Port {$/;"	f	unknown:net.PortRange	typeref:typename:Port
ToString	common/serial/string.go	/^func ToString(v interface{}) string {$/;"	f	package:serial	typeref:typename:string
ToTag	infra/conf/vmess.go	/^	ToTag string `json:"to"`$/;"	m	struct:conf.VMessDetourConfig	typeref:typename:string
ToTypedMessage	common/serial/typed_message.go	/^func ToTypedMessage(message proto.Message) *TypedMessage {$/;"	f	package:serial	typeref:typename:*TypedMessage
Toggle	common/bitmask/byte.go	/^func (b *Byte) Toggle(bb Byte) {$/;"	f	type:bitmask.Byte
TotalAlloc	app/stats/command/command.pb.go	/^	TotalAlloc   uint64 `protobuf:"varint,4,opt,name=TotalAlloc,proto3" json:"TotalAlloc,omitempty"/;"	m	struct:command.SysStatsResponse	typeref:typename:uint64
TotalAlloc	app/stats/command/command.proto	/^  uint64 TotalAlloc = 4;$/;"	f	message:v2ray.core.app.stats.command.SysStatsResponse	typeref:typename:uint64
TotalConnections	common/mux/client.go	/^func (m *ClientWorker) TotalConnections() uint32 {$/;"	f	struct:mux.ClientWorker	typeref:typename:uint32
Tproxy	transport/internet/config.pb.go	/^	Tproxy SocketConfig_TProxyMode `protobuf:"varint,3,opt,name=tproxy,proto3,enum=v2ray.core.trans/;"	m	struct:internet.SocketConfig	typeref:typename:SocketConfig_TProxyMode
TransferType	common/protocol/headers.go	/^func (c RequestCommand) TransferType() TransferType {$/;"	f	type:protocol.RequestCommand	typeref:typename:TransferType
TransferType	common/protocol/payload.go	/^type TransferType byte$/;"	t	package:protocol	typeref:typename:byte
TransferTypePacket	common/protocol/payload.go	/^	TransferTypePacket TransferType = 1$/;"	c	package:protocol	typeref:type:TransferType
TransferTypeStream	common/protocol/payload.go	/^	TransferTypeStream TransferType = 0$/;"	c	package:protocol	typeref:type:TransferType
Transparent	infra/conf/http.go	/^	Transparent bool           `json:"allowTransparent"`$/;"	m	struct:conf.HttpServerConfig	typeref:typename:bool
Transport	config.pb.go	/^	Transport *transport.Config `protobuf:"bytes,5,opt,name=transport,proto3" json:"transport,omite/;"	m	struct:core.Config	typeref:typename:*transport.Config
Transport	infra/conf/v2ray.go	/^	Transport       *TransportConfig       `json:"transport"`$/;"	m	struct:conf.Config	typeref:typename:*TransportConfig
TransportConfig	infra/conf/transport.go	/^type TransportConfig struct {$/;"	s	package:conf
TransportConfig	transport/internet/config.pb.go	/^type TransportConfig struct {$/;"	s	package:internet
TransportConfig	transport/internet/config.proto	/^message TransportConfig {$/;"	m	package:v2ray.core.transport.internet
TransportProtocol	infra/conf/transport_internet.go	/^type TransportProtocol string$/;"	t	package:conf	typeref:typename:string
TransportProtocol	transport/internet/config.pb.go	/^type TransportProtocol int32$/;"	t	package:internet	typeref:typename:int32
TransportProtocol	transport/internet/config.proto	/^enum TransportProtocol {$/;"	g	package:v2ray.core.transport.internet
TransportProtocol_DomainSocket	transport/internet/config.pb.go	/^	TransportProtocol_DomainSocket TransportProtocol = 5$/;"	c	package:internet	typeref:type:TransportProtocol
TransportProtocol_HTTP	transport/internet/config.pb.go	/^	TransportProtocol_HTTP         TransportProtocol = 4$/;"	c	package:internet	typeref:type:TransportProtocol
TransportProtocol_MKCP	transport/internet/config.pb.go	/^	TransportProtocol_MKCP         TransportProtocol = 2$/;"	c	package:internet	typeref:type:TransportProtocol
TransportProtocol_TCP	transport/internet/config.pb.go	/^	TransportProtocol_TCP          TransportProtocol = 0$/;"	c	package:internet	typeref:type:TransportProtocol
TransportProtocol_UDP	transport/internet/config.pb.go	/^	TransportProtocol_UDP          TransportProtocol = 1$/;"	c	package:internet	typeref:type:TransportProtocol
TransportProtocol_WebSocket	transport/internet/config.pb.go	/^	TransportProtocol_WebSocket    TransportProtocol = 3$/;"	c	package:internet	typeref:type:TransportProtocol
TransportProtocol_name	transport/internet/config.pb.go	/^	TransportProtocol_name = map[int32]string{$/;"	v	package:internet
TransportProtocol_value	transport/internet/config.pb.go	/^	TransportProtocol_value = map[string]int32{$/;"	v	package:internet
TransportSettings	transport/config.pb.go	/^	TransportSettings []*internet.TransportConfig `protobuf:"bytes,1,rep,name=transport_settings,js/;"	m	struct:transport.Config	typeref:typename:[]*internet.TransportConfig
TransportSettings	transport/internet/config.pb.go	/^	TransportSettings []*TransportConfig `protobuf:"bytes,2,rep,name=transport_settings,json=transp/;"	m	struct:internet.StreamConfig	typeref:typename:[]*TransportConfig
TrojanClientConfig	infra/conf/trojan.go	/^type TrojanClientConfig struct {$/;"	s	package:conf
TrojanInboundFallback	infra/conf/trojan.go	/^type TrojanInboundFallback struct {$/;"	s	package:conf
TrojanServerConfig	infra/conf/trojan.go	/^type TrojanServerConfig struct {$/;"	s	package:conf
TrojanServerTarget	infra/conf/trojan.go	/^type TrojanServerTarget struct {$/;"	s	package:conf
TrojanUserConfig	infra/conf/trojan.go	/^type TrojanUserConfig struct {$/;"	s	package:conf
Tti	infra/conf/transport_internet.go	/^	Tti             *uint32         `json:"tti"`$/;"	m	struct:conf.KCPConfig	typeref:typename:*uint32
Tti	transport/internet/kcp/config.pb.go	/^	Tti              *TTI                 `protobuf:"bytes,2,opt,name=tti,proto3" json:"tti,omitemp/;"	m	struct:kcp.Config	typeref:typename:*TTI
TwoBytes	common/stack/bytes.go	/^type TwoBytes [2]byte$/;"	t	package:stack	typeref:typename:[2]byte
Type	app/commander/commander.go	/^func (c *Commander) Type() interface{} {$/;"	f	struct:commander.Commander	typeref:typename:interface{}
Type	app/dispatcher/default.go	/^func (*DefaultDispatcher) Type() interface{} {$/;"	f	struct:dispatcher.DefaultDispatcher	typeref:typename:interface{}
Type	app/dns/config.pb.go	/^	Type   DomainMatchingType `protobuf:"varint,1,opt,name=type,proto3,enum=v2ray.core.app.dns.Doma/;"	m	struct:dns.Config_HostMapping	typeref:typename:DomainMatchingType
Type	app/dns/config.pb.go	/^	Type   DomainMatchingType `protobuf:"varint,1,opt,name=type,proto3,enum=v2ray.core.app.dns.Doma/;"	m	struct:dns.NameServer_PriorityDomain	typeref:typename:DomainMatchingType
Type	app/dns/config.pb.go	/^func (DomainMatchingType) Type() protoreflect.EnumType {$/;"	f	type:dns.DomainMatchingType	typeref:typename:protoreflect.EnumType
Type	app/dns/server.go	/^func (*Server) Type() interface{} {$/;"	f	struct:dns.Server	typeref:typename:interface{}
Type	app/log/config.pb.go	/^func (LogType) Type() protoreflect.EnumType {$/;"	f	type:log.LogType	typeref:typename:protoreflect.EnumType
Type	app/log/log.go	/^func (*Instance) Type() interface{} {$/;"	f	struct:log.Instance	typeref:typename:interface{}
Type	app/p2p/p2p.go	/^func (*Instance) Type() interface{} {$/;"	f	struct:p2p.Instance	typeref:typename:interface{}
Type	app/policy/manager.go	/^func (*Instance) Type() interface{} {$/;"	f	struct:policy.Instance	typeref:typename:interface{}
Type	app/proxyman/config.pb.go	/^	Type AllocationStrategy_Type `protobuf:"varint,1,opt,name=type,proto3,enum=v2ray.core.app.proxy/;"	m	struct:proxyman.AllocationStrategy	typeref:typename:AllocationStrategy_Type
Type	app/proxyman/config.pb.go	/^func (AllocationStrategy_Type) Type() protoreflect.EnumType {$/;"	f	type:proxyman.AllocationStrategy_Type	typeref:typename:protoreflect.EnumType
Type	app/proxyman/config.pb.go	/^func (KnownProtocols) Type() protoreflect.EnumType {$/;"	f	type:proxyman.KnownProtocols	typeref:typename:protoreflect.EnumType
Type	app/proxyman/config.proto	/^  enum Type {$/;"	g	message:v2ray.core.app.proxyman.AllocationStrategy
Type	app/proxyman/inbound/inbound.go	/^func (*Manager) Type() interface{} {$/;"	f	struct:inbound.Manager	typeref:typename:interface{}
Type	app/proxyman/outbound/outbound.go	/^func (m *Manager) Type() interface{} {$/;"	f	struct:outbound.Manager	typeref:typename:interface{}
Type	app/reverse/bridge.go	/^func (w *BridgeWorker) Type() interface{} {$/;"	f	struct:reverse.BridgeWorker	typeref:typename:interface{}
Type	app/reverse/config.pb.go	/^func (Control_State) Type() protoreflect.EnumType {$/;"	f	type:reverse.Control_State	typeref:typename:protoreflect.EnumType
Type	app/reverse/reverse.go	/^func (r *Reverse) Type() interface{} {$/;"	f	struct:reverse.Reverse	typeref:typename:interface{}
Type	app/router/config.pb.go	/^	Type Domain_Type `protobuf:"varint,1,opt,name=type,proto3,enum=v2ray.core.app.router.Domain_Typ/;"	m	struct:router.Domain	typeref:typename:Domain_Type
Type	app/router/config.pb.go	/^func (Config_DomainStrategy) Type() protoreflect.EnumType {$/;"	f	type:router.Config_DomainStrategy	typeref:typename:protoreflect.EnumType
Type	app/router/config.pb.go	/^func (Domain_Type) Type() protoreflect.EnumType {$/;"	f	type:router.Domain_Type	typeref:typename:protoreflect.EnumType
Type	app/router/config.proto	/^  enum Type {$/;"	g	message:v2ray.core.app.router.Domain
Type	app/router/router.go	/^func (*Router) Type() interface{} {$/;"	f	struct:router.Router	typeref:typename:interface{}
Type	app/stats/stats.go	/^func (*Manager) Type() interface{} {$/;"	f	struct:stats.Manager	typeref:typename:interface{}
Type	common/interfaces.go	/^	Type() interface{}$/;"	n	interface:common.HasType	typeref:typename:interface{}
Type	common/log/log.pb.go	/^func (Severity) Type() protoreflect.EnumType {$/;"	f	type:log.Severity	typeref:typename:protoreflect.EnumType
Type	common/mux/server.go	/^func (s *Server) Type() interface{} {$/;"	f	struct:mux.Server	typeref:typename:interface{}
Type	common/net/network.pb.go	/^func (Network) Type() protoreflect.EnumType {$/;"	f	type:net.Network	typeref:typename:protoreflect.EnumType
Type	common/protocol/headers.pb.go	/^	Type SecurityType `protobuf:"varint,1,opt,name=type,proto3,enum=v2ray.core.common.protocol.Secu/;"	m	struct:protocol.SecurityConfig	typeref:typename:SecurityType
Type	common/protocol/headers.pb.go	/^func (SecurityType) Type() protoreflect.EnumType {$/;"	f	type:protocol.SecurityType	typeref:typename:protoreflect.EnumType
Type	common/serial/typed_message.pb.go	/^	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`$/;"	m	struct:serial.TypedMessage	typeref:typename:string
Type	common/strmatcher/strmatcher.go	/^type Type byte$/;"	t	package:strmatcher	typeref:typename:byte
Type	features/dns/localdns/client.go	/^func (*Client) Type() interface{} {$/;"	f	struct:localdns.Client	typeref:typename:interface{}
Type	features/policy/default.go	/^func (DefaultManager) Type() interface{} {$/;"	f	struct:policy.DefaultManager	typeref:typename:interface{}
Type	features/routing/router.go	/^func (DefaultRouter) Type() interface{} {$/;"	f	struct:routing.DefaultRouter	typeref:typename:interface{}
Type	features/stats/stats.go	/^func (NoopManager) Type() interface{} {$/;"	f	struct:stats.NoopManager	typeref:typename:interface{}
Type	infra/conf/router.go	/^	Type        string `json:"type"`$/;"	m	struct:conf.RouterRule	typeref:typename:string
Type	infra/conf/trojan.go	/^	Type string          `json:"type"`$/;"	m	struct:conf.TrojanInboundFallback	typeref:typename:string
Type	infra/conf/vless.go	/^	Type string          `json:"type"`$/;"	m	struct:conf.VLessInboundFallback	typeref:typename:string
Type	proxy/freedom/config.pb.go	/^func (Config_DomainStrategy) Type() protoreflect.EnumType {$/;"	f	type:freedom.Config_DomainStrategy	typeref:typename:protoreflect.EnumType
Type	proxy/shadowsocks/config.pb.go	/^func (CipherType) Type() protoreflect.EnumType {$/;"	f	type:shadowsocks.CipherType	typeref:typename:protoreflect.EnumType
Type	proxy/socks/config.pb.go	/^func (AuthType) Type() protoreflect.EnumType {$/;"	f	type:socks.AuthType	typeref:typename:protoreflect.EnumType
Type	proxy/trojan/config.pb.go	/^	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`$/;"	m	struct:trojan.Fallback	typeref:typename:string
Type	proxy/vless/inbound/config.pb.go	/^	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`$/;"	m	struct:inbound.Fallback	typeref:typename:string
Type	store/task.go	/^	Type       uint64$/;"	m	struct:store.Task	typeref:typename:uint64
Type	testing/mocks/dns.go	/^func (m *DNSClient) Type() interface{} {$/;"	f	struct:mocks.DNSClient	typeref:typename:interface{}
Type	testing/mocks/dns.go	/^func (mr *DNSClientMockRecorder) Type() *gomock.Call {$/;"	f	struct:mocks.DNSClientMockRecorder	typeref:typename:*gomock.Call
Type	testing/mocks/outbound.go	/^func (m *OutboundManager) Type() interface{} {$/;"	f	struct:mocks.OutboundManager	typeref:typename:interface{}
Type	testing/mocks/outbound.go	/^func (mr *OutboundManagerMockRecorder) Type() *gomock.Call {$/;"	f	struct:mocks.OutboundManagerMockRecorder	typeref:typename:*gomock.Call
Type	transport/internet/config.pb.go	/^func (SocketConfig_TCPFastOpenState) Type() protoreflect.EnumType {$/;"	f	type:internet.SocketConfig_TCPFastOpenState	typeref:typename:protoreflect.EnumType
Type	transport/internet/config.pb.go	/^func (SocketConfig_TProxyMode) Type() protoreflect.EnumType {$/;"	f	type:internet.SocketConfig_TProxyMode	typeref:typename:protoreflect.EnumType
Type	transport/internet/config.pb.go	/^func (TransportProtocol) Type() protoreflect.EnumType {$/;"	f	type:internet.TransportProtocol	typeref:typename:protoreflect.EnumType
Type	transport/internet/tls/config.pb.go	/^func (Certificate_Usage) Type() protoreflect.EnumType {$/;"	f	type:tls.Certificate_Usage	typeref:typename:protoreflect.EnumType
Type	transport/internet/udp/dispatcher_test.go	/^func (*TestDispatcher) Type() interface{} {$/;"	f	struct:udp_test.TestDispatcher	typeref:typename:interface{}
Type	transport/internet/xtls/config.pb.go	/^func (Certificate_Usage) Type() protoreflect.EnumType {$/;"	f	type:xtls.Certificate_Usage	typeref:typename:protoreflect.EnumType
Type	v2ray.go	/^func (s *Instance) Type() interface{} {$/;"	f	struct:core.Instance	typeref:typename:interface{}
TypedMessage	common/serial/typed_message.pb.go	/^type TypedMessage struct {$/;"	s	package:serial
TypedMessage	common/serial/typed_message.proto	/^message TypedMessage {$/;"	m	package:v2ray.core.common.serial
TypedValue	app/router/config.pb.go	/^	TypedValue isDomain_Attribute_TypedValue `protobuf_oneof:"typed_value"`$/;"	m	struct:router.Domain_Attribute	typeref:typename:isDomain_Attribute_TypedValue
UDP	common/net/network.proto	/^  UDP = 3;$/;"	e	enum:v2ray.core.common.net.Network
UDP	infra/conf/shadowsocks.go	/^	UDP         bool         `json:"udp"`$/;"	m	struct:conf.ShadowsocksServerConfig	typeref:typename:bool
UDP	infra/conf/socks.go	/^	UDP        bool            `json:"udp"`$/;"	m	struct:conf.SocksServerConfig	typeref:typename:bool
UDP	transport/internet/config.proto	/^  UDP = 1;$/;"	e	enum:v2ray.core.transport.internet.TransportProtocol
UDPAddr	common/net/system.go	/^type UDPAddr = net.UDPAddr$/;"	a	package:net	typeref:typename:net.UDPAddr
UDPConn	common/net/system.go	/^type UDPConn = net.UDPConn$/;"	a	package:net	typeref:typename:net.UDPConn
UDPDestination	common/net/destination.go	/^func UDPDestination(address Address, port Port) Destination {$/;"	f	package:net	typeref:typename:Destination
UDPReader	common/protocol/dns/io.go	/^type UDPReader struct {$/;"	s	package:dns
UDPReader	proxy/shadowsocks/protocol.go	/^type UDPReader struct {$/;"	s	package:shadowsocks
UDPReader	proxy/socks/protocol.go	/^type UDPReader struct {$/;"	s	package:socks
UDPWriter	common/protocol/dns/io.go	/^type UDPWriter struct {$/;"	s	package:dns
UDPWriter	proxy/shadowsocks/protocol.go	/^type UDPWriter struct {$/;"	s	package:shadowsocks
UDPWriter	proxy/socks/protocol.go	/^type UDPWriter struct {$/;"	s	package:socks
UNKNOWN	common/protocol/headers.proto	/^  UNKNOWN = 0;$/;"	e	enum:v2ray.core.common.protocol.SecurityType
UNKNOWN	proxy/shadowsocks/config.proto	/^  UNKNOWN = 0;$/;"	e	enum:v2ray.core.proxy.shadowsocks.CipherType
UPort	bin/config/config-server.json	/^    "UPort":6008,$/;"	n	object:porter
URL	bin/config/config-server.json	/^    "InfluxDB":{"URL":"http:\/\/192.168.1.115:8086","DBName":"metric","UserName":"saveio","Passw/;"	s	object:porter.InfluxDB
USE_IP	proxy/freedom/config.proto	/^    USE_IP = 1;$/;"	e	enum:v2ray.core.proxy.freedom.Config.DomainStrategy
USE_IP4	proxy/freedom/config.proto	/^    USE_IP4 = 2;$/;"	e	enum:v2ray.core.proxy.freedom.Config.DomainStrategy
USE_IP6	proxy/freedom/config.proto	/^    USE_IP6 = 3;$/;"	e	enum:v2ray.core.proxy.freedom.Config.DomainStrategy
UTP	transport/internet/headers/utp/utp.go	/^type UTP struct {$/;"	s	package:utp
UTPAuthenticator	infra/conf/transport_authenticators.go	/^type UTPAuthenticator struct{}$/;"	s	package:conf
UUID	common/protocol/id.go	/^func (id *ID) UUID() uuid.UUID {$/;"	f	struct:protocol.ID	typeref:typename:uuid.UUID
UUID	common/uuid/uuid.go	/^type UUID [16]byte$/;"	t	package:uuid	typeref:typename:[16]byte
UUIDCommand	infra/control/uuid.go	/^type UUIDCommand struct{}$/;"	s	package:control
UdpEnabled	proxy/shadowsocks/config.pb.go	/^	UdpEnabled bool           `protobuf:"varint,1,opt,name=udp_enabled,json=udpEnabled,proto3" json/;"	m	struct:shadowsocks.ServerConfig	typeref:typename:bool
UdpEnabled	proxy/socks/config.pb.go	/^	UdpEnabled bool              `protobuf:"varint,4,opt,name=udp_enabled,json=udpEnabled,proto3" j/;"	m	struct:socks.ServerConfig	typeref:typename:bool
Uint32	app/p2p/wire/seedlist.pb.go	/^	Uint32() uint32$/;"	n	interface:wire.randySeedlist	typeref:typename:uint32
UnimplementedHandlerServiceServer	app/proxyman/command/command_grpc.pb.go	/^type UnimplementedHandlerServiceServer struct {$/;"	s	package:command
UnimplementedLoggerServiceServer	app/log/command/config_grpc.pb.go	/^type UnimplementedLoggerServiceServer struct {$/;"	s	package:command
UnimplementedRoutingServiceServer	app/router/command/command_grpc.pb.go	/^type UnimplementedRoutingServiceServer struct {$/;"	s	package:command
UnimplementedStatsServiceServer	app/stats/command/command_grpc.pb.go	/^type UnimplementedStatsServiceServer struct {$/;"	s	package:command
Unit	release/config/systemd/system/v2ray.service	/^[Unit]$/;"	s
Unit	release/config/systemd/system/v2ray@.service	/^[Unit]$/;"	s
UnixAddr	common/net/system.go	/^type UnixAddr = net.UnixAddr$/;"	a	package:net	typeref:typename:net.UnixAddr
UnixConn	common/net/system.go	/^type UnixConn = net.UnixConn$/;"	a	package:net	typeref:typename:net.UnixConn
UnixListener	common/net/system.go	/^type UnixListener = net.UnixListener$/;"	a	package:net	typeref:typename:net.UnixListener
Unknown	common/log/log.proto	/^  Unknown = 0;$/;"	e	enum:v2ray.core.common.log.Severity
Unknown	common/net/network.proto	/^  Unknown = 0;$/;"	e	enum:v2ray.core.common.net.Network
Unmarshal	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) Unmarshal(dAtA []byte) error {$/;"	f	struct:wire.HelloSeedList	typeref:typename:error
Unmarshal	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) Unmarshal(dAtA []byte) error {$/;"	f	struct:wire.MessageData	typeref:typename:error
Unmarshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) Unmarshal(dAtA []byte) error {$/;"	f	struct:wire.SeedInfo	typeref:typename:error
Unmarshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListRequest) Unmarshal(dAtA []byte) error {$/;"	f	struct:wire.SeedListRequest	typeref:typename:error
Unmarshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListResponse) Unmarshal(dAtA []byte) error {$/;"	f	struct:wire.SeedListResponse	typeref:typename:error
Unmarshal	common/mux/frame.go	/^func (f *FrameMetadata) Unmarshal(reader io.Reader) error {$/;"	f	struct:mux.FrameMetadata	typeref:typename:error
Unmarshal	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) Unmarshal(dAtA []byte) error {$/;"	f	struct:encoding.Addons	typeref:typename:error
Unmarshal	proxy/vmess/encoding/commands.go	/^	Unmarshal(data []byte) (interface{}, error)$/;"	n	interface:encoding.CommandFactory	typeref:typename:(interface{}, error)
Unmarshal	proxy/vmess/encoding/commands.go	/^func (f *CommandSwitchAccountFactory) Unmarshal(data []byte) (interface{}, error) {$/;"	f	struct:encoding.CommandSwitchAccountFactory	typeref:typename:(interface{}, error)
UnmarshalCommand	proxy/vmess/encoding/commands.go	/^func UnmarshalCommand(cmdID byte, data []byte) (protocol.ResponseCommand, error) {$/;"	f	package:encoding	typeref:typename:(protocol.ResponseCommand, error)
UnmarshalFromBuffer	common/mux/frame.go	/^func (f *FrameMetadata) UnmarshalFromBuffer(b *buf.Buffer) error {$/;"	f	struct:mux.FrameMetadata	typeref:typename:error
UnmarshalJSON	infra/conf/common.go	/^func (list *PortList) UnmarshalJSON(data []byte) error {$/;"	f	struct:conf.PortList	typeref:typename:error
UnmarshalJSON	infra/conf/common.go	/^func (v *Address) UnmarshalJSON(data []byte) error {$/;"	f	struct:conf.Address	typeref:typename:error
UnmarshalJSON	infra/conf/common.go	/^func (v *NetworkList) UnmarshalJSON(data []byte) error {$/;"	f	type:conf.NetworkList	typeref:typename:error
UnmarshalJSON	infra/conf/common.go	/^func (v *PortRange) UnmarshalJSON(data []byte) error {$/;"	f	struct:conf.PortRange	typeref:typename:error
UnmarshalJSON	infra/conf/common.go	/^func (v *StringList) UnmarshalJSON(data []byte) error {$/;"	f	type:conf.StringList	typeref:typename:error
UnmarshalJSON	infra/conf/dns.go	/^func (c *NameServerConfig) UnmarshalJSON(data []byte) error {$/;"	f	struct:conf.NameServerConfig	typeref:typename:error
UnregisterChannel	app/stats/stats.go	/^func (m *Manager) UnregisterChannel(name string) error {$/;"	f	struct:stats.Manager	typeref:typename:error
UnregisterChannel	features/stats/stats.go	/^	UnregisterChannel(string) error$/;"	n	interface:stats.Manager	typeref:typename:error
UnregisterChannel	features/stats/stats.go	/^func (NoopManager) UnregisterChannel(string) error {$/;"	f	struct:stats.NoopManager	typeref:typename:error
UnregisterCounter	app/stats/stats.go	/^func (m *Manager) UnregisterCounter(name string) error {$/;"	f	struct:stats.Manager	typeref:typename:error
UnregisterCounter	features/stats/stats.go	/^	UnregisterCounter(string) error$/;"	n	interface:stats.Manager	typeref:typename:error
UnregisterCounter	features/stats/stats.go	/^func (NoopManager) UnregisterCounter(string) error {$/;"	f	struct:stats.NoopManager	typeref:typename:error
UnsafeHandlerServiceServer	app/proxyman/command/command_grpc.pb.go	/^type UnsafeHandlerServiceServer interface {$/;"	i	package:command
UnsafeLoggerServiceServer	app/log/command/config_grpc.pb.go	/^type UnsafeLoggerServiceServer interface {$/;"	i	package:command
UnsafeRoutingServiceServer	app/router/command/command_grpc.pb.go	/^type UnsafeRoutingServiceServer interface {$/;"	i	package:command
UnsafeStatsServiceServer	app/stats/command/command_grpc.pb.go	/^type UnsafeStatsServiceServer interface {$/;"	i	package:command
Unsubscribe	app/stats/channel.go	/^func (c *Channel) Unsubscribe(subscriber chan interface{}) error {$/;"	f	struct:stats.Channel	typeref:typename:error
Unsubscribe	features/stats/stats.go	/^	Unsubscribe(chan interface{}) error$/;"	n	interface:stats.Channel	typeref:typename:error
UnsubscribeClosableChannel	features/stats/stats.go	/^func UnsubscribeClosableChannel(c Channel, sub chan interface{}) error {$/;"	f	package:stats	typeref:typename:error
UpCap	infra/conf/transport_internet.go	/^	UpCap           *uint32         `json:"uplinkCapacity"`$/;"	m	struct:conf.KCPConfig	typeref:typename:*uint32
Update	common/peer/latency.go	/^func (al *AverageLatency) Update(newValue uint64) {$/;"	f	struct:peer.AverageLatency
Update	common/signal/timer.go	/^	Update()$/;"	n	interface:signal.ActivityUpdater
Update	common/signal/timer.go	/^func (t *ActivityTimer) Update() {$/;"	f	struct:signal.ActivityTimer
Update	transport/internet/kcp/connection.go	/^func (info *RoundTripInfo) Update(rtt uint32, current uint32) {$/;"	f	struct:kcp.RoundTripInfo
UpdateActivity	common/buf/copy.go	/^func UpdateActivity(timer signal.ActivityUpdater) CopyOption {$/;"	f	package:buf	typeref:typename:CopyOption
UpdateNecessary	transport/internet/kcp/receiving.go	/^func (w *ReceivingWorker) UpdateNecessary() bool {$/;"	f	struct:kcp.ReceivingWorker	typeref:typename:bool
UpdateNecessary	transport/internet/kcp/sending.go	/^func (w *SendingWorker) UpdateNecessary() bool {$/;"	f	struct:kcp.SendingWorker	typeref:typename:bool
UpdatePeerRTO	transport/internet/kcp/connection.go	/^func (info *RoundTripInfo) UpdatePeerRTO(rto uint32, current uint32) {$/;"	f	struct:kcp.RoundTripInfo
UpdateTaskId	store/task.go	/^func (this *SQLiteStorage) UpdateTaskId(id, fileHash, fileName, walletAddr string, taskType uint/;"	f	unknown:store.SQLiteStorage	typeref:typename:(bool, error)
UpdatedAt	store/task.go	/^	UpdatedAt  time.Time$/;"	m	struct:store.Task	typeref:typename:time.Time
Updater	transport/internet/kcp/connection.go	/^type Updater struct {$/;"	s	package:kcp
UplinkCapacity	transport/internet/kcp/config.pb.go	/^	UplinkCapacity   *UplinkCapacity      `protobuf:"bytes,3,opt,name=uplink_capacity,json=uplinkCa/;"	m	struct:kcp.Config	typeref:typename:*UplinkCapacity
UplinkCapacity	transport/internet/kcp/config.pb.go	/^type UplinkCapacity struct {$/;"	s	package:kcp
UplinkCapacity	transport/internet/kcp/config.proto	/^message UplinkCapacity {$/;"	m	package:v2ray.core.transport.internet.kcp
UplinkOnly	app/policy/config.pb.go	/^	UplinkOnly     *Second `protobuf:"bytes,3,opt,name=uplink_only,json=uplinkOnly,proto3" json:"up/;"	m	struct:policy.Policy_Timeout	typeref:typename:*Second
UplinkOnly	features/policy/policy.go	/^	UplinkOnly time.Duration$/;"	m	struct:policy.Timeout	typeref:typename:time.Duration
UplinkOnly	infra/conf/policy.go	/^	UplinkOnly        *uint32 `json:"uplinkOnly"`$/;"	m	struct:conf.Policy	typeref:typename:*uint32
Uptime	app/stats/command/command.pb.go	/^	Uptime       uint32 `protobuf:"varint,10,opt,name=Uptime,proto3" json:"Uptime,omitempty"`$/;"	m	struct:command.SysStatsResponse	typeref:typename:uint32
Uptime	app/stats/command/command.proto	/^  uint32 Uptime = 10;$/;"	f	message:v2ray.core.app.stats.command.SysStatsResponse	typeref:typename:uint32
Uri	transport/internet/headers/http/config.pb.go	/^	Uri    []string  `protobuf:"bytes,3,rep,name=uri,proto3" json:"uri,omitempty"`$/;"	m	struct:http.RequestConfig	typeref:typename:[]string
Usage	infra/conf/transport_internet.go	/^	Usage    string   `json:"usage"`$/;"	m	struct:conf.TLSCertConfig	typeref:typename:string
Usage	infra/conf/transport_internet.go	/^	Usage    string   `json:"usage"`$/;"	m	struct:conf.XTLSCertConfig	typeref:typename:string
Usage	infra/control/command.go	/^	Usage []string$/;"	m	struct:control.Description	typeref:typename:[]string
Usage	transport/internet/tls/config.pb.go	/^	Usage Certificate_Usage `protobuf:"varint,3,opt,name=usage,proto3,enum=v2ray.core.transport.int/;"	m	struct:tls.Certificate	typeref:typename:Certificate_Usage
Usage	transport/internet/tls/config.proto	/^  enum Usage {$/;"	g	message:v2ray.core.transport.internet.tls.Certificate
Usage	transport/internet/xtls/config.pb.go	/^	Usage Certificate_Usage `protobuf:"varint,3,opt,name=usage,proto3,enum=v2ray.core.transport.int/;"	m	struct:xtls.Certificate	typeref:typename:Certificate_Usage
Usage	transport/internet/xtls/config.proto	/^  enum Usage {$/;"	g	message:v2ray.core.transport.internet.xtls.Certificate
UseAlternativeSystemDialer	transport/internet/system_dialer.go	/^func UseAlternativeSystemDialer(dialer SystemDialer) {$/;"	f	package:internet
UseIp	app/router/config.proto	/^    UseIp = 1;$/;"	e	enum:v2ray.core.app.router.Config.DomainStrategy
User	app/proxyman/command/command.pb.go	/^	User *protocol.User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`$/;"	m	struct:command.AddUserOperation	typeref:typename:*protocol.User
User	app/router/command/command.pb.go	/^	User              string            `protobuf:"bytes,9,opt,name=User,proto3" json:"User,omitemp/;"	m	struct:command.RoutingContext	typeref:typename:string
User	app/router/command/command.proto	/^  string User = 9;$/;"	f	message:v2ray.core.app.router.command.RoutingContext	typeref:typename:string
User	common/protocol/headers.go	/^	User     *MemoryUser$/;"	m	struct:protocol.RequestHeader	typeref:typename:*MemoryUser
User	common/protocol/server_spec.pb.go	/^	User    []*User         `protobuf:"bytes,3,rep,name=user,proto3" json:"user,omitempty"`$/;"	m	struct:protocol.ServerEndpoint	typeref:typename:[]*User
User	common/protocol/user.pb.go	/^type User struct {$/;"	s	package:protocol
User	common/protocol/user.proto	/^message User {$/;"	m	package:v2ray.core.common.protocol
User	common/session/session.go	/^	User *protocol.MemoryUser$/;"	m	struct:session.Inbound	typeref:typename:*protocol.MemoryUser
User	infra/conf/common.go	/^type User struct {$/;"	s	package:conf
User	proxy/mtproto/config.pb.go	/^	User []*protocol.User `protobuf:"bytes,1,rep,name=user,proto3" json:"user,omitempty"`$/;"	m	struct:mtproto.ServerConfig	typeref:typename:[]*protocol.User
User	proxy/shadowsocks/config.pb.go	/^	User       *protocol.User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`$/;"	m	struct:shadowsocks.ServerConfig	typeref:typename:*protocol.User
User	proxy/shadowsocks/protocol.go	/^	User   *protocol.MemoryUser$/;"	m	struct:shadowsocks.UDPReader	typeref:typename:*protocol.MemoryUser
User	proxy/vmess/inbound/config.pb.go	/^	User                 []*protocol.User `protobuf:"bytes,1,rep,name=user,proto3" json:"user,omite/;"	m	struct:inbound.Config	typeref:typename:[]*protocol.User
User	release/config/systemd/system/v2ray.service	/^User=nobody$/;"	k	section:Service
User	release/config/systemd/system/v2ray@.service	/^User=nobody$/;"	k	section:Service
UserDownlink	app/policy/config.pb.go	/^	UserDownlink bool `protobuf:"varint,2,opt,name=user_downlink,json=userDownlink,proto3" json:"us/;"	m	struct:policy.Policy_Stats	typeref:typename:bool
UserDownlink	features/policy/policy.go	/^	UserDownlink bool$/;"	m	struct:policy.Stats	typeref:typename:bool
UserEmail	app/router/config.pb.go	/^	UserEmail      []string      `protobuf:"bytes,7,rep,name=user_email,json=userEmail,proto3" json/;"	m	struct:router.RoutingRule	typeref:typename:[]string
UserLevel	infra/conf/dokodemo.go	/^	UserLevel    uint32       `json:"userLevel"`$/;"	m	struct:conf.DokodemoConfig	typeref:typename:uint32
UserLevel	infra/conf/freedom.go	/^	UserLevel      uint32  `json:"userLevel"`$/;"	m	struct:conf.FreedomConfig	typeref:typename:uint32
UserLevel	infra/conf/http.go	/^	UserLevel   uint32         `json:"userLevel"`$/;"	m	struct:conf.HttpServerConfig	typeref:typename:uint32
UserLevel	infra/conf/socks.go	/^	UserLevel  uint32          `json:"userLevel"`$/;"	m	struct:conf.SocksServerConfig	typeref:typename:uint32
UserLevel	proxy/dokodemo/config.pb.go	/^	UserLevel      uint32 `protobuf:"varint,6,opt,name=user_level,json=userLevel,proto3" json:"user/;"	m	struct:dokodemo.Config	typeref:typename:uint32
UserLevel	proxy/freedom/config.pb.go	/^	UserLevel           uint32               `protobuf:"varint,4,opt,name=user_level,json=userLevel/;"	m	struct:freedom.Config	typeref:typename:uint32
UserLevel	proxy/http/config.pb.go	/^	UserLevel        uint32            `protobuf:"varint,4,opt,name=user_level,json=userLevel,proto/;"	m	struct:http.ServerConfig	typeref:typename:uint32
UserLevel	proxy/socks/config.pb.go	/^	UserLevel uint32 `protobuf:"varint,6,opt,name=user_level,json=userLevel,proto3" json:"user_leve/;"	m	struct:socks.ServerConfig	typeref:typename:uint32
UserManager	proxy/proxy.go	/^type UserManager interface {$/;"	i	package:proxy
UserMatcher	app/router/condition.go	/^type UserMatcher struct {$/;"	s	package:router
UserName	bin/config/config-server.json	/^    "InfluxDB":{"URL":"http:\/\/192.168.1.115:8086","DBName":"metric","UserName":"saveio","Passw/;"	s	object:porter.InfluxDB
UserUplink	app/policy/config.pb.go	/^	UserUplink   bool `protobuf:"varint,1,opt,name=user_uplink,json=userUplink,proto3" json:"user_u/;"	m	struct:policy.Policy_Stats	typeref:typename:bool
UserUplink	features/policy/policy.go	/^	UserUplink bool$/;"	m	struct:policy.Stats	typeref:typename:bool
Username	infra/conf/http.go	/^	Username string `json:"user"`$/;"	m	struct:conf.HttpAccount	typeref:typename:string
Username	infra/conf/socks.go	/^	Username string `json:"user"`$/;"	m	struct:conf.SocksAccount	typeref:typename:string
Username	proxy/http/config.pb.go	/^	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`$/;"	m	struct:http.Account	typeref:typename:string
Username	proxy/socks/config.pb.go	/^	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`$/;"	m	struct:socks.Account	typeref:typename:string
Users	infra/conf/http.go	/^	Users   []json.RawMessage `json:"users"`$/;"	m	struct:conf.HttpRemoteConfig	typeref:typename:[]json.RawMessage
Users	infra/conf/mtproto.go	/^	Users []json.RawMessage `json:"users"`$/;"	m	struct:conf.MTProtoServerConfig	typeref:typename:[]json.RawMessage
Users	infra/conf/socks.go	/^	Users   []json.RawMessage `json:"users"`$/;"	m	struct:conf.SocksRemoteConfig	typeref:typename:[]json.RawMessage
Users	infra/conf/vless.go	/^	Users   []json.RawMessage `json:"users"`$/;"	m	struct:conf.VLessOutboundVnext	typeref:typename:[]json.RawMessage
Users	infra/conf/vmess.go	/^	Users        []json.RawMessage   `json:"clients"`$/;"	m	struct:conf.VMessInboundConfig	typeref:typename:[]json.RawMessage
Users	infra/conf/vmess.go	/^	Users   []json.RawMessage `json:"users"`$/;"	m	struct:conf.VMessOutboundTarget	typeref:typename:[]json.RawMessage
Users	proxy/trojan/config.pb.go	/^	Users     []*protocol.User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`$/;"	m	struct:trojan.ServerConfig	typeref:typename:[]*protocol.User
V	app/log/command/command.go	/^	V *core.Instance$/;"	m	struct:command.LoggerServer	typeref:typename:*core.Instance
V2rayKey	context.go	/^type V2rayKey int$/;"	t	package:core	typeref:typename:int
VLessInboundConfig	infra/conf/vless.go	/^type VLessInboundConfig struct {$/;"	s	package:conf
VLessInboundFallback	infra/conf/vless.go	/^type VLessInboundFallback struct {$/;"	s	package:conf
VLessOutboundConfig	infra/conf/vless.go	/^type VLessOutboundConfig struct {$/;"	s	package:conf
VLessOutboundVnext	infra/conf/vless.go	/^type VLessOutboundVnext struct {$/;"	s	package:conf
VMessAccount	infra/conf/vmess.go	/^type VMessAccount struct {$/;"	s	package:conf
VMessDefaultConfig	infra/conf/vmess.go	/^type VMessDefaultConfig struct {$/;"	s	package:conf
VMessDetourConfig	infra/conf/vmess.go	/^type VMessDetourConfig struct {$/;"	s	package:conf
VMessInboundConfig	infra/conf/vmess.go	/^type VMessInboundConfig struct {$/;"	s	package:conf
VMessOutboundConfig	infra/conf/vmess.go	/^type VMessOutboundConfig struct {$/;"	s	package:conf
VMessOutboundTarget	infra/conf/vmess.go	/^type VMessOutboundTarget struct {$/;"	s	package:conf
ValidMin	common/protocol/headers.go	/^	ValidMin byte$/;"	m	struct:protocol.CommandSwitchAccount	typeref:typename:byte
ValidationStrategy	common/protocol/server_spec.go	/^type ValidationStrategy interface {$/;"	i	package:protocol
Validator	proxy/trojan/validator.go	/^type Validator struct {$/;"	s	package:trojan
Validator	proxy/vless/validator.go	/^type Validator struct {$/;"	s	package:vless
Value	app/dispatcher/stats_test.go	/^func (c *TestCounter) Value() int64 {$/;"	f	type:dispatcher_test.TestCounter	typeref:typename:int64
Value	app/policy/config.pb.go	/^	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:policy.Second	typeref:typename:uint32
Value	app/proxyman/config.pb.go	/^	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:proxyman.AllocationStrategy_AllocationStrategyConcurrency	typeref:typename:uint32
Value	app/proxyman/config.pb.go	/^	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:proxyman.AllocationStrategy_AllocationStrategyRefresh	typeref:typename:uint32
Value	app/router/config.pb.go	/^	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:router.Domain	typeref:typename:string
Value	app/stats/command/command.pb.go	/^	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:command.Stat	typeref:typename:int64
Value	app/stats/counter.go	/^func (c *Counter) Value() int64 {$/;"	f	struct:stats.Counter	typeref:typename:int64
Value	common/net/port.go	/^func (p Port) Value() uint16 {$/;"	f	type:net.Port	typeref:typename:uint16
Value	common/peer/latency.go	/^	Value() uint64$/;"	n	interface:peer.Latency	typeref:typename:uint64
Value	common/peer/latency.go	/^func (al *AverageLatency) Value() uint64 {$/;"	f	struct:peer.AverageLatency	typeref:typename:uint64
Value	common/serial/typed_message.pb.go	/^	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:serial.TypedMessage	typeref:typename:[]byte
Value	features/stats/stats.go	/^	Value() int64$/;"	n	interface:stats.Counter	typeref:typename:int64
Value	transport/internet/headers/http/config.pb.go	/^	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:http.Header	typeref:typename:[]string
Value	transport/internet/headers/http/config.pb.go	/^	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:http.Method	typeref:typename:string
Value	transport/internet/headers/http/config.pb.go	/^	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:http.Version	typeref:typename:string
Value	transport/internet/kcp/config.pb.go	/^	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:kcp.DownlinkCapacity	typeref:typename:uint32
Value	transport/internet/kcp/config.pb.go	/^	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:kcp.MTU	typeref:typename:uint32
Value	transport/internet/kcp/config.pb.go	/^	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:kcp.TTI	typeref:typename:uint32
Value	transport/internet/kcp/config.pb.go	/^	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:kcp.UplinkCapacity	typeref:typename:uint32
Value	transport/internet/websocket/config.pb.go	/^	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`$/;"	m	struct:websocket.Header	typeref:typename:string
VerifyCommand	infra/control/verify.go	/^type VerifyCommand struct{}$/;"	s	package:control
VerifyData	app/p2p/protocol/seedlist/message.go	/^func VerifyData(data []byte, signature []byte, peerId peer.ID, pubKeyData []byte) bool {$/;"	f	package:seedlist	typeref:typename:bool
Version	common/protocol/headers.go	/^	Version  byte$/;"	m	struct:protocol.RequestHeader	typeref:typename:byte
Version	common/protocol/tls/cert/privateKey.go	/^	Version       int$/;"	m	struct:cert.ecPrivateKey	typeref:typename:int
Version	common/protocol/tls/cert/privateKey.go	/^	Version    int$/;"	m	struct:cert.pkcs8	typeref:typename:int
Version	common/protocol/tls/cert/privateKey.go	/^	Version int$/;"	m	struct:cert.pkcs1PrivateKey	typeref:typename:int
Version	core.go	/^func Version() string {$/;"	f	package:core	typeref:typename:string
Version	infra/conf/transport_authenticators.go	/^	Version string                 `json:"version"`$/;"	m	struct:conf.HTTPAuthenticatorRequest	typeref:typename:string
Version	infra/conf/transport_authenticators.go	/^	Version string                 `json:"version"`$/;"	m	struct:conf.HTTPAuthenticatorResponse	typeref:typename:string
Version	proxy/shadowsocks/protocol.go	/^	Version = 1$/;"	c	package:shadowsocks
Version	proxy/vless/encoding/encoding.go	/^	Version = byte(0)$/;"	c	package:encoding
Version	proxy/vmess/encoding/encoding.go	/^	Version = byte(1)$/;"	c	package:encoding
Version	transport/internet/headers/http/config.pb.go	/^	Version *Version  `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`$/;"	m	struct:http.ResponseConfig	typeref:typename:*Version
Version	transport/internet/headers/http/config.pb.go	/^	Version *Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`$/;"	m	struct:http.RequestConfig	typeref:typename:*Version
Version	transport/internet/headers/http/config.pb.go	/^type Version struct {$/;"	s	package:http
Version	transport/internet/headers/http/config.proto	/^message Version {$/;"	m	package:v2ray.core.transport.internet.headers.http
Version	transport/internet/headers/srtp/config.pb.go	/^	Version     uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`$/;"	m	struct:srtp.Config	typeref:typename:uint32
Version	transport/internet/headers/utp/config.pb.go	/^	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`$/;"	m	struct:utp.Config	typeref:typename:uint32
VersionStatement	core.go	/^func VersionStatement() []string {$/;"	f	package:core	typeref:typename:[]string
Via	app/proxyman/config.pb.go	/^	Via               *net.IPOrDomain        `protobuf:"bytes,1,opt,name=via,proto3" json:"via,omit/;"	m	struct:proxyman.SenderConfig	typeref:typename:*net.IPOrDomain
VideoChat	transport/internet/headers/wechat/wechat.go	/^type VideoChat struct {$/;"	s	package:wechat
VideoConfig	transport/internet/headers/wechat/config.pb.go	/^type VideoConfig struct {$/;"	s	package:wechat
VideoConfig	transport/internet/headers/wechat/config.proto	/^message VideoConfig {}$/;"	m	package:v2ray.core.transport.internet.headers.wechat
Visit	transport/internet/kcp/sending.go	/^func (sw *SendingWindow) Visit(visitor func(seg *DataSegment) bool) {$/;"	f	struct:kcp.SendingWindow
VisitCounters	app/stats/stats.go	/^func (m *Manager) VisitCounters(visitor func(string, stats.Counter) bool) {$/;"	f	struct:stats.Manager
Vnext	infra/conf/vless.go	/^	Vnext []*VLessOutboundVnext `json:"vnext"`$/;"	m	struct:conf.VLessOutboundConfig	typeref:typename:[]*VLessOutboundVnext
Vnext	proxy/vless/outbound/config.pb.go	/^	Vnext []*protocol.ServerEndpoint `protobuf:"bytes,1,rep,name=vnext,proto3" json:"vnext,omitempt/;"	m	struct:outbound.Config	typeref:typename:[]*protocol.ServerEndpoint
WSConfig	infra/conf/transport.go	/^	WSConfig   *WebSocketConfig    `json:"wsSettings"`$/;"	m	struct:conf.TransportConfig	typeref:typename:*WebSocketConfig
WSSettings	infra/conf/transport_internet.go	/^	WSSettings     *WebSocketConfig    `json:"wsSettings"`$/;"	m	struct:conf.StreamConfig	typeref:typename:*WebSocketConfig
Wait	common/signal/done/done.go	/^func (d *Instance) Wait() <-chan struct{} {$/;"	f	struct:done.Instance	typeref:typename:<-chan struct{}
Wait	common/signal/notifier.go	/^func (n *Notifier) Wait() <-chan struct{} {$/;"	f	struct:signal.Notifier	typeref:typename:<-chan struct{}
Wait	common/signal/pubsub/pubsub.go	/^func (s *Subscriber) Wait() <-chan interface{} {$/;"	f	struct:pubsub.Subscriber	typeref:typename:<-chan interface{}
Wait	common/signal/semaphore/semaphore.go	/^func (s *Instance) Wait() <-chan struct{} {$/;"	f	struct:semaphore.Instance	typeref:typename:<-chan struct{}
WakeUp	transport/internet/kcp/connection.go	/^func (u *Updater) WakeUp() {$/;"	f	struct:kcp.Updater
WalletAddr	store/task.go	/^	WalletAddr string$/;"	m	struct:store.Task	typeref:typename:string
WantedBy	release/config/systemd/system/v2ray.service	/^WantedBy=multi-user.target$/;"	k	section:Install
WantedBy	release/config/systemd/system/v2ray@.service	/^WantedBy=multi-user.target$/;"	k	section:Install
Warning	common/log/log.proto	/^  Warning = 2;$/;"	e	enum:v2ray.core.common.log.Severity
WebSocket	transport/internet/config.proto	/^  WebSocket = 3;$/;"	e	enum:v2ray.core.transport.internet.TransportProtocol
WebSocketConfig	infra/conf/transport_internet.go	/^type WebSocketConfig struct {$/;"	s	package:conf
WechatVideoAuthenticator	infra/conf/transport_authenticators.go	/^type WechatVideoAuthenticator struct{}$/;"	s	package:conf
Wireguard	transport/internet/headers/wireguard/wireguard.go	/^type Wireguard struct{}$/;"	s	package:wireguard
WireguardAuthenticator	infra/conf/transport_authenticators.go	/^type WireguardAuthenticator struct{}$/;"	s	package:conf
WireguardConfig	transport/internet/headers/wireguard/config.pb.go	/^type WireguardConfig struct {$/;"	s	package:wireguard
WireguardConfig	transport/internet/headers/wireguard/config.proto	/^message WireguardConfig {}$/;"	m	package:v2ray.core.transport.internet.headers.wireguard
WithAdapter	transport/internet/system_dialer.go	/^func WithAdapter(dialer SystemDialerAdapter) SystemDialer {$/;"	f	package:internet	typeref:typename:SystemDialer
WithAddressTypeParser	common/protocol/address.go	/^func WithAddressTypeParser(atp AddressTypeParser) AddressOption {$/;"	f	package:protocol	typeref:typename:AddressOption
WithDestination	transport/internet/tls/config.go	/^func WithDestination(dest net.Destination) Option {$/;"	f	package:tls	typeref:typename:Option
WithDestination	transport/internet/xtls/config.go	/^func WithDestination(dest net.Destination) Option {$/;"	f	package:xtls	typeref:typename:Option
WithNextProto	transport/internet/tls/config.go	/^func WithNextProto(protocol ...string) Option {$/;"	f	package:tls	typeref:typename:Option
WithNextProto	transport/internet/xtls/config.go	/^func WithNextProto(protocol ...string) Option {$/;"	f	package:xtls	typeref:typename:Option
WithPathObj	common/errors/errors.go	/^func (err *Error) WithPathObj(obj interface{}) *Error {$/;"	f	struct:errors.Error	typeref:typename:*Error
WithSizeLimit	transport/pipe/pipe.go	/^func WithSizeLimit(limit int32) Option {$/;"	f	package:pipe	typeref:typename:Option
WithoutSizeLimit	transport/pipe/pipe.go	/^func WithoutSizeLimit() Option {$/;"	f	package:pipe	typeref:typename:Option
WorkerPicker	common/mux/client.go	/^type WorkerPicker interface {$/;"	i	package:mux
Write	app/proxyman/inbound/worker.go	/^func (c *udpConn) Write(buf []byte) (int, error) {$/;"	f	struct:inbound.udpConn	typeref:typename:(int, error)
Write	common/buf/buffer.go	/^func (b *Buffer) Write(data []byte) (int, error) {$/;"	f	struct:buf.Buffer	typeref:typename:(int, error)
Write	common/buf/multi_buffer.go	/^func (c *MultiBufferContainer) Write(b []byte) (int, error) {$/;"	f	struct:buf.MultiBufferContainer	typeref:typename:(int, error)
Write	common/buf/writer.go	/^func (noOpWriter) Write(b []byte) (int, error) {$/;"	f	type:buf.noOpWriter	typeref:typename:(int, error)
Write	common/buf/writer.go	/^func (w *BufferedWriter) Write(b []byte) (int, error) {$/;"	f	struct:buf.BufferedWriter	typeref:typename:(int, error)
Write	common/crypto/io.go	/^func (w *CryptionWriter) Write(data []byte) (int, error) {$/;"	f	struct:crypto.CryptionWriter	typeref:typename:(int, error)
Write	common/log/logger.go	/^	Write(string) error$/;"	n	interface:log.Writer	typeref:typename:error
Write	common/log/logger.go	/^func (w *consoleLogWriter) Write(s string) error {$/;"	f	struct:log.consoleLogWriter	typeref:typename:error
Write	common/log/logger.go	/^func (w *fileLogWriter) Write(s string) error {$/;"	f	struct:log.fileLogWriter	typeref:typename:error
Write	common/net/connection.go	/^func (c *connection) Write(b []byte) (int, error) {$/;"	f	struct:net.connection	typeref:typename:(int, error)
Write	proxy/dns/dns.go	/^func (c *outboundConn) Write(b []byte) (int, error) {$/;"	f	struct:dns.outboundConn	typeref:typename:(int, error)
Write	proxy/http/client.go	/^func (h *http2Conn) Write(p []byte) (n int, err error) {$/;"	f	struct:http.http2Conn	typeref:typename:(n int, err error)
Write	proxy/shadowsocks/protocol.go	/^func (w *UDPWriter) Write(payload []byte) (int, error) {$/;"	f	struct:shadowsocks.UDPWriter	typeref:typename:(int, error)
Write	proxy/socks/protocol.go	/^func (w *UDPWriter) Write(b []byte) (int, error) {$/;"	f	struct:socks.UDPWriter	typeref:typename:(int, error)
Write	proxy/trojan/protocol.go	/^func (c *ConnWriter) Write(p []byte) (n int, err error) {$/;"	f	struct:trojan.ConnWriter	typeref:typename:(n int, err error)
Write	testing/mocks/io.go	/^func (m *Writer) Write(arg0 []byte) (int, error) {$/;"	f	struct:mocks.Writer	typeref:typename:(int, error)
Write	testing/mocks/io.go	/^func (mr *WriterMockRecorder) Write(arg0 interface{}) *gomock.Call {$/;"	f	struct:mocks.WriterMockRecorder	typeref:typename:*gomock.Call
Write	transport/internet/connection.go	/^func (c *StatCouterConnection) Write(b []byte) (int, error) {$/;"	f	struct:internet.StatCouterConnection	typeref:typename:(int, error)
Write	transport/internet/headers/http/http.go	/^	Write(io.Writer) error$/;"	n	interface:http.Writer	typeref:typename:error
Write	transport/internet/headers/http/http.go	/^func (NoOpWriter) Write(io.Writer) error {$/;"	f	struct:http.NoOpWriter	typeref:typename:error
Write	transport/internet/headers/http/http.go	/^func (c *HttpConn) Write(b []byte) (int, error) {$/;"	f	struct:http.HttpConn	typeref:typename:(int, error)
Write	transport/internet/headers/http/http.go	/^func (w *HeaderWriter) Write(writer io.Writer) error {$/;"	f	struct:http.HeaderWriter	typeref:typename:error
Write	transport/internet/http/hub.go	/^func (fw flushWriter) Write(p []byte) (n int, err error) {$/;"	f	struct:http.flushWriter	typeref:typename:(n int, err error)
Write	transport/internet/kcp/connection.go	/^func (c *Connection) Write(b []byte) (int, error) {$/;"	f	struct:kcp.Connection	typeref:typename:(int, error)
Write	transport/internet/kcp/io.go	/^func (w *KCPPacketWriter) Write(b []byte) (int, error) {$/;"	f	struct:kcp.KCPPacketWriter	typeref:typename:(int, error)
Write	transport/internet/kcp/listener.go	/^func (w *Writer) Write(payload []byte) (int, error) {$/;"	f	struct:kcp.Writer	typeref:typename:(int, error)
Write	transport/internet/kcp/output.go	/^	Write(seg Segment) error$/;"	n	interface:kcp.SegmentWriter	typeref:typename:error
Write	transport/internet/kcp/output.go	/^func (w *RetryableWriter) Write(seg Segment) error {$/;"	f	struct:kcp.RetryableWriter	typeref:typename:error
Write	transport/internet/kcp/output.go	/^func (w *SimpleSegmentWriter) Write(seg Segment) error {$/;"	f	struct:kcp.SimpleSegmentWriter	typeref:typename:error
Write	transport/internet/kcp/receiving.go	/^func (w *ReceivingWorker) Write(seg Segment) error {$/;"	f	struct:kcp.ReceivingWorker	typeref:typename:error
Write	transport/internet/kcp/sending.go	/^func (w *SendingWorker) Write(seg Segment) error {$/;"	f	struct:kcp.SendingWorker	typeref:typename:error
Write	transport/internet/quic/conn.go	/^func (c *interConn) Write(b []byte) (int, error) {$/;"	f	struct:quic.interConn	typeref:typename:(int, error)
Write	transport/internet/system_dialer.go	/^func (c *packetConnWrapper) Write(p []byte) (int, error) {$/;"	f	struct:internet.packetConnWrapper	typeref:typename:(int, error)
Write	transport/internet/websocket/connection.go	/^func (c *connection) Write(b []byte) (int, error) {$/;"	f	struct:websocket.connection	typeref:typename:(int, error)
WriteAddressPort	common/protocol/address.go	/^	WriteAddressPort(writer io.Writer, addr net.Address, port net.Port) error$/;"	n	interface:protocol.AddressSerializer	typeref:typename:error
WriteAddressPort	common/protocol/address.go	/^func (p portFirstAddressParser) WriteAddressPort(writer io.Writer, addr net.Address, port net.Po/;"	f	struct:protocol.portFirstAddressParser	typeref:typename:error
WriteAddressPort	common/protocol/address.go	/^func (p portLastAddressParser) WriteAddressPort(writer io.Writer, addr net.Address, port net.Por/;"	f	struct:protocol.portLastAddressParser	typeref:typename:error
WriteAllBytes	common/buf/io.go	/^func WriteAllBytes(writer io.Writer, payload []byte) error {$/;"	f	package:buf	typeref:typename:error
WriteBuffer	transport/internet/kcp/config.pb.go	/^	WriteBuffer      *WriteBuffer         `protobuf:"bytes,6,opt,name=write_buffer,json=writeBuffer/;"	m	struct:kcp.Config	typeref:typename:*WriteBuffer
WriteBuffer	transport/internet/kcp/config.pb.go	/^type WriteBuffer struct {$/;"	s	package:kcp
WriteBuffer	transport/internet/kcp/config.proto	/^message WriteBuffer {$/;"	m	package:v2ray.core.transport.internet.kcp
WriteBufferSize	bin/config/config-server.json	/^    "WriteBufferSize":8388608,$/;"	n	object:porter
WriteBufferSize	infra/conf/transport_internet.go	/^	WriteBufferSize *uint32         `json:"writeBufferSize"`$/;"	m	struct:conf.KCPConfig	typeref:typename:*uint32
WriteByte	common/buf/buffer.go	/^func (b *Buffer) WriteByte(v byte) error {$/;"	f	struct:buf.Buffer	typeref:typename:error
WriteByte	common/buf/writer.go	/^func (w *BufferedWriter) WriteByte(c byte) error {$/;"	f	struct:buf.BufferedWriter	typeref:typename:error
WriteCounter	transport/internet/connection.go	/^	WriteCounter stats.Counter$/;"	m	struct:internet.StatCouterConnection	typeref:typename:stats.Counter
WriteMessage	common/protocol/dns/io.go	/^	WriteMessage(msg *buf.Buffer) error$/;"	n	interface:dns.MessageWriter	typeref:typename:error
WriteMessage	common/protocol/dns/io.go	/^func (w *TCPWriter) WriteMessage(b *buf.Buffer) error {$/;"	f	struct:dns.TCPWriter	typeref:typename:error
WriteMessage	common/protocol/dns/io.go	/^func (w *UDPWriter) WriteMessage(b *buf.Buffer) error {$/;"	f	struct:dns.UDPWriter	typeref:typename:error
WriteMultiBuffer	app/dispatcher/stats.go	/^func (w *SizeStatWriter) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:dispatcher.SizeStatWriter	typeref:typename:error
WriteMultiBuffer	common/buf/io.go	/^	WriteMultiBuffer(MultiBuffer) error$/;"	n	interface:buf.Writer	typeref:typename:error
WriteMultiBuffer	common/buf/multi_buffer.go	/^func (c *MultiBufferContainer) WriteMultiBuffer(b MultiBuffer) error {$/;"	f	struct:buf.MultiBufferContainer	typeref:typename:error
WriteMultiBuffer	common/buf/multi_buffer.go	/^func WriteMultiBuffer(writer io.Writer, mb MultiBuffer) (MultiBuffer, error) {$/;"	f	package:buf	typeref:typename:(MultiBuffer, error)
WriteMultiBuffer	common/buf/writer.go	/^func (noOpWriter) WriteMultiBuffer(b MultiBuffer) error {$/;"	f	type:buf.noOpWriter	typeref:typename:error
WriteMultiBuffer	common/buf/writer.go	/^func (w *BufferToBytesWriter) WriteMultiBuffer(mb MultiBuffer) error {$/;"	f	struct:buf.BufferToBytesWriter	typeref:typename:error
WriteMultiBuffer	common/buf/writer.go	/^func (w *BufferedWriter) WriteMultiBuffer(b MultiBuffer) error {$/;"	f	struct:buf.BufferedWriter	typeref:typename:error
WriteMultiBuffer	common/buf/writer.go	/^func (w *SequentialWriter) WriteMultiBuffer(mb MultiBuffer) error {$/;"	f	struct:buf.SequentialWriter	typeref:typename:error
WriteMultiBuffer	common/crypto/auth.go	/^func (w *AuthenticationWriter) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:crypto.AuthenticationWriter	typeref:typename:error
WriteMultiBuffer	common/crypto/chunk.go	/^func (w *ChunkStreamWriter) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:crypto.ChunkStreamWriter	typeref:typename:error
WriteMultiBuffer	common/crypto/io.go	/^func (w *CryptionWriter) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:crypto.CryptionWriter	typeref:typename:error
WriteMultiBuffer	common/mux/writer.go	/^func (w *Writer) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:mux.Writer	typeref:typename:error
WriteMultiBuffer	common/net/connection.go	/^func (c *connection) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:net.connection	typeref:typename:error
WriteMultiBuffer	proxy/trojan/protocol.go	/^func (c *ConnWriter) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:trojan.ConnWriter	typeref:typename:error
WriteMultiBuffer	proxy/trojan/protocol.go	/^func (w *PacketWriter) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:trojan.PacketWriter	typeref:typename:error
WriteMultiBuffer	proxy/vless/encoding/addons.go	/^func (w *LengthPacketWriter) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:encoding.LengthPacketWriter	typeref:typename:error
WriteMultiBuffer	proxy/vless/encoding/addons.go	/^func (w *MultiLengthPacketWriter) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:encoding.MultiLengthPacketWriter	typeref:typename:error
WriteMultiBuffer	transport/internet/kcp/connection.go	/^func (c *Connection) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:kcp.Connection	typeref:typename:error
WriteMultiBuffer	transport/internet/quic/conn.go	/^func (c *interConn) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:quic.interConn	typeref:typename:error
WriteMultiBuffer	transport/internet/tls/tls.go	/^func (c *Conn) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:tls.Conn	typeref:typename:error
WriteMultiBuffer	transport/internet/websocket/connection.go	/^func (c *connection) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:websocket.connection	typeref:typename:error
WriteMultiBuffer	transport/internet/xtls/xtls.go	/^func (c *Conn) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:xtls.Conn	typeref:typename:error
WriteMultiBuffer	transport/pipe/impl.go	/^func (p *pipe) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:pipe.pipe	typeref:typename:error
WriteMultiBuffer	transport/pipe/writer.go	/^func (w *Writer) WriteMultiBuffer(mb buf.MultiBuffer) error {$/;"	f	struct:pipe.Writer	typeref:typename:error
WriteMultiBufferWithMetadata	proxy/trojan/protocol.go	/^func (w *PacketWriter) WriteMultiBufferWithMetadata(mb buf.MultiBuffer, dest net.Destination) er/;"	f	struct:trojan.PacketWriter	typeref:typename:error
WriteString	common/buf/buffer.go	/^func (b *Buffer) WriteString(s string) (int, error) {$/;"	f	struct:buf.Buffer	typeref:typename:(int, error)
WriteTCPRequest	proxy/shadowsocks/protocol.go	/^func WriteTCPRequest(request *protocol.RequestHeader, writer io.Writer) (buf.Writer, error) {$/;"	f	package:shadowsocks	typeref:typename:(buf.Writer, error)
WriteTCPResponse	proxy/shadowsocks/protocol.go	/^func WriteTCPResponse(request *protocol.RequestHeader, writer io.Writer) (buf.Writer, error) {$/;"	f	package:shadowsocks	typeref:typename:(buf.Writer, error)
WriteTo	common/buf/reader.go	/^func (r *BufferedReader) WriteTo(writer io.Writer) (int64, error) {$/;"	f	struct:buf.BufferedReader	typeref:typename:(int64, error)
WriteTo	common/mux/frame.go	/^func (f FrameMetadata) WriteTo(b *buf.Buffer) error {$/;"	f	struct:mux.FrameMetadata	typeref:typename:error
WriteTo	proxy/blackhole/config.go	/^	WriteTo(buf.Writer) int32$/;"	n	interface:blackhole.ResponseConfig	typeref:typename:int32
WriteTo	proxy/blackhole/config.go	/^func (*HTTPResponse) WriteTo(writer buf.Writer) int32 {$/;"	f	unknown:blackhole.HTTPResponse	typeref:typename:int32
WriteTo	proxy/blackhole/config.go	/^func (*NoneResponse) WriteTo(buf.Writer) int32 { return 0 }$/;"	f	unknown:blackhole.NoneResponse	typeref:typename:int32
WriteTo	transport/internet/quic/conn.go	/^func (c *sysConn) WriteTo(p []byte, addr net.Addr) (int, error) {$/;"	f	struct:quic.sysConn	typeref:typename:(int, error)
WriteTo	transport/internet/udp/dispatcher.go	/^func (c *dispatcherConn) WriteTo(p []byte, addr net.Addr) (int, error) {$/;"	f	struct:udp.dispatcherConn	typeref:typename:(int, error)
WriteTo	transport/internet/udp/hub.go	/^func (h *Hub) WriteTo(payload []byte, dest net.Destination) (int, error) {$/;"	f	struct:udp.Hub	typeref:typename:(int, error)
WriteToLog	common/errors/errors.go	/^func (err *Error) WriteToLog(opts ...ExportOption) {$/;"	f	struct:errors.Error
WriteUint16	common/serial/serial.go	/^func WriteUint16(writer io.Writer, value uint16) (int, error) {$/;"	f	package:serial	typeref:typename:(int, error)
WriteUint64	common/serial/serial.go	/^func WriteUint64(writer io.Writer, value uint64) (int, error) {$/;"	f	package:serial	typeref:typename:(int, error)
Writer	app/dispatcher/stats.go	/^	Writer  buf.Writer$/;"	m	struct:dispatcher.SizeStatWriter	typeref:typename:buf.Writer
Writer	common/buf/io.go	/^type Writer interface {$/;"	i	package:buf
Writer	common/buf/writer.go	/^	io.Writer$/;"	M	struct:buf.BufferToBytesWriter	typeref:typename:io.Writer
Writer	common/buf/writer.go	/^	io.Writer$/;"	M	struct:buf.SequentialWriter	typeref:typename:io.Writer
Writer	common/log/logger.go	/^type Writer interface {$/;"	i	package:log
Writer	common/mux/writer.go	/^type Writer struct {$/;"	s	package:mux
Writer	common/protocol/dns/io.go	/^	buf.Writer$/;"	M	struct:dns.TCPWriter	typeref:typename:buf.Writer
Writer	common/protocol/dns/io.go	/^	buf.Writer$/;"	M	struct:dns.UDPWriter	typeref:typename:buf.Writer
Writer	proxy/shadowsocks/protocol.go	/^	Writer  io.Writer$/;"	m	struct:shadowsocks.UDPWriter	typeref:typename:io.Writer
Writer	proxy/trojan/protocol.go	/^	io.Writer$/;"	M	struct:trojan.ConnWriter	typeref:typename:io.Writer
Writer	proxy/trojan/protocol.go	/^	io.Writer$/;"	M	struct:trojan.PacketWriter	typeref:typename:io.Writer
Writer	proxy/vless/encoding/addons.go	/^	buf.Writer$/;"	M	struct:encoding.MultiLengthPacketWriter	typeref:typename:buf.Writer
Writer	proxy/vless/encoding/addons.go	/^	io.Writer$/;"	M	struct:encoding.LengthPacketWriter	typeref:typename:io.Writer
Writer	testing/mocks/io.go	/^type Writer struct {$/;"	s	package:mocks
Writer	transport/internet/headers/http/http.go	/^type Writer interface {$/;"	i	package:http
Writer	transport/internet/kcp/io.go	/^	Writer   io.Writer$/;"	m	struct:kcp.KCPPacketWriter	typeref:typename:io.Writer
Writer	transport/internet/kcp/listener.go	/^type Writer struct {$/;"	s	package:kcp
Writer	transport/link.go	/^	Writer buf.Writer$/;"	m	struct:transport.Link	typeref:typename:buf.Writer
Writer	transport/pipe/writer.go	/^type Writer struct {$/;"	s	package:pipe
WriterCreator	common/log/logger.go	/^type WriterCreator func() Writer$/;"	t	package:log	typeref:typename:func() Writer
WriterMockRecorder	testing/mocks/io.go	/^type WriterMockRecorder struct {$/;"	s	package:mocks
XORKeyStream	common/crypto/internal/chacha.go	/^func (s *ChaCha20Stream) XORKeyStream(dst, src []byte) {$/;"	f	struct:internal.ChaCha20Stream
XRD	proxy/vless/vless.go	/^	XRD = "xtls-rprx-direct"$/;"	c	package:vless
XRO	proxy/vless/vless.go	/^	XRO = "xtls-rprx-origin"$/;"	c	package:vless
XTLSCertConfig	infra/conf/transport_internet.go	/^type XTLSCertConfig struct {$/;"	s	package:conf
XTLSConfig	infra/conf/transport_internet.go	/^type XTLSConfig struct {$/;"	s	package:conf
XTLSSettings	infra/conf/transport_internet.go	/^	XTLSSettings   *XTLSConfig         `json:"xtlsSettings"`$/;"	m	struct:conf.StreamConfig	typeref:typename:*XTLSConfig
XXX_DiscardUnknown	app/p2p/config.pb.go	/^func (m *Config) XXX_DiscardUnknown() {$/;"	f	struct:p2p.Config
XXX_DiscardUnknown	app/p2p/config.pb.go	/^func (m *Seed) XXX_DiscardUnknown() {$/;"	f	struct:p2p.Seed
XXX_DiscardUnknown	app/p2p/wire/notifier.pb.go	/^func (m *HelloReply) XXX_DiscardUnknown() {$/;"	f	struct:wire.HelloReply
XXX_DiscardUnknown	app/p2p/wire/notifier.pb.go	/^func (m *HelloRequest) XXX_DiscardUnknown() {$/;"	f	struct:wire.HelloRequest
XXX_DiscardUnknown	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) XXX_DiscardUnknown() {$/;"	f	struct:wire.HelloSeedList
XXX_DiscardUnknown	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) XXX_DiscardUnknown() {$/;"	f	struct:wire.MessageData
XXX_DiscardUnknown	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) XXX_DiscardUnknown() {$/;"	f	struct:wire.SeedInfo
XXX_DiscardUnknown	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListRequest) XXX_DiscardUnknown() {$/;"	f	struct:wire.SeedListRequest
XXX_DiscardUnknown	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListResponse) XXX_DiscardUnknown() {$/;"	f	struct:wire.SeedListResponse
XXX_DiscardUnknown	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) XXX_DiscardUnknown() {$/;"	f	struct:encoding.Addons
XXX_Marshal	app/p2p/config.pb.go	/^func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f	struct:p2p.Config	typeref:typename:([]byte, error)
XXX_Marshal	app/p2p/config.pb.go	/^func (m *Seed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f	struct:p2p.Seed	typeref:typename:([]byte, error)
XXX_Marshal	app/p2p/wire/notifier.pb.go	/^func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f	struct:wire.HelloReply	typeref:typename:([]byte, error)
XXX_Marshal	app/p2p/wire/notifier.pb.go	/^func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f	struct:wire.HelloRequest	typeref:typename:([]byte, error)
XXX_Marshal	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f	struct:wire.HelloSeedList	typeref:typename:([]byte, error)
XXX_Marshal	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f	struct:wire.MessageData	typeref:typename:([]byte, error)
XXX_Marshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f	struct:wire.SeedInfo	typeref:typename:([]byte, error)
XXX_Marshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f	struct:wire.SeedListRequest	typeref:typename:([]byte, error)
XXX_Marshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f	struct:wire.SeedListResponse	typeref:typename:([]byte, error)
XXX_Marshal	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {$/;"	f	struct:encoding.Addons	typeref:typename:([]byte, error)
XXX_Merge	app/p2p/config.pb.go	/^func (m *Config) XXX_Merge(src proto.Message) {$/;"	f	struct:p2p.Config
XXX_Merge	app/p2p/config.pb.go	/^func (m *Seed) XXX_Merge(src proto.Message) {$/;"	f	struct:p2p.Seed
XXX_Merge	app/p2p/wire/notifier.pb.go	/^func (m *HelloReply) XXX_Merge(src proto.Message) {$/;"	f	struct:wire.HelloReply
XXX_Merge	app/p2p/wire/notifier.pb.go	/^func (m *HelloRequest) XXX_Merge(src proto.Message) {$/;"	f	struct:wire.HelloRequest
XXX_Merge	app/p2p/wire/seedlist.pb.go	/^func (dst *HelloSeedList) XXX_Merge(src proto.Message) {$/;"	f	struct:wire.HelloSeedList
XXX_Merge	app/p2p/wire/seedlist.pb.go	/^func (dst *MessageData) XXX_Merge(src proto.Message) {$/;"	f	struct:wire.MessageData
XXX_Merge	app/p2p/wire/seedlist.pb.go	/^func (dst *SeedInfo) XXX_Merge(src proto.Message) {$/;"	f	struct:wire.SeedInfo
XXX_Merge	app/p2p/wire/seedlist.pb.go	/^func (dst *SeedListRequest) XXX_Merge(src proto.Message) {$/;"	f	struct:wire.SeedListRequest
XXX_Merge	app/p2p/wire/seedlist.pb.go	/^func (dst *SeedListResponse) XXX_Merge(src proto.Message) {$/;"	f	struct:wire.SeedListResponse
XXX_Merge	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) XXX_Merge(src proto.Message) {$/;"	f	struct:encoding.Addons
XXX_NoUnkeyedLiteral	app/p2p/config.pb.go	/^	XXX_NoUnkeyedLiteral struct{} `json:"-"`$/;"	m	struct:p2p.Config	typeref:typename:struct{}
XXX_NoUnkeyedLiteral	app/p2p/config.pb.go	/^	XXX_NoUnkeyedLiteral struct{} `json:"-"`$/;"	m	struct:p2p.Seed	typeref:typename:struct{}
XXX_NoUnkeyedLiteral	app/p2p/wire/notifier.pb.go	/^	XXX_NoUnkeyedLiteral struct{} `json:"-"`$/;"	m	struct:wire.HelloReply	typeref:typename:struct{}
XXX_NoUnkeyedLiteral	app/p2p/wire/notifier.pb.go	/^	XXX_NoUnkeyedLiteral struct{} `json:"-"`$/;"	m	struct:wire.HelloRequest	typeref:typename:struct{}
XXX_NoUnkeyedLiteral	app/p2p/wire/seedlist.pb.go	/^	XXX_NoUnkeyedLiteral struct{}   `json:"-"`$/;"	m	struct:wire.HelloSeedList	typeref:typename:struct{}
XXX_NoUnkeyedLiteral	app/p2p/wire/seedlist.pb.go	/^	XXX_NoUnkeyedLiteral struct{} `json:"-"`$/;"	m	struct:wire.MessageData	typeref:typename:struct{}
XXX_NoUnkeyedLiteral	app/p2p/wire/seedlist.pb.go	/^	XXX_NoUnkeyedLiteral struct{} `json:"-"`$/;"	m	struct:wire.SeedInfo	typeref:typename:struct{}
XXX_NoUnkeyedLiteral	app/p2p/wire/seedlist.pb.go	/^	XXX_NoUnkeyedLiteral struct{} `json:"-"`$/;"	m	struct:wire.SeedListRequest	typeref:typename:struct{}
XXX_NoUnkeyedLiteral	app/p2p/wire/seedlist.pb.go	/^	XXX_NoUnkeyedLiteral struct{} `json:"-"`$/;"	m	struct:wire.SeedListResponse	typeref:typename:struct{}
XXX_NoUnkeyedLiteral	proxy/vless/encoding/addons.pb.go	/^	XXX_NoUnkeyedLiteral struct{} `json:"-"`$/;"	m	struct:encoding.Addons	typeref:typename:struct{}
XXX_Size	app/p2p/config.pb.go	/^func (m *Config) XXX_Size() int {$/;"	f	struct:p2p.Config	typeref:typename:int
XXX_Size	app/p2p/config.pb.go	/^func (m *Seed) XXX_Size() int {$/;"	f	struct:p2p.Seed	typeref:typename:int
XXX_Size	app/p2p/wire/notifier.pb.go	/^func (m *HelloReply) XXX_Size() int {$/;"	f	struct:wire.HelloReply	typeref:typename:int
XXX_Size	app/p2p/wire/notifier.pb.go	/^func (m *HelloRequest) XXX_Size() int {$/;"	f	struct:wire.HelloRequest	typeref:typename:int
XXX_Size	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) XXX_Size() int {$/;"	f	struct:wire.HelloSeedList	typeref:typename:int
XXX_Size	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) XXX_Size() int {$/;"	f	struct:wire.MessageData	typeref:typename:int
XXX_Size	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) XXX_Size() int {$/;"	f	struct:wire.SeedInfo	typeref:typename:int
XXX_Size	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListRequest) XXX_Size() int {$/;"	f	struct:wire.SeedListRequest	typeref:typename:int
XXX_Size	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListResponse) XXX_Size() int {$/;"	f	struct:wire.SeedListResponse	typeref:typename:int
XXX_Size	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) XXX_Size() int {$/;"	f	struct:encoding.Addons	typeref:typename:int
XXX_Unmarshal	app/p2p/config.pb.go	/^func (m *Config) XXX_Unmarshal(b []byte) error {$/;"	f	struct:p2p.Config	typeref:typename:error
XXX_Unmarshal	app/p2p/config.pb.go	/^func (m *Seed) XXX_Unmarshal(b []byte) error {$/;"	f	struct:p2p.Seed	typeref:typename:error
XXX_Unmarshal	app/p2p/wire/notifier.pb.go	/^func (m *HelloReply) XXX_Unmarshal(b []byte) error {$/;"	f	struct:wire.HelloReply	typeref:typename:error
XXX_Unmarshal	app/p2p/wire/notifier.pb.go	/^func (m *HelloRequest) XXX_Unmarshal(b []byte) error {$/;"	f	struct:wire.HelloRequest	typeref:typename:error
XXX_Unmarshal	app/p2p/wire/seedlist.pb.go	/^func (m *HelloSeedList) XXX_Unmarshal(b []byte) error {$/;"	f	struct:wire.HelloSeedList	typeref:typename:error
XXX_Unmarshal	app/p2p/wire/seedlist.pb.go	/^func (m *MessageData) XXX_Unmarshal(b []byte) error {$/;"	f	struct:wire.MessageData	typeref:typename:error
XXX_Unmarshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedInfo) XXX_Unmarshal(b []byte) error {$/;"	f	struct:wire.SeedInfo	typeref:typename:error
XXX_Unmarshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListRequest) XXX_Unmarshal(b []byte) error {$/;"	f	struct:wire.SeedListRequest	typeref:typename:error
XXX_Unmarshal	app/p2p/wire/seedlist.pb.go	/^func (m *SeedListResponse) XXX_Unmarshal(b []byte) error {$/;"	f	struct:wire.SeedListResponse	typeref:typename:error
XXX_Unmarshal	proxy/vless/encoding/addons.pb.go	/^func (m *Addons) XXX_Unmarshal(b []byte) error {$/;"	f	struct:encoding.Addons	typeref:typename:error
XXX_sizecache	app/p2p/config.pb.go	/^	XXX_sizecache        int32    `json:"-"`$/;"	m	struct:p2p.Config	typeref:typename:int32
XXX_sizecache	app/p2p/config.pb.go	/^	XXX_sizecache        int32    `json:"-"`$/;"	m	struct:p2p.Seed	typeref:typename:int32
XXX_sizecache	app/p2p/wire/notifier.pb.go	/^	XXX_sizecache        int32    `json:"-"`$/;"	m	struct:wire.HelloReply	typeref:typename:int32
XXX_sizecache	app/p2p/wire/notifier.pb.go	/^	XXX_sizecache        int32    `json:"-"`$/;"	m	struct:wire.HelloRequest	typeref:typename:int32
XXX_sizecache	app/p2p/wire/seedlist.pb.go	/^	XXX_sizecache        int32      `json:"-"`$/;"	m	struct:wire.HelloSeedList	typeref:typename:int32
XXX_sizecache	app/p2p/wire/seedlist.pb.go	/^	XXX_sizecache        int32    `json:"-"`$/;"	m	struct:wire.MessageData	typeref:typename:int32
XXX_sizecache	app/p2p/wire/seedlist.pb.go	/^	XXX_sizecache        int32    `json:"-"`$/;"	m	struct:wire.SeedInfo	typeref:typename:int32
XXX_sizecache	app/p2p/wire/seedlist.pb.go	/^	XXX_sizecache        int32    `json:"-"`$/;"	m	struct:wire.SeedListRequest	typeref:typename:int32
XXX_sizecache	app/p2p/wire/seedlist.pb.go	/^	XXX_sizecache        int32    `json:"-"`$/;"	m	struct:wire.SeedListResponse	typeref:typename:int32
XXX_sizecache	proxy/vless/encoding/addons.pb.go	/^	XXX_sizecache        int32    `json:"-"`$/;"	m	struct:encoding.Addons	typeref:typename:int32
XXX_unrecognized	app/p2p/config.pb.go	/^	XXX_unrecognized     []byte   `json:"-"`$/;"	m	struct:p2p.Config	typeref:typename:[]byte
XXX_unrecognized	app/p2p/config.pb.go	/^	XXX_unrecognized     []byte   `json:"-"`$/;"	m	struct:p2p.Seed	typeref:typename:[]byte
XXX_unrecognized	app/p2p/wire/notifier.pb.go	/^	XXX_unrecognized     []byte   `json:"-"`$/;"	m	struct:wire.HelloReply	typeref:typename:[]byte
XXX_unrecognized	app/p2p/wire/notifier.pb.go	/^	XXX_unrecognized     []byte   `json:"-"`$/;"	m	struct:wire.HelloRequest	typeref:typename:[]byte
XXX_unrecognized	app/p2p/wire/seedlist.pb.go	/^	XXX_unrecognized     []byte     `json:"-"`$/;"	m	struct:wire.HelloSeedList	typeref:typename:[]byte
XXX_unrecognized	app/p2p/wire/seedlist.pb.go	/^	XXX_unrecognized     []byte   `json:"-"`$/;"	m	struct:wire.MessageData	typeref:typename:[]byte
XXX_unrecognized	app/p2p/wire/seedlist.pb.go	/^	XXX_unrecognized     []byte   `json:"-"`$/;"	m	struct:wire.SeedInfo	typeref:typename:[]byte
XXX_unrecognized	app/p2p/wire/seedlist.pb.go	/^	XXX_unrecognized     []byte   `json:"-"`$/;"	m	struct:wire.SeedListRequest	typeref:typename:[]byte
XXX_unrecognized	app/p2p/wire/seedlist.pb.go	/^	XXX_unrecognized     []byte   `json:"-"`$/;"	m	struct:wire.SeedListResponse	typeref:typename:[]byte
XXX_unrecognized	proxy/vless/encoding/addons.pb.go	/^	XXX_unrecognized     []byte   `json:"-"`$/;"	m	struct:encoding.Addons	typeref:typename:[]byte
Xver	infra/conf/trojan.go	/^	Xver uint64          `json:"xver"`$/;"	m	struct:conf.TrojanInboundFallback	typeref:typename:uint64
Xver	infra/conf/vless.go	/^	Xver uint64          `json:"xver"`$/;"	m	struct:conf.VLessInboundFallback	typeref:typename:uint64
Xver	proxy/trojan/config.pb.go	/^	Xver uint64 `protobuf:"varint,5,opt,name=xver,proto3" json:"xver,omitempty"`$/;"	m	struct:trojan.Fallback	typeref:typename:uint64
Xver	proxy/vless/inbound/config.pb.go	/^	Xver uint64 `protobuf:"varint,5,opt,name=xver,proto3" json:"xver,omitempty"`$/;"	m	struct:inbound.Fallback	typeref:typename:uint64
YConfig	common/type_test.go	/^type YConfig struct {$/;"	s	package:common_test
_	app/commander/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:commander
_	app/commander/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:commander
_	app/commander/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:commander
_	app/dispatcher/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:dispatcher
_	app/dispatcher/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:dispatcher
_	app/dispatcher/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:dispatcher
_	app/dns/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:dns
_	app/dns/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:dns
_	app/dns/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:dns
_	app/log/command/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:command
_	app/log/command/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:command
_	app/log/command/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:command
_	app/log/command/config_grpc.pb.go	/^const _ = grpc.SupportPackageIsVersion7$/;"	c	package:command
_	app/log/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:log
_	app/log/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:log
_	app/log/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:log
_	app/p2p/config.pb.go	/^const _ = proto.ProtoPackageIsVersion3 \/\/ please upgrade the proto package$/;"	c	package:p2p
_	app/p2p/wire/notifier.pb.go	/^const _ = grpc.SupportPackageIsVersion4$/;"	c	package:wire
_	app/p2p/wire/notifier.pb.go	/^const _ = proto.ProtoPackageIsVersion3 \/\/ please upgrade the proto package$/;"	c	package:wire
_	app/p2p/wire/seedlist.pb.go	/^const _ = proto.ProtoPackageIsVersion2 \/\/ please upgrade the proto package$/;"	c	package:wire
_	app/policy/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:policy
_	app/policy/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:policy
_	app/policy/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:policy
_	app/proxyman/command/command.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:command
_	app/proxyman/command/command.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:command
_	app/proxyman/command/command.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:command
_	app/proxyman/command/command_grpc.pb.go	/^const _ = grpc.SupportPackageIsVersion7$/;"	c	package:command
_	app/proxyman/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:proxyman
_	app/proxyman/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:proxyman
_	app/proxyman/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:proxyman
_	app/reverse/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:reverse
_	app/reverse/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:reverse
_	app/reverse/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:reverse
_	app/router/command/command.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:command
_	app/router/command/command.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:command
_	app/router/command/command.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:command
_	app/router/command/command_grpc.pb.go	/^const _ = grpc.SupportPackageIsVersion7$/;"	c	package:command
_	app/router/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:router
_	app/router/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:router
_	app/router/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:router
_	app/stats/command/command.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:command
_	app/stats/command/command.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:command
_	app/stats/command/command.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:command
_	app/stats/command/command_grpc.pb.go	/^const _ = grpc.SupportPackageIsVersion7$/;"	c	package:command
_	app/stats/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:stats
_	app/stats/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:stats
_	app/stats/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:stats
_	common/log/log.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:log
_	common/log/log.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:log
_	common/log/log.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:log
_	common/net/address.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:net
_	common/net/address.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:net
_	common/net/address.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:net
_	common/net/destination.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:net
_	common/net/destination.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:net
_	common/net/destination.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:net
_	common/net/network.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:net
_	common/net/network.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:net
_	common/net/network.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:net
_	common/net/port.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:net
_	common/net/port.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:net
_	common/net/port.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:net
_	common/protocol/headers.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:protocol
_	common/protocol/headers.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:protocol
_	common/protocol/headers.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:protocol
_	common/protocol/server_spec.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:protocol
_	common/protocol/server_spec.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:protocol
_	common/protocol/server_spec.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:protocol
_	common/protocol/user.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:protocol
_	common/protocol/user.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:protocol
_	common/protocol/user.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:protocol
_	common/serial/typed_message.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:serial
_	common/serial/typed_message.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:serial
_	common/serial/typed_message.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:serial
_	config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:core
_	config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:core
_	config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:core
_	proxy/blackhole/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:blackhole
_	proxy/blackhole/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:blackhole
_	proxy/blackhole/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:blackhole
_	proxy/dns/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:dns
_	proxy/dns/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:dns
_	proxy/dns/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:dns
_	proxy/dokodemo/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:dokodemo
_	proxy/dokodemo/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:dokodemo
_	proxy/dokodemo/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:dokodemo
_	proxy/freedom/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:freedom
_	proxy/freedom/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:freedom
_	proxy/freedom/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:freedom
_	proxy/http/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:http
_	proxy/http/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:http
_	proxy/http/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:http
_	proxy/mtproto/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:mtproto
_	proxy/mtproto/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:mtproto
_	proxy/mtproto/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:mtproto
_	proxy/shadowsocks/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:shadowsocks
_	proxy/shadowsocks/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:shadowsocks
_	proxy/shadowsocks/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:shadowsocks
_	proxy/socks/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:socks
_	proxy/socks/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:socks
_	proxy/socks/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:socks
_	proxy/trojan/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:trojan
_	proxy/trojan/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:trojan
_	proxy/trojan/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:trojan
_	proxy/vless/account.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:vless
_	proxy/vless/account.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:vless
_	proxy/vless/account.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:vless
_	proxy/vless/encoding/addons.pb.go	/^const _ = proto.ProtoPackageIsVersion3 \/\/ please upgrade the proto package$/;"	c	package:encoding
_	proxy/vless/inbound/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:inbound
_	proxy/vless/inbound/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:inbound
_	proxy/vless/inbound/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:inbound
_	proxy/vless/outbound/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:outbound
_	proxy/vless/outbound/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:outbound
_	proxy/vless/outbound/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:outbound
_	proxy/vmess/account.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:vmess
_	proxy/vmess/account.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:vmess
_	proxy/vmess/account.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:vmess
_	proxy/vmess/inbound/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:inbound
_	proxy/vmess/inbound/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:inbound
_	proxy/vmess/inbound/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:inbound
_	proxy/vmess/outbound/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:outbound
_	proxy/vmess/outbound/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:outbound
_	proxy/vmess/outbound/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:outbound
_	transport/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:transport
_	transport/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:transport
_	transport/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:transport
_	transport/internet/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:internet
_	transport/internet/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:internet
_	transport/internet/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:internet
_	transport/internet/domainsocket/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:domainsocket
_	transport/internet/domainsocket/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:domainsocket
_	transport/internet/domainsocket/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:domainsocket
_	transport/internet/headers/http/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:http
_	transport/internet/headers/http/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:http
_	transport/internet/headers/http/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:http
_	transport/internet/headers/noop/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:noop
_	transport/internet/headers/noop/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:noop
_	transport/internet/headers/noop/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:noop
_	transport/internet/headers/srtp/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:srtp
_	transport/internet/headers/srtp/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:srtp
_	transport/internet/headers/srtp/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:srtp
_	transport/internet/headers/tls/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:tls
_	transport/internet/headers/tls/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:tls
_	transport/internet/headers/tls/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:tls
_	transport/internet/headers/utp/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:utp
_	transport/internet/headers/utp/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:utp
_	transport/internet/headers/utp/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:utp
_	transport/internet/headers/wechat/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:wechat
_	transport/internet/headers/wechat/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:wechat
_	transport/internet/headers/wechat/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:wechat
_	transport/internet/headers/wireguard/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:wireguard
_	transport/internet/headers/wireguard/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:wireguard
_	transport/internet/headers/wireguard/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:wireguard
_	transport/internet/http/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:http
_	transport/internet/http/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:http
_	transport/internet/http/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:http
_	transport/internet/kcp/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:kcp
_	transport/internet/kcp/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:kcp
_	transport/internet/kcp/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:kcp
_	transport/internet/quic/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:quic
_	transport/internet/quic/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:quic
_	transport/internet/quic/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:quic
_	transport/internet/tcp/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:tcp
_	transport/internet/tcp/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:tcp
_	transport/internet/tcp/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:tcp
_	transport/internet/tls/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:tls
_	transport/internet/tls/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:tls
_	transport/internet/tls/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:tls
_	transport/internet/udp/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:udp
_	transport/internet/udp/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:udp
_	transport/internet/udp/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:udp
_	transport/internet/websocket/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:websocket
_	transport/internet/websocket/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:websocket
_	transport/internet/websocket/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:websocket
_	transport/internet/xtls/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c	package:xtls
_	transport/internet/xtls/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c	package:xtls
_	transport/internet/xtls/config.pb.go	/^const _ = proto.ProtoPackageIsVersion4$/;"	c	package:xtls
_HandlerService_AddInbound_Handler	app/proxyman/command/command_grpc.pb.go	/^func _HandlerService_AddInbound_Handler(srv interface{}, ctx context.Context, dec func(interface/;"	f	package:command	typeref:typename:(interface{}, error)
_HandlerService_AddOutbound_Handler	app/proxyman/command/command_grpc.pb.go	/^func _HandlerService_AddOutbound_Handler(srv interface{}, ctx context.Context, dec func(interfac/;"	f	package:command	typeref:typename:(interface{}, error)
_HandlerService_AlterInbound_Handler	app/proxyman/command/command_grpc.pb.go	/^func _HandlerService_AlterInbound_Handler(srv interface{}, ctx context.Context, dec func(interfa/;"	f	package:command	typeref:typename:(interface{}, error)
_HandlerService_AlterOutbound_Handler	app/proxyman/command/command_grpc.pb.go	/^func _HandlerService_AlterOutbound_Handler(srv interface{}, ctx context.Context, dec func(interf/;"	f	package:command	typeref:typename:(interface{}, error)
_HandlerService_RemoveInbound_Handler	app/proxyman/command/command_grpc.pb.go	/^func _HandlerService_RemoveInbound_Handler(srv interface{}, ctx context.Context, dec func(interf/;"	f	package:command	typeref:typename:(interface{}, error)
_HandlerService_RemoveOutbound_Handler	app/proxyman/command/command_grpc.pb.go	/^func _HandlerService_RemoveOutbound_Handler(srv interface{}, ctx context.Context, dec func(inter/;"	f	package:command	typeref:typename:(interface{}, error)
_HandlerService_serviceDesc	app/proxyman/command/command_grpc.pb.go	/^var _HandlerService_serviceDesc = grpc.ServiceDesc{$/;"	v	package:command
_LoggerService_RestartLogger_Handler	app/log/command/config_grpc.pb.go	/^func _LoggerService_RestartLogger_Handler(srv interface{}, ctx context.Context, dec func(interfa/;"	f	package:command	typeref:typename:(interface{}, error)
_LoggerService_serviceDesc	app/log/command/config_grpc.pb.go	/^var _LoggerService_serviceDesc = grpc.ServiceDesc{$/;"	v	package:command
_Notifier_SayHello_Handler	app/p2p/wire/notifier.pb.go	/^func _Notifier_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) erro/;"	f	package:wire	typeref:typename:(interface{}, error)
_Notifier_serviceDesc	app/p2p/wire/notifier.pb.go	/^var _Notifier_serviceDesc = grpc.ServiceDesc{$/;"	v	package:wire
_RoutingService_SubscribeRoutingStats_Handler	app/router/command/command_grpc.pb.go	/^func _RoutingService_SubscribeRoutingStats_Handler(srv interface{}, stream grpc.ServerStream) er/;"	f	package:command	typeref:typename:error
_RoutingService_TestRoute_Handler	app/router/command/command_grpc.pb.go	/^func _RoutingService_TestRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{/;"	f	package:command	typeref:typename:(interface{}, error)
_RoutingService_serviceDesc	app/router/command/command_grpc.pb.go	/^var _RoutingService_serviceDesc = grpc.ServiceDesc{$/;"	v	package:command
_StatsService_GetStats_Handler	app/stats/command/command_grpc.pb.go	/^func _StatsService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) /;"	f	package:command	typeref:typename:(interface{}, error)
_StatsService_GetSysStats_Handler	app/stats/command/command_grpc.pb.go	/^func _StatsService_GetSysStats_Handler(srv interface{}, ctx context.Context, dec func(interface{/;"	f	package:command	typeref:typename:(interface{}, error)
_StatsService_QueryStats_Handler	app/stats/command/command_grpc.pb.go	/^func _StatsService_QueryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}/;"	f	package:command	typeref:typename:(interface{}, error)
_StatsService_serviceDesc	app/stats/command/command_grpc.pb.go	/^var _StatsService_serviceDesc = grpc.ServiceDesc{$/;"	v	package:command
a	app/router/condition_geoip.go	/^	a uint64$/;"	m	struct:router.ipv6	typeref:typename:uint64
about: "Create a bug report to help us improve"	.github/ISSUE_TEMPLATE/bug_en.md	/^about: "Create a bug report to help us improve"$/;"	s
about: "其它问题请使用 https://github.com/v2fly/discussion/issues 进行讨论 / Please discuss other issues at https://github.com/v2fly/discussion/issues"	.github/ISSUE_TEMPLATE/other_en.md	/^about: "其它问题请使用 https:\/\/github.com\/v2fly\/discussion\/issues 进行讨论 \/ Pl/;"	s
about: "提交一个 V2Ray 的程序问题报告。"	.github/ISSUE_TEMPLATE/bug_cn.md	/^about: "提交一个 V2Ray 的程序问题报告。"$/;"	s
abstract	transport/internet/domainsocket/config.proto	/^  bool abstract = 2;$/;"	f	message:v2ray.core.transport.internet.domainsocket.Config	typeref:typename:bool
acceptConnections	testing/servers/tcp/tcp.go	/^func (server *Server) acceptConnections(listener *net.TCPListener) {$/;"	f	struct:tcp.Server
acceptProxyProtocol	transport/internet/domainsocket/config.proto	/^  bool acceptProxyProtocol = 4;$/;"	f	message:v2ray.core.transport.internet.domainsocket.Config	typeref:typename:bool
acceptStreams	transport/internet/quic/hub.go	/^func (l *Listener) acceptStreams(session quic.Session) {$/;"	f	struct:quic.Listener
accept_proxy_protocol	transport/internet/tcp/config.proto	/^  bool accept_proxy_protocol = 3;$/;"	f	message:v2ray.core.transport.internet.tcp.Config	typeref:typename:bool
accept_proxy_protocol	transport/internet/websocket/config.proto	/^  bool accept_proxy_protocol = 4;$/;"	f	message:v2ray.core.transport.internet.websocket.Config	typeref:typename:bool
accepting	testing/servers/udp/udp.go	/^	accepting    bool$/;"	m	struct:udp.Server	typeref:typename:bool
access	app/commander/outbound.go	/^	access   sync.RWMutex$/;"	m	struct:commander.Outbound	typeref:typename:sync.RWMutex
access	app/proxyman/inbound/inbound.go	/^	access          sync.RWMutex$/;"	m	struct:inbound.Manager	typeref:typename:sync.RWMutex
access	app/proxyman/outbound/outbound.go	/^	access           sync.RWMutex$/;"	m	struct:outbound.Manager	typeref:typename:sync.RWMutex
access	app/reverse/portal.go	/^	access  sync.Mutex$/;"	m	struct:reverse.StaticMuxPicker	typeref:typename:sync.Mutex
access	app/stats/channel.go	/^	access sync.RWMutex$/;"	m	struct:stats.Channel	typeref:typename:sync.RWMutex
access	app/stats/stats.go	/^	access   sync.RWMutex$/;"	m	struct:stats.Manager	typeref:typename:sync.RWMutex
access	bin/config/config-client-prod.json	/^    "access":".\/log\/access.log",$/;"	s	object:log
access	bin/config/config-client.json	/^    "access":".\/log\/access.log",$/;"	s	object:log
access	bin/config/config-server.json	/^    "access":".\/log\/access.log",$/;"	s	object:log
access	bin/config/ss-client.json	/^    "access":".\/log\/ss-client-access.log",$/;"	s	object:log
access	bin/config/ss-server.json	/^    "access":".\/log\/ss-server-access.log",$/;"	s	object:log
access	common/log/logger.go	/^	access  *semaphore.Instance$/;"	m	struct:log.generalLogger	typeref:typename:*semaphore.Instance
access	common/mux/client.go	/^	access      sync.Mutex$/;"	m	struct:mux.IncrementalWorkerPicker	typeref:typename:sync.Mutex
access	common/peer/latency.go	/^	access sync.Mutex$/;"	m	struct:peer.AverageLatency	typeref:typename:sync.Mutex
access	common/protocol/dns/io.go	/^	access sync.Mutex$/;"	m	struct:dns.UDPReader	typeref:typename:sync.Mutex
access	common/signal/done/done.go	/^	access sync.Mutex$/;"	m	struct:done.Instance	typeref:typename:sync.Mutex
access	common/task/periodic.go	/^	access  sync.Mutex$/;"	m	struct:task.Periodic	typeref:typename:sync.Mutex
access	proxy/dns/dns.go	/^	access sync.Mutex$/;"	m	struct:dns.outboundConn	typeref:typename:sync.Mutex
access	transport/internet/quic/dialer.go	/^	access   sync.Mutex$/;"	m	struct:quic.clientSessions	typeref:typename:sync.Mutex
access	v2ray.go	/^	access             sync.Mutex$/;"	m	struct:core.Instance	typeref:typename:sync.Mutex
accessLogger	app/log/log.go	/^	accessLogger log.Handler$/;"	m	struct:log.Instance	typeref:typename:log.Handler
accessMessageKey	common/log/access.go	/^	accessMessageKey logKey = iota$/;"	c	package:log	typeref:type:logKey
access_log_path	app/log/config.proto	/^  string access_log_path = 5;$/;"	f	message:v2ray.core.app.log.Config	typeref:typename:string
access_log_type	app/log/config.proto	/^  LogType access_log_type = 4;$/;"	f	message:v2ray.core.app.log.Config	typeref:typename:LogType
account	app/p2p/account/account.go	/^package account$/;"	p
account	common/protocol/user.proto	/^  v2ray.core.common.serial.TypedMessage account = 3;$/;"	f	message:v2ray.core.common.protocol.User	typeref:typename:v2ray.core.common.serial.TypedMessage
account	proxy/mtproto/server.go	/^	account *Account$/;"	m	struct:mtproto.Server	typeref:typename:*Account
accounts	proxy/http/config.proto	/^  map<string, string> accounts = 2;$/;"	f	message:v2ray.core.proxy.http.ServerConfig	typeref:typename:map<string,string>
accounts	proxy/socks/config.proto	/^  map<string, string> accounts = 2;$/;"	f	message:v2ray.core.proxy.socks.ServerConfig	typeref:typename:map<string,string>
ackNumberLimit	transport/internet/kcp/segment.go	/^const ackNumberLimit = 128$/;"	c	package:kcp
acklist	transport/internet/kcp/receiving.go	/^	acklist    *AckList$/;"	m	struct:kcp.ReceivingWorker	typeref:typename:*AckList
action	app/p2p/wire/seedlist.proto	/^    ActionType action = 1;$/;"	f	message:wire.HelloSeedList	typeref:typename:ActionType
active	app/log/log.go	/^	active       bool$/;"	m	struct:log.Instance	typeref:typename:bool
active	app/p2p/p2p.go	/^	active bool$/;"	m	struct:p2p.Instance	typeref:typename:bool
activeConn	app/proxyman/inbound/worker.go	/^	activeConn map[connID]*udpConn$/;"	m	struct:inbound.udpWorker	typeref:typename:map[connID]*udpConn
adapter	transport/internet/system_dialer.go	/^	adapter SystemDialerAdapter$/;"	m	struct:internet.SimpleSystemDialer	typeref:typename:SystemDialerAdapter
add	app/commander/outbound.go	/^func (l *OutboundListener) add(conn net.Conn) {$/;"	f	struct:commander.OutboundListener
addConn	transport/internet/domainsocket/listener.go	/^	addConn    internet.ConnHandler$/;"	m	struct:domainsocket.Listener	typeref:typename:internet.ConnHandler
addConn	transport/internet/kcp/listener.go	/^	addConn    internet.ConnHandler$/;"	m	struct:kcp.Listener	typeref:typename:internet.ConnHandler
addConn	transport/internet/quic/hub.go	/^	addConn  internet.ConnHandler$/;"	m	struct:quic.Listener	typeref:typename:internet.ConnHandler
addConn	transport/internet/tcp/hub.go	/^	addConn    internet.ConnHandler$/;"	m	struct:tcp.Listener	typeref:typename:internet.ConnHandler
addConn	transport/internet/websocket/hub.go	/^	addConn  internet.ConnHandler$/;"	m	struct:websocket.Listener	typeref:typename:internet.ConnHandler
addIfNotExits	proxy/vmess/encoding/server.go	/^func (h *SessionHistory) addIfNotExits(session sessionId) bool {$/;"	f	struct:encoding.SessionHistory	typeref:typename:bool
addInboundHandlers	v2ray.go	/^func addInboundHandlers(server *Instance, configs []*InboundHandlerConfig) error {$/;"	f	package:core	typeref:typename:error
addMatcher	common/strmatcher/domain_matcher.go	/^func (g *DomainMatcherGroup) addMatcher(m domainMatcher, value uint32) {$/;"	f	struct:strmatcher.DomainMatcherGroup
addMatcher	common/strmatcher/full_matcher.go	/^func (g *FullMatcherGroup) addMatcher(m fullMatcher, value uint32) {$/;"	f	struct:strmatcher.FullMatcherGroup
addNoLock	proxy/vmess/inbound/inbound.go	/^func (v *userByEmail) addNoLock(u *protocol.MemoryUser) bool {$/;"	f	struct:inbound.userByEmail	typeref:typename:bool
addOutboundHandlers	v2ray.go	/^func addOutboundHandlers(server *Instance, configs []*OutboundHandlerConfig) error {$/;"	f	package:core	typeref:typename:error
addPendingRequest	app/dns/udpns.go	/^func (s *ClassicNameServer) addPendingRequest(req *dnsRequest) {$/;"	f	struct:dns.ClassicNameServer
addr	transport/internet/domainsocket/listener.go	/^	addr       *net.UnixAddr$/;"	m	struct:domainsocket.Listener	typeref:typename:*net.UnixAddr
addrByteMap	common/protocol/address.go	/^	addrByteMap [16]byte$/;"	m	struct:protocol.addressParser	typeref:typename:[16]byte
addrByteMap	common/protocol/address.go	/^	addrByteMap [16]byte$/;"	m	struct:protocol.option	typeref:typename:[16]byte
addrParser	common/mux/frame.go	/^var addrParser = protocol.NewAddressParser($/;"	v	package:mux
addrParser	proxy/shadowsocks/protocol.go	/^var addrParser = protocol.NewAddressParser($/;"	v	package:shadowsocks
addrParser	proxy/socks/protocol.go	/^var addrParser = protocol.NewAddressParser($/;"	v	package:socks
addrParser	proxy/trojan/protocol.go	/^	addrParser = protocol.NewAddressParser($/;"	v	package:trojan
addrParser	proxy/vless/encoding/encoding.go	/^var addrParser = protocol.NewAddressParser($/;"	v	package:encoding
addrParser	proxy/vmess/encoding/encoding.go	/^var addrParser = protocol.NewAddressParser($/;"	v	package:encoding
addrTypeMap	common/protocol/address.go	/^	addrTypeMap [16]net.AddressFamily$/;"	m	struct:protocol.addressParser	typeref:typename:[16]net.AddressFamily
addrTypeMap	common/protocol/address.go	/^	addrTypeMap [16]net.AddressFamily$/;"	m	struct:protocol.option	typeref:typename:[16]net.AddressFamily
address	app/dns/config.proto	/^  v2ray.core.common.net.Endpoint address = 1;$/;"	f	message:v2ray.core.app.dns.NameServer	typeref:typename:v2ray.core.common.net.Endpoint
address	app/dns/udpns.go	/^	address   net.Destination$/;"	m	struct:dns.ClassicNameServer	typeref:typename:net.Destination
address	app/proxyman/inbound/worker.go	/^	address         net.Address$/;"	m	struct:inbound.tcpWorker	typeref:typename:net.Address
address	app/proxyman/inbound/worker.go	/^	address         net.Address$/;"	m	struct:inbound.udpWorker	typeref:typename:net.Address
address	bin/config/ss-client.json	/^            "address": "127.0.0.1", \/\/ Shadowsocks 的服务器地址$/;"	s	object:outbounds.0.settings.servers.0
address	common/net/address.proto	/^  oneof address {$/;"	o	message:v2ray.core.common.net.IPOrDomain
address	common/net/destination.proto	/^  IPOrDomain address = 2;$/;"	f	message:v2ray.core.common.net.Endpoint	typeref:typename:IPOrDomain
address	common/protocol/server_spec.proto	/^  v2ray.core.common.net.IPOrDomain address = 1;$/;"	f	message:v2ray.core.common.protocol.ServerEndpoint	typeref:typename:v2ray.core.common.net.IPOrDomain
address	proxy/dokodemo/config.proto	/^  v2ray.core.common.net.IPOrDomain address = 1;$/;"	f	message:v2ray.core.proxy.dokodemo.Config	typeref:typename:v2ray.core.common.net.IPOrDomain
address	proxy/dokodemo/dokodemo.go	/^	address       net.Address$/;"	m	struct:dokodemo.DokodemoDoor	typeref:typename:net.Address
address	proxy/socks/config.proto	/^  v2ray.core.common.net.IPOrDomain address = 3;$/;"	f	message:v2ray.core.proxy.socks.ServerConfig	typeref:typename:v2ray.core.common.net.IPOrDomain
addressParser	common/protocol/address.go	/^type addressParser struct {$/;"	s	package:protocol
aead	proxy/vmess/aead/authid.go	/^package aead$/;"	p
aead	proxy/vmess/aead/authid_test.go	/^package aead$/;"	p
aead	proxy/vmess/aead/consts.go	/^package aead$/;"	p
aead	proxy/vmess/aead/encrypt.go	/^package aead$/;"	p
aead	proxy/vmess/aead/encrypt_test.go	/^package aead$/;"	p
aead	proxy/vmess/aead/kdf.go	/^package aead$/;"	p
aeadDecoderHolder	proxy/vmess/validator.go	/^	aeadDecoderHolder *aead.AuthIDDecoderHolder$/;"	m	struct:vmess.TimedUserValidator	typeref:typename:*aead.AuthIDDecoderHolder
aead_disabled	proxy/vmess/outbound/outbound.go	/^	aead_disabled = false$/;"	v	package:outbound
afInvalid	common/protocol/address.go	/^const afInvalid = 255$/;"	c	package:protocol
aidhi	proxy/vmess/aead/authid.go	/^	aidhi map[string]*AuthIDDecoderItem$/;"	m	struct:aead.AuthIDDecoderHolder	typeref:typename:map[string]*AuthIDDecoderItem
all	main/distro/all/all.go	/^package all$/;"	p
alloc	common/buf/readv_reader.go	/^	alloc   allocStrategy$/;"	m	struct:buf.ReadVReader	typeref:typename:allocStrategy
allocStrategy	common/buf/readv_reader.go	/^type allocStrategy struct {$/;"	s	package:buf
allocatePort	app/proxyman/inbound/dynamic.go	/^func (h *DynamicInboundHandler) allocatePort() net.Port {$/;"	f	struct:inbound.DynamicInboundHandler	typeref:typename:net.Port
allocation_strategy	app/proxyman/config.proto	/^  AllocationStrategy allocation_strategy = 3;$/;"	f	message:v2ray.core.app.proxyman.ReceiverConfig	typeref:typename:AllocationStrategy
allow_insecure	transport/internet/tls/config.proto	/^  bool allow_insecure = 1;$/;"	f	message:v2ray.core.transport.internet.tls.Config	typeref:typename:bool
allow_insecure	transport/internet/xtls/config.proto	/^  bool allow_insecure = 1;$/;"	f	message:v2ray.core.transport.internet.xtls.Config	typeref:typename:bool
allow_insecure_ciphers	transport/internet/tls/config.proto	/^  bool allow_insecure_ciphers = 5;$/;"	f	message:v2ray.core.transport.internet.tls.Config	typeref:typename:bool
allow_insecure_ciphers	transport/internet/xtls/config.proto	/^  bool allow_insecure_ciphers = 5;$/;"	f	message:v2ray.core.transport.internet.xtls.Config	typeref:typename:bool
allow_transparent	proxy/http/config.proto	/^  bool allow_transparent = 3;$/;"	f	message:v2ray.core.proxy.http.ServerConfig	typeref:typename:bool
alpn	proxy/trojan/config.proto	/^  string alpn = 1;$/;"	f	message:v2ray.core.proxy.trojan.Fallback	typeref:typename:string
alpn	proxy/vless/inbound/config.proto	/^  string alpn = 1;$/;"	f	message:v2ray.core.proxy.vless.inbound.Fallback	typeref:typename:string
alterId	release/config/vpoint_vmess_freedom.json	/^          "alterId": 64$/;"	n	object:inbounds.0.settings.clients.0
alter_id	proxy/vmess/account.proto	/^  uint32 alter_id = 2;$/;"	f	message:v2ray.core.proxy.vmess.Account	typeref:typename:uint32
alter_id	proxy/vmess/inbound/config.proto	/^  uint32 alter_id = 1;$/;"	f	message:v2ray.core.proxy.vmess.inbound.DefaultConfig	typeref:typename:uint32
alwaysValidStrategy	common/protocol/server_spec.go	/^type alwaysValidStrategy struct{}$/;"	s	package:protocol
antiReplayWindow	proxy/vmess/aead/authid.go	/^	antiReplayWindow "v2ray.com\/core\/common\/antireplay"$/;"	P	package:v2ray.com/core/common/antireplay
antireplay	common/antireplay/antireplay.go	/^package antireplay$/;"	p
ap	common/protocol/address.go	/^	ap *addressParser$/;"	m	struct:protocol.portFirstAddressParser	typeref:typename:*addressParser
ap	common/protocol/address.go	/^	ap *addressParser$/;"	m	struct:protocol.portLastAddressParser	typeref:typename:*addressParser
app	app/app.go	/^package app$/;"	p
app	config.proto	/^  repeated v2ray.core.common.serial.TypedMessage app = 4;$/;"	f	message:v2ray.core.Config	typeref:typename:v2ray.core.common.serial.TypedMessage
applyInboundSocketOptions	transport/internet/sockopt_darwin.go	/^func applyInboundSocketOptions(network string, fd uintptr, config *SocketConfig) error {$/;"	f	package:internet	typeref:typename:error
applyInboundSocketOptions	transport/internet/sockopt_freebsd.go	/^func applyInboundSocketOptions(network string, fd uintptr, config *SocketConfig) error {$/;"	f	package:internet	typeref:typename:error
applyInboundSocketOptions	transport/internet/sockopt_linux.go	/^func applyInboundSocketOptions(network string, fd uintptr, config *SocketConfig) error {$/;"	f	package:internet	typeref:typename:error
applyInboundSocketOptions	transport/internet/sockopt_other.go	/^func applyInboundSocketOptions(network string, fd uintptr, config *SocketConfig) error {$/;"	f	package:internet	typeref:typename:error
applyInboundSocketOptions	transport/internet/sockopt_windows.go	/^func applyInboundSocketOptions(network string, fd uintptr, config *SocketConfig) error {$/;"	f	package:internet	typeref:typename:error
applyOutboundSocketOptions	transport/internet/sockopt_darwin.go	/^func applyOutboundSocketOptions(network string, address string, fd uintptr, config *SocketConfig/;"	f	package:internet	typeref:typename:error
applyOutboundSocketOptions	transport/internet/sockopt_freebsd.go	/^func applyOutboundSocketOptions(network string, address string, fd uintptr, config *SocketConfig/;"	f	package:internet	typeref:typename:error
applyOutboundSocketOptions	transport/internet/sockopt_linux.go	/^func applyOutboundSocketOptions(network string, address string, fd uintptr, config *SocketConfig/;"	f	package:internet	typeref:typename:error
applyOutboundSocketOptions	transport/internet/sockopt_other.go	/^func applyOutboundSocketOptions(network string, address string, fd uintptr, config *SocketConfig/;"	f	package:internet	typeref:typename:error
applyOutboundSocketOptions	transport/internet/sockopt_windows.go	/^func applyOutboundSocketOptions(network string, address string, fd uintptr, config *SocketConfig/;"	f	package:internet	typeref:typename:error
applyTransportConfig	infra/conf/v2ray.go	/^func applyTransportConfig(s *StreamConfig, t *TransportConfig) {$/;"	f	package:conf
apw	proxy/vmess/aead/authid.go	/^	apw   *antiReplayWindow.AntiReplayWindow$/;"	m	struct:aead.AuthIDDecoderHolder	typeref:typename:*antiReplayWindow.AntiReplayWindow
atSeverity	common/errors/errors.go	/^func (err *Error) atSeverity(s log.Severity) *Error {$/;"	f	struct:errors.Error	typeref:typename:*Error
attribute	app/router/config.proto	/^  repeated Attribute attribute = 3;$/;"	f	message:v2ray.core.app.router.Domain	typeref:typename:Attribute
attributes	app/router/config.proto	/^  string attributes = 15;$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:string
auth	bin/config/config-client-prod.json	/^        "auth": "noauth"  \/\/socks的认证设置，noauth 代表不认证，由于 socks 通常/;"	s	object:inbounds.0.settings
auth	bin/config/config-client.json	/^        "auth": "noauth"  \/\/socks的认证设置，noauth 代表不认证，由于 socks 通常/;"	s	object:inbounds.0.settings
auth	bin/config/ss-client.json	/^        "auth": "noauth"  \/\/ 不认证$/;"	s	object:inbounds.0.settings
auth	common/crypto/auth.go	/^	auth         Authenticator$/;"	m	struct:crypto.AuthenticationReader	typeref:typename:Authenticator
auth	common/crypto/auth.go	/^	auth         Authenticator$/;"	m	struct:crypto.AuthenticationWriter	typeref:typename:Authenticator
auth	release/config/vpoint_socks_vmess.json	/^      "auth": "noauth",$/;"	s	object:inbounds.0.settings
auth	transport/internet/quic/conn.go	/^	auth   cipher.AEAD$/;"	m	struct:quic.sysConn	typeref:typename:cipher.AEAD
auth5	proxy/socks/protocol.go	/^func (s *ServerSession) auth5(nMethod byte, reader io.Reader, writer io.Writer) (username string/;"	f	struct:socks.ServerSession	typeref:typename:(username string, err error)
authConfig	transport/internet/tcp/hub.go	/^	authConfig internet.ConnectionAuthenticator$/;"	m	struct:tcp.Listener	typeref:typename:internet.ConnectionAuthenticator
authNoMatchingMethod	proxy/socks/protocol.go	/^	authNoMatchingMethod = 0xFF$/;"	c	package:socks
authNotRequired	proxy/socks/protocol.go	/^	authNotRequired = 0x00$/;"	c	package:socks
authPassword	proxy/socks/protocol.go	/^	authPassword         = 0x02$/;"	c	package:socks
authPool	proxy/mtproto/auth.go	/^	authPool = sync.Pool{$/;"	v	package:mtproto
auth_type	proxy/socks/config.proto	/^  AuthType auth_type = 1;$/;"	f	message:v2ray.core.proxy.socks.ServerConfig	typeref:typename:AuthType
b	app/router/condition_geoip.go	/^	b uint64$/;"	m	struct:router.ipv6	typeref:typename:uint64
balancers	app/router/router.go	/^	balancers      map[string]*Balancer$/;"	m	struct:router.Router	typeref:typename:map[string]*Balancer
balancing_rule	app/router/config.proto	/^  repeated BalancingRule balancing_rule = 3;$/;"	f	message:v2ray.core.app.router.Config	typeref:typename:BalancingRule
balancing_tag	app/router/config.proto	/^    string balancing_tag = 12;$/;"	f	oneof:v2ray.core.app.router.RoutingRule.target_tag	typeref:typename:string
baseDOHNameServer	app/dns/dohdns.go	/^func baseDOHNameServer(url *url.URL, prefix string, clientIP net.IP) *DoHNameServer {$/;"	f	package:dns	typeref:typename:*DoHNameServer
baseTime	proxy/vmess/validator.go	/^	baseTime protocol.Timestamp$/;"	m	struct:vmess.TimedUserValidator	typeref:typename:protocol.Timestamp
batch	store/leveldb.go	/^	batch *leveldb.Batch$/;"	m	struct:store.LevelDBStore	typeref:typename:*leveldb.Batch
beginWithHTTPMethod	common/protocol/http/sniff.go	/^func beginWithHTTPMethod(b []byte) error {$/;"	f	package:http	typeref:typename:error
behaviorFused	proxy/vmess/validator.go	/^	behaviorFused bool$/;"	m	struct:vmess.TimedUserValidator	typeref:typename:bool
behaviorSeed	proxy/vmess/validator.go	/^	behaviorSeed  uint64$/;"	m	struct:vmess.TimedUserValidator	typeref:typename:uint64
benchSize	common/crypto/benchmark_test.go	/^const benchSize = 1024 * 1024$/;"	c	package:crypto_test
benchmarkStream	common/crypto/benchmark_test.go	/^func benchmarkStream(b *testing.B, c cipher.Stream) {$/;"	f	package:crypto_test
bindAddr	transport/internet/sockopt_darwin.go	/^func bindAddr(fd uintptr, address []byte, port uint32) error {$/;"	f	package:internet	typeref:typename:error
bindAddr	transport/internet/sockopt_freebsd.go	/^func bindAddr(fd uintptr, ip []byte, port uint32) error {$/;"	f	package:internet	typeref:typename:error
bindAddr	transport/internet/sockopt_linux.go	/^func bindAddr(fd uintptr, ip []byte, port uint32) error {$/;"	f	package:internet	typeref:typename:error
bindAddr	transport/internet/sockopt_other.go	/^func bindAddr(fd uintptr, ip []byte, port uint32) error {$/;"	f	package:internet	typeref:typename:error
bindAddr	transport/internet/sockopt_windows.go	/^func bindAddr(fd uintptr, ip []byte, port uint32) error {$/;"	f	package:internet	typeref:typename:error
bind_address	transport/internet/config.proto	/^  bytes bind_address = 5;$/;"	f	message:v2ray.core.transport.internet.SocketConfig	typeref:typename:bytes
bind_port	transport/internet/config.proto	/^  uint32 bind_port = 6;$/;"	f	message:v2ray.core.transport.internet.SocketConfig	typeref:typename:uint32
bitmask	common/bitmask/byte.go	/^package bitmask$/;"	p
bitmask_test	common/bitmask/byte_test.go	/^package bitmask_test$/;"	p
bittorrent	common/protocol/bittorrent/bittorrent.go	/^package bittorrent$/;"	p
blackhole	proxy/blackhole/blackhole.go	/^package blackhole$/;"	p
blackhole	proxy/blackhole/config.go	/^package blackhole$/;"	p
blackhole	proxy/blackhole/config.pb.go	/^package blackhole$/;"	p
blackhole	proxy/blackhole/errors.generated.go	/^package blackhole$/;"	p
blackhole_test	proxy/blackhole/blackhole_test.go	/^package blackhole_test$/;"	p
blackhole_test	proxy/blackhole/config_test.go	/^package blackhole_test$/;"	p
block	common/crypto/internal/chacha.go	/^	block  [blockSize]byte   \/\/ the keystream as an array of 64 bytes$/;"	m	struct:internal.ChaCha20Stream	typeref:typename:[blockSize]byte
blockSize	common/crypto/internal/chacha.go	/^	blockSize = stateSize * wordSize \/\/ the size of ChaCha20's block, in bytes$/;"	c	package:internal
blocking	app/stats/channel.go	/^	blocking   bool \/\/ Set blocking state if channel buffer reaches limit$/;"	m	struct:stats.Channel	typeref:typename:bool
bool_value	app/router/config.proto	/^      bool bool_value = 2;$/;"	f	oneof:v2ray.core.app.router.Domain.Attribute.typed_value	typeref:typename:bool
br	infra/conf/json/reader.go	/^	br    *buf.BufferedReader$/;"	m	struct:json.Reader	typeref:typename:*buf.BufferedReader
breakDomain	common/strmatcher/domain_matcher.go	/^func breakDomain(domain string) []string {$/;"	f	package:strmatcher	typeref:typename:[]string
bridge_config	app/reverse/config.proto	/^  repeated BridgeConfig bridge_config = 1;$/;"	f	message:v2ray.core.app.reverse.Config	typeref:typename:BridgeConfig
bridges	app/reverse/reverse.go	/^	bridges []*Bridge$/;"	m	struct:reverse.Reverse	typeref:typename:[]*Bridge
broadcast	app/stats/channel.go	/^func (c channelMessage) broadcast(subscriber chan interface{}) {$/;"	f	struct:stats.channelMessage
broadcastNonBlocking	app/stats/channel.go	/^func (c channelMessage) broadcastNonBlocking(subscriber chan interface{}) {$/;"	f	struct:stats.channelMessage
buf	common/buf/buf.go	/^package buf \/\/ import "v2ray.com\/core\/common\/buf"$/;"	p
buf	common/buf/buffer.go	/^package buf$/;"	p
buf	common/buf/copy.go	/^package buf$/;"	p
buf	common/buf/errors.generated.go	/^package buf$/;"	p
buf	common/buf/io.go	/^package buf$/;"	p
buf	common/buf/multi_buffer.go	/^package buf$/;"	p
buf	common/buf/reader.go	/^package buf$/;"	p
buf	common/buf/readv_posix.go	/^package buf$/;"	p
buf	common/buf/readv_reader.go	/^package buf$/;"	p
buf	common/buf/readv_reader_wasm.go	/^package buf$/;"	p
buf	common/buf/readv_unix.go	/^package buf$/;"	p
buf	common/buf/readv_windows.go	/^package buf$/;"	p
buf	common/buf/writer.go	/^package buf$/;"	p
bufWriter	common/crypto/io.go	/^	bufWriter buf.Writer$/;"	m	struct:crypto.CryptionWriter	typeref:typename:buf.Writer
buf_test	common/buf/buffer_test.go	/^package buf_test$/;"	p
buf_test	common/buf/copy_test.go	/^package buf_test$/;"	p
buf_test	common/buf/io_test.go	/^package buf_test$/;"	p
buf_test	common/buf/multi_buffer_test.go	/^package buf_test$/;"	p
buf_test	common/buf/reader_test.go	/^package buf_test$/;"	p
buf_test	common/buf/readv_test.go	/^package buf_test$/;"	p
buf_test	common/buf/writer_test.go	/^package buf_test$/;"	p
buffer	app/commander/outbound.go	/^	buffer chan net.Conn$/;"	m	struct:commander.OutboundListener	typeref:typename:chan net.Conn
buffer	app/policy/config.proto	/^  Buffer buffer = 3;$/;"	f	message:v2ray.core.app.policy.Policy	typeref:typename:Buffer
buffer	common/buf/writer.go	/^	buffer   *Buffer$/;"	m	struct:buf.BufferedWriter	typeref:typename:*Buffer
buffer	common/crypto/chunk.go	/^	buffer       []byte$/;"	m	struct:crypto.ChunkStreamReader	typeref:typename:[]byte
buffer	common/log/logger.go	/^	buffer  chan Message$/;"	m	struct:log.generalLogger	typeref:typename:chan Message
buffer	common/signal/pubsub/pubsub.go	/^	buffer chan interface{}$/;"	m	struct:pubsub.Subscriber	typeref:typename:chan interface{}
buffer	proxy/vmess/encoding/auth.go	/^	buffer [2]byte$/;"	m	struct:encoding.ShakeSizeParser	typeref:typename:[2]byte
buffer	transport/internet/kcp/output.go	/^	buffer *buf.Buffer$/;"	m	struct:kcp.SimpleSegmentWriter	typeref:typename:*buf.Buffer
bufferPolicyKey	features/policy/policy.go	/^	bufferPolicyKey policyKey = 0$/;"	c	package:policy	typeref:type:policyKey
bufferSize	app/stats/channel.go	/^	bufferSize int  \/\/ Set to 0 as no buffering$/;"	m	struct:stats.Channel	typeref:typename:int
buffered	common/buf/writer.go	/^	buffered bool$/;"	m	struct:buf.BufferedWriter	typeref:typename:bool
bufs	common/buf/readv_windows.go	/^	bufs []syscall.WSABuf$/;"	m	struct:buf.windowsReader	typeref:typename:[]syscall.WSABuf
build	core.go	/^	build    = "Custom"$/;"	v	package:core
buildReqMsgs	app/dns/dnscommon.go	/^func buildReqMsgs(domain string, option IPOption, reqIDGen func() uint16, reqOpts *dnsmessage.Re/;"	f	package:dns	typeref:typename:[]*dnsRequest
build_dat	release/user-package.sh	/^build_dat() {$/;"	f
build_v2	release/user-package.sh	/^build_v2() {$/;"	f
byteGroups	common/uuid/uuid.go	/^	byteGroups = []int{8, 4, 4, 4, 12}$/;"	v	package:uuid
bytes	app/p2p/wire/seedlist.pb.go	/^import bytes "bytes"$/;"	P	package:bytes
bytes0	common/net/address.go	/^var bytes0 = []byte{0, 0, 0, 0, 0, 0, 0, 0, 0, 0}$/;"	v	package:net
bytespool	common/bytespool/pool.go	/^package bytespool$/;"	p
c	common/signal/done/done.go	/^	c      chan struct{}$/;"	m	struct:done.Instance	typeref:typename:chan struct{}
c	common/signal/notifier.go	/^	c chan struct{}$/;"	m	struct:signal.Notifier	typeref:typename:chan struct{}
cTask	app/reverse/portal.go	/^	cTask   *task.Periodic$/;"	m	struct:reverse.StaticMuxPicker	typeref:typename:*task.Periodic
cache	app/dispatcher/default.go	/^	cache  buf.MultiBuffer$/;"	m	struct:dispatcher.cachedReader	typeref:typename:buf.MultiBuffer
cache	common/buf/writer.go	/^	cache [][]byte$/;"	m	struct:buf.BufferToBytesWriter	typeref:typename:[][]byte
cache	common/protocol/dns/io.go	/^	cache  buf.MultiBuffer$/;"	m	struct:dns.UDPReader	typeref:typename:buf.MultiBuffer
cache	infra/conf/loader.go	/^	cache     ConfigCreatorCache$/;"	m	struct:conf.JSONConfigLoader	typeref:typename:ConfigCreatorCache
cache	proxy/vless/encoding/addons.go	/^	cache []byte$/;"	m	struct:encoding.LengthPacketReader	typeref:typename:[]byte
cache	proxy/vless/encoding/addons.go	/^	cache []byte$/;"	m	struct:encoding.LengthPacketWriter	typeref:typename:[]byte
cache	proxy/vmess/encoding/server.go	/^	cache map[sessionId]time.Time$/;"	m	struct:encoding.SessionHistory	typeref:typename:map[sessionId]time.Time
cache	proxy/vmess/inbound/inbound.go	/^	cache           map[string]*protocol.MemoryUser$/;"	m	struct:inbound.userByEmail	typeref:typename:map[string]*protocol.MemoryUser
cache	transport/internet/kcp/receiving.go	/^	cache map[uint32]*DataSegment$/;"	m	struct:kcp.ReceivingWindow	typeref:typename:map[uint32]*DataSegment
cache	transport/internet/kcp/sending.go	/^	cache             *list.List$/;"	m	struct:kcp.SendingWindow	typeref:typename:*list.List
cache	transport/internet/udp/dispatcher.go	/^	cache      chan *udp.Packet$/;"	m	struct:udp.dispatcherConn	typeref:typename:chan *udp.Packet
cache	transport/internet/udp/hub.go	/^	cache        chan *udp.Packet$/;"	m	struct:udp.Hub	typeref:typename:chan *udp.Packet
cacheDurationSec	proxy/vmess/validator.go	/^	cacheDurationSec = 120$/;"	c	package:vmess
cachedH2Conns	proxy/http/client.go	/^	cachedH2Conns map[net.Destination]h2Conn$/;"	v	package:http	typeref:typename:map[net.Destination]h2Conn
cachedH2Mutex	proxy/http/client.go	/^	cachedH2Mutex sync.Mutex$/;"	v	package:http	typeref:typename:sync.Mutex
cachedReader	app/dispatcher/default.go	/^type cachedReader struct {$/;"	s	package:dispatcher
callLogService	infra/control/api.go	/^func callLogService(ctx context.Context, conn *grpc.ClientConn, method string, request string) (/;"	f	package:control	typeref:typename:(string, error)
callStatsService	infra/control/api.go	/^func callStatsService(ctx context.Context, conn *grpc.ClientConn, method string, request string)/;"	f	package:control	typeref:typename:(string, error)
callback	app/proxyman/inbound/worker.go	/^func (w *tcpWorker) callback(conn internet.Connection) {$/;"	f	struct:inbound.tcpWorker
callback	app/proxyman/inbound/worker.go	/^func (w *udpWorker) callback(b *buf.Buffer, source net.Destination, originalDest net.Destination/;"	f	struct:inbound.udpWorker
callback	transport/internet/udp/dispatcher.go	/^	callback   ResponseCallback$/;"	m	struct:udp.Dispatcher	typeref:typename:ResponseCallback
callback	transport/internet/udp/dispatcher.go	/^func (c *dispatcherConn) callback(ctx context.Context, packet *udp.Packet) {$/;"	f	struct:udp.dispatcherConn
callback	v2ray.go	/^	callback interface{}$/;"	m	struct:core.resolution	typeref:typename:interface{}
cancel	transport/internet/udp/dispatcher.go	/^	cancel context.CancelFunc$/;"	m	struct:udp.connEntry	typeref:typename:context.CancelFunc
capacity	transport/internet/udp/hub.go	/^	capacity     int$/;"	m	struct:udp.Hub	typeref:typename:int
cc	app/log/command/config_grpc.pb.go	/^	cc grpc.ClientConnInterface$/;"	m	struct:command.loggerServiceClient	typeref:typename:grpc.ClientConnInterface
cc	app/p2p/wire/notifier.pb.go	/^	cc *grpc.ClientConn$/;"	m	struct:wire.notifierClient	typeref:typename:*grpc.ClientConn
cc	app/proxyman/command/command_grpc.pb.go	/^	cc grpc.ClientConnInterface$/;"	m	struct:command.handlerServiceClient	typeref:typename:grpc.ClientConnInterface
cc	app/router/command/command_grpc.pb.go	/^	cc grpc.ClientConnInterface$/;"	m	struct:command.routingServiceClient	typeref:typename:grpc.ClientConnInterface
cc	app/stats/command/command_grpc.pb.go	/^	cc grpc.ClientConnInterface$/;"	m	struct:command.statsServiceClient	typeref:typename:grpc.ClientConnInterface
cert	common/protocol/tls/cert/cert.go	/^package cert$/;"	p
cert	common/protocol/tls/cert/cert_test.go	/^package cert$/;"	p
cert	common/protocol/tls/cert/errors.generated.go	/^package cert$/;"	p
cert	common/protocol/tls/cert/privateKey.go	/^package cert$/;"	p
certificate	transport/internet/tls/config.proto	/^  repeated Certificate certificate = 2;$/;"	f	message:v2ray.core.transport.internet.tls.Config	typeref:typename:Certificate
certificate	transport/internet/xtls/config.proto	/^  repeated Certificate certificate = 2;$/;"	f	message:v2ray.core.transport.internet.xtls.Config	typeref:typename:Certificate
channel	app/stats/channel.go	/^	channel     chan channelMessage$/;"	m	struct:stats.Channel	typeref:typename:chan channelMessage
channelMessage	app/stats/channel.go	/^type channelMessage struct {$/;"	s	package:stats
channels	app/stats/stats.go	/^	channels map[string]*Channel$/;"	m	struct:stats.Manager	typeref:typename:map[string]*Channel
char	infra/conf/serial/loader.go	/^	char int$/;"	m	struct:serial.offset	typeref:typename:int
check	common/signal/timer.go	/^func (t *ActivityTimer) check() error {$/;"	f	struct:signal.ActivityTimer	typeref:typename:error
checkTask	common/signal/timer.go	/^	checkTask *task.Periodic$/;"	m	struct:signal.ActivityTimer	typeref:typename:*task.Periodic
checkedExecute	common/task/periodic.go	/^func (t *Periodic) checkedExecute() error {$/;"	f	struct:task.Periodic	typeref:typename:error
checker	app/proxyman/inbound/worker.go	/^	checker    *task.Periodic$/;"	m	struct:inbound.udpWorker	typeref:typename:*task.Periodic
cidr	app/router/config.proto	/^  repeated CIDR cidr = 2;$/;"	f	message:v2ray.core.app.router.GeoIP	typeref:typename:CIDR
cidr	app/router/config.proto	/^  repeated CIDR cidr = 3 [deprecated = true];$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:CIDR
cipherFromString	infra/conf/shadowsocks.go	/^func cipherFromString(c string) shadowsocks.CipherType {$/;"	f	package:conf	typeref:typename:shadowsocks.CipherType
cipher_type	proxy/shadowsocks/config.proto	/^  CipherType cipher_type = 2;$/;"	f	message:v2ray.core.proxy.shadowsocks.Account	typeref:typename:CipherType
clean	Makefile	/^clean:$/;"	t
clean	app/proxyman/inbound/worker.go	/^func (w *udpWorker) clean() error {$/;"	f	struct:inbound.udpWorker	typeref:typename:error
cleanSessions	transport/internet/quic/dialer.go	/^func (s *clientSessions) cleanSessions() error {$/;"	f	struct:quic.clientSessions	typeref:typename:error
cleanup	app/dns/dohdns.go	/^	cleanup    *task.Periodic$/;"	m	struct:dns.DoHNameServer	typeref:typename:*task.Periodic
cleanup	app/dns/udpns.go	/^	cleanup   *task.Periodic$/;"	m	struct:dns.ClassicNameServer	typeref:typename:*task.Periodic
cleanup	app/reverse/bridge.go	/^func (b *Bridge) cleanup() {$/;"	f	struct:reverse.Bridge
cleanup	app/reverse/portal.go	/^func (p *StaticMuxPicker) cleanup() error {$/;"	f	struct:reverse.StaticMuxPicker	typeref:typename:error
cleanup	common/mux/client.go	/^func (p *IncrementalWorkerPicker) cleanup() {$/;"	f	struct:mux.IncrementalWorkerPicker
cleanup	release/user-package.sh	/^cleanup() { rm -rf "$TMP"; }$/;"	f
cleanup	transport/internet/quic/dialer.go	/^	cleanup  *task.Periodic$/;"	m	struct:quic.clientSessions	typeref:typename:*task.Periodic
cleanupFunc	common/mux/client.go	/^func (p *IncrementalWorkerPicker) cleanupFunc() error {$/;"	f	struct:mux.IncrementalWorkerPicker	typeref:typename:error
cleanupTask	common/mux/client.go	/^	cleanupTask *task.Periodic$/;"	m	struct:mux.IncrementalWorkerPicker	typeref:typename:*task.Periodic
client	app/dns/nameserver.go	/^	client *localdns.Client$/;"	m	struct:dns.localNameServer	typeref:typename:*localdns.Client
client	app/reverse/portal.go	/^	client   *mux.ClientWorker$/;"	m	struct:reverse.PortalWorker	typeref:typename:*mux.ClientWorker
client	app/reverse/portal.go	/^	client *mux.ClientManager$/;"	m	struct:reverse.Portal	typeref:typename:*mux.ClientManager
client	transport/internet/quic/dialer.go	/^var client clientSessions$/;"	v	package:quic	typeref:struct:clientSessions
clientIP	app/dns/dohdns.go	/^	clientIP   net.IP$/;"	m	struct:dns.DoHNameServer	typeref:typename:net.IP
clientIP	app/dns/server.go	/^	clientIP      net.IP$/;"	m	struct:dns.Server	typeref:typename:net.IP
clientIP	app/dns/udpns.go	/^	clientIP  net.IP$/;"	m	struct:dns.ClassicNameServer	typeref:typename:net.IP
clientIdx	app/dns/server.go	/^	clientIdx     uint16$/;"	m	struct:dns.DomainMatcherInfo	typeref:typename:uint16
clientSessions	transport/internet/quic/dialer.go	/^type clientSessions struct {$/;"	s	package:quic
clientVersion	app/p2p/wire/seedlist.proto	/^    string clientVersion = 1; \/\/ client version$/;"	f	message:wire.MessageData	typeref:typename:string
client_ip	app/dns/config.proto	/^  bytes client_ip = 3;$/;"	f	message:v2ray.core.app.dns.Config	typeref:typename:bytes
clients	app/dns/server.go	/^	clients       []Client             \/\/ clientIdx -> Client$/;"	m	struct:dns.Server	typeref:typename:[]Client
clients	proxy/vless/inbound/config.proto	/^  repeated v2ray.core.common.protocol.User clients = 1;$/;"	f	message:v2ray.core.proxy.vless.inbound.Config	typeref:typename:v2ray.core.common.protocol.User
clients	proxy/vmess/inbound/inbound.go	/^	clients               *vmess.TimedUserValidator$/;"	m	struct:inbound.Handler	typeref:typename:*vmess.TimedUserValidator
clients	release/config/vpoint_vmess_freedom.json	/^      "clients": [$/;"	a	object:inbounds.0.settings
clog	app/log/log_test.go	/^	clog "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
clog	infra/conf/log.go	/^	clog "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
clog	infra/conf/v2ray_test.go	/^	clog "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
clog	testing/scenarios/dokodemo_test.go	/^	clog "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
clog	testing/scenarios/feature_test.go	/^	clog "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
clog	testing/scenarios/policy_test.go	/^	clog "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
clog	testing/scenarios/reverse_test.go	/^	clog "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
clog	testing/scenarios/shadowsocks_test.go	/^	clog "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
clog	testing/scenarios/transport_test.go	/^	clog "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
clog	testing/scenarios/vmess_test.go	/^	clog "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
closeWorkers	app/proxyman/inbound/dynamic.go	/^func (h *DynamicInboundHandler) closeWorkers(workers []worker) {$/;"	f	struct:inbound.DynamicInboundHandler
closed	app/commander/outbound.go	/^	closed   bool$/;"	m	struct:commander.Outbound	typeref:typename:bool
closed	app/stats/channel.go	/^	closed chan struct{}$/;"	m	struct:stats.Channel	typeref:typename:chan struct{}
closed	common/mux/session.go	/^	closed   bool$/;"	m	struct:mux.SessionManager	typeref:typename:bool
closed	common/signal/done/done.go	/^	closed bool$/;"	m	struct:done.Instance	typeref:typename:bool
closed	transport/internet/kcp/sending.go	/^	closed                     bool$/;"	m	struct:kcp.SendingWorker	typeref:typename:bool
closed	transport/pipe/impl.go	/^	closed$/;"	c	package:pipe
closer	transport/internet/kcp/connection.go	/^	closer     io.Closer$/;"	m	struct:kcp.Connection	typeref:typename:io.Closer
cmdKey	common/protocol/id.go	/^	cmdKey [IDBytesLen]byte$/;"	m	struct:protocol.ID	typeref:typename:[IDBytesLen]byte
cmdTCPBind	proxy/socks/protocol.go	/^	cmdTCPBind       = 0x02$/;"	c	package:socks
cmdTCPConnect	proxy/socks/protocol.go	/^	cmdTCPConnect    = 0x01$/;"	c	package:socks
cmdTorResolve	proxy/socks/protocol.go	/^	cmdTorResolve    = 0xF0$/;"	c	package:socks
cmdTorResolvePTR	proxy/socks/protocol.go	/^	cmdTorResolvePTR = 0xF1$/;"	c	package:socks
cmdUDPPort	proxy/socks/protocol.go	/^	cmdUDPPort       = 0x03$/;"	c	package:socks
cmdarg	common/cmdarg/cmdarg.go	/^package cmdarg$/;"	p
code	transport/internet/headers/http/config.proto	/^  string code = 1;$/;"	f	message:v2ray.core.transport.internet.headers.http.Status	typeref:typename:string
codename	core.go	/^	codename = "V2Fly, a community-driven edition of V2Ray."$/;"	v	package:core
codes	app/log/command/config_grpc.pb.go	/^	codes "google.golang.org\/grpc\/codes"$/;"	P	package:google.golang.org/grpc/codes
codes	app/proxyman/command/command_grpc.pb.go	/^	codes "google.golang.org\/grpc\/codes"$/;"	P	package:google.golang.org/grpc/codes
codes	app/router/command/command_grpc.pb.go	/^	codes "google.golang.org\/grpc\/codes"$/;"	P	package:google.golang.org/grpc/codes
codes	app/stats/command/command_grpc.pb.go	/^	codes "google.golang.org\/grpc\/codes"$/;"	P	package:google.golang.org/grpc/codes
colorEcho	release/install-release.sh	/^colorEcho(){$/;"	f
command	app/log/command/command.go	/^package command$/;"	p
command	app/log/command/config.pb.go	/^package command$/;"	p
command	app/log/command/config_grpc.pb.go	/^package command$/;"	p
command	app/log/command/errors.generated.go	/^package command$/;"	p
command	app/proxyman/command/command.go	/^package command$/;"	p
command	app/proxyman/command/command.pb.go	/^package command$/;"	p
command	app/proxyman/command/command_grpc.pb.go	/^package command$/;"	p
command	app/proxyman/command/doc.go	/^package command$/;"	p
command	app/proxyman/command/errors.generated.go	/^package command$/;"	p
command	app/router/command/command.go	/^package command$/;"	p
command	app/router/command/command.pb.go	/^package command$/;"	p
command	app/router/command/command_grpc.pb.go	/^package command$/;"	p
command	app/router/command/config.go	/^package command$/;"	p
command	app/router/command/errors.generated.go	/^package command$/;"	p
command	app/stats/command/command.go	/^package command$/;"	p
command	app/stats/command/command.pb.go	/^package command$/;"	p
command	app/stats/command/command_grpc.pb.go	/^package command$/;"	p
command	app/stats/command/errors.generated.go	/^package command$/;"	p
command	infra/conf/command/command.go	/^package command$/;"	p
command	infra/conf/command/errors.generated.go	/^package command$/;"	p
commandRegistry	infra/control/command.go	/^	commandRegistry = make(map[string]Command)$/;"	v	package:control
commandTCP	proxy/trojan/protocol.go	/^	commandTCP byte = 1$/;"	c	package:trojan	typeref:typename:byte
commandUDP	proxy/trojan/protocol.go	/^	commandUDP byte = 3$/;"	c	package:trojan	typeref:typename:byte
command_test	app/log/command/command_test.go	/^package command_test$/;"	p
command_test	app/router/command/command_test.go	/^package command_test$/;"	p
command_test	app/stats/command/command_test.go	/^package command_test$/;"	p
commander	app/commander/commander.go	/^package commander$/;"	p
commander	app/commander/config.pb.go	/^package commander$/;"	p
commander	app/commander/errors.generated.go	/^package commander$/;"	p
commander	app/commander/outbound.go	/^package commander$/;"	p
commander	app/commander/service.go	/^package commander$/;"	p
comment	config.proto	/^  string comment = 5;$/;"	f	message:v2ray.core.OutboundHandlerConfig	typeref:typename:string
commlog	infra/control/main/main.go	/^	commlog "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
common	common/common.go	/^package common$/;"	p
common	common/errors.generated.go	/^package common$/;"	p
common	common/interfaces.go	/^package common$/;"	p
common	common/type.go	/^package common$/;"	p
common_test	common/common_test.go	/^package common_test$/;"	p
common_test	common/type_test.go	/^package common_test$/;"	p
concurrency	app/proxyman/config.proto	/^  AllocationStrategyConcurrency concurrency = 2;$/;"	f	message:v2ray.core.app.proxyman.AllocationStrategy	typeref:typename:AllocationStrategyConcurrency
concurrency	app/proxyman/config.proto	/^  uint32 concurrency = 2;$/;"	f	message:v2ray.core.app.proxyman.MultiplexingConfig	typeref:typename:uint32
conf	infra/conf/api.go	/^package conf$/;"	p
conf	infra/conf/blackhole.go	/^package conf$/;"	p
conf	infra/conf/buildable.go	/^package conf$/;"	p
conf	infra/conf/common.go	/^package conf$/;"	p
conf	infra/conf/conf.go	/^package conf$/;"	p
conf	infra/conf/dns.go	/^package conf$/;"	p
conf	infra/conf/dns_proxy.go	/^package conf$/;"	p
conf	infra/conf/dokodemo.go	/^package conf$/;"	p
conf	infra/conf/errors.generated.go	/^package conf$/;"	p
conf	infra/conf/freedom.go	/^package conf$/;"	p
conf	infra/conf/http.go	/^package conf$/;"	p
conf	infra/conf/loader.go	/^package conf$/;"	p
conf	infra/conf/log.go	/^package conf$/;"	p
conf	infra/conf/mtproto.go	/^package conf$/;"	p
conf	infra/conf/p2p.go	/^package conf$/;"	p
conf	infra/conf/policy.go	/^package conf$/;"	p
conf	infra/conf/reverse.go	/^package conf$/;"	p
conf	infra/conf/router.go	/^package conf$/;"	p
conf	infra/conf/shadowsocks.go	/^package conf$/;"	p
conf	infra/conf/socks.go	/^package conf$/;"	p
conf	infra/conf/transport.go	/^package conf$/;"	p
conf	infra/conf/transport_authenticators.go	/^package conf$/;"	p
conf	infra/conf/transport_internet.go	/^package conf$/;"	p
conf	infra/conf/trojan.go	/^package conf$/;"	p
conf	infra/conf/v2ray.go	/^package conf$/;"	p
conf	infra/conf/vless.go	/^package conf$/;"	p
conf	infra/conf/vmess.go	/^package conf$/;"	p
conf_test	infra/conf/blackhole_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/common_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/dns_proxy_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/dns_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/dokodemo_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/freedom_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/general_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/http_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/mtproto_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/policy_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/reverse_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/router_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/shadowsocks_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/socks_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/transport_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/v2ray_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/vless_test.go	/^package conf_test$/;"	p
conf_test	infra/conf/vmess_test.go	/^package conf_test$/;"	p
config	app/log/log.go	/^	config       *Config$/;"	m	struct:log.Instance	typeref:typename:*Config
config	app/p2p/p2p.go	/^	config *Config$/;"	m	struct:p2p.Instance	typeref:typename:*Config
config	proxy/dokodemo/dokodemo.go	/^	config        *Config$/;"	m	struct:dokodemo.DokodemoDoor	typeref:typename:*Config
config	proxy/freedom/freedom.go	/^	config        *Config$/;"	m	struct:freedom.Handler	typeref:typename:*Config
config	proxy/http/server.go	/^	config        *ServerConfig$/;"	m	struct:http.Server	typeref:typename:*ServerConfig
config	proxy/shadowsocks/server.go	/^	config        *ServerConfig$/;"	m	struct:shadowsocks.Server	typeref:typename:*ServerConfig
config	proxy/socks/protocol.go	/^	config *ServerConfig$/;"	m	struct:socks.ServerSession	typeref:typename:*ServerConfig
config	proxy/socks/server.go	/^	config        *ServerConfig$/;"	m	struct:socks.Server	typeref:typename:*ServerConfig
config	transport/internet/domainsocket/listener.go	/^	config     *Config$/;"	m	struct:domainsocket.Listener	typeref:typename:*Config
config	transport/internet/headers/http/http.go	/^	config *Config$/;"	m	struct:http.HttpAuthenticator	typeref:typename:*Config
config	transport/internet/http/hub.go	/^	config  *Config$/;"	m	struct:http.Listener	typeref:typename:*Config
config	transport/internet/kcp/listener.go	/^	config     *Config$/;"	m	struct:kcp.Listener	typeref:typename:*Config
config	transport/internet/tcp/hub.go	/^	config     *Config$/;"	m	struct:tcp.Listener	typeref:typename:*Config
config	transport/internet/websocket/hub.go	/^	config   *Config$/;"	m	struct:websocket.Listener	typeref:typename:*Config
configDir	main/main.go	/^	configDir   string$/;"	v	package:main	typeref:typename:string
configFileLoader	main/confloader/confloader.go	/^type configFileLoader func(string) (io.Reader, error)$/;"	t	package:confloader	typeref:typename:func(string) (io.Reader, error)
configFiles	main/main.go	/^	configFiles cmdarg.Arg \/\/ "Config file for V2Ray.", the option is customed type, parse in mai/;"	v	package:main	typeref:typename:cmdarg.Arg
configKey	infra/conf/loader.go	/^	configKey string$/;"	m	struct:conf.JSONConfigLoader	typeref:typename:string
configLoader	infra/conf/blackhole.go	/^	configLoader = NewJSONConfigLoader($/;"	v	package:conf
configLoaderByExt	config.go	/^	configLoaderByExt  = make(map[string]*ConfigFormat)$/;"	v	package:core
configLoaderByName	config.go	/^	configLoaderByName = make(map[string]*ConfigFormat)$/;"	v	package:core
confloader	main/confloader/confloader.go	/^package confloader$/;"	p
confloader	main/confloader/errors.generated.go	/^package confloader$/;"	p
congestion	transport/internet/kcp/config.proto	/^  bool congestion = 5;$/;"	f	message:v2ray.core.transport.internet.kcp.Config	typeref:typename:bool
conn	proxy/dns/dns.go	/^	conn      net.Conn$/;"	m	struct:dns.outboundConn	typeref:typename:net.Conn
conn	testing/servers/udp/udp.go	/^	conn         *net.UDPConn$/;"	m	struct:udp.Server	typeref:typename:*net.UDPConn
conn	transport/internet/kcp/receiving.go	/^	conn       *Connection$/;"	m	struct:kcp.ReceivingWorker	typeref:typename:*Connection
conn	transport/internet/kcp/sending.go	/^	conn                       *Connection$/;"	m	struct:kcp.SendingWorker	typeref:typename:*Connection
conn	transport/internet/quic/conn.go	/^	conn   net.PacketConn$/;"	m	struct:quic.sysConn	typeref:typename:net.PacketConn
conn	transport/internet/system_dialer.go	/^	conn net.PacketConn$/;"	m	struct:internet.packetConnWrapper	typeref:typename:net.PacketConn
conn	transport/internet/udp/hub.go	/^	conn         *net.UDPConn$/;"	m	struct:udp.Hub	typeref:typename:*net.UDPConn
conn	transport/internet/websocket/connection.go	/^	conn       *websocket.Conn$/;"	m	struct:websocket.connection	typeref:typename:*websocket.Conn
connEntry	transport/internet/udp/dispatcher.go	/^type connEntry struct {$/;"	s	package:udp
connID	app/proxyman/inbound/worker.go	/^type connID struct {$/;"	s	package:inbound
connReady	proxy/dns/dns.go	/^	connReady chan struct{}$/;"	m	struct:dns.outboundConn	typeref:typename:chan struct{}
connection	app/policy/config.proto	/^    int32 connection = 1;$/;"	f	message:v2ray.core.app.policy.Policy.Buffer	typeref:typename:int32
connection	common/net/connection.go	/^type connection struct {$/;"	s	package:net
connection	transport/internet/websocket/connection.go	/^type connection struct {$/;"	s	package:websocket
connectionId	transport/internet/headers/utp/utp.go	/^	connectionId uint16$/;"	m	struct:utp.UTP	typeref:typename:uint16
connection_idle	app/policy/config.proto	/^    Second connection_idle = 2;$/;"	f	message:v2ray.core.app.policy.Policy.Timeout	typeref:typename:Second
conns	transport/internet/udp/dispatcher.go	/^	conns      map[net.Destination]*connEntry$/;"	m	struct:udp.Dispatcher	typeref:typename:map[net.Destination]*connEntry
consoleLogWriter	common/log/logger.go	/^type consoleLogWriter struct {$/;"	s	package:log
content	infra/control/love.go	/^const content = "H4sIAAAAAAAC\/4SVMaskNwzH+\/kUW6izcSthMGrcqLhVk0rdQS5cSMg7Xu4S0vizB8meZd57M3ta2/;"	c	package:control
contentSessionKey	common/session/context.go	/^	contentSessionKey$/;"	c	package:session
context	app/log/command/config_grpc.pb.go	/^	context "context"$/;"	P	package:context
context	app/proxyman/command/command_grpc.pb.go	/^	context "context"$/;"	P	package:context
context	app/router/command/command_grpc.pb.go	/^	context "context"$/;"	P	package:context
context	app/stats/channel.go	/^	context context.Context$/;"	m	struct:stats.channelMessage	typeref:typename:context.Context
context	app/stats/command/command_grpc.pb.go	/^	context "context"$/;"	P	package:context
context	testing/mocks/outbound.go	/^	context "context"$/;"	P	package:context
context	testing/mocks/proxy.go	/^	context "context"$/;"	P	package:context
contextKey	proxy/mtproto/auth.go	/^type contextKey int32$/;"	t	package:mtproto	typeref:typename:int32
control	app/reverse/portal.go	/^	control  *task.Periodic$/;"	m	struct:reverse.PortalWorker	typeref:typename:*task.Periodic
control	infra/control/api.go	/^package control$/;"	p
control	infra/control/cert.go	/^package control$/;"	p
control	infra/control/command.go	/^package control$/;"	p
control	infra/control/config.go	/^package control$/;"	p
control	infra/control/control.go	/^package control$/;"	p
control	infra/control/errors.generated.go	/^package control$/;"	p
control	infra/control/fetch.go	/^package control$/;"	p
control	infra/control/love.go	/^package control$/;"	p
control	infra/control/tlsping.go	/^package control$/;"	p
control	infra/control/uuid.go	/^package control$/;"	p
control	infra/control/verify.go	/^package control$/;"	p
controlWindow	transport/internet/kcp/sending.go	/^	controlWindow              uint32$/;"	m	struct:kcp.SendingWorker	typeref:typename:uint32
controller	transport/internet/system_listener.go	/^type controller func(network, address string, fd uintptr) error$/;"	t	package:internet	typeref:typename:func(network, address string, fd uintptr) error
controllers	transport/internet/system_dialer.go	/^	controllers []controller$/;"	m	struct:internet.DefaultSystemDialer	typeref:typename:[]controller
controllers	transport/internet/system_listener.go	/^	controllers []controller$/;"	m	struct:internet.DefaultListener	typeref:typename:[]controller
copyHandler	common/buf/copy.go	/^type copyHandler struct {$/;"	s	package:buf
copyInternal	common/buf/copy.go	/^func copyInternal(reader Reader, writer Writer, handler *copyHandler) error {$/;"	f	package:buf	typeref:typename:error
copyconf	release/user-package.sh	/^copyconf() {$/;"	f
core	annotations.go	/^package core$/;"	p
core	app/proxyman/command/command.pb.go	/^	core "v2ray.com\/core"$/;"	P	package:v2ray.com/core
core	config.go	/^package core$/;"	p
core	config.pb.go	/^package core$/;"	p
core	context.go	/^package core$/;"	p
core	core.go	/^package core$/;"	p
core	errors.generated.go	/^package core$/;"	p
core	functions.go	/^package core$/;"	p
core	mocks.go	/^package core$/;"	p
core	proto.go	/^package core$/;"	p
core	v2ray.go	/^package core$/;"	p
core_test	context_test.go	/^package core_test$/;"	p
core_test	functions_test.go	/^package core_test$/;"	p
core_test	v2ray_test.go	/^package core_test$/;"	p
count	common/mux/session.go	/^	count    uint16$/;"	m	struct:mux.SessionManager	typeref:typename:uint16
count	common/strmatcher/strmatcher.go	/^	count         uint32$/;"	m	struct:strmatcher.MatcherGroup	typeref:typename:uint32
counters	app/stats/stats.go	/^	counters map[string]*Counter$/;"	m	struct:stats.Manager	typeref:typename:map[string]*Counter
countryCode	app/router/condition_geoip.go	/^	countryCode string$/;"	m	struct:router.GeoIPMatcher	typeref:typename:string
country_code	app/router/config.proto	/^  string country_code = 1;$/;"	f	message:v2ray.core.app.router.GeoIP	typeref:typename:string
country_code	app/router/config.proto	/^  string country_code = 1;$/;"	f	message:v2ray.core.app.router.GeoSite	typeref:typename:string
createAesGcm	proxy/shadowsocks/config.go	/^func createAesGcm(key []byte) cipher.AEAD {$/;"	f	package:shadowsocks	typeref:typename:cipher.AEAD
createAllocFunc	common/bytespool/pool.go	/^func createAllocFunc(size int32) func() interface{} {$/;"	f	package:bytespool	typeref:typename:func() interface{}
createAuthenticator	proxy/shadowsocks/config.go	/^func (c *AEADCipher) createAuthenticator(key []byte, iv []byte) *crypto.AEADAuthenticator {$/;"	f	struct:shadowsocks.AEADCipher	typeref:typename:*crypto.AEADAuthenticator
createChacha20Poly1305	proxy/shadowsocks/config.go	/^func createChacha20Poly1305(key []byte) cipher.AEAD {$/;"	f	package:shadowsocks	typeref:typename:cipher.AEAD
createHandler	app/log/log_creator.go	/^func createHandler(logType LogType, options HandlerCreatorOptions) (log.Handler, error) {$/;"	f	package:log	typeref:typename:(log.Handler, error)
creator	common/log/logger.go	/^	creator WriterCreator$/;"	m	struct:log.generalLogger	typeref:typename:WriterCreator
crlf	proxy/trojan/protocol.go	/^	crlf = []byte{'\\r', '\\n'}$/;"	v	package:trojan
crypto	common/crypto/aes.go	/^package crypto$/;"	p
crypto	common/crypto/auth.go	/^package crypto$/;"	p
crypto	common/crypto/chacha20.go	/^package crypto$/;"	p
crypto	common/crypto/chunk.go	/^package crypto$/;"	p
crypto	common/crypto/crypto.go	/^package crypto \/\/ import "v2ray.com\/core\/common\/crypto"$/;"	p
crypto	common/crypto/errors.generated.go	/^package crypto$/;"	p
crypto	common/crypto/io.go	/^package crypto$/;"	p
crypto_test	common/crypto/auth_test.go	/^package crypto_test$/;"	p
crypto_test	common/crypto/benchmark_test.go	/^package crypto_test$/;"	p
crypto_test	common/crypto/chacha20_test.go	/^package crypto_test$/;"	p
crypto_test	common/crypto/chunk_test.go	/^package crypto_test$/;"	p
csrc_count	transport/internet/headers/srtp/config.proto	/^	uint32 csrc_count = 4;$/;"	f	message:v2ray.core.transport.internet.headers.srtp.Config	typeref:typename:uint32
ctask	common/signal/pubsub/pubsub.go	/^	ctask *task.Periodic$/;"	m	struct:pubsub.Service	typeref:typename:*task.Periodic
ctlcmd	common/platform/ctlcmd/attr_other.go	/^package ctlcmd$/;"	p
ctlcmd	common/platform/ctlcmd/attr_windows.go	/^package ctlcmd$/;"	p
ctlcmd	common/platform/ctlcmd/ctlcmd.go	/^package ctlcmd$/;"	p
ctlcmd	common/platform/ctlcmd/errors.generated.go	/^package ctlcmd$/;"	p
ctllog	infra/conf/v2ray.go	/^	ctllog = log.New(os.Stderr, "v2ctl> ", 0)$/;"	v	package:conf
ctllog	infra/control/command.go	/^	ctllog          = log.New(os.Stderr, "v2ctl> ", 0)$/;"	v	package:control
ctrl	testing/mocks/dns.go	/^	ctrl     *gomock.Controller$/;"	m	struct:mocks.DNSClient	typeref:typename:*gomock.Controller
ctrl	testing/mocks/io.go	/^	ctrl     *gomock.Controller$/;"	m	struct:mocks.Reader	typeref:typename:*gomock.Controller
ctrl	testing/mocks/io.go	/^	ctrl     *gomock.Controller$/;"	m	struct:mocks.Writer	typeref:typename:*gomock.Controller
ctrl	testing/mocks/log.go	/^	ctrl     *gomock.Controller$/;"	m	struct:mocks.LogHandler	typeref:typename:*gomock.Controller
ctrl	testing/mocks/mux.go	/^	ctrl     *gomock.Controller$/;"	m	struct:mocks.MuxClientWorkerFactory	typeref:typename:*gomock.Controller
ctrl	testing/mocks/outbound.go	/^	ctrl     *gomock.Controller$/;"	m	struct:mocks.OutboundHandlerSelector	typeref:typename:*gomock.Controller
ctrl	testing/mocks/outbound.go	/^	ctrl     *gomock.Controller$/;"	m	struct:mocks.OutboundManager	typeref:typename:*gomock.Controller
ctrl	testing/mocks/proxy.go	/^	ctrl     *gomock.Controller$/;"	m	struct:mocks.ProxyInbound	typeref:typename:*gomock.Controller
ctrl	testing/mocks/proxy.go	/^	ctrl     *gomock.Controller$/;"	m	struct:mocks.ProxyOutbound	typeref:typename:*gomock.Controller
ctx	app/p2p/api.go	/^	ctx       context.Context$/;"	m	struct:p2p.P2PNode	typeref:typename:context.Context
ctx	app/proxyman/inbound/dynamic.go	/^	ctx context.Context$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:context.Context
ctx	app/proxyman/inbound/worker.go	/^	ctx context.Context$/;"	m	struct:inbound.tcpWorker	typeref:typename:context.Context
ctx	v2ray.go	/^	ctx context.Context$/;"	m	struct:core.Instance	typeref:typename:context.Context
ctype1	proxy/mtproto/server.go	/^var ctype1 = []byte{0xef, 0xef, 0xef, 0xef}$/;"	v	package:mtproto
ctype2	proxy/mtproto/server.go	/^var ctype2 = []byte{0xee, 0xee, 0xee, 0xee}$/;"	v	package:mtproto
cuckoo	common/antireplay/antireplay.go	/^	cuckoo "github.com\/seiflotfy\/cuckoofilter"$/;"	P	package:github.com/seiflotfy/cuckoofilter
current	common/buf/readv_reader.go	/^	current uint32$/;"	m	struct:buf.allocStrategy	typeref:typename:uint32
d	transport/internet/http/hub.go	/^	d *done.Instance$/;"	m	struct:http.flushWriter	typeref:typename:*done.Instance
data	transport/pipe/impl.go	/^	data        buf.MultiBuffer$/;"	m	struct:pipe.pipe	typeref:typename:buf.MultiBuffer
dataHandler	common/buf/copy.go	/^type dataHandler func(MultiBuffer)$/;"	t	package:buf	typeref:typename:func(MultiBuffer)
dataInput	transport/internet/kcp/connection.go	/^	dataInput  *signal.Notifier$/;"	m	struct:kcp.Connection	typeref:typename:*signal.Notifier
dataOutput	transport/internet/kcp/connection.go	/^	dataOutput *signal.Notifier$/;"	m	struct:kcp.Connection	typeref:typename:*signal.Notifier
dataUpdater	transport/internet/kcp/connection.go	/^	dataUpdater *Updater$/;"	m	struct:kcp.Connection	typeref:typename:*Updater
db	app/p2p/account/account.go	/^	db *store.LevelDBStore$/;"	m	struct:account.SocksDB	typeref:typename:*store.LevelDBStore
db	store/leveldb.go	/^	db    *leveldb.DB$/;"	m	struct:store.LevelDBStore	typeref:typename:*leveldb.DB
db	store/sqlite.go	/^	db          *sql.DB$/;"	m	struct:store.SQLiteStorage	typeref:typename:*sql.DB
dbWg	store/sqlite.go	/^	dbWg        sync.WaitGroup$/;"	m	struct:store.SQLiteStorage	typeref:typename:sync.WaitGroup
dcList	proxy/mtproto/server.go	/^	dcList = []net.Address{$/;"	v	package:mtproto
debug	main/distro/debug/debug.go	/^package debug$/;"	p
dec	proxy/vmess/aead/authid.go	/^	dec    *AuthIDDecoder$/;"	m	struct:aead.AuthIDDecoderItem	typeref:typename:*AuthIDDecoder
decryption	proxy/vless/inbound/config.proto	/^  string decryption = 2;$/;"	f	message:v2ray.core.proxy.vless.inbound.Config	typeref:typename:string
default	proxy/vmess/inbound/config.proto	/^  DefaultConfig default = 2;$/;"	f	message:v2ray.core.proxy.vmess.inbound.Config	typeref:typename:DefaultConfig
defaultAlterIDs	proxy/vmess/inbound/inbound.go	/^	defaultAlterIDs uint16$/;"	m	struct:inbound.userByEmail	typeref:typename:uint16
defaultBufferPolicy	features/policy/policy.go	/^func defaultBufferPolicy() Buffer {$/;"	f	package:policy	typeref:typename:Buffer
defaultBufferSize	features/policy/policy.go	/^var defaultBufferSize int32$/;"	v	package:policy	typeref:typename:int32
defaultHandler	app/proxyman/outbound/outbound.go	/^	defaultHandler   outbound.Handler$/;"	m	struct:outbound.Manager	typeref:typename:outbound.Handler
defaultLevel	proxy/vmess/inbound/inbound.go	/^	defaultLevel    uint32$/;"	m	struct:inbound.userByEmail	typeref:typename:uint32
defaultPolicy	app/policy/config.go	/^func defaultPolicy() *Policy {$/;"	f	package:policy	typeref:typename:*Policy
deps	v2ray.go	/^	deps     []reflect.Type$/;"	m	struct:core.resolution	typeref:typename:[]reflect.Type
dest	app/proxyman/inbound/worker.go	/^	dest net.Destination$/;"	m	struct:inbound.connID	typeref:typename:net.Destination
dest	common/mux/writer.go	/^	dest         net.Destination$/;"	m	struct:mux.Writer	typeref:typename:net.Destination
dest	common/protocol/server_spec.go	/^	dest  net.Destination$/;"	m	struct:protocol.ServerSpec	typeref:typename:net.Destination
dest	proxy/trojan/config.proto	/^  string dest = 4;$/;"	f	message:v2ray.core.proxy.trojan.Fallback	typeref:typename:string
dest	proxy/vless/inbound/config.proto	/^  string dest = 4;$/;"	f	message:v2ray.core.proxy.vless.inbound.Fallback	typeref:typename:string
dest	transport/internet/kcp/listener.go	/^	dest     net.Destination$/;"	m	struct:kcp.Writer	typeref:typename:net.Destination
dest	transport/internet/system_dialer.go	/^	dest net.Addr$/;"	m	struct:internet.packetConnWrapper	typeref:typename:net.Addr
destination_override	app/proxyman/config.proto	/^  repeated string destination_override = 2;$/;"	f	message:v2ray.core.app.proxyman.SniffingConfig	typeref:typename:string
destination_override	proxy/freedom/config.proto	/^  DestinationOverride destination_override = 3;$/;"	f	message:v2ray.core.proxy.freedom.Config	typeref:typename:DestinationOverride
deterministicDice	common/dice/dice.go	/^type deterministicDice struct {$/;"	s	package:dice
detour	proxy/vmess/inbound/config.proto	/^  DetourConfig detour = 3;$/;"	f	message:v2ray.core.proxy.vmess.inbound.Config	typeref:typename:DetourConfig
detours	proxy/vmess/inbound/inbound.go	/^	detours               *DetourConfig$/;"	m	struct:inbound.Handler	typeref:typename:*DetourConfig
dial	proxy/dns/dns.go	/^func (c *outboundConn) dial() error {$/;"	f	struct:dns.outboundConn	typeref:typename:error
dialFunc	transport/internet/dialer.go	/^type dialFunc func(ctx context.Context, dest net.Destination, streamSettings *MemoryStreamConfig/;"	t	package:internet	typeref:typename:func(ctx context.Context, dest net.Destination, streamSettings *MemoryStreamConfig) (Connection, error)
dialWebsocket	transport/internet/websocket/dialer.go	/^func dialWebsocket(ctx context.Context, dest net.Destination, streamSettings *internet.MemoryStr/;"	f	package:websocket	typeref:typename:(net.Conn, error)
dialer	proxy/dns/dns.go	/^	dialer func() (internet.Connection, error)$/;"	m	struct:dns.outboundConn	typeref:typename:func() (internet.Connection, error)
dice	common/dice/dice.go	/^package dice \/\/ import "v2ray.com\/core\/common\/dice"$/;"	p
dice_test	common/dice/dice_test.go	/^package dice_test$/;"	p
dirExists	main/main.go	/^func dirExists(file string) bool {$/;"	f	package:main	typeref:typename:bool
dirty	transport/internet/kcp/receiving.go	/^	dirty           bool$/;"	m	struct:kcp.AckList	typeref:typename:bool
disable_session_resumption	transport/internet/tls/config.proto	/^  bool disable_session_resumption = 6;$/;"	f	message:v2ray.core.transport.internet.tls.Config	typeref:typename:bool
disable_session_resumption	transport/internet/xtls/config.proto	/^  bool disable_session_resumption = 6;$/;"	f	message:v2ray.core.transport.internet.xtls.Config	typeref:typename:bool
disable_system_root	transport/internet/tls/config.proto	/^  bool disable_system_root = 7;$/;"	f	message:v2ray.core.transport.internet.tls.Config	typeref:typename:bool
disable_system_root	transport/internet/xtls/config.proto	/^  bool disable_system_root = 7;$/;"	f	message:v2ray.core.transport.internet.xtls.Config	typeref:typename:bool
discardOverflow	transport/pipe/impl.go	/^	discardOverflow bool$/;"	m	struct:pipe.pipeOption	typeref:typename:bool
dispatcher	app/dispatcher/config.pb.go	/^package dispatcher$/;"	p
dispatcher	app/dispatcher/default.go	/^package dispatcher$/;"	p
dispatcher	app/dispatcher/dispatcher.go	/^package dispatcher$/;"	p
dispatcher	app/dispatcher/errors.generated.go	/^package dispatcher$/;"	p
dispatcher	app/dispatcher/sniffer.go	/^package dispatcher$/;"	p
dispatcher	app/dispatcher/stats.go	/^package dispatcher$/;"	p
dispatcher	app/proxyman/inbound/worker.go	/^	dispatcher      routing.Dispatcher$/;"	m	struct:inbound.tcpWorker	typeref:typename:routing.Dispatcher
dispatcher	app/proxyman/inbound/worker.go	/^	dispatcher      routing.Dispatcher$/;"	m	struct:inbound.udpWorker	typeref:typename:routing.Dispatcher
dispatcher	app/reverse/bridge.go	/^	dispatcher  routing.Dispatcher$/;"	m	struct:reverse.Bridge	typeref:typename:routing.Dispatcher
dispatcher	app/reverse/bridge.go	/^	dispatcher routing.Dispatcher$/;"	m	struct:reverse.BridgeWorker	typeref:typename:routing.Dispatcher
dispatcher	common/mux/server.go	/^	dispatcher     routing.Dispatcher$/;"	m	struct:mux.ServerWorker	typeref:typename:routing.Dispatcher
dispatcher	common/mux/server.go	/^	dispatcher routing.Dispatcher$/;"	m	struct:mux.Server	typeref:typename:routing.Dispatcher
dispatcher	transport/internet/udp/dispatcher.go	/^	dispatcher *Dispatcher$/;"	m	struct:udp.dispatcherConn	typeref:typename:*Dispatcher
dispatcher	transport/internet/udp/dispatcher.go	/^	dispatcher routing.Dispatcher$/;"	m	struct:udp.Dispatcher	typeref:typename:routing.Dispatcher
dispatcherConn	transport/internet/udp/dispatcher.go	/^type dispatcherConn struct {$/;"	s	package:udp
dispatcher_test	app/dispatcher/stats_test.go	/^package dispatcher_test$/;"	p
dns	app/dns/config.pb.go	/^package dns$/;"	p
dns	app/dns/dns.go	/^package dns$/;"	p
dns	app/dns/dnscommon.go	/^package dns$/;"	p
dns	app/dns/dnscommon_test.go	/^package dns$/;"	p
dns	app/dns/dohdns.go	/^package dns$/;"	p
dns	app/dns/errors.generated.go	/^package dns$/;"	p
dns	app/dns/hosts.go	/^package dns$/;"	p
dns	app/dns/nameserver.go	/^package dns$/;"	p
dns	app/dns/server.go	/^package dns$/;"	p
dns	app/dns/udpns.go	/^package dns$/;"	p
dns	app/router/router.go	/^	dns            dns.Client$/;"	m	struct:router.Router	typeref:typename:dns.Client
dns	common/protocol/dns/errors.generated.go	/^package dns$/;"	p
dns	common/protocol/dns/io.go	/^package dns$/;"	p
dns	features/dns/client.go	/^package dns$/;"	p
dns	features/routing/dns/context.go	/^package dns$/;"	p
dns	features/routing/dns/errors.generated.go	/^package dns$/;"	p
dns	proxy/dns/config.pb.go	/^package dns$/;"	p
dns	proxy/dns/dns.go	/^package dns$/;"	p
dns	proxy/dns/errors.generated.go	/^package dns$/;"	p
dns	proxy/freedom/freedom.go	/^	dns           dns.Client$/;"	m	struct:freedom.Handler	typeref:typename:dns.Client
dns	proxy/vless/inbound/inbound.go	/^	dns                   dns.Client$/;"	m	struct:inbound.Handler	typeref:typename:dns.Client
dnsClient	features/routing/dns/context.go	/^	dnsClient   dns.Client$/;"	m	struct:dns.ResolvableContext	typeref:typename:dns.Client
dnsRequest	app/dns/dnscommon.go	/^type dnsRequest struct {$/;"	s	package:dns
dns_feature	app/dns/dnscommon.go	/^	dns_feature "v2ray.com\/core\/features\/dns"$/;"	P	package:v2ray.com/core/features/dns
dns_feature	app/dns/dohdns.go	/^	dns_feature "v2ray.com\/core\/features\/dns"$/;"	P	package:v2ray.com/core/features/dns
dns_feature	app/dns/udpns.go	/^	dns_feature "v2ray.com\/core\/features\/dns"$/;"	P	package:v2ray.com/core/features/dns
dns_proto	proxy/dns/dns.go	/^	dns_proto "v2ray.com\/core\/common\/protocol\/dns"$/;"	P	package:v2ray.com/core/common/protocol/dns
dns_proxy	infra/conf/v2ray_test.go	/^	dns_proxy "v2ray.com\/core\/proxy\/dns"$/;"	P	package:v2ray.com/core/proxy/dns
dns_proxy	proxy/dns/dns_test.go	/^	dns_proxy "v2ray.com\/core\/proxy\/dns"$/;"	P	package:v2ray.com/core/proxy/dns
dns_test	app/dns/hosts_test.go	/^package dns_test$/;"	p
dns_test	app/dns/nameserver_test.go	/^package dns_test$/;"	p
dns_test	app/dns/server_test.go	/^package dns_test$/;"	p
dns_test	proxy/dns/dns_test.go	/^package dns_test$/;"	p
dnsapp	proxy/dns/dns_test.go	/^	dnsapp "v2ray.com\/core\/app\/dns"$/;"	P	package:v2ray.com/core/app/dns
dohHTTPSContext	app/dns/dohdns.go	/^func (s *DoHNameServer) dohHTTPSContext(ctx context.Context, b []byte) ([]byte, error) {$/;"	f	struct:dns.DoHNameServer	typeref:typename:([]byte, error)
dohURL	app/dns/dohdns.go	/^	dohURL     string$/;"	m	struct:dns.DoHNameServer	typeref:typename:string
dokodemo	proxy/dokodemo/config.go	/^package dokodemo$/;"	p
dokodemo	proxy/dokodemo/config.pb.go	/^package dokodemo$/;"	p
dokodemo	proxy/dokodemo/dokodemo.go	/^package dokodemo$/;"	p
dokodemo	proxy/dokodemo/errors.generated.go	/^package dokodemo$/;"	p
domain	app/dns/config.proto	/^    string domain = 2;$/;"	f	message:v2ray.core.app.dns.Config.HostMapping	typeref:typename:string
domain	app/dns/config.proto	/^    string domain = 2;$/;"	f	message:v2ray.core.app.dns.NameServer.PriorityDomain	typeref:typename:string
domain	app/dns/dnscommon.go	/^	domain  string$/;"	m	struct:dns.dnsRequest	typeref:typename:string
domain	app/reverse/bridge.go	/^	domain      string$/;"	m	struct:reverse.Bridge	typeref:typename:string
domain	app/reverse/config.proto	/^  string domain = 2;$/;"	f	message:v2ray.core.app.reverse.BridgeConfig	typeref:typename:string
domain	app/reverse/config.proto	/^  string domain = 2;$/;"	f	message:v2ray.core.app.reverse.PortalConfig	typeref:typename:string
domain	app/reverse/portal.go	/^	domain string$/;"	m	struct:reverse.Portal	typeref:typename:string
domain	app/router/config.proto	/^  repeated Domain domain = 2;$/;"	f	message:v2ray.core.app.router.GeoSite	typeref:typename:Domain
domain	app/router/config.proto	/^  repeated Domain domain = 2;$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:Domain
domain	common/net/address.proto	/^    string domain = 2;$/;"	f	oneof:v2ray.core.common.net.IPOrDomain.address	typeref:typename:string
domain	common/protocol/tls/sniff.go	/^	domain string$/;"	m	struct:tls.SniffHeader	typeref:typename:string
domainAddress	common/net/address.go	/^type domainAddress string$/;"	t	package:net	typeref:typename:string
domainMatcher	app/dns/server.go	/^	domainMatcher strmatcher.IndexMatcher$/;"	m	struct:dns.Server	typeref:typename:strmatcher.IndexMatcher
domainMatcher	common/strmatcher/matchers.go	/^type domainMatcher string$/;"	t	package:strmatcher	typeref:typename:string
domainMatcher	common/strmatcher/strmatcher.go	/^	domainMatcher DomainMatcherGroup$/;"	m	struct:strmatcher.MatcherGroup	typeref:typename:DomainMatcherGroup
domainRuleIdx	app/dns/server.go	/^	domainRuleIdx uint16$/;"	m	struct:dns.DomainMatcherInfo	typeref:typename:uint16
domainRules	app/dns/server.go	/^	domainRules   [][]string           \/\/ clientIdx -> domainRuleIdx -> DomainRule$/;"	m	struct:dns.Server	typeref:typename:[][]string
domainStrategy	app/router/router.go	/^	domainStrategy Config_DomainStrategy$/;"	m	struct:router.Router	typeref:typename:Config_DomainStrategy
domainToMatcher	app/router/condition.go	/^func domainToMatcher(domain *Domain) (strmatcher.Matcher, error) {$/;"	f	package:router	typeref:typename:(strmatcher.Matcher, error)
domain_override	app/proxyman/config.proto	/^  repeated KnownProtocols domain_override = 7 [deprecated = true];$/;"	f	message:v2ray.core.app.proxyman.ReceiverConfig	typeref:typename:KnownProtocols
domain_strategy	app/router/config.proto	/^  DomainStrategy domain_strategy = 1;$/;"	f	message:v2ray.core.app.router.Config	typeref:typename:DomainStrategy
domain_strategy	proxy/freedom/config.proto	/^  DomainStrategy domain_strategy = 1;$/;"	f	message:v2ray.core.proxy.freedom.Config	typeref:typename:DomainStrategy
domainsocket	transport/internet/domainsocket/config.go	/^package domainsocket$/;"	p
domainsocket	transport/internet/domainsocket/config.pb.go	/^package domainsocket$/;"	p
domainsocket	transport/internet/domainsocket/dial.go	/^package domainsocket$/;"	p
domainsocket	transport/internet/domainsocket/errgen.go	/^package domainsocket$/;"	p
domainsocket	transport/internet/domainsocket/errors.generated.go	/^package domainsocket$/;"	p
domainsocket	transport/internet/domainsocket/listener.go	/^package domainsocket$/;"	p
domainsocket_test	transport/internet/domainsocket/listener_test.go	/^package domainsocket_test$/;"	p
done	app/commander/outbound.go	/^	done   *done.Instance$/;"	m	struct:commander.OutboundListener	typeref:typename:*done.Instance
done	app/proxyman/inbound/worker.go	/^	done             *done.Instance$/;"	m	struct:inbound.udpConn	typeref:typename:*done.Instance
done	common/crypto/auth.go	/^	done         bool$/;"	m	struct:crypto.AuthenticationReader	typeref:typename:bool
done	common/log/logger.go	/^	done    *done.Instance$/;"	m	struct:log.generalLogger	typeref:typename:*done.Instance
done	common/mux/client.go	/^	done           *done.Instance$/;"	m	struct:mux.ClientWorker	typeref:typename:*done.Instance
done	common/net/connection.go	/^	done    *done.Instance$/;"	m	struct:net.connection	typeref:typename:*done.Instance
done	common/signal/done/done.go	/^package done$/;"	p
done	common/signal/pubsub/pubsub.go	/^	done   *done.Instance$/;"	m	struct:pubsub.Subscriber	typeref:typename:*done.Instance
done	transport/internet/quic/hub.go	/^	done     *done.Instance$/;"	m	struct:quic.Listener	typeref:typename:*done.Instance
done	transport/internet/udp/dispatcher.go	/^	done       *done.Instance$/;"	m	struct:udp.dispatcherConn	typeref:typename:*done.Instance
done	transport/pipe/impl.go	/^	done        *done.Instance$/;"	m	struct:pipe.pipe	typeref:typename:*done.Instance
downlink	app/proxyman/inbound/worker.go	/^	downlink         stats.Counter$/;"	m	struct:inbound.udpConn	typeref:typename:stats.Counter
downlinkCounter	app/proxyman/inbound/worker.go	/^	downlinkCounter stats.Counter$/;"	m	struct:inbound.tcpWorker	typeref:typename:stats.Counter
downlinkCounter	app/proxyman/inbound/worker.go	/^	downlinkCounter stats.Counter$/;"	m	struct:inbound.udpWorker	typeref:typename:stats.Counter
downlinkCounter	app/proxyman/outbound/handler.go	/^	downlinkCounter stats.Counter$/;"	m	struct:outbound.Handler	typeref:typename:stats.Counter
downlink_capacity	transport/internet/kcp/config.proto	/^  DownlinkCapacity downlink_capacity = 4;$/;"	f	message:v2ray.core.transport.internet.kcp.Config	typeref:typename:DownlinkCapacity
downlink_only	app/policy/config.proto	/^    Second downlink_only = 4;$/;"	f	message:v2ray.core.app.policy.Policy.Timeout	typeref:typename:Second
draining	app/reverse/portal.go	/^	draining bool$/;"	m	struct:reverse.PortalWorker	typeref:typename:bool
e	common/errors/errors_test.go	/^type e struct{}$/;"	s	package:errors_test
ecPrivateKey	common/protocol/tls/cert/privateKey.go	/^type ecPrivateKey struct {$/;"	s	package:cert
effectiveListener	transport/internet/system_listener.go	/^	effectiveListener = DefaultListener{}$/;"	v	package:internet
effectiveSystemDialer	transport/internet/system_dialer.go	/^	effectiveSystemDialer SystemDialer = &DefaultSystemDialer{}$/;"	v	package:internet	typeref:typename:SystemDialer
email	app/proxyman/command/command.proto	/^  string email = 1;$/;"	f	message:v2ray.core.app.proxyman.command.RemoveUserOperation	typeref:typename:string
email	common/protocol/user.proto	/^  string email = 2;$/;"	f	message:v2ray.core.common.protocol.User	typeref:typename:string
email	proxy/vless/validator.go	/^	email sync.Map$/;"	m	struct:vless.Validator	typeref:typename:sync.Map
enable	transport/internet/kcp/config.proto	/^  bool enable = 1;$/;"	f	message:v2ray.core.transport.internet.kcp.ConnectionReuse	typeref:typename:bool
enablePadding	proxy/vmess/outbound/outbound.go	/^	enablePadding = false$/;"	v	package:outbound
enabled	app/proxyman/config.proto	/^  bool enabled = 1;$/;"	f	message:v2ray.core.app.proxyman.MultiplexingConfig	typeref:typename:bool
enabled	app/proxyman/config.proto	/^  bool enabled = 1;$/;"	f	message:v2ray.core.app.proxyman.SniffingConfig	typeref:typename:bool
encodeVarintAddons	proxy/vless/encoding/addons.pb.go	/^func encodeVarintAddons(dAtA []byte, offset int, v uint64) int {$/;"	f	package:encoding	typeref:typename:int
encodeVarintPopulateSeedlist	app/p2p/wire/seedlist.pb.go	/^func encodeVarintPopulateSeedlist(dAtA []byte, v uint64) []byte {$/;"	f	package:wire	typeref:typename:[]byte
encodeVarintSeedlist	app/p2p/wire/seedlist.pb.go	/^func encodeVarintSeedlist(dAtA []byte, offset int, v uint64) int {$/;"	f	package:wire	typeref:typename:int
encoding	proxy/vless/encoding/addons.go	/^package encoding$/;"	p
encoding	proxy/vless/encoding/addons.pb.go	/^package encoding$/;"	p
encoding	proxy/vless/encoding/encoding.go	/^package encoding$/;"	p
encoding	proxy/vless/encoding/errors.generated.go	/^package encoding$/;"	p
encoding	proxy/vmess/encoding/auth.go	/^package encoding$/;"	p
encoding	proxy/vmess/encoding/client.go	/^package encoding$/;"	p
encoding	proxy/vmess/encoding/commands.go	/^package encoding$/;"	p
encoding	proxy/vmess/encoding/encoding.go	/^package encoding$/;"	p
encoding	proxy/vmess/encoding/errors.generated.go	/^package encoding$/;"	p
encoding	proxy/vmess/encoding/server.go	/^package encoding$/;"	p
encoding_test	proxy/vless/encoding/encoding_test.go	/^package encoding_test$/;"	p
encoding_test	proxy/vmess/encoding/auth_test.go	/^package encoding_test$/;"	p
encoding_test	proxy/vmess/encoding/commands_test.go	/^package encoding_test$/;"	p
encoding_test	proxy/vmess/encoding/encoding_test.go	/^package encoding_test$/;"	p
encryption	proxy/vless/account.proto	/^  string encryption = 3;$/;"	f	message:v2ray.core.proxy.vless.Account	typeref:typename:string
end	common/buf/buffer.go	/^	end   int32$/;"	m	struct:buf.Buffer	typeref:typename:int32
entry	app/router/config.proto	/^  repeated GeoIP entry = 1;$/;"	f	message:v2ray.core.app.router.GeoIPList	typeref:typename:GeoIP
entry	app/router/config.proto	/^  repeated GeoSite entry = 1;$/;"	f	message:v2ray.core.app.router.GeoSiteList	typeref:typename:GeoSite
envFile	common/common.go	/^func envFile() (string, error) {$/;"	f	package:common	typeref:typename:(string, error)
eof	common/mux/reader.go	/^	eof    bool$/;"	m	struct:mux.PacketReader	typeref:typename:bool
epoch	transport/internet/headers/tls/dtls.go	/^	epoch    uint16$/;"	m	struct:tls.DTLS	typeref:typename:uint16
errBufferFull	transport/pipe/impl.go	/^var errBufferFull = errors.New("buffer full")$/;"	v	package:pipe
errExpectedIPNonMatch	app/dns/server.go	/^var errExpectedIPNonMatch = errors.New("expectIPs not match")$/;"	v	package:dns
errInvalidPacket	transport/internet/quic/conn.go	/^var errInvalidPacket = errors.New("invalid packet")$/;"	v	package:quic
errNotBittorrent	common/protocol/bittorrent/bittorrent.go	/^var errNotBittorrent = errors.New("not bittorrent header")$/;"	v	package:bittorrent
errNotClientHello	common/protocol/tls/sniff.go	/^var errNotClientHello = errors.New("not client hello")$/;"	v	package:tls
errNotHTTPMethod	common/protocol/http/sniff.go	/^	errNotHTTPMethod = errors.New("not an HTTP method")$/;"	v	package:http
errNotTLS	common/protocol/tls/sniff.go	/^var errNotTLS = errors.New("not TLS header")$/;"	v	package:tls
errPathObjHolder	app/commander/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:commander
errPathObjHolder	app/dispatcher/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:dispatcher
errPathObjHolder	app/dns/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:dns
errPathObjHolder	app/log/command/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:command
errPathObjHolder	app/log/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:log
errPathObjHolder	app/p2p/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:p2p
errPathObjHolder	app/policy/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:policy
errPathObjHolder	app/proxyman/command/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:command
errPathObjHolder	app/proxyman/inbound/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:inbound
errPathObjHolder	app/proxyman/outbound/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:outbound
errPathObjHolder	app/reverse/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:reverse
errPathObjHolder	app/router/command/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:command
errPathObjHolder	app/router/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:router
errPathObjHolder	app/stats/command/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:command
errPathObjHolder	app/stats/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:stats
errPathObjHolder	common/buf/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:buf
errPathObjHolder	common/crypto/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:crypto
errPathObjHolder	common/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:common
errPathObjHolder	common/mux/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:mux
errPathObjHolder	common/net/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:net
errPathObjHolder	common/platform/ctlcmd/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:ctlcmd
errPathObjHolder	common/protocol/dns/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:dns
errPathObjHolder	common/protocol/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:protocol
errPathObjHolder	common/protocol/tls/cert/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:cert
errPathObjHolder	common/retry/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:retry
errPathObjHolder	errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:core
errPathObjHolder	features/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:features
errPathObjHolder	features/routing/dns/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:dns
errPathObjHolder	features/stats/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:stats
errPathObjHolder	infra/conf/command/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:command
errPathObjHolder	infra/conf/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:conf
errPathObjHolder	infra/conf/serial/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:serial
errPathObjHolder	infra/control/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:control
errPathObjHolder	main/confloader/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:confloader
errPathObjHolder	main/confloader/external/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:external
errPathObjHolder	main/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:main
errPathObjHolder	main/json/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:json
errPathObjHolder	main/jsonem/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:jsonem
errPathObjHolder	proxy/blackhole/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:blackhole
errPathObjHolder	proxy/dns/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:dns
errPathObjHolder	proxy/dokodemo/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:dokodemo
errPathObjHolder	proxy/freedom/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:freedom
errPathObjHolder	proxy/http/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:http
errPathObjHolder	proxy/mtproto/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:mtproto
errPathObjHolder	proxy/shadowsocks/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:shadowsocks
errPathObjHolder	proxy/socks/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:socks
errPathObjHolder	proxy/trojan/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:trojan
errPathObjHolder	proxy/vless/encoding/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:encoding
errPathObjHolder	proxy/vless/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:vless
errPathObjHolder	proxy/vless/inbound/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:inbound
errPathObjHolder	proxy/vless/outbound/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:outbound
errPathObjHolder	proxy/vmess/encoding/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:encoding
errPathObjHolder	proxy/vmess/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:vmess
errPathObjHolder	proxy/vmess/inbound/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:inbound
errPathObjHolder	proxy/vmess/outbound/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:outbound
errPathObjHolder	transport/internet/domainsocket/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:domainsocket
errPathObjHolder	transport/internet/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:internet
errPathObjHolder	transport/internet/headers/http/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:http
errPathObjHolder	transport/internet/http/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:http
errPathObjHolder	transport/internet/kcp/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:kcp
errPathObjHolder	transport/internet/quic/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:quic
errPathObjHolder	transport/internet/tcp/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:tcp
errPathObjHolder	transport/internet/tls/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:tls
errPathObjHolder	transport/internet/udp/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:udp
errPathObjHolder	transport/internet/websocket/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:websocket
errPathObjHolder	transport/internet/xtls/errors.generated.go	/^type errPathObjHolder struct{}$/;"	s	package:xtls
errReason	transport/internet/headers/http/http.go	/^	errReason error$/;"	m	struct:http.HttpConn	typeref:typename:error
errRecordNotFound	app/dns/dnscommon.go	/^	errRecordNotFound = errors.New("record not found")$/;"	v	package:dns
errSessionClosed	transport/internet/quic/dialer.go	/^var errSessionClosed = newError("session closed")$/;"	v	package:quic
errSlowDown	transport/pipe/impl.go	/^var errSlowDown = errors.New("slow down")$/;"	v	package:pipe
errSniffingTimeout	app/dispatcher/default.go	/^	errSniffingTimeout = newError("timeout on sniffing")$/;"	v	package:dispatcher
errSoft	common/crypto/auth.go	/^var errSoft = newError("waiting for more data")$/;"	v	package:crypto
errUnknownContent	app/dispatcher/sniffer.go	/^var errUnknownContent = newError("unknown content")$/;"	v	package:dispatcher
errWaitAnother	proxy/http/server.go	/^var errWaitAnother = newError("keep alive")$/;"	v	package:http
error	bin/config/config-client-prod.json	/^    "error":".\/log\/error.log"$/;"	s	object:log
error	bin/config/config-client.json	/^    "error":".\/log\/error.log"$/;"	s	object:log
error	bin/config/config-server.json	/^    "error":".\/log\/error.log"$/;"	s	object:log
error	bin/config/ss-client.json	/^    "error":".\/log\/ss-client-error.log"$/;"	s	object:log
error	bin/config/ss-server.json	/^    "error":".\/log\/ss-server-error.log"$/;"	s	object:log
error	common/buf/copy.go	/^	error$/;"	M	struct:buf.readError	typeref:typename:error
error	common/buf/copy.go	/^	error$/;"	M	struct:buf.writeError	typeref:typename:error
error	release/config/config.json	/^    \/\/ Log level, one of "debug", "info", "warning", "error", "none"$/;"	z	object:log
errorLogger	app/log/log.go	/^	errorLogger  log.Handler$/;"	m	struct:log.Instance	typeref:typename:log.Handler
errorMismatchWriter	transport/internet/headers/http/http.go	/^	errorMismatchWriter Writer$/;"	m	struct:http.HttpConn	typeref:typename:Writer
errorTestOnly	common/retry/retry_test.go	/^	errorTestOnly = errors.New("This is a fake error.")$/;"	v	package:retry_test
errorTooLongWriter	transport/internet/headers/http/http.go	/^	errorTooLongWriter  Writer$/;"	m	struct:http.HttpConn	typeref:typename:Writer
errorWriter	transport/internet/headers/http/http.go	/^	errorWriter         Writer$/;"	m	struct:http.HttpConn	typeref:typename:Writer
error_log_level	app/log/config.proto	/^  v2ray.core.common.log.Severity error_log_level = 2;$/;"	f	message:v2ray.core.app.log.Config	typeref:typename:v2ray.core.common.log.Severity
error_log_path	app/log/config.proto	/^  string error_log_path = 3;$/;"	f	message:v2ray.core.app.log.Config	typeref:typename:string
error_log_type	app/log/config.proto	/^  LogType error_log_type = 1;$/;"	f	message:v2ray.core.app.log.Config	typeref:typename:LogType
errord	transport/pipe/impl.go	/^	errord$/;"	c	package:pipe
errors	common/errors/errors.go	/^package errors \/\/ import "v2ray.com\/core\/common\/errors"$/;"	p
errors	common/errors/multi_error.go	/^package errors$/;"	p
errors_test	common/errors/errors_test.go	/^package errors_test$/;"	p
exp8357	transport/internet/tls/config.go	/^const exp8357 = "experiment:8357"$/;"	c	package:tls
expectedHeader	transport/internet/headers/http/http.go	/^	expectedHeader *RequestConfig$/;"	m	struct:http.HeaderReader	typeref:typename:*RequestConfig
expire	app/dns/dnscommon.go	/^	expire  time.Time$/;"	m	struct:dns.dnsRequest	typeref:typename:time.Time
expire	config.proto	/^  int64 expire = 4;$/;"	f	message:v2ray.core.OutboundHandlerConfig	typeref:typename:int64
extconfigLoader	main/confloader/confloader.go	/^type extconfigLoader func([]string) (io.Reader, error)$/;"	t	package:confloader	typeref:typename:func([]string) (io.Reader, error)
extension	config.proto	/^  repeated v2ray.core.common.serial.TypedMessage extension = 6;$/;"	f	message:v2ray.core.Config	typeref:typename:v2ray.core.common.serial.TypedMessage
extension	transport/internet/headers/srtp/config.proto	/^	bool extension   = 3;$/;"	f	message:v2ray.core.transport.internet.headers.srtp.Config	typeref:typename:bool
extension	transport/internet/headers/utp/utp.go	/^	extension    byte$/;"	m	struct:utp.UTP	typeref:typename:byte
external	main/confloader/external/errors.generated.go	/^package external$/;"	p
external	main/confloader/external/external.go	/^package external$/;"	p
fallback	proxy/trojan/server.go	/^func (s *Server) fallback(ctx context.Context, sid errors.ExportOption, err error, sessionPolicy/;"	f	struct:trojan.Server	typeref:typename:error
fallbacks	proxy/trojan/config.proto	/^  repeated Fallback fallbacks = 3;$/;"	f	message:v2ray.core.proxy.trojan.ServerConfig	typeref:typename:Fallback
fallbacks	proxy/trojan/server.go	/^	fallbacks     map[string]map[string]*Fallback \/\/ or nil$/;"	m	struct:trojan.Server	typeref:typename:map[string]map[string]*Fallback
fallbacks	proxy/vless/inbound/config.proto	/^  repeated Fallback fallbacks = 3;$/;"	f	message:v2ray.core.proxy.vless.inbound.Config	typeref:typename:Fallback
fallbacks	proxy/vless/inbound/inbound.go	/^	fallbacks             map[string]map[string]*Fallback \/\/ or nil$/;"	m	struct:inbound.Handler	typeref:typename:map[string]map[string]*Fallback
fastResend	transport/internet/kcp/sending.go	/^	fastResend                 uint32$/;"	m	struct:kcp.SendingWorker	typeref:typename:uint32
featureResolutions	v2ray.go	/^	featureResolutions []resolution$/;"	m	struct:core.Instance	typeref:typename:[]resolution
feature_dns	app/dns/server_test.go	/^	feature_dns "v2ray.com\/core\/features\/dns"$/;"	P	package:v2ray.com/core/features/dns
feature_inbound	proxy/vless/inbound/inbound.go	/^	feature_inbound "v2ray.com\/core\/features\/inbound"$/;"	P	package:v2ray.com/core/features/inbound
feature_inbound	proxy/vmess/inbound/inbound.go	/^	feature_inbound "v2ray.com\/core\/features\/inbound"$/;"	P	package:v2ray.com/core/features/inbound
feature_stats	app/stats/command/command.go	/^	feature_stats "v2ray.com\/core\/features\/stats"$/;"	P	package:v2ray.com/core/features/stats
features	features/errors.generated.go	/^package features$/;"	p
features	features/feature.go	/^package features$/;"	p
features	v2ray.go	/^	features           []features.Feature$/;"	m	struct:core.Instance	typeref:typename:[]features.Feature
fetchInput	common/mux/client.go	/^func fetchInput(ctx context.Context, s *Session, output buf.Writer) {$/;"	f	package:mux
fetchInput	transport/internet/kcp/dialer.go	/^func fetchInput(ctx context.Context, input io.Reader, reader PacketReader, conn *Connection) {$/;"	f	package:kcp
fetchOutput	common/mux/client.go	/^func (m *ClientWorker) fetchOutput() {$/;"	f	struct:mux.ClientWorker
fieldMap	app/router/command/config.go	/^var fieldMap = map[string]func(*RoutingContext, routing.Route){$/;"	v	package:command
file	common/log/logger.go	/^	file   *os.File$/;"	m	struct:log.fileLogWriter	typeref:typename:*os.File
file	transport/internet/domainsocket/listener.go	/^	file *os.File$/;"	m	struct:domainsocket.fileLocker	typeref:typename:*os.File
fileDescriptor_1c0fc606bc4470de	app/p2p/wire/notifier.pb.go	/^var fileDescriptor_1c0fc606bc4470de = []byte{$/;"	v	package:wire
fileDescriptor_5d7d9df4fd11cc3b	app/p2p/config.pb.go	/^var fileDescriptor_5d7d9df4fd11cc3b = []byte{$/;"	v	package:p2p
fileDescriptor_75ab671b0ca8b1cc	proxy/vless/encoding/addons.pb.go	/^var fileDescriptor_75ab671b0ca8b1cc = []byte{$/;"	v	package:encoding
fileDescriptor_seedlist_53892d8491644e45	app/p2p/wire/seedlist.pb.go	/^var fileDescriptor_seedlist_53892d8491644e45 = []byte{$/;"	v	package:wire
fileExists	main/main.go	/^func fileExists(file string) bool {$/;"	f	package:main	typeref:typename:bool
fileLocker	transport/internet/domainsocket/listener.go	/^type fileLocker struct {$/;"	s	package:domainsocket
fileLogWriter	common/log/logger.go	/^type fileLogWriter struct {$/;"	s	package:log
file_app_commander_config_proto_depIdxs	app/commander/config.pb.go	/^var file_app_commander_config_proto_depIdxs = []int32{$/;"	v	package:commander
file_app_commander_config_proto_goTypes	app/commander/config.pb.go	/^var file_app_commander_config_proto_goTypes = []interface{}{$/;"	v	package:commander
file_app_commander_config_proto_init	app/commander/config.pb.go	/^func file_app_commander_config_proto_init() {$/;"	f	package:commander
file_app_commander_config_proto_msgTypes	app/commander/config.pb.go	/^var file_app_commander_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:commander
file_app_commander_config_proto_rawDesc	app/commander/config.pb.go	/^var file_app_commander_config_proto_rawDesc = []byte{$/;"	v	package:commander
file_app_commander_config_proto_rawDescData	app/commander/config.pb.go	/^	file_app_commander_config_proto_rawDescData = file_app_commander_config_proto_rawDesc$/;"	v	package:commander
file_app_commander_config_proto_rawDescGZIP	app/commander/config.pb.go	/^func file_app_commander_config_proto_rawDescGZIP() []byte {$/;"	f	package:commander	typeref:typename:[]byte
file_app_commander_config_proto_rawDescOnce	app/commander/config.pb.go	/^	file_app_commander_config_proto_rawDescOnce sync.Once$/;"	v	package:commander	typeref:typename:sync.Once
file_app_dispatcher_config_proto_depIdxs	app/dispatcher/config.pb.go	/^var file_app_dispatcher_config_proto_depIdxs = []int32{$/;"	v	package:dispatcher
file_app_dispatcher_config_proto_goTypes	app/dispatcher/config.pb.go	/^var file_app_dispatcher_config_proto_goTypes = []interface{}{$/;"	v	package:dispatcher
file_app_dispatcher_config_proto_init	app/dispatcher/config.pb.go	/^func file_app_dispatcher_config_proto_init() {$/;"	f	package:dispatcher
file_app_dispatcher_config_proto_msgTypes	app/dispatcher/config.pb.go	/^var file_app_dispatcher_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)$/;"	v	package:dispatcher
file_app_dispatcher_config_proto_rawDesc	app/dispatcher/config.pb.go	/^var file_app_dispatcher_config_proto_rawDesc = []byte{$/;"	v	package:dispatcher
file_app_dispatcher_config_proto_rawDescData	app/dispatcher/config.pb.go	/^	file_app_dispatcher_config_proto_rawDescData = file_app_dispatcher_config_proto_rawDesc$/;"	v	package:dispatcher
file_app_dispatcher_config_proto_rawDescGZIP	app/dispatcher/config.pb.go	/^func file_app_dispatcher_config_proto_rawDescGZIP() []byte {$/;"	f	package:dispatcher	typeref:typename:[]byte
file_app_dispatcher_config_proto_rawDescOnce	app/dispatcher/config.pb.go	/^	file_app_dispatcher_config_proto_rawDescOnce sync.Once$/;"	v	package:dispatcher	typeref:typename:sync.Once
file_app_dns_config_proto_depIdxs	app/dns/config.pb.go	/^var file_app_dns_config_proto_depIdxs = []int32{$/;"	v	package:dns
file_app_dns_config_proto_enumTypes	app/dns/config.pb.go	/^var file_app_dns_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v	package:dns
file_app_dns_config_proto_goTypes	app/dns/config.pb.go	/^var file_app_dns_config_proto_goTypes = []interface{}{$/;"	v	package:dns
file_app_dns_config_proto_init	app/dns/config.pb.go	/^func file_app_dns_config_proto_init() {$/;"	f	package:dns
file_app_dns_config_proto_msgTypes	app/dns/config.pb.go	/^var file_app_dns_config_proto_msgTypes = make([]protoimpl.MessageInfo, 6)$/;"	v	package:dns
file_app_dns_config_proto_rawDesc	app/dns/config.pb.go	/^var file_app_dns_config_proto_rawDesc = []byte{$/;"	v	package:dns
file_app_dns_config_proto_rawDescData	app/dns/config.pb.go	/^	file_app_dns_config_proto_rawDescData = file_app_dns_config_proto_rawDesc$/;"	v	package:dns
file_app_dns_config_proto_rawDescGZIP	app/dns/config.pb.go	/^func file_app_dns_config_proto_rawDescGZIP() []byte {$/;"	f	package:dns	typeref:typename:[]byte
file_app_dns_config_proto_rawDescOnce	app/dns/config.pb.go	/^	file_app_dns_config_proto_rawDescOnce sync.Once$/;"	v	package:dns	typeref:typename:sync.Once
file_app_log_command_config_proto_depIdxs	app/log/command/config.pb.go	/^var file_app_log_command_config_proto_depIdxs = []int32{$/;"	v	package:command
file_app_log_command_config_proto_goTypes	app/log/command/config.pb.go	/^var file_app_log_command_config_proto_goTypes = []interface{}{$/;"	v	package:command
file_app_log_command_config_proto_init	app/log/command/config.pb.go	/^func file_app_log_command_config_proto_init() {$/;"	f	package:command
file_app_log_command_config_proto_msgTypes	app/log/command/config.pb.go	/^var file_app_log_command_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)$/;"	v	package:command
file_app_log_command_config_proto_rawDesc	app/log/command/config.pb.go	/^var file_app_log_command_config_proto_rawDesc = []byte{$/;"	v	package:command
file_app_log_command_config_proto_rawDescData	app/log/command/config.pb.go	/^	file_app_log_command_config_proto_rawDescData = file_app_log_command_config_proto_rawDesc$/;"	v	package:command
file_app_log_command_config_proto_rawDescGZIP	app/log/command/config.pb.go	/^func file_app_log_command_config_proto_rawDescGZIP() []byte {$/;"	f	package:command	typeref:typename:[]byte
file_app_log_command_config_proto_rawDescOnce	app/log/command/config.pb.go	/^	file_app_log_command_config_proto_rawDescOnce sync.Once$/;"	v	package:command	typeref:typename:sync.Once
file_app_log_config_proto_depIdxs	app/log/config.pb.go	/^var file_app_log_config_proto_depIdxs = []int32{$/;"	v	package:log
file_app_log_config_proto_enumTypes	app/log/config.pb.go	/^var file_app_log_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v	package:log
file_app_log_config_proto_goTypes	app/log/config.pb.go	/^var file_app_log_config_proto_goTypes = []interface{}{$/;"	v	package:log
file_app_log_config_proto_init	app/log/config.pb.go	/^func file_app_log_config_proto_init() {$/;"	f	package:log
file_app_log_config_proto_msgTypes	app/log/config.pb.go	/^var file_app_log_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:log
file_app_log_config_proto_rawDesc	app/log/config.pb.go	/^var file_app_log_config_proto_rawDesc = []byte{$/;"	v	package:log
file_app_log_config_proto_rawDescData	app/log/config.pb.go	/^	file_app_log_config_proto_rawDescData = file_app_log_config_proto_rawDesc$/;"	v	package:log
file_app_log_config_proto_rawDescGZIP	app/log/config.pb.go	/^func file_app_log_config_proto_rawDescGZIP() []byte {$/;"	f	package:log	typeref:typename:[]byte
file_app_log_config_proto_rawDescOnce	app/log/config.pb.go	/^	file_app_log_config_proto_rawDescOnce sync.Once$/;"	v	package:log	typeref:typename:sync.Once
file_app_policy_config_proto_depIdxs	app/policy/config.pb.go	/^var file_app_policy_config_proto_depIdxs = []int32{$/;"	v	package:policy
file_app_policy_config_proto_goTypes	app/policy/config.pb.go	/^var file_app_policy_config_proto_goTypes = []interface{}{$/;"	v	package:policy
file_app_policy_config_proto_init	app/policy/config.pb.go	/^func file_app_policy_config_proto_init() {$/;"	f	package:policy
file_app_policy_config_proto_msgTypes	app/policy/config.pb.go	/^var file_app_policy_config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)$/;"	v	package:policy
file_app_policy_config_proto_rawDesc	app/policy/config.pb.go	/^var file_app_policy_config_proto_rawDesc = []byte{$/;"	v	package:policy
file_app_policy_config_proto_rawDescData	app/policy/config.pb.go	/^	file_app_policy_config_proto_rawDescData = file_app_policy_config_proto_rawDesc$/;"	v	package:policy
file_app_policy_config_proto_rawDescGZIP	app/policy/config.pb.go	/^func file_app_policy_config_proto_rawDescGZIP() []byte {$/;"	f	package:policy	typeref:typename:[]byte
file_app_policy_config_proto_rawDescOnce	app/policy/config.pb.go	/^	file_app_policy_config_proto_rawDescOnce sync.Once$/;"	v	package:policy	typeref:typename:sync.Once
file_app_proxyman_command_command_proto_depIdxs	app/proxyman/command/command.pb.go	/^var file_app_proxyman_command_command_proto_depIdxs = []int32{$/;"	v	package:command
file_app_proxyman_command_command_proto_goTypes	app/proxyman/command/command.pb.go	/^var file_app_proxyman_command_command_proto_goTypes = []interface{}{$/;"	v	package:command
file_app_proxyman_command_command_proto_init	app/proxyman/command/command.pb.go	/^func file_app_proxyman_command_command_proto_init() {$/;"	f	package:command
file_app_proxyman_command_command_proto_msgTypes	app/proxyman/command/command.pb.go	/^var file_app_proxyman_command_command_proto_msgTypes = make([]protoimpl.MessageInfo, 15)$/;"	v	package:command
file_app_proxyman_command_command_proto_rawDesc	app/proxyman/command/command.pb.go	/^var file_app_proxyman_command_command_proto_rawDesc = []byte{$/;"	v	package:command
file_app_proxyman_command_command_proto_rawDescData	app/proxyman/command/command.pb.go	/^	file_app_proxyman_command_command_proto_rawDescData = file_app_proxyman_command_command_proto_r/;"	v	package:command
file_app_proxyman_command_command_proto_rawDescGZIP	app/proxyman/command/command.pb.go	/^func file_app_proxyman_command_command_proto_rawDescGZIP() []byte {$/;"	f	package:command	typeref:typename:[]byte
file_app_proxyman_command_command_proto_rawDescOnce	app/proxyman/command/command.pb.go	/^	file_app_proxyman_command_command_proto_rawDescOnce sync.Once$/;"	v	package:command	typeref:typename:sync.Once
file_app_proxyman_config_proto_depIdxs	app/proxyman/config.pb.go	/^var file_app_proxyman_config_proto_depIdxs = []int32{$/;"	v	package:proxyman
file_app_proxyman_config_proto_enumTypes	app/proxyman/config.pb.go	/^var file_app_proxyman_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)$/;"	v	package:proxyman
file_app_proxyman_config_proto_goTypes	app/proxyman/config.pb.go	/^var file_app_proxyman_config_proto_goTypes = []interface{}{$/;"	v	package:proxyman
file_app_proxyman_config_proto_init	app/proxyman/config.pb.go	/^func file_app_proxyman_config_proto_init() {$/;"	f	package:proxyman
file_app_proxyman_config_proto_msgTypes	app/proxyman/config.pb.go	/^var file_app_proxyman_config_proto_msgTypes = make([]protoimpl.MessageInfo, 10)$/;"	v	package:proxyman
file_app_proxyman_config_proto_rawDesc	app/proxyman/config.pb.go	/^var file_app_proxyman_config_proto_rawDesc = []byte{$/;"	v	package:proxyman
file_app_proxyman_config_proto_rawDescData	app/proxyman/config.pb.go	/^	file_app_proxyman_config_proto_rawDescData = file_app_proxyman_config_proto_rawDesc$/;"	v	package:proxyman
file_app_proxyman_config_proto_rawDescGZIP	app/proxyman/config.pb.go	/^func file_app_proxyman_config_proto_rawDescGZIP() []byte {$/;"	f	package:proxyman	typeref:typename:[]byte
file_app_proxyman_config_proto_rawDescOnce	app/proxyman/config.pb.go	/^	file_app_proxyman_config_proto_rawDescOnce sync.Once$/;"	v	package:proxyman	typeref:typename:sync.Once
file_app_reverse_config_proto_depIdxs	app/reverse/config.pb.go	/^var file_app_reverse_config_proto_depIdxs = []int32{$/;"	v	package:reverse
file_app_reverse_config_proto_enumTypes	app/reverse/config.pb.go	/^var file_app_reverse_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v	package:reverse
file_app_reverse_config_proto_goTypes	app/reverse/config.pb.go	/^var file_app_reverse_config_proto_goTypes = []interface{}{$/;"	v	package:reverse
file_app_reverse_config_proto_init	app/reverse/config.pb.go	/^func file_app_reverse_config_proto_init() {$/;"	f	package:reverse
file_app_reverse_config_proto_msgTypes	app/reverse/config.pb.go	/^var file_app_reverse_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)$/;"	v	package:reverse
file_app_reverse_config_proto_rawDesc	app/reverse/config.pb.go	/^var file_app_reverse_config_proto_rawDesc = []byte{$/;"	v	package:reverse
file_app_reverse_config_proto_rawDescData	app/reverse/config.pb.go	/^	file_app_reverse_config_proto_rawDescData = file_app_reverse_config_proto_rawDesc$/;"	v	package:reverse
file_app_reverse_config_proto_rawDescGZIP	app/reverse/config.pb.go	/^func file_app_reverse_config_proto_rawDescGZIP() []byte {$/;"	f	package:reverse	typeref:typename:[]byte
file_app_reverse_config_proto_rawDescOnce	app/reverse/config.pb.go	/^	file_app_reverse_config_proto_rawDescOnce sync.Once$/;"	v	package:reverse	typeref:typename:sync.Once
file_app_router_command_command_proto_depIdxs	app/router/command/command.pb.go	/^var file_app_router_command_command_proto_depIdxs = []int32{$/;"	v	package:command
file_app_router_command_command_proto_goTypes	app/router/command/command.pb.go	/^var file_app_router_command_command_proto_goTypes = []interface{}{$/;"	v	package:command
file_app_router_command_command_proto_init	app/router/command/command.pb.go	/^func file_app_router_command_command_proto_init() {$/;"	f	package:command
file_app_router_command_command_proto_msgTypes	app/router/command/command.pb.go	/^var file_app_router_command_command_proto_msgTypes = make([]protoimpl.MessageInfo, 5)$/;"	v	package:command
file_app_router_command_command_proto_rawDesc	app/router/command/command.pb.go	/^var file_app_router_command_command_proto_rawDesc = []byte{$/;"	v	package:command
file_app_router_command_command_proto_rawDescData	app/router/command/command.pb.go	/^	file_app_router_command_command_proto_rawDescData = file_app_router_command_command_proto_rawDe/;"	v	package:command
file_app_router_command_command_proto_rawDescGZIP	app/router/command/command.pb.go	/^func file_app_router_command_command_proto_rawDescGZIP() []byte {$/;"	f	package:command	typeref:typename:[]byte
file_app_router_command_command_proto_rawDescOnce	app/router/command/command.pb.go	/^	file_app_router_command_command_proto_rawDescOnce sync.Once$/;"	v	package:command	typeref:typename:sync.Once
file_app_router_config_proto_depIdxs	app/router/config.pb.go	/^var file_app_router_config_proto_depIdxs = []int32{$/;"	v	package:router
file_app_router_config_proto_enumTypes	app/router/config.pb.go	/^var file_app_router_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)$/;"	v	package:router
file_app_router_config_proto_goTypes	app/router/config.pb.go	/^var file_app_router_config_proto_goTypes = []interface{}{$/;"	v	package:router
file_app_router_config_proto_init	app/router/config.pb.go	/^func file_app_router_config_proto_init() {$/;"	f	package:router
file_app_router_config_proto_msgTypes	app/router/config.pb.go	/^var file_app_router_config_proto_msgTypes = make([]protoimpl.MessageInfo, 10)$/;"	v	package:router
file_app_router_config_proto_rawDesc	app/router/config.pb.go	/^var file_app_router_config_proto_rawDesc = []byte{$/;"	v	package:router
file_app_router_config_proto_rawDescData	app/router/config.pb.go	/^	file_app_router_config_proto_rawDescData = file_app_router_config_proto_rawDesc$/;"	v	package:router
file_app_router_config_proto_rawDescGZIP	app/router/config.pb.go	/^func file_app_router_config_proto_rawDescGZIP() []byte {$/;"	f	package:router	typeref:typename:[]byte
file_app_router_config_proto_rawDescOnce	app/router/config.pb.go	/^	file_app_router_config_proto_rawDescOnce sync.Once$/;"	v	package:router	typeref:typename:sync.Once
file_app_stats_command_command_proto_depIdxs	app/stats/command/command.pb.go	/^var file_app_stats_command_command_proto_depIdxs = []int32{$/;"	v	package:command
file_app_stats_command_command_proto_goTypes	app/stats/command/command.pb.go	/^var file_app_stats_command_command_proto_goTypes = []interface{}{$/;"	v	package:command
file_app_stats_command_command_proto_init	app/stats/command/command.pb.go	/^func file_app_stats_command_command_proto_init() {$/;"	f	package:command
file_app_stats_command_command_proto_msgTypes	app/stats/command/command.pb.go	/^var file_app_stats_command_command_proto_msgTypes = make([]protoimpl.MessageInfo, 8)$/;"	v	package:command
file_app_stats_command_command_proto_rawDesc	app/stats/command/command.pb.go	/^var file_app_stats_command_command_proto_rawDesc = []byte{$/;"	v	package:command
file_app_stats_command_command_proto_rawDescData	app/stats/command/command.pb.go	/^	file_app_stats_command_command_proto_rawDescData = file_app_stats_command_command_proto_rawDesc$/;"	v	package:command
file_app_stats_command_command_proto_rawDescGZIP	app/stats/command/command.pb.go	/^func file_app_stats_command_command_proto_rawDescGZIP() []byte {$/;"	f	package:command	typeref:typename:[]byte
file_app_stats_command_command_proto_rawDescOnce	app/stats/command/command.pb.go	/^	file_app_stats_command_command_proto_rawDescOnce sync.Once$/;"	v	package:command	typeref:typename:sync.Once
file_app_stats_config_proto_depIdxs	app/stats/config.pb.go	/^var file_app_stats_config_proto_depIdxs = []int32{$/;"	v	package:stats
file_app_stats_config_proto_goTypes	app/stats/config.pb.go	/^var file_app_stats_config_proto_goTypes = []interface{}{$/;"	v	package:stats
file_app_stats_config_proto_init	app/stats/config.pb.go	/^func file_app_stats_config_proto_init() {$/;"	f	package:stats
file_app_stats_config_proto_msgTypes	app/stats/config.pb.go	/^var file_app_stats_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)$/;"	v	package:stats
file_app_stats_config_proto_rawDesc	app/stats/config.pb.go	/^var file_app_stats_config_proto_rawDesc = []byte{$/;"	v	package:stats
file_app_stats_config_proto_rawDescData	app/stats/config.pb.go	/^	file_app_stats_config_proto_rawDescData = file_app_stats_config_proto_rawDesc$/;"	v	package:stats
file_app_stats_config_proto_rawDescGZIP	app/stats/config.pb.go	/^func file_app_stats_config_proto_rawDescGZIP() []byte {$/;"	f	package:stats	typeref:typename:[]byte
file_app_stats_config_proto_rawDescOnce	app/stats/config.pb.go	/^	file_app_stats_config_proto_rawDescOnce sync.Once$/;"	v	package:stats	typeref:typename:sync.Once
file_common_log_log_proto_depIdxs	common/log/log.pb.go	/^var file_common_log_log_proto_depIdxs = []int32{$/;"	v	package:log
file_common_log_log_proto_enumTypes	common/log/log.pb.go	/^var file_common_log_log_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v	package:log
file_common_log_log_proto_goTypes	common/log/log.pb.go	/^var file_common_log_log_proto_goTypes = []interface{}{$/;"	v	package:log
file_common_log_log_proto_init	common/log/log.pb.go	/^func file_common_log_log_proto_init() {$/;"	f	package:log
file_common_log_log_proto_rawDesc	common/log/log.pb.go	/^var file_common_log_log_proto_rawDesc = []byte{$/;"	v	package:log
file_common_log_log_proto_rawDescData	common/log/log.pb.go	/^	file_common_log_log_proto_rawDescData = file_common_log_log_proto_rawDesc$/;"	v	package:log
file_common_log_log_proto_rawDescGZIP	common/log/log.pb.go	/^func file_common_log_log_proto_rawDescGZIP() []byte {$/;"	f	package:log	typeref:typename:[]byte
file_common_log_log_proto_rawDescOnce	common/log/log.pb.go	/^	file_common_log_log_proto_rawDescOnce sync.Once$/;"	v	package:log	typeref:typename:sync.Once
file_common_net_address_proto_depIdxs	common/net/address.pb.go	/^var file_common_net_address_proto_depIdxs = []int32{$/;"	v	package:net
file_common_net_address_proto_goTypes	common/net/address.pb.go	/^var file_common_net_address_proto_goTypes = []interface{}{$/;"	v	package:net
file_common_net_address_proto_init	common/net/address.pb.go	/^func file_common_net_address_proto_init() {$/;"	f	package:net
file_common_net_address_proto_msgTypes	common/net/address.pb.go	/^var file_common_net_address_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:net
file_common_net_address_proto_rawDesc	common/net/address.pb.go	/^var file_common_net_address_proto_rawDesc = []byte{$/;"	v	package:net
file_common_net_address_proto_rawDescData	common/net/address.pb.go	/^	file_common_net_address_proto_rawDescData = file_common_net_address_proto_rawDesc$/;"	v	package:net
file_common_net_address_proto_rawDescGZIP	common/net/address.pb.go	/^func file_common_net_address_proto_rawDescGZIP() []byte {$/;"	f	package:net	typeref:typename:[]byte
file_common_net_address_proto_rawDescOnce	common/net/address.pb.go	/^	file_common_net_address_proto_rawDescOnce sync.Once$/;"	v	package:net	typeref:typename:sync.Once
file_common_net_destination_proto_depIdxs	common/net/destination.pb.go	/^var file_common_net_destination_proto_depIdxs = []int32{$/;"	v	package:net
file_common_net_destination_proto_goTypes	common/net/destination.pb.go	/^var file_common_net_destination_proto_goTypes = []interface{}{$/;"	v	package:net
file_common_net_destination_proto_init	common/net/destination.pb.go	/^func file_common_net_destination_proto_init() {$/;"	f	package:net
file_common_net_destination_proto_msgTypes	common/net/destination.pb.go	/^var file_common_net_destination_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:net
file_common_net_destination_proto_rawDesc	common/net/destination.pb.go	/^var file_common_net_destination_proto_rawDesc = []byte{$/;"	v	package:net
file_common_net_destination_proto_rawDescData	common/net/destination.pb.go	/^	file_common_net_destination_proto_rawDescData = file_common_net_destination_proto_rawDesc$/;"	v	package:net
file_common_net_destination_proto_rawDescGZIP	common/net/destination.pb.go	/^func file_common_net_destination_proto_rawDescGZIP() []byte {$/;"	f	package:net	typeref:typename:[]byte
file_common_net_destination_proto_rawDescOnce	common/net/destination.pb.go	/^	file_common_net_destination_proto_rawDescOnce sync.Once$/;"	v	package:net	typeref:typename:sync.Once
file_common_net_network_proto_depIdxs	common/net/network.pb.go	/^var file_common_net_network_proto_depIdxs = []int32{$/;"	v	package:net
file_common_net_network_proto_enumTypes	common/net/network.pb.go	/^var file_common_net_network_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v	package:net
file_common_net_network_proto_goTypes	common/net/network.pb.go	/^var file_common_net_network_proto_goTypes = []interface{}{$/;"	v	package:net
file_common_net_network_proto_init	common/net/network.pb.go	/^func file_common_net_network_proto_init() {$/;"	f	package:net
file_common_net_network_proto_msgTypes	common/net/network.pb.go	/^var file_common_net_network_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:net
file_common_net_network_proto_rawDesc	common/net/network.pb.go	/^var file_common_net_network_proto_rawDesc = []byte{$/;"	v	package:net
file_common_net_network_proto_rawDescData	common/net/network.pb.go	/^	file_common_net_network_proto_rawDescData = file_common_net_network_proto_rawDesc$/;"	v	package:net
file_common_net_network_proto_rawDescGZIP	common/net/network.pb.go	/^func file_common_net_network_proto_rawDescGZIP() []byte {$/;"	f	package:net	typeref:typename:[]byte
file_common_net_network_proto_rawDescOnce	common/net/network.pb.go	/^	file_common_net_network_proto_rawDescOnce sync.Once$/;"	v	package:net	typeref:typename:sync.Once
file_common_net_port_proto_depIdxs	common/net/port.pb.go	/^var file_common_net_port_proto_depIdxs = []int32{$/;"	v	package:net
file_common_net_port_proto_goTypes	common/net/port.pb.go	/^var file_common_net_port_proto_goTypes = []interface{}{$/;"	v	package:net
file_common_net_port_proto_init	common/net/port.pb.go	/^func file_common_net_port_proto_init() {$/;"	f	package:net
file_common_net_port_proto_msgTypes	common/net/port.pb.go	/^var file_common_net_port_proto_msgTypes = make([]protoimpl.MessageInfo, 2)$/;"	v	package:net
file_common_net_port_proto_rawDesc	common/net/port.pb.go	/^var file_common_net_port_proto_rawDesc = []byte{$/;"	v	package:net
file_common_net_port_proto_rawDescData	common/net/port.pb.go	/^	file_common_net_port_proto_rawDescData = file_common_net_port_proto_rawDesc$/;"	v	package:net
file_common_net_port_proto_rawDescGZIP	common/net/port.pb.go	/^func file_common_net_port_proto_rawDescGZIP() []byte {$/;"	f	package:net	typeref:typename:[]byte
file_common_net_port_proto_rawDescOnce	common/net/port.pb.go	/^	file_common_net_port_proto_rawDescOnce sync.Once$/;"	v	package:net	typeref:typename:sync.Once
file_common_protocol_headers_proto_depIdxs	common/protocol/headers.pb.go	/^var file_common_protocol_headers_proto_depIdxs = []int32{$/;"	v	package:protocol
file_common_protocol_headers_proto_enumTypes	common/protocol/headers.pb.go	/^var file_common_protocol_headers_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v	package:protocol
file_common_protocol_headers_proto_goTypes	common/protocol/headers.pb.go	/^var file_common_protocol_headers_proto_goTypes = []interface{}{$/;"	v	package:protocol
file_common_protocol_headers_proto_init	common/protocol/headers.pb.go	/^func file_common_protocol_headers_proto_init() {$/;"	f	package:protocol
file_common_protocol_headers_proto_msgTypes	common/protocol/headers.pb.go	/^var file_common_protocol_headers_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:protocol
file_common_protocol_headers_proto_rawDesc	common/protocol/headers.pb.go	/^var file_common_protocol_headers_proto_rawDesc = []byte{$/;"	v	package:protocol
file_common_protocol_headers_proto_rawDescData	common/protocol/headers.pb.go	/^	file_common_protocol_headers_proto_rawDescData = file_common_protocol_headers_proto_rawDesc$/;"	v	package:protocol
file_common_protocol_headers_proto_rawDescGZIP	common/protocol/headers.pb.go	/^func file_common_protocol_headers_proto_rawDescGZIP() []byte {$/;"	f	package:protocol	typeref:typename:[]byte
file_common_protocol_headers_proto_rawDescOnce	common/protocol/headers.pb.go	/^	file_common_protocol_headers_proto_rawDescOnce sync.Once$/;"	v	package:protocol	typeref:typename:sync.Once
file_common_protocol_server_spec_proto_depIdxs	common/protocol/server_spec.pb.go	/^var file_common_protocol_server_spec_proto_depIdxs = []int32{$/;"	v	package:protocol
file_common_protocol_server_spec_proto_goTypes	common/protocol/server_spec.pb.go	/^var file_common_protocol_server_spec_proto_goTypes = []interface{}{$/;"	v	package:protocol
file_common_protocol_server_spec_proto_init	common/protocol/server_spec.pb.go	/^func file_common_protocol_server_spec_proto_init() {$/;"	f	package:protocol
file_common_protocol_server_spec_proto_msgTypes	common/protocol/server_spec.pb.go	/^var file_common_protocol_server_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:protocol
file_common_protocol_server_spec_proto_rawDesc	common/protocol/server_spec.pb.go	/^var file_common_protocol_server_spec_proto_rawDesc = []byte{$/;"	v	package:protocol
file_common_protocol_server_spec_proto_rawDescData	common/protocol/server_spec.pb.go	/^	file_common_protocol_server_spec_proto_rawDescData = file_common_protocol_server_spec_proto_raw/;"	v	package:protocol
file_common_protocol_server_spec_proto_rawDescGZIP	common/protocol/server_spec.pb.go	/^func file_common_protocol_server_spec_proto_rawDescGZIP() []byte {$/;"	f	package:protocol	typeref:typename:[]byte
file_common_protocol_server_spec_proto_rawDescOnce	common/protocol/server_spec.pb.go	/^	file_common_protocol_server_spec_proto_rawDescOnce sync.Once$/;"	v	package:protocol	typeref:typename:sync.Once
file_common_protocol_user_proto_depIdxs	common/protocol/user.pb.go	/^var file_common_protocol_user_proto_depIdxs = []int32{$/;"	v	package:protocol
file_common_protocol_user_proto_goTypes	common/protocol/user.pb.go	/^var file_common_protocol_user_proto_goTypes = []interface{}{$/;"	v	package:protocol
file_common_protocol_user_proto_init	common/protocol/user.pb.go	/^func file_common_protocol_user_proto_init() {$/;"	f	package:protocol
file_common_protocol_user_proto_msgTypes	common/protocol/user.pb.go	/^var file_common_protocol_user_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:protocol
file_common_protocol_user_proto_rawDesc	common/protocol/user.pb.go	/^var file_common_protocol_user_proto_rawDesc = []byte{$/;"	v	package:protocol
file_common_protocol_user_proto_rawDescData	common/protocol/user.pb.go	/^	file_common_protocol_user_proto_rawDescData = file_common_protocol_user_proto_rawDesc$/;"	v	package:protocol
file_common_protocol_user_proto_rawDescGZIP	common/protocol/user.pb.go	/^func file_common_protocol_user_proto_rawDescGZIP() []byte {$/;"	f	package:protocol	typeref:typename:[]byte
file_common_protocol_user_proto_rawDescOnce	common/protocol/user.pb.go	/^	file_common_protocol_user_proto_rawDescOnce sync.Once$/;"	v	package:protocol	typeref:typename:sync.Once
file_common_serial_typed_message_proto_depIdxs	common/serial/typed_message.pb.go	/^var file_common_serial_typed_message_proto_depIdxs = []int32{$/;"	v	package:serial
file_common_serial_typed_message_proto_goTypes	common/serial/typed_message.pb.go	/^var file_common_serial_typed_message_proto_goTypes = []interface{}{$/;"	v	package:serial
file_common_serial_typed_message_proto_init	common/serial/typed_message.pb.go	/^func file_common_serial_typed_message_proto_init() {$/;"	f	package:serial
file_common_serial_typed_message_proto_msgTypes	common/serial/typed_message.pb.go	/^var file_common_serial_typed_message_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:serial
file_common_serial_typed_message_proto_rawDesc	common/serial/typed_message.pb.go	/^var file_common_serial_typed_message_proto_rawDesc = []byte{$/;"	v	package:serial
file_common_serial_typed_message_proto_rawDescData	common/serial/typed_message.pb.go	/^	file_common_serial_typed_message_proto_rawDescData = file_common_serial_typed_message_proto_raw/;"	v	package:serial
file_common_serial_typed_message_proto_rawDescGZIP	common/serial/typed_message.pb.go	/^func file_common_serial_typed_message_proto_rawDescGZIP() []byte {$/;"	f	package:serial	typeref:typename:[]byte
file_common_serial_typed_message_proto_rawDescOnce	common/serial/typed_message.pb.go	/^	file_common_serial_typed_message_proto_rawDescOnce sync.Once$/;"	v	package:serial	typeref:typename:sync.Once
file_config_proto_depIdxs	config.pb.go	/^var file_config_proto_depIdxs = []int32{$/;"	v	package:core
file_config_proto_goTypes	config.pb.go	/^var file_config_proto_goTypes = []interface{}{$/;"	v	package:core
file_config_proto_init	config.pb.go	/^func file_config_proto_init() {$/;"	f	package:core
file_config_proto_msgTypes	config.pb.go	/^var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)$/;"	v	package:core
file_config_proto_rawDesc	config.pb.go	/^var file_config_proto_rawDesc = []byte{$/;"	v	package:core
file_config_proto_rawDescData	config.pb.go	/^	file_config_proto_rawDescData = file_config_proto_rawDesc$/;"	v	package:core
file_config_proto_rawDescGZIP	config.pb.go	/^func file_config_proto_rawDescGZIP() []byte {$/;"	f	package:core	typeref:typename:[]byte
file_config_proto_rawDescOnce	config.pb.go	/^	file_config_proto_rawDescOnce sync.Once$/;"	v	package:core	typeref:typename:sync.Once
file_proxy_blackhole_config_proto_depIdxs	proxy/blackhole/config.pb.go	/^var file_proxy_blackhole_config_proto_depIdxs = []int32{$/;"	v	package:blackhole
file_proxy_blackhole_config_proto_goTypes	proxy/blackhole/config.pb.go	/^var file_proxy_blackhole_config_proto_goTypes = []interface{}{$/;"	v	package:blackhole
file_proxy_blackhole_config_proto_init	proxy/blackhole/config.pb.go	/^func file_proxy_blackhole_config_proto_init() {$/;"	f	package:blackhole
file_proxy_blackhole_config_proto_msgTypes	proxy/blackhole/config.pb.go	/^var file_proxy_blackhole_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)$/;"	v	package:blackhole
file_proxy_blackhole_config_proto_rawDesc	proxy/blackhole/config.pb.go	/^var file_proxy_blackhole_config_proto_rawDesc = []byte{$/;"	v	package:blackhole
file_proxy_blackhole_config_proto_rawDescData	proxy/blackhole/config.pb.go	/^	file_proxy_blackhole_config_proto_rawDescData = file_proxy_blackhole_config_proto_rawDesc$/;"	v	package:blackhole
file_proxy_blackhole_config_proto_rawDescGZIP	proxy/blackhole/config.pb.go	/^func file_proxy_blackhole_config_proto_rawDescGZIP() []byte {$/;"	f	package:blackhole	typeref:typename:[]byte
file_proxy_blackhole_config_proto_rawDescOnce	proxy/blackhole/config.pb.go	/^	file_proxy_blackhole_config_proto_rawDescOnce sync.Once$/;"	v	package:blackhole	typeref:typename:sync.Once
file_proxy_dns_config_proto_depIdxs	proxy/dns/config.pb.go	/^var file_proxy_dns_config_proto_depIdxs = []int32{$/;"	v	package:dns
file_proxy_dns_config_proto_goTypes	proxy/dns/config.pb.go	/^var file_proxy_dns_config_proto_goTypes = []interface{}{$/;"	v	package:dns
file_proxy_dns_config_proto_init	proxy/dns/config.pb.go	/^func file_proxy_dns_config_proto_init() {$/;"	f	package:dns
file_proxy_dns_config_proto_msgTypes	proxy/dns/config.pb.go	/^var file_proxy_dns_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:dns
file_proxy_dns_config_proto_rawDesc	proxy/dns/config.pb.go	/^var file_proxy_dns_config_proto_rawDesc = []byte{$/;"	v	package:dns
file_proxy_dns_config_proto_rawDescData	proxy/dns/config.pb.go	/^	file_proxy_dns_config_proto_rawDescData = file_proxy_dns_config_proto_rawDesc$/;"	v	package:dns
file_proxy_dns_config_proto_rawDescGZIP	proxy/dns/config.pb.go	/^func file_proxy_dns_config_proto_rawDescGZIP() []byte {$/;"	f	package:dns	typeref:typename:[]byte
file_proxy_dns_config_proto_rawDescOnce	proxy/dns/config.pb.go	/^	file_proxy_dns_config_proto_rawDescOnce sync.Once$/;"	v	package:dns	typeref:typename:sync.Once
file_proxy_dokodemo_config_proto_depIdxs	proxy/dokodemo/config.pb.go	/^var file_proxy_dokodemo_config_proto_depIdxs = []int32{$/;"	v	package:dokodemo
file_proxy_dokodemo_config_proto_goTypes	proxy/dokodemo/config.pb.go	/^var file_proxy_dokodemo_config_proto_goTypes = []interface{}{$/;"	v	package:dokodemo
file_proxy_dokodemo_config_proto_init	proxy/dokodemo/config.pb.go	/^func file_proxy_dokodemo_config_proto_init() {$/;"	f	package:dokodemo
file_proxy_dokodemo_config_proto_msgTypes	proxy/dokodemo/config.pb.go	/^var file_proxy_dokodemo_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:dokodemo
file_proxy_dokodemo_config_proto_rawDesc	proxy/dokodemo/config.pb.go	/^var file_proxy_dokodemo_config_proto_rawDesc = []byte{$/;"	v	package:dokodemo
file_proxy_dokodemo_config_proto_rawDescData	proxy/dokodemo/config.pb.go	/^	file_proxy_dokodemo_config_proto_rawDescData = file_proxy_dokodemo_config_proto_rawDesc$/;"	v	package:dokodemo
file_proxy_dokodemo_config_proto_rawDescGZIP	proxy/dokodemo/config.pb.go	/^func file_proxy_dokodemo_config_proto_rawDescGZIP() []byte {$/;"	f	package:dokodemo	typeref:typename:[]byte
file_proxy_dokodemo_config_proto_rawDescOnce	proxy/dokodemo/config.pb.go	/^	file_proxy_dokodemo_config_proto_rawDescOnce sync.Once$/;"	v	package:dokodemo	typeref:typename:sync.Once
file_proxy_freedom_config_proto_depIdxs	proxy/freedom/config.pb.go	/^var file_proxy_freedom_config_proto_depIdxs = []int32{$/;"	v	package:freedom
file_proxy_freedom_config_proto_enumTypes	proxy/freedom/config.pb.go	/^var file_proxy_freedom_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v	package:freedom
file_proxy_freedom_config_proto_goTypes	proxy/freedom/config.pb.go	/^var file_proxy_freedom_config_proto_goTypes = []interface{}{$/;"	v	package:freedom
file_proxy_freedom_config_proto_init	proxy/freedom/config.pb.go	/^func file_proxy_freedom_config_proto_init() {$/;"	f	package:freedom
file_proxy_freedom_config_proto_msgTypes	proxy/freedom/config.pb.go	/^var file_proxy_freedom_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)$/;"	v	package:freedom
file_proxy_freedom_config_proto_rawDesc	proxy/freedom/config.pb.go	/^var file_proxy_freedom_config_proto_rawDesc = []byte{$/;"	v	package:freedom
file_proxy_freedom_config_proto_rawDescData	proxy/freedom/config.pb.go	/^	file_proxy_freedom_config_proto_rawDescData = file_proxy_freedom_config_proto_rawDesc$/;"	v	package:freedom
file_proxy_freedom_config_proto_rawDescGZIP	proxy/freedom/config.pb.go	/^func file_proxy_freedom_config_proto_rawDescGZIP() []byte {$/;"	f	package:freedom	typeref:typename:[]byte
file_proxy_freedom_config_proto_rawDescOnce	proxy/freedom/config.pb.go	/^	file_proxy_freedom_config_proto_rawDescOnce sync.Once$/;"	v	package:freedom	typeref:typename:sync.Once
file_proxy_http_config_proto_depIdxs	proxy/http/config.pb.go	/^var file_proxy_http_config_proto_depIdxs = []int32{$/;"	v	package:http
file_proxy_http_config_proto_goTypes	proxy/http/config.pb.go	/^var file_proxy_http_config_proto_goTypes = []interface{}{$/;"	v	package:http
file_proxy_http_config_proto_init	proxy/http/config.pb.go	/^func file_proxy_http_config_proto_init() {$/;"	f	package:http
file_proxy_http_config_proto_msgTypes	proxy/http/config.pb.go	/^var file_proxy_http_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)$/;"	v	package:http
file_proxy_http_config_proto_rawDesc	proxy/http/config.pb.go	/^var file_proxy_http_config_proto_rawDesc = []byte{$/;"	v	package:http
file_proxy_http_config_proto_rawDescData	proxy/http/config.pb.go	/^	file_proxy_http_config_proto_rawDescData = file_proxy_http_config_proto_rawDesc$/;"	v	package:http
file_proxy_http_config_proto_rawDescGZIP	proxy/http/config.pb.go	/^func file_proxy_http_config_proto_rawDescGZIP() []byte {$/;"	f	package:http	typeref:typename:[]byte
file_proxy_http_config_proto_rawDescOnce	proxy/http/config.pb.go	/^	file_proxy_http_config_proto_rawDescOnce sync.Once$/;"	v	package:http	typeref:typename:sync.Once
file_proxy_mtproto_config_proto_depIdxs	proxy/mtproto/config.pb.go	/^var file_proxy_mtproto_config_proto_depIdxs = []int32{$/;"	v	package:mtproto
file_proxy_mtproto_config_proto_goTypes	proxy/mtproto/config.pb.go	/^var file_proxy_mtproto_config_proto_goTypes = []interface{}{$/;"	v	package:mtproto
file_proxy_mtproto_config_proto_init	proxy/mtproto/config.pb.go	/^func file_proxy_mtproto_config_proto_init() {$/;"	f	package:mtproto
file_proxy_mtproto_config_proto_msgTypes	proxy/mtproto/config.pb.go	/^var file_proxy_mtproto_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)$/;"	v	package:mtproto
file_proxy_mtproto_config_proto_rawDesc	proxy/mtproto/config.pb.go	/^var file_proxy_mtproto_config_proto_rawDesc = []byte{$/;"	v	package:mtproto
file_proxy_mtproto_config_proto_rawDescData	proxy/mtproto/config.pb.go	/^	file_proxy_mtproto_config_proto_rawDescData = file_proxy_mtproto_config_proto_rawDesc$/;"	v	package:mtproto
file_proxy_mtproto_config_proto_rawDescGZIP	proxy/mtproto/config.pb.go	/^func file_proxy_mtproto_config_proto_rawDescGZIP() []byte {$/;"	f	package:mtproto	typeref:typename:[]byte
file_proxy_mtproto_config_proto_rawDescOnce	proxy/mtproto/config.pb.go	/^	file_proxy_mtproto_config_proto_rawDescOnce sync.Once$/;"	v	package:mtproto	typeref:typename:sync.Once
file_proxy_shadowsocks_config_proto_depIdxs	proxy/shadowsocks/config.pb.go	/^var file_proxy_shadowsocks_config_proto_depIdxs = []int32{$/;"	v	package:shadowsocks
file_proxy_shadowsocks_config_proto_enumTypes	proxy/shadowsocks/config.pb.go	/^var file_proxy_shadowsocks_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v	package:shadowsocks
file_proxy_shadowsocks_config_proto_goTypes	proxy/shadowsocks/config.pb.go	/^var file_proxy_shadowsocks_config_proto_goTypes = []interface{}{$/;"	v	package:shadowsocks
file_proxy_shadowsocks_config_proto_init	proxy/shadowsocks/config.pb.go	/^func file_proxy_shadowsocks_config_proto_init() {$/;"	f	package:shadowsocks
file_proxy_shadowsocks_config_proto_msgTypes	proxy/shadowsocks/config.pb.go	/^var file_proxy_shadowsocks_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)$/;"	v	package:shadowsocks
file_proxy_shadowsocks_config_proto_rawDesc	proxy/shadowsocks/config.pb.go	/^var file_proxy_shadowsocks_config_proto_rawDesc = []byte{$/;"	v	package:shadowsocks
file_proxy_shadowsocks_config_proto_rawDescData	proxy/shadowsocks/config.pb.go	/^	file_proxy_shadowsocks_config_proto_rawDescData = file_proxy_shadowsocks_config_proto_rawDesc$/;"	v	package:shadowsocks
file_proxy_shadowsocks_config_proto_rawDescGZIP	proxy/shadowsocks/config.pb.go	/^func file_proxy_shadowsocks_config_proto_rawDescGZIP() []byte {$/;"	f	package:shadowsocks	typeref:typename:[]byte
file_proxy_shadowsocks_config_proto_rawDescOnce	proxy/shadowsocks/config.pb.go	/^	file_proxy_shadowsocks_config_proto_rawDescOnce sync.Once$/;"	v	package:shadowsocks	typeref:typename:sync.Once
file_proxy_socks_config_proto_depIdxs	proxy/socks/config.pb.go	/^var file_proxy_socks_config_proto_depIdxs = []int32{$/;"	v	package:socks
file_proxy_socks_config_proto_enumTypes	proxy/socks/config.pb.go	/^var file_proxy_socks_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v	package:socks
file_proxy_socks_config_proto_goTypes	proxy/socks/config.pb.go	/^var file_proxy_socks_config_proto_goTypes = []interface{}{$/;"	v	package:socks
file_proxy_socks_config_proto_init	proxy/socks/config.pb.go	/^func file_proxy_socks_config_proto_init() {$/;"	f	package:socks
file_proxy_socks_config_proto_msgTypes	proxy/socks/config.pb.go	/^var file_proxy_socks_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)$/;"	v	package:socks
file_proxy_socks_config_proto_rawDesc	proxy/socks/config.pb.go	/^var file_proxy_socks_config_proto_rawDesc = []byte{$/;"	v	package:socks
file_proxy_socks_config_proto_rawDescData	proxy/socks/config.pb.go	/^	file_proxy_socks_config_proto_rawDescData = file_proxy_socks_config_proto_rawDesc$/;"	v	package:socks
file_proxy_socks_config_proto_rawDescGZIP	proxy/socks/config.pb.go	/^func file_proxy_socks_config_proto_rawDescGZIP() []byte {$/;"	f	package:socks	typeref:typename:[]byte
file_proxy_socks_config_proto_rawDescOnce	proxy/socks/config.pb.go	/^	file_proxy_socks_config_proto_rawDescOnce sync.Once$/;"	v	package:socks	typeref:typename:sync.Once
file_proxy_trojan_config_proto_depIdxs	proxy/trojan/config.pb.go	/^var file_proxy_trojan_config_proto_depIdxs = []int32{$/;"	v	package:trojan
file_proxy_trojan_config_proto_goTypes	proxy/trojan/config.pb.go	/^var file_proxy_trojan_config_proto_goTypes = []interface{}{$/;"	v	package:trojan
file_proxy_trojan_config_proto_init	proxy/trojan/config.pb.go	/^func file_proxy_trojan_config_proto_init() {$/;"	f	package:trojan
file_proxy_trojan_config_proto_msgTypes	proxy/trojan/config.pb.go	/^var file_proxy_trojan_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)$/;"	v	package:trojan
file_proxy_trojan_config_proto_rawDesc	proxy/trojan/config.pb.go	/^var file_proxy_trojan_config_proto_rawDesc = []byte{$/;"	v	package:trojan
file_proxy_trojan_config_proto_rawDescData	proxy/trojan/config.pb.go	/^	file_proxy_trojan_config_proto_rawDescData = file_proxy_trojan_config_proto_rawDesc$/;"	v	package:trojan
file_proxy_trojan_config_proto_rawDescGZIP	proxy/trojan/config.pb.go	/^func file_proxy_trojan_config_proto_rawDescGZIP() []byte {$/;"	f	package:trojan	typeref:typename:[]byte
file_proxy_trojan_config_proto_rawDescOnce	proxy/trojan/config.pb.go	/^	file_proxy_trojan_config_proto_rawDescOnce sync.Once$/;"	v	package:trojan	typeref:typename:sync.Once
file_proxy_vless_account_proto_depIdxs	proxy/vless/account.pb.go	/^var file_proxy_vless_account_proto_depIdxs = []int32{$/;"	v	package:vless
file_proxy_vless_account_proto_goTypes	proxy/vless/account.pb.go	/^var file_proxy_vless_account_proto_goTypes = []interface{}{$/;"	v	package:vless
file_proxy_vless_account_proto_init	proxy/vless/account.pb.go	/^func file_proxy_vless_account_proto_init() {$/;"	f	package:vless
file_proxy_vless_account_proto_msgTypes	proxy/vless/account.pb.go	/^var file_proxy_vless_account_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:vless
file_proxy_vless_account_proto_rawDesc	proxy/vless/account.pb.go	/^var file_proxy_vless_account_proto_rawDesc = []byte{$/;"	v	package:vless
file_proxy_vless_account_proto_rawDescData	proxy/vless/account.pb.go	/^	file_proxy_vless_account_proto_rawDescData = file_proxy_vless_account_proto_rawDesc$/;"	v	package:vless
file_proxy_vless_account_proto_rawDescGZIP	proxy/vless/account.pb.go	/^func file_proxy_vless_account_proto_rawDescGZIP() []byte {$/;"	f	package:vless	typeref:typename:[]byte
file_proxy_vless_account_proto_rawDescOnce	proxy/vless/account.pb.go	/^	file_proxy_vless_account_proto_rawDescOnce sync.Once$/;"	v	package:vless	typeref:typename:sync.Once
file_proxy_vless_inbound_config_proto_depIdxs	proxy/vless/inbound/config.pb.go	/^var file_proxy_vless_inbound_config_proto_depIdxs = []int32{$/;"	v	package:inbound
file_proxy_vless_inbound_config_proto_goTypes	proxy/vless/inbound/config.pb.go	/^var file_proxy_vless_inbound_config_proto_goTypes = []interface{}{$/;"	v	package:inbound
file_proxy_vless_inbound_config_proto_init	proxy/vless/inbound/config.pb.go	/^func file_proxy_vless_inbound_config_proto_init() {$/;"	f	package:inbound
file_proxy_vless_inbound_config_proto_msgTypes	proxy/vless/inbound/config.pb.go	/^var file_proxy_vless_inbound_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)$/;"	v	package:inbound
file_proxy_vless_inbound_config_proto_rawDesc	proxy/vless/inbound/config.pb.go	/^var file_proxy_vless_inbound_config_proto_rawDesc = []byte{$/;"	v	package:inbound
file_proxy_vless_inbound_config_proto_rawDescData	proxy/vless/inbound/config.pb.go	/^	file_proxy_vless_inbound_config_proto_rawDescData = file_proxy_vless_inbound_config_proto_rawDe/;"	v	package:inbound
file_proxy_vless_inbound_config_proto_rawDescGZIP	proxy/vless/inbound/config.pb.go	/^func file_proxy_vless_inbound_config_proto_rawDescGZIP() []byte {$/;"	f	package:inbound	typeref:typename:[]byte
file_proxy_vless_inbound_config_proto_rawDescOnce	proxy/vless/inbound/config.pb.go	/^	file_proxy_vless_inbound_config_proto_rawDescOnce sync.Once$/;"	v	package:inbound	typeref:typename:sync.Once
file_proxy_vless_outbound_config_proto_depIdxs	proxy/vless/outbound/config.pb.go	/^var file_proxy_vless_outbound_config_proto_depIdxs = []int32{$/;"	v	package:outbound
file_proxy_vless_outbound_config_proto_goTypes	proxy/vless/outbound/config.pb.go	/^var file_proxy_vless_outbound_config_proto_goTypes = []interface{}{$/;"	v	package:outbound
file_proxy_vless_outbound_config_proto_init	proxy/vless/outbound/config.pb.go	/^func file_proxy_vless_outbound_config_proto_init() {$/;"	f	package:outbound
file_proxy_vless_outbound_config_proto_msgTypes	proxy/vless/outbound/config.pb.go	/^var file_proxy_vless_outbound_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:outbound
file_proxy_vless_outbound_config_proto_rawDesc	proxy/vless/outbound/config.pb.go	/^var file_proxy_vless_outbound_config_proto_rawDesc = []byte{$/;"	v	package:outbound
file_proxy_vless_outbound_config_proto_rawDescData	proxy/vless/outbound/config.pb.go	/^	file_proxy_vless_outbound_config_proto_rawDescData = file_proxy_vless_outbound_config_proto_raw/;"	v	package:outbound
file_proxy_vless_outbound_config_proto_rawDescGZIP	proxy/vless/outbound/config.pb.go	/^func file_proxy_vless_outbound_config_proto_rawDescGZIP() []byte {$/;"	f	package:outbound	typeref:typename:[]byte
file_proxy_vless_outbound_config_proto_rawDescOnce	proxy/vless/outbound/config.pb.go	/^	file_proxy_vless_outbound_config_proto_rawDescOnce sync.Once$/;"	v	package:outbound	typeref:typename:sync.Once
file_proxy_vmess_account_proto_depIdxs	proxy/vmess/account.pb.go	/^var file_proxy_vmess_account_proto_depIdxs = []int32{$/;"	v	package:vmess
file_proxy_vmess_account_proto_goTypes	proxy/vmess/account.pb.go	/^var file_proxy_vmess_account_proto_goTypes = []interface{}{$/;"	v	package:vmess
file_proxy_vmess_account_proto_init	proxy/vmess/account.pb.go	/^func file_proxy_vmess_account_proto_init() {$/;"	f	package:vmess
file_proxy_vmess_account_proto_msgTypes	proxy/vmess/account.pb.go	/^var file_proxy_vmess_account_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:vmess
file_proxy_vmess_account_proto_rawDesc	proxy/vmess/account.pb.go	/^var file_proxy_vmess_account_proto_rawDesc = []byte{$/;"	v	package:vmess
file_proxy_vmess_account_proto_rawDescData	proxy/vmess/account.pb.go	/^	file_proxy_vmess_account_proto_rawDescData = file_proxy_vmess_account_proto_rawDesc$/;"	v	package:vmess
file_proxy_vmess_account_proto_rawDescGZIP	proxy/vmess/account.pb.go	/^func file_proxy_vmess_account_proto_rawDescGZIP() []byte {$/;"	f	package:vmess	typeref:typename:[]byte
file_proxy_vmess_account_proto_rawDescOnce	proxy/vmess/account.pb.go	/^	file_proxy_vmess_account_proto_rawDescOnce sync.Once$/;"	v	package:vmess	typeref:typename:sync.Once
file_proxy_vmess_inbound_config_proto_depIdxs	proxy/vmess/inbound/config.pb.go	/^var file_proxy_vmess_inbound_config_proto_depIdxs = []int32{$/;"	v	package:inbound
file_proxy_vmess_inbound_config_proto_goTypes	proxy/vmess/inbound/config.pb.go	/^var file_proxy_vmess_inbound_config_proto_goTypes = []interface{}{$/;"	v	package:inbound
file_proxy_vmess_inbound_config_proto_init	proxy/vmess/inbound/config.pb.go	/^func file_proxy_vmess_inbound_config_proto_init() {$/;"	f	package:inbound
file_proxy_vmess_inbound_config_proto_msgTypes	proxy/vmess/inbound/config.pb.go	/^var file_proxy_vmess_inbound_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)$/;"	v	package:inbound
file_proxy_vmess_inbound_config_proto_rawDesc	proxy/vmess/inbound/config.pb.go	/^var file_proxy_vmess_inbound_config_proto_rawDesc = []byte{$/;"	v	package:inbound
file_proxy_vmess_inbound_config_proto_rawDescData	proxy/vmess/inbound/config.pb.go	/^	file_proxy_vmess_inbound_config_proto_rawDescData = file_proxy_vmess_inbound_config_proto_rawDe/;"	v	package:inbound
file_proxy_vmess_inbound_config_proto_rawDescGZIP	proxy/vmess/inbound/config.pb.go	/^func file_proxy_vmess_inbound_config_proto_rawDescGZIP() []byte {$/;"	f	package:inbound	typeref:typename:[]byte
file_proxy_vmess_inbound_config_proto_rawDescOnce	proxy/vmess/inbound/config.pb.go	/^	file_proxy_vmess_inbound_config_proto_rawDescOnce sync.Once$/;"	v	package:inbound	typeref:typename:sync.Once
file_proxy_vmess_outbound_config_proto_depIdxs	proxy/vmess/outbound/config.pb.go	/^var file_proxy_vmess_outbound_config_proto_depIdxs = []int32{$/;"	v	package:outbound
file_proxy_vmess_outbound_config_proto_goTypes	proxy/vmess/outbound/config.pb.go	/^var file_proxy_vmess_outbound_config_proto_goTypes = []interface{}{$/;"	v	package:outbound
file_proxy_vmess_outbound_config_proto_init	proxy/vmess/outbound/config.pb.go	/^func file_proxy_vmess_outbound_config_proto_init() {$/;"	f	package:outbound
file_proxy_vmess_outbound_config_proto_msgTypes	proxy/vmess/outbound/config.pb.go	/^var file_proxy_vmess_outbound_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:outbound
file_proxy_vmess_outbound_config_proto_rawDesc	proxy/vmess/outbound/config.pb.go	/^var file_proxy_vmess_outbound_config_proto_rawDesc = []byte{$/;"	v	package:outbound
file_proxy_vmess_outbound_config_proto_rawDescData	proxy/vmess/outbound/config.pb.go	/^	file_proxy_vmess_outbound_config_proto_rawDescData = file_proxy_vmess_outbound_config_proto_raw/;"	v	package:outbound
file_proxy_vmess_outbound_config_proto_rawDescGZIP	proxy/vmess/outbound/config.pb.go	/^func file_proxy_vmess_outbound_config_proto_rawDescGZIP() []byte {$/;"	f	package:outbound	typeref:typename:[]byte
file_proxy_vmess_outbound_config_proto_rawDescOnce	proxy/vmess/outbound/config.pb.go	/^	file_proxy_vmess_outbound_config_proto_rawDescOnce sync.Once$/;"	v	package:outbound	typeref:typename:sync.Once
file_transport_config_proto_depIdxs	transport/config.pb.go	/^var file_transport_config_proto_depIdxs = []int32{$/;"	v	package:transport
file_transport_config_proto_goTypes	transport/config.pb.go	/^var file_transport_config_proto_goTypes = []interface{}{$/;"	v	package:transport
file_transport_config_proto_init	transport/config.pb.go	/^func file_transport_config_proto_init() {$/;"	f	package:transport
file_transport_config_proto_msgTypes	transport/config.pb.go	/^var file_transport_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:transport
file_transport_config_proto_rawDesc	transport/config.pb.go	/^var file_transport_config_proto_rawDesc = []byte{$/;"	v	package:transport
file_transport_config_proto_rawDescData	transport/config.pb.go	/^	file_transport_config_proto_rawDescData = file_transport_config_proto_rawDesc$/;"	v	package:transport
file_transport_config_proto_rawDescGZIP	transport/config.pb.go	/^func file_transport_config_proto_rawDescGZIP() []byte {$/;"	f	package:transport	typeref:typename:[]byte
file_transport_config_proto_rawDescOnce	transport/config.pb.go	/^	file_transport_config_proto_rawDescOnce sync.Once$/;"	v	package:transport	typeref:typename:sync.Once
file_transport_internet_config_proto_depIdxs	transport/internet/config.pb.go	/^var file_transport_internet_config_proto_depIdxs = []int32{$/;"	v	package:internet
file_transport_internet_config_proto_enumTypes	transport/internet/config.pb.go	/^var file_transport_internet_config_proto_enumTypes = make([]protoimpl.EnumInfo, 3)$/;"	v	package:internet
file_transport_internet_config_proto_goTypes	transport/internet/config.pb.go	/^var file_transport_internet_config_proto_goTypes = []interface{}{$/;"	v	package:internet
file_transport_internet_config_proto_init	transport/internet/config.pb.go	/^func file_transport_internet_config_proto_init() {$/;"	f	package:internet
file_transport_internet_config_proto_msgTypes	transport/internet/config.pb.go	/^var file_transport_internet_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)$/;"	v	package:internet
file_transport_internet_config_proto_rawDesc	transport/internet/config.pb.go	/^var file_transport_internet_config_proto_rawDesc = []byte{$/;"	v	package:internet
file_transport_internet_config_proto_rawDescData	transport/internet/config.pb.go	/^	file_transport_internet_config_proto_rawDescData = file_transport_internet_config_proto_rawDesc$/;"	v	package:internet
file_transport_internet_config_proto_rawDescGZIP	transport/internet/config.pb.go	/^func file_transport_internet_config_proto_rawDescGZIP() []byte {$/;"	f	package:internet	typeref:typename:[]byte
file_transport_internet_config_proto_rawDescOnce	transport/internet/config.pb.go	/^	file_transport_internet_config_proto_rawDescOnce sync.Once$/;"	v	package:internet	typeref:typename:sync.Once
file_transport_internet_domainsocket_config_proto_depIdxs	transport/internet/domainsocket/config.pb.go	/^var file_transport_internet_domainsocket_config_proto_depIdxs = []int32{$/;"	v	package:domainsocket
file_transport_internet_domainsocket_config_proto_goTypes	transport/internet/domainsocket/config.pb.go	/^var file_transport_internet_domainsocket_config_proto_goTypes = []interface{}{$/;"	v	package:domainsocket
file_transport_internet_domainsocket_config_proto_init	transport/internet/domainsocket/config.pb.go	/^func file_transport_internet_domainsocket_config_proto_init() {$/;"	f	package:domainsocket
file_transport_internet_domainsocket_config_proto_msgTypes	transport/internet/domainsocket/config.pb.go	/^var file_transport_internet_domainsocket_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1/;"	v	package:domainsocket
file_transport_internet_domainsocket_config_proto_rawDesc	transport/internet/domainsocket/config.pb.go	/^var file_transport_internet_domainsocket_config_proto_rawDesc = []byte{$/;"	v	package:domainsocket
file_transport_internet_domainsocket_config_proto_rawDescData	transport/internet/domainsocket/config.pb.go	/^	file_transport_internet_domainsocket_config_proto_rawDescData = file_transport_internet_domains/;"	v	package:domainsocket
file_transport_internet_domainsocket_config_proto_rawDescGZIP	transport/internet/domainsocket/config.pb.go	/^func file_transport_internet_domainsocket_config_proto_rawDescGZIP() []byte {$/;"	f	package:domainsocket	typeref:typename:[]byte
file_transport_internet_domainsocket_config_proto_rawDescOnce	transport/internet/domainsocket/config.pb.go	/^	file_transport_internet_domainsocket_config_proto_rawDescOnce sync.Once$/;"	v	package:domainsocket	typeref:typename:sync.Once
file_transport_internet_headers_http_config_proto_depIdxs	transport/internet/headers/http/config.pb.go	/^var file_transport_internet_headers_http_config_proto_depIdxs = []int32{$/;"	v	package:http
file_transport_internet_headers_http_config_proto_goTypes	transport/internet/headers/http/config.pb.go	/^var file_transport_internet_headers_http_config_proto_goTypes = []interface{}{$/;"	v	package:http
file_transport_internet_headers_http_config_proto_init	transport/internet/headers/http/config.pb.go	/^func file_transport_internet_headers_http_config_proto_init() {$/;"	f	package:http
file_transport_internet_headers_http_config_proto_msgTypes	transport/internet/headers/http/config.pb.go	/^var file_transport_internet_headers_http_config_proto_msgTypes = make([]protoimpl.MessageInfo, 7/;"	v	package:http
file_transport_internet_headers_http_config_proto_rawDesc	transport/internet/headers/http/config.pb.go	/^var file_transport_internet_headers_http_config_proto_rawDesc = []byte{$/;"	v	package:http
file_transport_internet_headers_http_config_proto_rawDescData	transport/internet/headers/http/config.pb.go	/^	file_transport_internet_headers_http_config_proto_rawDescData = file_transport_internet_headers/;"	v	package:http
file_transport_internet_headers_http_config_proto_rawDescGZIP	transport/internet/headers/http/config.pb.go	/^func file_transport_internet_headers_http_config_proto_rawDescGZIP() []byte {$/;"	f	package:http	typeref:typename:[]byte
file_transport_internet_headers_http_config_proto_rawDescOnce	transport/internet/headers/http/config.pb.go	/^	file_transport_internet_headers_http_config_proto_rawDescOnce sync.Once$/;"	v	package:http	typeref:typename:sync.Once
file_transport_internet_headers_noop_config_proto_depIdxs	transport/internet/headers/noop/config.pb.go	/^var file_transport_internet_headers_noop_config_proto_depIdxs = []int32{$/;"	v	package:noop
file_transport_internet_headers_noop_config_proto_goTypes	transport/internet/headers/noop/config.pb.go	/^var file_transport_internet_headers_noop_config_proto_goTypes = []interface{}{$/;"	v	package:noop
file_transport_internet_headers_noop_config_proto_init	transport/internet/headers/noop/config.pb.go	/^func file_transport_internet_headers_noop_config_proto_init() {$/;"	f	package:noop
file_transport_internet_headers_noop_config_proto_msgTypes	transport/internet/headers/noop/config.pb.go	/^var file_transport_internet_headers_noop_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2/;"	v	package:noop
file_transport_internet_headers_noop_config_proto_rawDesc	transport/internet/headers/noop/config.pb.go	/^var file_transport_internet_headers_noop_config_proto_rawDesc = []byte{$/;"	v	package:noop
file_transport_internet_headers_noop_config_proto_rawDescData	transport/internet/headers/noop/config.pb.go	/^	file_transport_internet_headers_noop_config_proto_rawDescData = file_transport_internet_headers/;"	v	package:noop
file_transport_internet_headers_noop_config_proto_rawDescGZIP	transport/internet/headers/noop/config.pb.go	/^func file_transport_internet_headers_noop_config_proto_rawDescGZIP() []byte {$/;"	f	package:noop	typeref:typename:[]byte
file_transport_internet_headers_noop_config_proto_rawDescOnce	transport/internet/headers/noop/config.pb.go	/^	file_transport_internet_headers_noop_config_proto_rawDescOnce sync.Once$/;"	v	package:noop	typeref:typename:sync.Once
file_transport_internet_headers_srtp_config_proto_depIdxs	transport/internet/headers/srtp/config.pb.go	/^var file_transport_internet_headers_srtp_config_proto_depIdxs = []int32{$/;"	v	package:srtp
file_transport_internet_headers_srtp_config_proto_goTypes	transport/internet/headers/srtp/config.pb.go	/^var file_transport_internet_headers_srtp_config_proto_goTypes = []interface{}{$/;"	v	package:srtp
file_transport_internet_headers_srtp_config_proto_init	transport/internet/headers/srtp/config.pb.go	/^func file_transport_internet_headers_srtp_config_proto_init() {$/;"	f	package:srtp
file_transport_internet_headers_srtp_config_proto_msgTypes	transport/internet/headers/srtp/config.pb.go	/^var file_transport_internet_headers_srtp_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1/;"	v	package:srtp
file_transport_internet_headers_srtp_config_proto_rawDesc	transport/internet/headers/srtp/config.pb.go	/^var file_transport_internet_headers_srtp_config_proto_rawDesc = []byte{$/;"	v	package:srtp
file_transport_internet_headers_srtp_config_proto_rawDescData	transport/internet/headers/srtp/config.pb.go	/^	file_transport_internet_headers_srtp_config_proto_rawDescData = file_transport_internet_headers/;"	v	package:srtp
file_transport_internet_headers_srtp_config_proto_rawDescGZIP	transport/internet/headers/srtp/config.pb.go	/^func file_transport_internet_headers_srtp_config_proto_rawDescGZIP() []byte {$/;"	f	package:srtp	typeref:typename:[]byte
file_transport_internet_headers_srtp_config_proto_rawDescOnce	transport/internet/headers/srtp/config.pb.go	/^	file_transport_internet_headers_srtp_config_proto_rawDescOnce sync.Once$/;"	v	package:srtp	typeref:typename:sync.Once
file_transport_internet_headers_tls_config_proto_depIdxs	transport/internet/headers/tls/config.pb.go	/^var file_transport_internet_headers_tls_config_proto_depIdxs = []int32{$/;"	v	package:tls
file_transport_internet_headers_tls_config_proto_goTypes	transport/internet/headers/tls/config.pb.go	/^var file_transport_internet_headers_tls_config_proto_goTypes = []interface{}{$/;"	v	package:tls
file_transport_internet_headers_tls_config_proto_init	transport/internet/headers/tls/config.pb.go	/^func file_transport_internet_headers_tls_config_proto_init() {$/;"	f	package:tls
file_transport_internet_headers_tls_config_proto_msgTypes	transport/internet/headers/tls/config.pb.go	/^var file_transport_internet_headers_tls_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:tls
file_transport_internet_headers_tls_config_proto_rawDesc	transport/internet/headers/tls/config.pb.go	/^var file_transport_internet_headers_tls_config_proto_rawDesc = []byte{$/;"	v	package:tls
file_transport_internet_headers_tls_config_proto_rawDescData	transport/internet/headers/tls/config.pb.go	/^	file_transport_internet_headers_tls_config_proto_rawDescData = file_transport_internet_headers_/;"	v	package:tls
file_transport_internet_headers_tls_config_proto_rawDescGZIP	transport/internet/headers/tls/config.pb.go	/^func file_transport_internet_headers_tls_config_proto_rawDescGZIP() []byte {$/;"	f	package:tls	typeref:typename:[]byte
file_transport_internet_headers_tls_config_proto_rawDescOnce	transport/internet/headers/tls/config.pb.go	/^	file_transport_internet_headers_tls_config_proto_rawDescOnce sync.Once$/;"	v	package:tls	typeref:typename:sync.Once
file_transport_internet_headers_utp_config_proto_depIdxs	transport/internet/headers/utp/config.pb.go	/^var file_transport_internet_headers_utp_config_proto_depIdxs = []int32{$/;"	v	package:utp
file_transport_internet_headers_utp_config_proto_goTypes	transport/internet/headers/utp/config.pb.go	/^var file_transport_internet_headers_utp_config_proto_goTypes = []interface{}{$/;"	v	package:utp
file_transport_internet_headers_utp_config_proto_init	transport/internet/headers/utp/config.pb.go	/^func file_transport_internet_headers_utp_config_proto_init() {$/;"	f	package:utp
file_transport_internet_headers_utp_config_proto_msgTypes	transport/internet/headers/utp/config.pb.go	/^var file_transport_internet_headers_utp_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:utp
file_transport_internet_headers_utp_config_proto_rawDesc	transport/internet/headers/utp/config.pb.go	/^var file_transport_internet_headers_utp_config_proto_rawDesc = []byte{$/;"	v	package:utp
file_transport_internet_headers_utp_config_proto_rawDescData	transport/internet/headers/utp/config.pb.go	/^	file_transport_internet_headers_utp_config_proto_rawDescData = file_transport_internet_headers_/;"	v	package:utp
file_transport_internet_headers_utp_config_proto_rawDescGZIP	transport/internet/headers/utp/config.pb.go	/^func file_transport_internet_headers_utp_config_proto_rawDescGZIP() []byte {$/;"	f	package:utp	typeref:typename:[]byte
file_transport_internet_headers_utp_config_proto_rawDescOnce	transport/internet/headers/utp/config.pb.go	/^	file_transport_internet_headers_utp_config_proto_rawDescOnce sync.Once$/;"	v	package:utp	typeref:typename:sync.Once
file_transport_internet_headers_wechat_config_proto_depIdxs	transport/internet/headers/wechat/config.pb.go	/^var file_transport_internet_headers_wechat_config_proto_depIdxs = []int32{$/;"	v	package:wechat
file_transport_internet_headers_wechat_config_proto_goTypes	transport/internet/headers/wechat/config.pb.go	/^var file_transport_internet_headers_wechat_config_proto_goTypes = []interface{}{$/;"	v	package:wechat
file_transport_internet_headers_wechat_config_proto_init	transport/internet/headers/wechat/config.pb.go	/^func file_transport_internet_headers_wechat_config_proto_init() {$/;"	f	package:wechat
file_transport_internet_headers_wechat_config_proto_msgTypes	transport/internet/headers/wechat/config.pb.go	/^var file_transport_internet_headers_wechat_config_proto_msgTypes = make([]protoimpl.MessageInfo,/;"	v	package:wechat
file_transport_internet_headers_wechat_config_proto_rawDesc	transport/internet/headers/wechat/config.pb.go	/^var file_transport_internet_headers_wechat_config_proto_rawDesc = []byte{$/;"	v	package:wechat
file_transport_internet_headers_wechat_config_proto_rawDescData	transport/internet/headers/wechat/config.pb.go	/^	file_transport_internet_headers_wechat_config_proto_rawDescData = file_transport_internet_heade/;"	v	package:wechat
file_transport_internet_headers_wechat_config_proto_rawDescGZIP	transport/internet/headers/wechat/config.pb.go	/^func file_transport_internet_headers_wechat_config_proto_rawDescGZIP() []byte {$/;"	f	package:wechat	typeref:typename:[]byte
file_transport_internet_headers_wechat_config_proto_rawDescOnce	transport/internet/headers/wechat/config.pb.go	/^	file_transport_internet_headers_wechat_config_proto_rawDescOnce sync.Once$/;"	v	package:wechat	typeref:typename:sync.Once
file_transport_internet_headers_wireguard_config_proto_depIdxs	transport/internet/headers/wireguard/config.pb.go	/^var file_transport_internet_headers_wireguard_config_proto_depIdxs = []int32{$/;"	v	package:wireguard
file_transport_internet_headers_wireguard_config_proto_goTypes	transport/internet/headers/wireguard/config.pb.go	/^var file_transport_internet_headers_wireguard_config_proto_goTypes = []interface{}{$/;"	v	package:wireguard
file_transport_internet_headers_wireguard_config_proto_init	transport/internet/headers/wireguard/config.pb.go	/^func file_transport_internet_headers_wireguard_config_proto_init() {$/;"	f	package:wireguard
file_transport_internet_headers_wireguard_config_proto_msgTypes	transport/internet/headers/wireguard/config.pb.go	/^var file_transport_internet_headers_wireguard_config_proto_msgTypes = make([]protoimpl.MessageIn/;"	v	package:wireguard
file_transport_internet_headers_wireguard_config_proto_rawDesc	transport/internet/headers/wireguard/config.pb.go	/^var file_transport_internet_headers_wireguard_config_proto_rawDesc = []byte{$/;"	v	package:wireguard
file_transport_internet_headers_wireguard_config_proto_rawDescData	transport/internet/headers/wireguard/config.pb.go	/^	file_transport_internet_headers_wireguard_config_proto_rawDescData = file_transport_internet_he/;"	v	package:wireguard
file_transport_internet_headers_wireguard_config_proto_rawDescGZIP	transport/internet/headers/wireguard/config.pb.go	/^func file_transport_internet_headers_wireguard_config_proto_rawDescGZIP() []byte {$/;"	f	package:wireguard	typeref:typename:[]byte
file_transport_internet_headers_wireguard_config_proto_rawDescOnce	transport/internet/headers/wireguard/config.pb.go	/^	file_transport_internet_headers_wireguard_config_proto_rawDescOnce sync.Once$/;"	v	package:wireguard	typeref:typename:sync.Once
file_transport_internet_http_config_proto_depIdxs	transport/internet/http/config.pb.go	/^var file_transport_internet_http_config_proto_depIdxs = []int32{$/;"	v	package:http
file_transport_internet_http_config_proto_goTypes	transport/internet/http/config.pb.go	/^var file_transport_internet_http_config_proto_goTypes = []interface{}{$/;"	v	package:http
file_transport_internet_http_config_proto_init	transport/internet/http/config.pb.go	/^func file_transport_internet_http_config_proto_init() {$/;"	f	package:http
file_transport_internet_http_config_proto_msgTypes	transport/internet/http/config.pb.go	/^var file_transport_internet_http_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:http
file_transport_internet_http_config_proto_rawDesc	transport/internet/http/config.pb.go	/^var file_transport_internet_http_config_proto_rawDesc = []byte{$/;"	v	package:http
file_transport_internet_http_config_proto_rawDescData	transport/internet/http/config.pb.go	/^	file_transport_internet_http_config_proto_rawDescData = file_transport_internet_http_config_pro/;"	v	package:http
file_transport_internet_http_config_proto_rawDescGZIP	transport/internet/http/config.pb.go	/^func file_transport_internet_http_config_proto_rawDescGZIP() []byte {$/;"	f	package:http	typeref:typename:[]byte
file_transport_internet_http_config_proto_rawDescOnce	transport/internet/http/config.pb.go	/^	file_transport_internet_http_config_proto_rawDescOnce sync.Once$/;"	v	package:http	typeref:typename:sync.Once
file_transport_internet_kcp_config_proto_depIdxs	transport/internet/kcp/config.pb.go	/^var file_transport_internet_kcp_config_proto_depIdxs = []int32{$/;"	v	package:kcp
file_transport_internet_kcp_config_proto_goTypes	transport/internet/kcp/config.pb.go	/^var file_transport_internet_kcp_config_proto_goTypes = []interface{}{$/;"	v	package:kcp
file_transport_internet_kcp_config_proto_init	transport/internet/kcp/config.pb.go	/^func file_transport_internet_kcp_config_proto_init() {$/;"	f	package:kcp
file_transport_internet_kcp_config_proto_msgTypes	transport/internet/kcp/config.pb.go	/^var file_transport_internet_kcp_config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)$/;"	v	package:kcp
file_transport_internet_kcp_config_proto_rawDesc	transport/internet/kcp/config.pb.go	/^var file_transport_internet_kcp_config_proto_rawDesc = []byte{$/;"	v	package:kcp
file_transport_internet_kcp_config_proto_rawDescData	transport/internet/kcp/config.pb.go	/^	file_transport_internet_kcp_config_proto_rawDescData = file_transport_internet_kcp_config_proto/;"	v	package:kcp
file_transport_internet_kcp_config_proto_rawDescGZIP	transport/internet/kcp/config.pb.go	/^func file_transport_internet_kcp_config_proto_rawDescGZIP() []byte {$/;"	f	package:kcp	typeref:typename:[]byte
file_transport_internet_kcp_config_proto_rawDescOnce	transport/internet/kcp/config.pb.go	/^	file_transport_internet_kcp_config_proto_rawDescOnce sync.Once$/;"	v	package:kcp	typeref:typename:sync.Once
file_transport_internet_quic_config_proto_depIdxs	transport/internet/quic/config.pb.go	/^var file_transport_internet_quic_config_proto_depIdxs = []int32{$/;"	v	package:quic
file_transport_internet_quic_config_proto_goTypes	transport/internet/quic/config.pb.go	/^var file_transport_internet_quic_config_proto_goTypes = []interface{}{$/;"	v	package:quic
file_transport_internet_quic_config_proto_init	transport/internet/quic/config.pb.go	/^func file_transport_internet_quic_config_proto_init() {$/;"	f	package:quic
file_transport_internet_quic_config_proto_msgTypes	transport/internet/quic/config.pb.go	/^var file_transport_internet_quic_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:quic
file_transport_internet_quic_config_proto_rawDesc	transport/internet/quic/config.pb.go	/^var file_transport_internet_quic_config_proto_rawDesc = []byte{$/;"	v	package:quic
file_transport_internet_quic_config_proto_rawDescData	transport/internet/quic/config.pb.go	/^	file_transport_internet_quic_config_proto_rawDescData = file_transport_internet_quic_config_pro/;"	v	package:quic
file_transport_internet_quic_config_proto_rawDescGZIP	transport/internet/quic/config.pb.go	/^func file_transport_internet_quic_config_proto_rawDescGZIP() []byte {$/;"	f	package:quic	typeref:typename:[]byte
file_transport_internet_quic_config_proto_rawDescOnce	transport/internet/quic/config.pb.go	/^	file_transport_internet_quic_config_proto_rawDescOnce sync.Once$/;"	v	package:quic	typeref:typename:sync.Once
file_transport_internet_tcp_config_proto_depIdxs	transport/internet/tcp/config.pb.go	/^var file_transport_internet_tcp_config_proto_depIdxs = []int32{$/;"	v	package:tcp
file_transport_internet_tcp_config_proto_goTypes	transport/internet/tcp/config.pb.go	/^var file_transport_internet_tcp_config_proto_goTypes = []interface{}{$/;"	v	package:tcp
file_transport_internet_tcp_config_proto_init	transport/internet/tcp/config.pb.go	/^func file_transport_internet_tcp_config_proto_init() {$/;"	f	package:tcp
file_transport_internet_tcp_config_proto_msgTypes	transport/internet/tcp/config.pb.go	/^var file_transport_internet_tcp_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:tcp
file_transport_internet_tcp_config_proto_rawDesc	transport/internet/tcp/config.pb.go	/^var file_transport_internet_tcp_config_proto_rawDesc = []byte{$/;"	v	package:tcp
file_transport_internet_tcp_config_proto_rawDescData	transport/internet/tcp/config.pb.go	/^	file_transport_internet_tcp_config_proto_rawDescData = file_transport_internet_tcp_config_proto/;"	v	package:tcp
file_transport_internet_tcp_config_proto_rawDescGZIP	transport/internet/tcp/config.pb.go	/^func file_transport_internet_tcp_config_proto_rawDescGZIP() []byte {$/;"	f	package:tcp	typeref:typename:[]byte
file_transport_internet_tcp_config_proto_rawDescOnce	transport/internet/tcp/config.pb.go	/^	file_transport_internet_tcp_config_proto_rawDescOnce sync.Once$/;"	v	package:tcp	typeref:typename:sync.Once
file_transport_internet_tls_config_proto_depIdxs	transport/internet/tls/config.pb.go	/^var file_transport_internet_tls_config_proto_depIdxs = []int32{$/;"	v	package:tls
file_transport_internet_tls_config_proto_enumTypes	transport/internet/tls/config.pb.go	/^var file_transport_internet_tls_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v	package:tls
file_transport_internet_tls_config_proto_goTypes	transport/internet/tls/config.pb.go	/^var file_transport_internet_tls_config_proto_goTypes = []interface{}{$/;"	v	package:tls
file_transport_internet_tls_config_proto_init	transport/internet/tls/config.pb.go	/^func file_transport_internet_tls_config_proto_init() {$/;"	f	package:tls
file_transport_internet_tls_config_proto_msgTypes	transport/internet/tls/config.pb.go	/^var file_transport_internet_tls_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)$/;"	v	package:tls
file_transport_internet_tls_config_proto_rawDesc	transport/internet/tls/config.pb.go	/^var file_transport_internet_tls_config_proto_rawDesc = []byte{$/;"	v	package:tls
file_transport_internet_tls_config_proto_rawDescData	transport/internet/tls/config.pb.go	/^	file_transport_internet_tls_config_proto_rawDescData = file_transport_internet_tls_config_proto/;"	v	package:tls
file_transport_internet_tls_config_proto_rawDescGZIP	transport/internet/tls/config.pb.go	/^func file_transport_internet_tls_config_proto_rawDescGZIP() []byte {$/;"	f	package:tls	typeref:typename:[]byte
file_transport_internet_tls_config_proto_rawDescOnce	transport/internet/tls/config.pb.go	/^	file_transport_internet_tls_config_proto_rawDescOnce sync.Once$/;"	v	package:tls	typeref:typename:sync.Once
file_transport_internet_udp_config_proto_depIdxs	transport/internet/udp/config.pb.go	/^var file_transport_internet_udp_config_proto_depIdxs = []int32{$/;"	v	package:udp
file_transport_internet_udp_config_proto_goTypes	transport/internet/udp/config.pb.go	/^var file_transport_internet_udp_config_proto_goTypes = []interface{}{$/;"	v	package:udp
file_transport_internet_udp_config_proto_init	transport/internet/udp/config.pb.go	/^func file_transport_internet_udp_config_proto_init() {$/;"	f	package:udp
file_transport_internet_udp_config_proto_msgTypes	transport/internet/udp/config.pb.go	/^var file_transport_internet_udp_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v	package:udp
file_transport_internet_udp_config_proto_rawDesc	transport/internet/udp/config.pb.go	/^var file_transport_internet_udp_config_proto_rawDesc = []byte{$/;"	v	package:udp
file_transport_internet_udp_config_proto_rawDescData	transport/internet/udp/config.pb.go	/^	file_transport_internet_udp_config_proto_rawDescData = file_transport_internet_udp_config_proto/;"	v	package:udp
file_transport_internet_udp_config_proto_rawDescGZIP	transport/internet/udp/config.pb.go	/^func file_transport_internet_udp_config_proto_rawDescGZIP() []byte {$/;"	f	package:udp	typeref:typename:[]byte
file_transport_internet_udp_config_proto_rawDescOnce	transport/internet/udp/config.pb.go	/^	file_transport_internet_udp_config_proto_rawDescOnce sync.Once$/;"	v	package:udp	typeref:typename:sync.Once
file_transport_internet_websocket_config_proto_depIdxs	transport/internet/websocket/config.pb.go	/^var file_transport_internet_websocket_config_proto_depIdxs = []int32{$/;"	v	package:websocket
file_transport_internet_websocket_config_proto_goTypes	transport/internet/websocket/config.pb.go	/^var file_transport_internet_websocket_config_proto_goTypes = []interface{}{$/;"	v	package:websocket
file_transport_internet_websocket_config_proto_init	transport/internet/websocket/config.pb.go	/^func file_transport_internet_websocket_config_proto_init() {$/;"	f	package:websocket
file_transport_internet_websocket_config_proto_msgTypes	transport/internet/websocket/config.pb.go	/^var file_transport_internet_websocket_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)$/;"	v	package:websocket
file_transport_internet_websocket_config_proto_rawDesc	transport/internet/websocket/config.pb.go	/^var file_transport_internet_websocket_config_proto_rawDesc = []byte{$/;"	v	package:websocket
file_transport_internet_websocket_config_proto_rawDescData	transport/internet/websocket/config.pb.go	/^	file_transport_internet_websocket_config_proto_rawDescData = file_transport_internet_websocket_/;"	v	package:websocket
file_transport_internet_websocket_config_proto_rawDescGZIP	transport/internet/websocket/config.pb.go	/^func file_transport_internet_websocket_config_proto_rawDescGZIP() []byte {$/;"	f	package:websocket	typeref:typename:[]byte
file_transport_internet_websocket_config_proto_rawDescOnce	transport/internet/websocket/config.pb.go	/^	file_transport_internet_websocket_config_proto_rawDescOnce sync.Once$/;"	v	package:websocket	typeref:typename:sync.Once
file_transport_internet_xtls_config_proto_depIdxs	transport/internet/xtls/config.pb.go	/^var file_transport_internet_xtls_config_proto_depIdxs = []int32{$/;"	v	package:xtls
file_transport_internet_xtls_config_proto_enumTypes	transport/internet/xtls/config.pb.go	/^var file_transport_internet_xtls_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v	package:xtls
file_transport_internet_xtls_config_proto_goTypes	transport/internet/xtls/config.pb.go	/^var file_transport_internet_xtls_config_proto_goTypes = []interface{}{$/;"	v	package:xtls
file_transport_internet_xtls_config_proto_init	transport/internet/xtls/config.pb.go	/^func file_transport_internet_xtls_config_proto_init() {$/;"	f	package:xtls
file_transport_internet_xtls_config_proto_msgTypes	transport/internet/xtls/config.pb.go	/^var file_transport_internet_xtls_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)$/;"	v	package:xtls
file_transport_internet_xtls_config_proto_rawDesc	transport/internet/xtls/config.pb.go	/^var file_transport_internet_xtls_config_proto_rawDesc = []byte{$/;"	v	package:xtls
file_transport_internet_xtls_config_proto_rawDescData	transport/internet/xtls/config.pb.go	/^	file_transport_internet_xtls_config_proto_rawDescData = file_transport_internet_xtls_config_pro/;"	v	package:xtls
file_transport_internet_xtls_config_proto_rawDescGZIP	transport/internet/xtls/config.pb.go	/^func file_transport_internet_xtls_config_proto_rawDescGZIP() []byte {$/;"	f	package:xtls	typeref:typename:[]byte
file_transport_internet_xtls_config_proto_rawDescOnce	transport/internet/xtls/config.pb.go	/^	file_transport_internet_xtls_config_proto_rawDescOnce sync.Once$/;"	v	package:xtls	typeref:typename:sync.Once
filesystem	common/platform/filesystem/file.go	/^package filesystem$/;"	p
filterIP	app/dns/hosts.go	/^func filterIP(ips []net.Address, option IPOption) []net.Address {$/;"	f	package:dns	typeref:typename:[]net.Address
findAvailable	common/mux/client.go	/^func (p *IncrementalWorkerPicker) findAvailable() int {$/;"	f	struct:mux.IncrementalWorkerPicker	typeref:typename:int
findIPsForDomain	app/dns/dohdns.go	/^func (s *DoHNameServer) findIPsForDomain(domain string, option IPOption) ([]net.IP, error) {$/;"	f	struct:dns.DoHNameServer	typeref:typename:([]net.IP, error)
findIPsForDomain	app/dns/udpns.go	/^func (s *ClassicNameServer) findIPsForDomain(domain string, option IPOption) ([]net.IP, error) {$/;"	f	struct:dns.ClassicNameServer	typeref:typename:([]net.IP, error)
findInboundTag	infra/conf/v2ray.go	/^func (c *Config) findInboundTag(tag string) int {$/;"	f	struct:conf.Config	typeref:typename:int
findOffset	infra/conf/serial/loader.go	/^func findOffset(b []byte, o int) *offset {$/;"	f	package:serial	typeref:typename:*offset
findOutboundTag	infra/conf/v2ray.go	/^func (c *Config) findOutboundTag(tag string) int {$/;"	f	struct:conf.Config	typeref:typename:int
finish	common/signal/timer.go	/^func (t *ActivityTimer) finish() {$/;"	f	struct:signal.ActivityTimer
firstUnacknowledged	transport/internet/kcp/sending.go	/^	firstUnacknowledged        uint32$/;"	m	struct:kcp.SendingWorker	typeref:typename:uint32
firstUnacknowledgedUpdated	transport/internet/kcp/sending.go	/^	firstUnacknowledgedUpdated bool$/;"	m	struct:kcp.SendingWorker	typeref:typename:bool
flow	proxy/vless/account.proto	/^  string flow = 2;$/;"	f	message:v2ray.core.proxy.vless.Account	typeref:typename:string
flush	transport/internet/kcp/connection.go	/^func (c *Connection) flush() {$/;"	f	struct:kcp.Connection
flushCandidates	transport/internet/kcp/receiving.go	/^	flushCandidates []uint32$/;"	m	struct:kcp.AckList	typeref:typename:[]uint32
flushInternal	common/buf/writer.go	/^func (w *BufferedWriter) flushInternal() error {$/;"	f	struct:buf.BufferedWriter	typeref:typename:error
flushWriter	transport/internet/http/hub.go	/^type flushWriter struct {$/;"	s	package:http
fmt	app/p2p/config.pb.go	/^	fmt "fmt"$/;"	P	package:fmt
fmt	app/p2p/wire/seedlist.pb.go	/^import fmt "fmt"$/;"	P	package:fmt
fmt	proxy/trojan/config.go	/^	fmt "fmt"$/;"	P	package:fmt
fmt	proxy/vless/encoding/addons.pb.go	/^	fmt "fmt"$/;"	P	package:fmt
follow_redirect	proxy/dokodemo/config.proto	/^  bool follow_redirect = 5;$/;"	f	message:v2ray.core.proxy.dokodemo.Config	typeref:typename:bool
followup	common/mux/writer.go	/^	followup     bool$/;"	m	struct:mux.Writer	typeref:typename:bool
formResponseHeader	transport/internet/headers/http/http.go	/^func formResponseHeader(config *ResponseConfig) *HeaderWriter {$/;"	f	package:http	typeref:typename:*HeaderWriter
format	main/main.go	/^	format      = flag.String("format", "json", "Format of input file.")$/;"	v	package:main
freedom	proxy/freedom/config.go	/^package freedom$/;"	p
freedom	proxy/freedom/config.pb.go	/^package freedom$/;"	p
freedom	proxy/freedom/errors.generated.go	/^package freedom$/;"	p
freedom	proxy/freedom/freedom.go	/^package freedom$/;"	p
fullMatcher	common/strmatcher/matchers.go	/^type fullMatcher string$/;"	t	package:strmatcher	typeref:typename:string
fullMatcher	common/strmatcher/strmatcher.go	/^	fullMatcher   FullMatcherGroup$/;"	m	struct:strmatcher.MatcherGroup	typeref:typename:FullMatcherGroup
gRpcService	app/p2p/api.go	/^	gRpcService$/;"	M	struct:p2p.P2PNode	typeref:typename:gRpcService
gRpcService	app/p2p/api.go	/^type gRpcService struct {$/;"	s	package:p2p
genEDNS0Options	app/dns/dnscommon.go	/^func genEDNS0Options(clientIP net.IP) *dnsmessage.Resource {$/;"	f	package:dns	typeref:typename:*dnsmessage.Resource
genTestBinaryPath	testing/scenarios/common.go	/^func genTestBinaryPath() {$/;"	f	package:scenarios
generalLogger	common/log/logger.go	/^type generalLogger struct {$/;"	s	package:log
generate	common/protocol/tls/cert/cert_test.go	/^func generate(domainNames []string, isCA bool, jsonOutput bool, fileOutput string) error {$/;"	f	package:cert	typeref:typename:error
generateCommand	proxy/vmess/inbound/inbound.go	/^func (h *Handler) generateCommand(ctx context.Context, request *protocol.RequestHeader) protocol/;"	f	struct:inbound.Handler	typeref:typename:protocol.ResponseCommand
generateNewHashes	proxy/vmess/validator.go	/^func (v *TimedUserValidator) generateNewHashes(nowSec protocol.Timestamp, user *user) {$/;"	f	struct:vmess.TimedUserValidator
generateRandomBytes	proxy/mtproto/auth.go	/^func generateRandomBytes(random []byte, connType [4]byte) {$/;"	f	package:mtproto
generateRandomTag	app/dns/server.go	/^func generateRandomTag() string {$/;"	f	package:dns	typeref:typename:string
geoip	app/dns/config.proto	/^  repeated v2ray.core.app.router.GeoIP geoip = 3;$/;"	f	message:v2ray.core.app.dns.NameServer	typeref:typename:v2ray.core.app.router.GeoIP
geoip	app/router/config.proto	/^  repeated GeoIP geoip = 10;$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:GeoIP
getAuth	transport/internet/quic/config.go	/^func getAuth(config *Config) (cipher.AEAD, error) {$/;"	f	package:quic	typeref:typename:(cipher.AEAD, error)
getAuthenticationObject	proxy/mtproto/auth.go	/^func getAuthenticationObject() *Authentication {$/;"	f	package:mtproto	typeref:typename:*Authentication
getBuffer	transport/internet/quic/pool.go	/^func getBuffer() []byte {$/;"	f	package:quic	typeref:typename:[]byte
getCertPool	transport/internet/tls/config_other.go	/^func (c *Config) getCertPool() (*x509.CertPool, error) {$/;"	f	unknown:tls.Config	typeref:typename:(*x509.CertPool, error)
getCertPool	transport/internet/tls/config_windows.go	/^func (c *Config) getCertPool() (*x509.CertPool, error) {$/;"	f	unknown:tls.Config	typeref:typename:(*x509.CertPool, error)
getCertPool	transport/internet/xtls/config_other.go	/^func (c *Config) getCertPool() (*x509.CertPool, error) {$/;"	f	unknown:xtls.Config	typeref:typename:(*x509.CertPool, error)
getCertPool	transport/internet/xtls/config_windows.go	/^func (c *Config) getCertPool() (*x509.CertPool, error) {$/;"	f	unknown:xtls.Config	typeref:typename:(*x509.CertPool, error)
getCipher	proxy/shadowsocks/config.go	/^func (a *Account) getCipher() (Cipher, error) {$/;"	f	unknown:shadowsocks.Account	typeref:typename:(Cipher, error)
getCommandName	infra/control/main/main.go	/^func getCommandName() string {$/;"	f	package:main	typeref:typename:string
getConfigFilePath	main/main.go	/^func getConfigFilePath() (cmdarg.Arg, error) {$/;"	f	package:main	typeref:typename:(cmdarg.Arg, error)
getConnection	app/proxyman/inbound/worker.go	/^func (w *udpWorker) getConnection(id connID) (*udpConn, bool) {$/;"	f	struct:inbound.udpWorker	typeref:typename:(*udpConn, bool)
getControlFunc	transport/internet/system_listener.go	/^func getControlFunc(ctx context.Context, sockopt *SocketConfig, controllers []controller) func(n/;"	f	package:internet	typeref:typename:func(network, address string, c syscall.RawConn) error
getCustomCA	transport/internet/tls/config.go	/^func (c *Config) getCustomCA() []*Certificate {$/;"	f	unknown:tls.Config	typeref:typename:[]*Certificate
getCustomCA	transport/internet/xtls/config.go	/^func (c *Config) getCustomCA() []*Certificate {$/;"	f	unknown:xtls.Config	typeref:typename:[]*Certificate
getDomainStrategy	infra/conf/router.go	/^func (c *RouterConfig) getDomainStrategy() router.Config_DomainStrategy {$/;"	f	struct:conf.RouterConfig	typeref:typename:router.Config_DomainStrategy
getExecutableDir	common/platform/platform.go	/^func getExecutableDir() string {$/;"	f	package:platform	typeref:typename:string
getExecutableSubDir	common/platform/platform.go	/^func getExecutableSubDir(dir string) func() string {$/;"	f	package:platform	typeref:typename:func() string
getExtension	config.go	/^func getExtension(filename string) string {$/;"	f	package:core	typeref:typename:string
getFeature	v2ray.go	/^func getFeature(allFeatures []features.Feature, t reflect.Type) features.Feature {$/;"	f	package:core	typeref:typename:features.Feature
getGetCertificateFunc	transport/internet/tls/config.go	/^func getGetCertificateFunc(c *tls.Config, ca []*Certificate) func(hello *tls.ClientHelloInfo) (*/;"	f	package:tls	typeref:typename:func(hello *tls.ClientHelloInfo) (*tls.Certificate, error)
getGetCertificateFunc	transport/internet/xtls/config.go	/^func getGetCertificateFunc(c *xtls.Config, ca []*Certificate) func(hello *xtls.ClientHelloInfo) /;"	f	package:xtls	typeref:typename:func(hello *xtls.ClientHelloInfo) (*xtls.Certificate, error)
getHTTPClient	transport/internet/http/dialer.go	/^func getHTTPClient(ctx context.Context, dest net.Destination, tlsSettings *tls.Config) (*http.Cl/;"	f	package:http	typeref:typename:(*http.Client, error)
getHeader	transport/internet/quic/config.go	/^func getHeader(config *Config) (internet.PacketHeader, error) {$/;"	f	package:quic	typeref:typename:(internet.PacketHeader, error)
getHostMapping	infra/conf/dns.go	/^func getHostMapping(addr *Address) *dns.Config_HostMapping {$/;"	f	package:conf	typeref:typename:*dns.Config_HostMapping
getHosts	transport/internet/http/config.go	/^func (c *Config) getHosts() []string {$/;"	f	unknown:http.Config	typeref:typename:[]string
getIPs	app/dns/dnscommon.go	/^func (r *IPRecord) getIPs() ([]net.Address, error) {$/;"	f	struct:dns.IPRecord	typeref:typename:([]net.Address, error)
getInbound	app/proxyman/command/command.go	/^func getInbound(handler inbound.Handler) (proxy.Inbound, error) {$/;"	f	package:command	typeref:typename:(proxy.Inbound, error)
getInboundRay	transport/internet/udp/dispatcher.go	/^func (v *Dispatcher) getInboundRay(ctx context.Context, dest net.Destination) *connEntry {$/;"	f	struct:udp.Dispatcher	typeref:typename:*connEntry
getLink	app/dispatcher/default.go	/^func (d *DefaultDispatcher) getLink(ctx context.Context) (*transport.Link, *transport.Link) {$/;"	f	struct:dispatcher.DefaultDispatcher	typeref:typename:(*transport.Link, *transport.Link)
getNextFrameMeta	common/mux/writer.go	/^func (w *Writer) getNextFrameMeta() FrameMetadata {$/;"	f	struct:mux.Writer	typeref:typename:FrameMetadata
getNormalizedPath	transport/internet/http/config.go	/^func (c *Config) getNormalizedPath() string {$/;"	f	unknown:http.Config	typeref:typename:string
getRandomHost	transport/internet/http/config.go	/^func (c *Config) getRandomHost() string {$/;"	f	unknown:http.Config	typeref:typename:string
getReader	transport/internet/websocket/connection.go	/^func (c *connection) getReader() (io.Reader, error) {$/;"	f	struct:websocket.connection	typeref:typename:(io.Reader, error)
getServiceMethod	infra/control/api.go	/^func getServiceMethod(s string) (string, string) {$/;"	f	package:control	typeref:typename:(string, string)
getStatCounter	app/proxyman/inbound/always.go	/^func getStatCounter(v *core.Instance, tag string) (stats.Counter, stats.Counter) {$/;"	f	package:inbound	typeref:typename:(stats.Counter, stats.Counter)
getStatCounter	app/proxyman/outbound/handler.go	/^func getStatCounter(v *core.Instance, tag string) (stats.Counter, stats.Counter) {$/;"	f	package:outbound	typeref:typename:(stats.Counter, stats.Counter)
getStatCouterConnection	app/proxyman/outbound/handler.go	/^func (h *Handler) getStatCouterConnection(conn internet.Connection) internet.Connection {$/;"	f	struct:outbound.Handler	typeref:typename:internet.Connection
getState	transport/pipe/impl.go	/^func (p *pipe) getState(forRead bool) error {$/;"	f	struct:pipe.pipe	typeref:typename:error
getSysProcAttr	common/platform/ctlcmd/attr_other.go	/^func getSysProcAttr() *syscall.SysProcAttr {$/;"	f	package:ctlcmd	typeref:typename:*syscall.SysProcAttr
getSysProcAttr	common/platform/ctlcmd/attr_windows.go	/^func getSysProcAttr() *syscall.SysProcAttr {$/;"	f	package:ctlcmd	typeref:typename:*syscall.SysProcAttr
getTProxyType	app/proxyman/inbound/worker.go	/^func getTProxyType(s *internet.MemoryStreamConfig) internet.SocketConfig_TProxyMode {$/;"	f	package:inbound	typeref:typename:internet.SocketConfig_TProxyMode
get_source	release/user-package.sh	/^get_source() {$/;"	f
globalConv	transport/internet/kcp/dialer.go	/^	globalConv = uint32(dice.RollUint16())$/;"	v	package:kcp
globalDialerAccess	transport/internet/http/dialer.go	/^	globalDialerAccess sync.Mutex$/;"	v	package:http	typeref:typename:sync.Mutex
globalDialerMap	transport/internet/http/dialer.go	/^	globalDialerMap    map[net.Destination]*http.Client$/;"	v	package:http	typeref:typename:map[net.Destination]*http.Client
globalGeoIPContainer	app/router/condition_geoip.go	/^	globalGeoIPContainer GeoIPMatcherContainer$/;"	v	package:router	typeref:struct:GeoIPMatcherContainer
globalSessionCache	transport/internet/tls/config.go	/^	globalSessionCache = tls.NewLRUClientSessionCache(128)$/;"	v	package:tls
globalSessionCache	transport/internet/xtls/config.go	/^	globalSessionCache = xtls.NewLRUClientSessionCache(128)$/;"	v	package:xtls
globalTransportConfigCreatorCache	transport/internet/config.go	/^	globalTransportConfigCreatorCache = make(map[string]ConfigCreator)$/;"	v	package:internet
globalTransportSettings	transport/internet/config.go	/^	globalTransportSettings           []*TransportConfig$/;"	v	package:internet	typeref:typename:[]*TransportConfig
gomock	testing/mocks/dns.go	/^	gomock "github.com\/golang\/mock\/gomock"$/;"	P	package:github.com/golang/mock/gomock
gomock	testing/mocks/io.go	/^	gomock "github.com\/golang\/mock\/gomock"$/;"	P	package:github.com/golang/mock/gomock
gomock	testing/mocks/log.go	/^	gomock "github.com\/golang\/mock\/gomock"$/;"	P	package:github.com/golang/mock/gomock
gomock	testing/mocks/mux.go	/^	gomock "github.com\/golang\/mock\/gomock"$/;"	P	package:github.com/golang/mock/gomock
gomock	testing/mocks/outbound.go	/^	gomock "github.com\/golang\/mock\/gomock"$/;"	P	package:github.com/golang/mock/gomock
gomock	testing/mocks/proxy.go	/^	gomock "github.com\/golang\/mock\/gomock"$/;"	P	package:github.com/golang/mock/gomock
gossip	app/p2p/wire/seedlist.proto	/^    bool gossip = 4;         \/\/ true to have receiver peer gossip the message to neighbors$/;"	f	message:wire.MessageData	typeref:typename:bool
gotls	transport/internet/domainsocket/listener.go	/^	gotls "crypto\/tls"$/;"	P	package:crypto/tls
gotls	transport/internet/http/dialer.go	/^	gotls "crypto\/tls"$/;"	P	package:crypto/tls
gotls	transport/internet/kcp/listener.go	/^	gotls "crypto\/tls"$/;"	P	package:crypto/tls
gotls	transport/internet/tcp/hub.go	/^	gotls "crypto\/tls"$/;"	P	package:crypto/tls
gotls	transport/internet/tls/config_test.go	/^	gotls "crypto\/tls"$/;"	P	package:crypto/tls
goxtls	transport/internet/domainsocket/listener.go	/^	goxtls "github.com\/xtls\/go"$/;"	P	package:github.com/xtls/go
goxtls	transport/internet/kcp/listener.go	/^	goxtls "github.com\/xtls\/go"$/;"	P	package:github.com/xtls/go
goxtls	transport/internet/tcp/hub.go	/^	goxtls "github.com\/xtls\/go"$/;"	P	package:github.com/xtls/go
grpc	app/log/command/command.go	/^	grpc "google.golang.org\/grpc"$/;"	P	package:google.golang.org/grpc
grpc	app/log/command/config_grpc.pb.go	/^	grpc "google.golang.org\/grpc"$/;"	P	package:google.golang.org/grpc
grpc	app/p2p/grpc/client.go	/^package grpc$/;"	p
grpc	app/p2p/grpc/server.go	/^package grpc$/;"	p
grpc	app/proxyman/command/command.go	/^	grpc "google.golang.org\/grpc"$/;"	P	package:google.golang.org/grpc
grpc	app/proxyman/command/command_grpc.pb.go	/^	grpc "google.golang.org\/grpc"$/;"	P	package:google.golang.org/grpc
grpc	app/router/command/command_grpc.pb.go	/^	grpc "google.golang.org\/grpc"$/;"	P	package:google.golang.org/grpc
grpc	app/stats/command/command.go	/^	grpc "google.golang.org\/grpc"$/;"	P	package:google.golang.org/grpc
grpc	app/stats/command/command_grpc.pb.go	/^	grpc "google.golang.org\/grpc"$/;"	P	package:google.golang.org/grpc
h2Conn	proxy/http/client.go	/^	h2Conn  *http2.ClientConn$/;"	m	struct:http.h2Conn	typeref:typename:*http2.ClientConn
h2Conn	proxy/http/client.go	/^type h2Conn struct {$/;"	s	package:http
handle	common/mux/server.go	/^func handle(ctx context.Context, s *Session, output buf.Writer) {$/;"	f	package:mux
handleCommand	proxy/vmess/outbound/command.go	/^func (h *Handler) handleCommand(dest net.Destination, cmd protocol.ResponseCommand) {$/;"	f	unknown:outbound.Handler
handleConnect	proxy/http/server.go	/^func (s *Server) handleConnect(ctx context.Context, request *http.Request, reader *bufio.Reader,/;"	f	struct:http.Server	typeref:typename:error
handleConnection	proxy/shadowsocks/server.go	/^func (s *Server) handleConnection(ctx context.Context, conn internet.Connection, dispatcher rout/;"	f	struct:shadowsocks.Server	typeref:typename:error
handleConnection	proxy/trojan/server.go	/^func (s *Server) handleConnection(ctx context.Context, sessionPolicy policy.Session,$/;"	f	struct:trojan.Server	typeref:typename:error
handleConnection	testing/servers/tcp/tcp.go	/^func (server *Server) handleConnection(conn net.Conn) {$/;"	f	struct:tcp.Server
handleConnection	testing/servers/udp/udp.go	/^func (server *Server) handleConnection(conn *net.UDPConn) {$/;"	f	struct:udp.Server
handleFrame	common/mux/server.go	/^func (w *ServerWorker) handleFrame(ctx context.Context, reader *buf.BufferedReader) error {$/;"	f	struct:mux.ServerWorker	typeref:typename:error
handleIPQuery	proxy/dns/dns.go	/^func (h *Handler) handleIPQuery(id uint16, qType dnsmessage.Type, domain string, writer dns_prot/;"	f	struct:dns.Handler
handleInput	transport/internet/udp/dispatcher.go	/^func handleInput(ctx context.Context, conn *connEntry, dest net.Destination, callback ResponseCa/;"	f	package:udp
handleInternalConn	app/reverse/bridge.go	/^func (w *BridgeWorker) handleInternalConn(link transport.Link) {$/;"	f	struct:reverse.BridgeWorker
handlePackets	app/proxyman/inbound/worker.go	/^func (w *udpWorker) handlePackets() {$/;"	f	struct:inbound.udpWorker
handlePackets	transport/internet/kcp/listener.go	/^func (l *Listener) handlePackets() {$/;"	f	struct:kcp.Listener
handlePlainHTTP	proxy/http/server.go	/^func (s *Server) handlePlainHTTP(ctx context.Context, request *http.Request, writer io.Writer, d/;"	f	struct:http.Server	typeref:typename:error
handleStatueKeepAlive	common/mux/client.go	/^func (m *ClientWorker) handleStatueKeepAlive(meta *FrameMetadata, reader *buf.BufferedReader) er/;"	f	struct:mux.ClientWorker	typeref:typename:error
handleStatusEnd	common/mux/client.go	/^func (m *ClientWorker) handleStatusEnd(meta *FrameMetadata, reader *buf.BufferedReader) error {$/;"	f	struct:mux.ClientWorker	typeref:typename:error
handleStatusEnd	common/mux/server.go	/^func (w *ServerWorker) handleStatusEnd(meta *FrameMetadata, reader *buf.BufferedReader) error {$/;"	f	struct:mux.ServerWorker	typeref:typename:error
handleStatusKeep	common/mux/client.go	/^func (m *ClientWorker) handleStatusKeep(meta *FrameMetadata, reader *buf.BufferedReader) error {$/;"	f	struct:mux.ClientWorker	typeref:typename:error
handleStatusKeep	common/mux/server.go	/^func (w *ServerWorker) handleStatusKeep(meta *FrameMetadata, reader *buf.BufferedReader) error {$/;"	f	struct:mux.ServerWorker	typeref:typename:error
handleStatusKeepAlive	common/mux/server.go	/^func (w *ServerWorker) handleStatusKeepAlive(meta *FrameMetadata, reader *buf.BufferedReader) er/;"	f	struct:mux.ServerWorker	typeref:typename:error
handleStatusNew	common/mux/client.go	/^func (m *ClientWorker) handleStatusNew(meta *FrameMetadata, reader *buf.BufferedReader) error {$/;"	f	struct:mux.ClientWorker	typeref:typename:error
handleStatusNew	common/mux/server.go	/^func (w *ServerWorker) handleStatusNew(ctx context.Context, meta *FrameMetadata, reader *buf.Buf/;"	f	struct:mux.ServerWorker	typeref:typename:error
handleSwitchAccount	proxy/vmess/outbound/command.go	/^func (h *Handler) handleSwitchAccount(cmd *protocol.CommandSwitchAccount) {$/;"	f	unknown:outbound.Handler
handleUDP	proxy/socks/server.go	/^func (*Server) handleUDP(c io.Reader) error {$/;"	f	struct:socks.Server	typeref:typename:error
handleUDPPayload	proxy/socks/server.go	/^func (s *Server) handleUDPPayload(ctx context.Context, conn internet.Connection, dispatcher rout/;"	f	struct:socks.Server	typeref:typename:error
handleUDPPayload	proxy/trojan/server.go	/^func (s *Server) handleUDPPayload(ctx context.Context, clientReader *PacketReader, clientWriter /;"	f	struct:trojan.Server	typeref:typename:error
handler	transport/internet/http/hub.go	/^	handler internet.ConnHandler$/;"	m	struct:http.Listener	typeref:typename:internet.ConnHandler
handlerCreatorMap	app/log/log_creator.go	/^	handlerCreatorMap = make(map[LogType]HandlerCreator)$/;"	v	package:log
handlerServer	app/proxyman/command/command.go	/^type handlerServer struct {$/;"	s	package:command
handlerServiceClient	app/proxyman/command/command_grpc.pb.go	/^type handlerServiceClient struct {$/;"	s	package:command
handlerUDPPayload	proxy/shadowsocks/server.go	/^func (s *Server) handlerUDPPayload(ctx context.Context, conn internet.Connection, dispatcher rou/;"	f	struct:shadowsocks.Server	typeref:typename:error
handlerservice	infra/conf/api.go	/^	handlerservice "v2ray.com\/core\/app\/proxyman\/command"$/;"	P	package:v2ray.com/core/app/proxyman/command
handshake	app/policy/config.proto	/^    Second handshake = 1;$/;"	f	message:v2ray.core.app.policy.Policy.Timeout	typeref:typename:Second
handshake4	proxy/socks/protocol.go	/^func (s *ServerSession) handshake4(cmd byte, reader io.Reader, writer io.Writer) (*protocol.Requ/;"	f	struct:socks.ServerSession	typeref:typename:(*protocol.RequestHeader, error)
handshake5	proxy/socks/protocol.go	/^func (s *ServerSession) handshake5(nMethod byte, reader io.Reader, writer io.Writer) (*protocol./;"	f	struct:socks.ServerSession	typeref:typename:(*protocol.RequestHeader, error)
hasAuthMethod	proxy/socks/protocol.go	/^func hasAuthMethod(expectedAuth byte, authCandidates []byte) bool {$/;"	f	package:socks	typeref:typename:bool
hasBindAddr	transport/internet/system_dialer.go	/^func hasBindAddr(sockopt *SocketConfig) bool {$/;"	f	package:internet	typeref:typename:bool
hasClosed	common/task/periodic.go	/^func (t *Periodic) hasClosed() bool {$/;"	f	struct:task.Periodic	typeref:typename:bool
hasError	common/mux/writer.go	/^	hasError     bool$/;"	m	struct:mux.Writer	typeref:typename:bool
hasHandshakeAddress	proxy/dokodemo/dokodemo.go	/^type hasHandshakeAddress interface {$/;"	i	package:dokodemo
hasInnerError	common/errors/errors.go	/^type hasInnerError interface {$/;"	i	package:errors
hasSeverity	common/errors/errors.go	/^type hasSeverity interface {$/;"	i	package:errors
hasSize	common/crypto/auth.go	/^	hasSize      bool$/;"	m	struct:crypto.AuthenticationReader	typeref:typename:bool
hashTimestamp	proxy/vmess/encoding/client.go	/^func hashTimestamp(h hash.Hash, t protocol.Timestamp) []byte {$/;"	f	package:encoding	typeref:typename:[]byte
hasher	proxy/vmess/validator.go	/^	hasher   protocol.IDHash$/;"	m	struct:vmess.TimedUserValidator	typeref:typename:protocol.IDHash
header	transport/internet/headers/http/config.proto	/^  repeated Header header = 3;$/;"	f	message:v2ray.core.transport.internet.headers.http.ResponseConfig	typeref:typename:Header
header	transport/internet/headers/http/config.proto	/^  repeated Header header = 4;$/;"	f	message:v2ray.core.transport.internet.headers.http.RequestConfig	typeref:typename:Header
header	transport/internet/headers/http/http.go	/^	header *buf.Buffer$/;"	m	struct:http.HeaderWriter	typeref:typename:*buf.Buffer
header	transport/internet/headers/srtp/srtp.go	/^	header uint16$/;"	m	struct:srtp.SRTP	typeref:typename:uint16
header	transport/internet/headers/utp/utp.go	/^	header       byte$/;"	m	struct:utp.UTP	typeref:typename:byte
header	transport/internet/kcp/listener.go	/^	header     internet.PacketHeader$/;"	m	struct:kcp.Listener	typeref:typename:internet.PacketHeader
header	transport/internet/quic/config.proto	/^  v2ray.core.common.serial.TypedMessage header = 3;$/;"	f	message:v2ray.core.transport.internet.quic.Config	typeref:typename:v2ray.core.common.serial.TypedMessage
header	transport/internet/quic/conn.go	/^	header internet.PacketHeader$/;"	m	struct:quic.sysConn	typeref:typename:internet.PacketHeader
header	transport/internet/websocket/config.proto	/^  repeated Header header = 3;$/;"	f	message:v2ray.core.transport.internet.websocket.Config	typeref:typename:Header
headerParsed	proxy/trojan/protocol.go	/^	headerParsed bool$/;"	m	struct:trojan.ConnReader	typeref:typename:bool
headerSent	proxy/trojan/protocol.go	/^	headerSent bool$/;"	m	struct:trojan.ConnWriter	typeref:typename:bool
header_config	transport/internet/kcp/config.proto	/^  v2ray.core.common.serial.TypedMessage header_config = 8;$/;"	f	message:v2ray.core.transport.internet.kcp.Config	typeref:typename:v2ray.core.common.serial.TypedMessage
header_settings	transport/internet/tcp/config.proto	/^  v2ray.core.common.serial.TypedMessage header_settings = 2;$/;"	f	message:v2ray.core.transport.internet.tcp.Config	typeref:typename:v2ray.core.common.serial.TypedMessage
heartbeat	app/reverse/portal.go	/^func (w *PortalWorker) heartbeat() error {$/;"	f	struct:reverse.PortalWorker	typeref:typename:error
hexSha224	proxy/trojan/config.go	/^func hexSha224(password string) []byte {$/;"	f	package:trojan	typeref:typename:[]byte
hexString	proxy/trojan/config.go	/^func hexString(data []byte) string {$/;"	f	package:trojan	typeref:typename:string
hiddenCommand	infra/control/command.go	/^type hiddenCommand interface {$/;"	i	package:control
hkdfSHA1	proxy/shadowsocks/config.go	/^func hkdfSHA1(secret, salt, outkey []byte) {$/;"	f	package:shadowsocks
host	common/protocol/http/sniff.go	/^	host    string$/;"	m	struct:http.SniffHeader	typeref:typename:string
host	transport/internet/http/config.proto	/^  repeated string host = 1;$/;"	f	message:v2ray.core.transport.internet.http.Config	typeref:typename:string
hostID	app/p2p/wire/seedlist.proto	/^    string hostID = 4;$/;"	f	message:wire.SeedInfo	typeref:typename:string
hosts	app/dns/server.go	/^	hosts         *StaticHosts$/;"	m	struct:dns.Server	typeref:typename:*StaticHosts
http	common/protocol/http/headers.go	/^package http$/;"	p
http	common/protocol/http/sniff.go	/^package http$/;"	p
http	proxy/http/client.go	/^package http$/;"	p
http	proxy/http/config.go	/^package http$/;"	p
http	proxy/http/config.pb.go	/^package http$/;"	p
http	proxy/http/errors.generated.go	/^package http$/;"	p
http	proxy/http/http.go	/^package http$/;"	p
http	proxy/http/server.go	/^package http$/;"	p
http	transport/internet/headers/http/config.go	/^package http$/;"	p
http	transport/internet/headers/http/config.pb.go	/^package http$/;"	p
http	transport/internet/headers/http/errors.generated.go	/^package http$/;"	p
http	transport/internet/headers/http/http.go	/^package http$/;"	p
http	transport/internet/headers/http/linkedreadRequest.go	/^package http$/;"	p
http	transport/internet/headers/http/resp.go	/^package http$/;"	p
http	transport/internet/http/config.go	/^package http$/;"	p
http	transport/internet/http/config.pb.go	/^package http$/;"	p
http	transport/internet/http/dialer.go	/^package http$/;"	p
http	transport/internet/http/errors.generated.go	/^package http$/;"	p
http	transport/internet/http/http.go	/^package http$/;"	p
http	transport/internet/http/hub.go	/^package http$/;"	p
http2Conn	proxy/http/client.go	/^type http2Conn struct {$/;"	s	package:http
http403response	proxy/blackhole/config.go	/^	http403response = `HTTP\/1.1 403 Forbidden$/;"	c	package:blackhole
httpClient	app/dns/dohdns.go	/^	httpClient *http.Client$/;"	m	struct:dns.DoHNameServer	typeref:typename:*http.Client
http_proto	proxy/http/server.go	/^	http_proto "v2ray.com\/core\/common\/protocol\/http"$/;"	P	package:v2ray.com/core/common/protocol/http
http_proto	transport/internet/http/hub.go	/^	http_proto "v2ray.com\/core\/common\/protocol\/http"$/;"	P	package:v2ray.com/core/common/protocol/http
http_proto	transport/internet/websocket/hub.go	/^	http_proto "v2ray.com\/core\/common\/protocol\/http"$/;"	P	package:v2ray.com/core/common/protocol/http
http_test	common/protocol/http/headers_test.go	/^package http_test$/;"	p
http_test	common/protocol/http/sniff_test.go	/^package http_test$/;"	p
http_test	transport/internet/headers/http/http_test.go	/^package http_test$/;"	p
http_test	transport/internet/http/http_test.go	/^package http_test$/;"	p
hub	app/proxyman/inbound/worker.go	/^	hub             *udp.Hub$/;"	m	struct:inbound.udpWorker	typeref:typename:*udp.Hub
hub	app/proxyman/inbound/worker.go	/^	hub internet.Listener$/;"	m	struct:inbound.tcpWorker	typeref:typename:internet.Listener
hub	transport/internet/kcp/listener.go	/^	hub        *udp.Hub$/;"	m	struct:kcp.Listener	typeref:typename:*udp.Hub
hub	transport/internet/kcp/listener.go	/^	hub      *udp.Hub$/;"	m	struct:kcp.Writer	typeref:typename:*udp.Hub
id	app/p2p/wire/seedlist.proto	/^    string id = 3;           \/\/ allows requesters to use request data when processing a respon/;"	f	message:wire.MessageData	typeref:typename:string
id	common/mux/writer.go	/^	id           uint16$/;"	m	struct:mux.Writer	typeref:typename:uint16
id	common/strmatcher/strmatcher.go	/^	id uint32$/;"	m	struct:strmatcher.matcherEntry	typeref:typename:uint32
id	proxy/vless/account.proto	/^  string id = 1;$/;"	f	message:v2ray.core.proxy.vless.Account	typeref:typename:string
id	proxy/vmess/account.proto	/^  string id = 1;$/;"	f	message:v2ray.core.proxy.vmess.Account	typeref:typename:string
id	release/config/vpoint_vmess_freedom.json	/^          "id": "23ad6b10-8d1a-40f7-8ad0-e3e35cd38297",$/;"	s	object:inbounds.0.settings.clients.0
id	transport/internet/kcp/listener.go	/^	id       ConnectionID$/;"	m	struct:kcp.Writer	typeref:typename:ConnectionID
idHash	proxy/vmess/encoding/client.go	/^	idHash          protocol.IDHash$/;"	m	struct:encoding.ClientSession	typeref:typename:protocol.IDHash
idKey	infra/conf/loader.go	/^	idKey     string$/;"	m	struct:conf.JSONConfigLoader	typeref:typename:string
idSessionKey	common/session/context.go	/^	idSessionKey sessionKey = iota$/;"	c	package:session	typeref:type:sessionKey
ihm	app/proxyman/command/command.go	/^	ihm inbound.Manager$/;"	m	struct:command.handlerServer	typeref:typename:inbound.Manager
in	proxy/http/client.go	/^	in  *io.PipeWriter$/;"	m	struct:http.http2Conn	typeref:typename:*io.PipeWriter
inbound	app/proxyman/command/command.proto	/^  core.InboundHandlerConfig inbound = 1;$/;"	f	message:v2ray.core.app.proxyman.command.AddInboundRequest	typeref:typename:core.InboundHandlerConfig
inbound	app/proxyman/inbound/always.go	/^package inbound$/;"	p
inbound	app/proxyman/inbound/dynamic.go	/^package inbound$/;"	p
inbound	app/proxyman/inbound/errors.generated.go	/^package inbound$/;"	p
inbound	app/proxyman/inbound/inbound.go	/^package inbound$/;"	p
inbound	app/proxyman/inbound/worker.go	/^package inbound$/;"	p
inbound	config.proto	/^  repeated InboundHandlerConfig inbound = 1;$/;"	f	message:v2ray.core.Config	typeref:typename:InboundHandlerConfig
inbound	features/inbound/inbound.go	/^package inbound$/;"	p
inbound	proxy/vless/inbound/config.go	/^package inbound$/;"	p
inbound	proxy/vless/inbound/config.pb.go	/^package inbound$/;"	p
inbound	proxy/vless/inbound/errors.generated.go	/^package inbound$/;"	p
inbound	proxy/vless/inbound/inbound.go	/^package inbound$/;"	p
inbound	proxy/vmess/inbound/config.go	/^package inbound$/;"	p
inbound	proxy/vmess/inbound/config.pb.go	/^package inbound$/;"	p
inbound	proxy/vmess/inbound/errors.generated.go	/^package inbound$/;"	p
inbound	proxy/vmess/inbound/inbound.go	/^package inbound$/;"	p
inboundConfigLoader	infra/conf/v2ray.go	/^	inboundConfigLoader = NewJSONConfigLoader(ConfigCreatorCache{$/;"	v	package:conf
inboundHandlerManager	proxy/vless/inbound/inbound.go	/^	inboundHandlerManager feature_inbound.Manager$/;"	m	struct:inbound.Handler	typeref:typename:feature_inbound.Manager
inboundHandlerManager	proxy/vmess/inbound/inbound.go	/^	inboundHandlerManager feature_inbound.Manager$/;"	m	struct:inbound.Handler	typeref:typename:feature_inbound.Manager
inboundSessionKey	common/session/context.go	/^	inboundSessionKey$/;"	c	package:session
inbound_downlink	app/policy/config.proto	/^    bool inbound_downlink = 2;$/;"	f	message:v2ray.core.app.policy.SystemPolicy.Stats	typeref:typename:bool
inbound_tag	app/router/config.proto	/^  repeated string inbound_tag = 8;$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:string
inbound_uplink	app/policy/config.proto	/^    bool inbound_uplink = 1;$/;"	f	message:v2ray.core.app.policy.SystemPolicy.Stats	typeref:typename:bool
inbounds	bin/config/config-client-prod.json	/^  "inbounds": [$/;"	a
inbounds	bin/config/config-client.json	/^  "inbounds": [$/;"	a
inbounds	bin/config/ss-client.json	/^  "inbounds": [$/;"	a
inbounds	bin/config/ss-server.json	/^  "inbounds": [$/;"	a
inbounds	release/config/vpoint_socks_vmess.json	/^  "inbounds": [{$/;"	a
inbounds	release/config/vpoint_vmess_freedom.json	/^  "inbounds": [{$/;"	a
indexTimePair	proxy/vmess/validator.go	/^type indexTimePair struct {$/;"	s	package:vmess
info	release/config/config.json	/^    \/\/ Log level, one of "debug", "info", "warning", "error", "none"$/;"	z	object:log
init	app/commander/commander.go	/^func init() {$/;"	f	package:commander
init	app/commander/config.pb.go	/^func init() { file_app_commander_config_proto_init() }$/;"	f	package:commander
init	app/dispatcher/config.pb.go	/^func init() { file_app_dispatcher_config_proto_init() }$/;"	f	package:dispatcher
init	app/dispatcher/default.go	/^func init() {$/;"	f	package:dispatcher
init	app/dns/config.pb.go	/^func init() { file_app_dns_config_proto_init() }$/;"	f	package:dns
init	app/dns/server.go	/^func init() {$/;"	f	package:dns
init	app/log/command/command.go	/^func init() {$/;"	f	package:command
init	app/log/command/config.pb.go	/^func init() { file_app_log_command_config_proto_init() }$/;"	f	package:command
init	app/log/config.pb.go	/^func init() { file_app_log_config_proto_init() }$/;"	f	package:log
init	app/log/log.go	/^func init() {$/;"	f	package:log
init	app/log/log_creator.go	/^func init() {$/;"	f	package:log
init	app/p2p/config.pb.go	/^func init() {$/;"	f	package:p2p
init	app/p2p/p2p.go	/^func init() {$/;"	f	package:p2p
init	app/p2p/wire/init.go	/^func init() {$/;"	f	package:wire
init	app/p2p/wire/notifier.pb.go	/^func init() { proto.RegisterFile("notifier.proto", fileDescriptor_1c0fc606bc4470de) }$/;"	f	package:wire
init	app/p2p/wire/notifier.pb.go	/^func init() {$/;"	f	package:wire
init	app/p2p/wire/seedlist.pb.go	/^func init() { proto.RegisterFile("seedlist.proto", fileDescriptor_seedlist_53892d8491644e45) }$/;"	f	package:wire
init	app/p2p/wire/seedlist.pb.go	/^func init() {$/;"	f	package:wire
init	app/policy/config.pb.go	/^func init() { file_app_policy_config_proto_init() }$/;"	f	package:policy
init	app/policy/manager.go	/^func init() {$/;"	f	package:policy
init	app/proxyman/command/command.go	/^func init() {$/;"	f	package:command
init	app/proxyman/command/command.pb.go	/^func init() { file_app_proxyman_command_command_proto_init() }$/;"	f	package:command
init	app/proxyman/config.pb.go	/^func init() { file_app_proxyman_config_proto_init() }$/;"	f	package:proxyman
init	app/proxyman/inbound/inbound.go	/^func init() {$/;"	f	package:inbound
init	app/proxyman/outbound/outbound.go	/^func init() {$/;"	f	package:outbound
init	app/reverse/config.pb.go	/^func init() { file_app_reverse_config_proto_init() }$/;"	f	package:reverse
init	app/reverse/reverse.go	/^func init() {$/;"	f	package:reverse
init	app/router/command/command.go	/^func init() {$/;"	f	package:command
init	app/router/command/command.pb.go	/^func init() { file_app_router_command_command_proto_init() }$/;"	f	package:command
init	app/router/condition_geoip_test.go	/^func init() {$/;"	f	package:router_test
init	app/router/condition_test.go	/^func init() {$/;"	f	package:router_test
init	app/router/config.pb.go	/^func init() { file_app_router_config_proto_init() }$/;"	f	package:router
init	app/router/router.go	/^func init() {$/;"	f	package:router
init	app/stats/command/command.go	/^func init() {$/;"	f	package:command
init	app/stats/command/command.pb.go	/^func init() { file_app_stats_command_command_proto_init() }$/;"	f	package:command
init	app/stats/config.pb.go	/^func init() { file_app_stats_config_proto_init() }$/;"	f	package:stats
init	app/stats/stats.go	/^func init() {$/;"	f	package:stats
init	common/buf/readv_reader.go	/^func init() {$/;"	f	package:buf
init	common/bytespool/pool.go	/^func init() {$/;"	f	package:bytespool
init	common/dice/dice.go	/^func init() {$/;"	f	package:dice
init	common/log/log.pb.go	/^func init() { file_common_log_log_proto_init() }$/;"	f	package:log
init	common/log/logger.go	/^func init() {$/;"	f	package:log
init	common/net/address.pb.go	/^func init() { file_common_net_address_proto_init() }$/;"	f	package:net
init	common/net/destination.pb.go	/^func init() { file_common_net_destination_proto_init() }$/;"	f	package:net
init	common/net/network.pb.go	/^func init() { file_common_net_network_proto_init() }$/;"	f	package:net
init	common/net/port.pb.go	/^func init() { file_common_net_port_proto_init() }$/;"	f	package:net
init	common/protocol/headers.pb.go	/^func init() { file_common_protocol_headers_proto_init() }$/;"	f	package:protocol
init	common/protocol/server_spec.pb.go	/^func init() { file_common_protocol_server_spec_proto_init() }$/;"	f	package:protocol
init	common/protocol/user.pb.go	/^func init() { file_common_protocol_user_proto_init() }$/;"	f	package:protocol
init	common/serial/typed_message.pb.go	/^func init() { file_common_serial_typed_message_proto_init() }$/;"	f	package:serial
init	config.go	/^func init() {$/;"	f	package:core
init	config.pb.go	/^func init() { file_config_proto_init() }$/;"	f	package:core
init	features/policy/policy.go	/^func init() {$/;"	f	package:policy
init	infra/conf/command/command.go	/^func init() {$/;"	f	package:command
init	infra/conf/dns_test.go	/^func init() {$/;"	f	package:conf_test
init	infra/control/api.go	/^func init() {$/;"	f	package:control
init	infra/control/cert.go	/^func init() {$/;"	f	package:control
init	infra/control/config.go	/^func init() {$/;"	f	package:control
init	infra/control/fetch.go	/^func init() {$/;"	f	package:control
init	infra/control/love.go	/^func init() {$/;"	f	package:control
init	infra/control/tlsping.go	/^func init() {$/;"	f	package:control
init	infra/control/uuid.go	/^func init() {$/;"	f	package:control
init	infra/control/verify.go	/^func init() {$/;"	f	package:control
init	main/confloader/external/external.go	/^func init() {$/;"	f	package:external
init	main/distro/debug/debug.go	/^func init() {$/;"	f	package:debug
init	main/json/config_json.go	/^func init() {$/;"	f	package:json
init	main/jsonem/jsonem.go	/^func init() {$/;"	f	package:jsonem
init	proxy/blackhole/blackhole.go	/^func init() {$/;"	f	package:blackhole
init	proxy/blackhole/config.pb.go	/^func init() { file_proxy_blackhole_config_proto_init() }$/;"	f	package:blackhole
init	proxy/dns/config.pb.go	/^func init() { file_proxy_dns_config_proto_init() }$/;"	f	package:dns
init	proxy/dns/dns.go	/^func init() {$/;"	f	package:dns
init	proxy/dokodemo/config.pb.go	/^func init() { file_proxy_dokodemo_config_proto_init() }$/;"	f	package:dokodemo
init	proxy/dokodemo/dokodemo.go	/^func init() {$/;"	f	package:dokodemo
init	proxy/freedom/config.pb.go	/^func init() { file_proxy_freedom_config_proto_init() }$/;"	f	package:freedom
init	proxy/freedom/freedom.go	/^func init() {$/;"	f	package:freedom
init	proxy/http/client.go	/^func init() {$/;"	f	package:http
init	proxy/http/config.pb.go	/^func init() { file_proxy_http_config_proto_init() }$/;"	f	package:http
init	proxy/http/server.go	/^func init() {$/;"	f	package:http
init	proxy/mtproto/client.go	/^func init() {$/;"	f	package:mtproto
init	proxy/mtproto/config.pb.go	/^func init() { file_proxy_mtproto_config_proto_init() }$/;"	f	package:mtproto
init	proxy/mtproto/server.go	/^func init() {$/;"	f	package:mtproto
init	proxy/shadowsocks/client.go	/^func init() {$/;"	f	package:shadowsocks
init	proxy/shadowsocks/config.pb.go	/^func init() { file_proxy_shadowsocks_config_proto_init() }$/;"	f	package:shadowsocks
init	proxy/shadowsocks/server.go	/^func init() {$/;"	f	package:shadowsocks
init	proxy/socks/client.go	/^func init() {$/;"	f	package:socks
init	proxy/socks/config.pb.go	/^func init() { file_proxy_socks_config_proto_init() }$/;"	f	package:socks
init	proxy/socks/server.go	/^func init() {$/;"	f	package:socks
init	proxy/trojan/client.go	/^func init() {$/;"	f	package:trojan
init	proxy/trojan/config.pb.go	/^func init() { file_proxy_trojan_config_proto_init() }$/;"	f	package:trojan
init	proxy/trojan/server.go	/^func init() {$/;"	f	package:trojan
init	proxy/vless/account.pb.go	/^func init() { file_proxy_vless_account_proto_init() }$/;"	f	package:vless
init	proxy/vless/encoding/addons.pb.go	/^func init() { proto.RegisterFile("proxy\/vless\/encoding\/addons.proto", fileDescriptor_75ab671b/;"	f	package:encoding
init	proxy/vless/encoding/addons.pb.go	/^func init() {$/;"	f	package:encoding
init	proxy/vless/inbound/config.pb.go	/^func init() { file_proxy_vless_inbound_config_proto_init() }$/;"	f	package:inbound
init	proxy/vless/inbound/inbound.go	/^func init() {$/;"	f	package:inbound
init	proxy/vless/outbound/config.pb.go	/^func init() { file_proxy_vless_outbound_config_proto_init() }$/;"	f	package:outbound
init	proxy/vless/outbound/outbound.go	/^func init() {$/;"	f	package:outbound
init	proxy/vmess/account.pb.go	/^func init() { file_proxy_vmess_account_proto_init() }$/;"	f	package:vmess
init	proxy/vmess/inbound/config.pb.go	/^func init() { file_proxy_vmess_inbound_config_proto_init() }$/;"	f	package:inbound
init	proxy/vmess/inbound/inbound.go	/^func init() {$/;"	f	package:inbound
init	proxy/vmess/outbound/config.pb.go	/^func init() { file_proxy_vmess_outbound_config_proto_init() }$/;"	f	package:outbound
init	proxy/vmess/outbound/outbound.go	/^func init() {$/;"	f	package:outbound
init	transport/config.pb.go	/^func init() { file_transport_config_proto_init() }$/;"	f	package:transport
init	transport/internet/config.pb.go	/^func init() { file_transport_internet_config_proto_init() }$/;"	f	package:internet
init	transport/internet/domainsocket/config.go	/^func init() {$/;"	f	package:domainsocket
init	transport/internet/domainsocket/config.pb.go	/^func init() { file_transport_internet_domainsocket_config_proto_init() }$/;"	f	package:domainsocket
init	transport/internet/domainsocket/dial.go	/^func init() {$/;"	f	package:domainsocket
init	transport/internet/domainsocket/listener.go	/^func init() {$/;"	f	package:domainsocket
init	transport/internet/headers/http/config.pb.go	/^func init() { file_transport_internet_headers_http_config_proto_init() }$/;"	f	package:http
init	transport/internet/headers/http/http.go	/^func init() {$/;"	f	package:http
init	transport/internet/headers/noop/config.pb.go	/^func init() { file_transport_internet_headers_noop_config_proto_init() }$/;"	f	package:noop
init	transport/internet/headers/noop/noop.go	/^func init() {$/;"	f	package:noop
init	transport/internet/headers/srtp/config.pb.go	/^func init() { file_transport_internet_headers_srtp_config_proto_init() }$/;"	f	package:srtp
init	transport/internet/headers/srtp/srtp.go	/^func init() {$/;"	f	package:srtp
init	transport/internet/headers/tls/config.pb.go	/^func init() { file_transport_internet_headers_tls_config_proto_init() }$/;"	f	package:tls
init	transport/internet/headers/tls/dtls.go	/^func init() {$/;"	f	package:tls
init	transport/internet/headers/utp/config.pb.go	/^func init() { file_transport_internet_headers_utp_config_proto_init() }$/;"	f	package:utp
init	transport/internet/headers/utp/utp.go	/^func init() {$/;"	f	package:utp
init	transport/internet/headers/wechat/config.pb.go	/^func init() { file_transport_internet_headers_wechat_config_proto_init() }$/;"	f	package:wechat
init	transport/internet/headers/wechat/wechat.go	/^func init() {$/;"	f	package:wechat
init	transport/internet/headers/wireguard/config.pb.go	/^func init() { file_transport_internet_headers_wireguard_config_proto_init() }$/;"	f	package:wireguard
init	transport/internet/headers/wireguard/wireguard.go	/^func init() {$/;"	f	package:wireguard
init	transport/internet/http/config.go	/^func init() {$/;"	f	package:http
init	transport/internet/http/config.pb.go	/^func init() { file_transport_internet_http_config_proto_init() }$/;"	f	package:http
init	transport/internet/http/dialer.go	/^func init() {$/;"	f	package:http
init	transport/internet/http/hub.go	/^func init() {$/;"	f	package:http
init	transport/internet/kcp/config.go	/^func init() {$/;"	f	package:kcp
init	transport/internet/kcp/config.pb.go	/^func init() { file_transport_internet_kcp_config_proto_init() }$/;"	f	package:kcp
init	transport/internet/kcp/dialer.go	/^func init() {$/;"	f	package:kcp
init	transport/internet/kcp/listener.go	/^func init() {$/;"	f	package:kcp
init	transport/internet/quic/config.pb.go	/^func init() { file_transport_internet_quic_config_proto_init() }$/;"	f	package:quic
init	transport/internet/quic/dialer.go	/^func init() {$/;"	f	package:quic
init	transport/internet/quic/hub.go	/^func init() {$/;"	f	package:quic
init	transport/internet/quic/pool.go	/^func init() {$/;"	f	package:quic
init	transport/internet/quic/quic.go	/^func init() {$/;"	f	package:quic
init	transport/internet/tcp/config.go	/^func init() {$/;"	f	package:tcp
init	transport/internet/tcp/config.pb.go	/^func init() { file_transport_internet_tcp_config_proto_init() }$/;"	f	package:tcp
init	transport/internet/tcp/dialer.go	/^func init() {$/;"	f	package:tcp
init	transport/internet/tcp/hub.go	/^func init() {$/;"	f	package:tcp
init	transport/internet/tls/config.pb.go	/^func init() { file_transport_internet_tls_config_proto_init() }$/;"	f	package:tls
init	transport/internet/udp/config.go	/^func init() {$/;"	f	package:udp
init	transport/internet/udp/config.pb.go	/^func init() { file_transport_internet_udp_config_proto_init() }$/;"	f	package:udp
init	transport/internet/udp/dialer.go	/^func init() {$/;"	f	package:udp
init	transport/internet/websocket/config.go	/^func init() {$/;"	f	package:websocket
init	transport/internet/websocket/config.pb.go	/^func init() { file_transport_internet_websocket_config_proto_init() }$/;"	f	package:websocket
init	transport/internet/websocket/dialer.go	/^func init() {$/;"	f	package:websocket
init	transport/internet/websocket/hub.go	/^func init() {$/;"	f	package:websocket
init	transport/internet/xtls/config.pb.go	/^func init() { file_transport_internet_xtls_config_proto_init() }$/;"	f	package:xtls
initAccessLogger	app/log/log.go	/^func (g *Instance) initAccessLogger() error {$/;"	f	struct:log.Instance	typeref:typename:error
initErrorLogger	app/log/log.go	/^func (g *Instance) initErrorLogger() error {$/;"	f	struct:log.Instance	typeref:typename:error
initInstanceWithConfig	v2ray.go	/^func initInstanceWithConfig(config *Config, server *Instance) (error, bool) {$/;"	f	package:core	typeref:typename:(error, bool)
inner	common/errors/errors.go	/^	inner    error$/;"	m	struct:errors.Error	typeref:typename:error
input	common/mux/session.go	/^	input        buf.Reader$/;"	m	struct:mux.Session	typeref:typename:buf.Reader
int_value	app/router/config.proto	/^      int64 int_value = 3;$/;"	f	oneof:v2ray.core.app.router.Domain.Attribute.typed_value	typeref:typename:int64
interConn	transport/internet/quic/conn.go	/^type interConn struct {$/;"	s	package:quic
internal	common/crypto/internal/chacha.go	/^package internal$/;"	p
internal	common/crypto/internal/chacha_core.generated.go	/^package internal$/;"	p
internalDomain	app/reverse/reverse.go	/^	internalDomain = "reverse.internal.v2ray.com"$/;"	c	package:reverse
internalDomain	transport/internet/quic/quic.go	/^const internalDomain = "quic.internal.v2ray.com"$/;"	c	package:quic
internet	app/proxyman/config.pb.go	/^	internet "v2ray.com\/core\/transport\/internet"$/;"	P	package:v2ray.com/core/transport/internet
internet	testing/mocks/proxy.go	/^	internet "v2ray.com\/core\/transport\/internet"$/;"	P	package:v2ray.com/core/transport/internet
internet	transport/config.pb.go	/^	internet "v2ray.com\/core\/transport\/internet"$/;"	P	package:v2ray.com/core/transport/internet
internet	transport/internet/config.go	/^package internet$/;"	p
internet	transport/internet/config.pb.go	/^package internet$/;"	p
internet	transport/internet/connection.go	/^package internet$/;"	p
internet	transport/internet/dialer.go	/^package internet$/;"	p
internet	transport/internet/errors.generated.go	/^package internet$/;"	p
internet	transport/internet/header.go	/^package internet$/;"	p
internet	transport/internet/internet.go	/^package internet$/;"	p
internet	transport/internet/memory_settings.go	/^package internet$/;"	p
internet	transport/internet/sockopt.go	/^package internet$/;"	p
internet	transport/internet/sockopt_darwin.go	/^package internet$/;"	p
internet	transport/internet/sockopt_freebsd.go	/^package internet$/;"	p
internet	transport/internet/sockopt_linux.go	/^package internet$/;"	p
internet	transport/internet/sockopt_other.go	/^package internet$/;"	p
internet	transport/internet/sockopt_windows.go	/^package internet$/;"	p
internet	transport/internet/system_dialer.go	/^package internet$/;"	p
internet	transport/internet/system_listener.go	/^package internet$/;"	p
internet	transport/internet/tcp_hub.go	/^package internet$/;"	p
internet_test	transport/internet/dialer_test.go	/^package internet_test$/;"	p
internet_test	transport/internet/header_test.go	/^package internet_test$/;"	p
internet_test	transport/internet/sockopt_linux_test.go	/^package internet_test$/;"	p
internet_test	transport/internet/sockopt_test.go	/^package internet_test$/;"	p
internet_test	transport/internet/system_listener_test.go	/^package internet_test$/;"	p
interval	transport/internet/kcp/connection.go	/^	interval        int64$/;"	m	struct:kcp.Updater	typeref:typename:int64
intro	core.go	/^	intro    = "A unified platform for anti-censorship."$/;"	v	package:core
invalidSeed	app/p2p/protocol/seedlist/seedlist.go	/^	invalidSeed []Seed \/\/ does not work seed$/;"	m	struct:seedlist.SeedListProtocol	typeref:typename:[]Seed
io	app/p2p/wire/seedlist.pb.go	/^import io "io"$/;"	P	package:io
io	proxy/vless/encoding/addons.pb.go	/^	io "io"$/;"	P	package:io
ioctl	transport/internet/sockopt_freebsd.go	/^func ioctl(s uintptr, ioc int, b []byte) error {$/;"	f	package:internet	typeref:typename:error
iovecs	common/buf/readv_posix.go	/^	iovecs []syscall.Iovec$/;"	m	struct:buf.posixReader	typeref:typename:[]syscall.Iovec
iovs	common/buf/readv_unix.go	/^	iovs [][]byte$/;"	m	struct:buf.unixReader	typeref:typename:[][]byte
ip	app/dns/config.proto	/^    repeated bytes ip = 3;$/;"	f	message:v2ray.core.app.dns.Config.HostMapping	typeref:typename:bytes
ip	app/p2p/config.proto	/^    string ip = 2;$/;"	f	message:v2ray.core.app.p2p.Config	typeref:typename:string
ip	app/p2p/config.proto	/^    string ip = 2;$/;"	f	message:v2ray.core.app.p2p.seed	typeref:typename:string
ip	app/p2p/wire/seedlist.proto	/^    string ip = 2;$/;"	f	message:wire.SeedInfo	typeref:typename:string
ip	app/router/config.proto	/^  bytes ip = 1;$/;"	f	message:v2ray.core.app.router.CIDR	typeref:typename:bytes
ip	bin/config/ss-server.json	/^        "ip": "127.0.0.1",$/;"	s	object:p2p.seedlist.0
ip	bin/config/ss-server.json	/^    "ip": "127.0.0.1",$/;"	s	object:p2p
ip	common/net/address.proto	/^    bytes ip = 1;$/;"	f	oneof:v2ray.core.common.net.IPOrDomain.address	typeref:typename:bytes
ip	release/config/vpoint_socks_vmess.json	/^      "ip": "127.0.0.1"$/;"	s	object:inbounds.0.settings
ip	release/config/vpoint_vmess_freedom.json	/^        "ip": ["geoip:private"],$/;"	a	object:routing.rules.0
ip4	app/router/condition_geoip.go	/^	ip4         []uint32$/;"	m	struct:router.GeoIPMatcher	typeref:typename:[]uint32
ip6	app/router/condition_geoip.go	/^	ip6         []ipv6$/;"	m	struct:router.GeoIPMatcher	typeref:typename:[]ipv6
ipIndexMap	app/dns/server.go	/^	ipIndexMap    []*MultiGeoIPMatcher \/\/ clientIdx -> *MultiGeoIPMatcher$/;"	m	struct:dns.Server	typeref:typename:[]*MultiGeoIPMatcher
ips	app/dns/dohdns.go	/^	ips        map[string]record$/;"	m	struct:dns.DoHNameServer	typeref:typename:map[string]record
ips	app/dns/hosts.go	/^	ips      [][]net.Address$/;"	m	struct:dns.StaticHosts	typeref:typename:[][]net.Address
ips	app/dns/udpns.go	/^	ips       map[string]record$/;"	m	struct:dns.ClassicNameServer	typeref:typename:map[string]record
ipv4Address	common/net/address.go	/^type ipv4Address [4]byte$/;"	t	package:net	typeref:typename:[4]byte
ipv4Lookup	proxy/dns/dns.go	/^	ipv4Lookup      dns.IPv4Lookup$/;"	m	struct:dns.Handler	typeref:typename:dns.IPv4Lookup
ipv6	app/router/condition_geoip.go	/^type ipv6 struct {$/;"	s	package:router
ipv6Address	common/net/address.go	/^type ipv6Address [16]byte$/;"	t	package:net	typeref:typename:[16]byte
ipv6Lookup	proxy/dns/dns.go	/^	ipv6Lookup      dns.IPv6Lookup$/;"	m	struct:dns.Handler	typeref:typename:dns.IPv6Lookup
isAEAD	proxy/vmess/encoding/client.go	/^	isAEAD          bool$/;"	m	struct:encoding.ClientSession	typeref:typename:bool
isAEADForced	proxy/vmess/encoding/server.go	/^	isAEADForced bool$/;"	m	struct:encoding.ServerSession	typeref:typename:bool
isAEADRequest	proxy/vmess/encoding/server.go	/^	isAEADRequest bool$/;"	m	struct:encoding.ServerSession	typeref:typename:bool
isActive	transport/internet/quic/dialer.go	/^func isActive(s quic.Session) bool {$/;"	f	package:quic	typeref:typename:bool
isAlphaNum	common/net/address.go	/^func isAlphaNum(c byte) bool {$/;"	f	package:net	typeref:typename:bool
isCertificateExpired	transport/internet/tls/config.go	/^func isCertificateExpired(c *tls.Certificate) bool {$/;"	f	package:tls	typeref:typename:bool
isCertificateExpired	transport/internet/xtls/config.go	/^func isCertificateExpired(c *xtls.Certificate) bool {$/;"	f	package:xtls	typeref:typename:bool
isDomain	app/reverse/reverse.go	/^func isDomain(dest net.Destination, domain string) bool {$/;"	f	package:reverse	typeref:typename:bool
isDomainTooLong	common/protocol/headers.go	/^func isDomainTooLong(domain string) bool {$/;"	f	package:protocol	typeref:typename:bool
isDomain_Attribute_TypedValue	app/router/config.pb.go	/^	isDomain_Attribute_TypedValue()$/;"	n	interface:router.isDomain_Attribute_TypedValue
isDomain_Attribute_TypedValue	app/router/config.pb.go	/^func (*Domain_Attribute_BoolValue) isDomain_Attribute_TypedValue() {}$/;"	f	struct:router.Domain_Attribute_BoolValue
isDomain_Attribute_TypedValue	app/router/config.pb.go	/^func (*Domain_Attribute_IntValue) isDomain_Attribute_TypedValue() {}$/;"	f	struct:router.Domain_Attribute_IntValue
isDomain_Attribute_TypedValue	app/router/config.pb.go	/^type isDomain_Attribute_TypedValue interface {$/;"	i	package:router
isFull	transport/pipe/impl.go	/^func (o *pipeOption) isFull(curSize int32) bool {$/;"	f	struct:pipe.pipeOption	typeref:typename:bool
isIPOrDomain_Address	common/net/address.pb.go	/^	isIPOrDomain_Address()$/;"	n	interface:net.isIPOrDomain_Address
isIPOrDomain_Address	common/net/address.pb.go	/^func (*IPOrDomain_Domain) isIPOrDomain_Address() {}$/;"	f	struct:net.IPOrDomain_Domain
isIPOrDomain_Address	common/net/address.pb.go	/^func (*IPOrDomain_Ip) isIPOrDomain_Address() {}$/;"	f	struct:net.IPOrDomain_Ip
isIPOrDomain_Address	common/net/address.pb.go	/^type isIPOrDomain_Address interface {$/;"	i	package:net
isInsecureEncryption	proxy/vmess/inbound/inbound.go	/^func isInsecureEncryption(s protocol.SecurityType) bool {$/;"	f	package:inbound	typeref:typename:bool
isInternalDomain	app/reverse/reverse.go	/^func isInternalDomain(dest net.Destination) bool {$/;"	f	package:reverse	typeref:typename:bool
isNewer	app/dns/dnscommon.go	/^func isNewer(baseRec *IPRecord, newRec *IPRecord) bool {$/;"	f	package:dns	typeref:typename:bool
isOwnLink	proxy/dns/dns.go	/^func (h *Handler) isOwnLink(ctx context.Context) bool {$/;"	f	struct:dns.Handler	typeref:typename:bool
isPacketReader	common/buf/io.go	/^func isPacketReader(reader io.Reader) bool {$/;"	f	package:buf	typeref:typename:bool
isPacketWriter	common/buf/io.go	/^func isPacketWriter(writer io.Writer) bool {$/;"	f	package:buf	typeref:typename:bool
isRoutingRule_TargetTag	app/router/config.pb.go	/^	isRoutingRule_TargetTag()$/;"	n	interface:router.isRoutingRule_TargetTag
isRoutingRule_TargetTag	app/router/config.pb.go	/^func (*RoutingRule_BalancingTag) isRoutingRule_TargetTag() {}$/;"	f	struct:router.RoutingRule_BalancingTag
isRoutingRule_TargetTag	app/router/config.pb.go	/^func (*RoutingRule_Tag) isRoutingRule_TargetTag() {}$/;"	f	struct:router.RoutingRule_Tag
isRoutingRule_TargetTag	app/router/config.pb.go	/^type isRoutingRule_TargetTag interface {$/;"	i	package:router
isTCPSocket	transport/internet/sockopt.go	/^func isTCPSocket(network string) bool {$/;"	f	package:internet	typeref:typename:bool
isTimeout	proxy/http/server.go	/^func isTimeout(err error) bool {$/;"	f	package:http	typeref:typename:bool
isUDPSocket	transport/internet/sockopt.go	/^func isUDPSocket(network string) bool {$/;"	f	package:internet	typeref:typename:bool
isValidAddress	proxy/freedom/freedom.go	/^func isValidAddress(addr *net.IPOrDomain) bool {$/;"	f	package:freedom	typeref:typename:bool
isValidConnectionType	proxy/mtproto/server.go	/^func isValidConnectionType(c [4]byte) bool {$/;"	f	package:mtproto	typeref:typename:bool
isValidDomain	common/protocol/address.go	/^func isValidDomain(d string) bool {$/;"	f	package:protocol	typeref:typename:bool
isValidHost	transport/internet/http/config.go	/^func (c *Config) isValidHost(host string) bool {$/;"	f	unknown:http.Config	typeref:typename:bool
issueCertificate	transport/internet/tls/config.go	/^func issueCertificate(rawCA *Certificate, domain string) (*tls.Certificate, error) {$/;"	f	package:tls	typeref:typename:(*tls.Certificate, error)
issueCertificate	transport/internet/xtls/config.go	/^func issueCertificate(rawCA *Certificate, domain string) (*xtls.Certificate, error) {$/;"	f	package:xtls	typeref:typename:(*xtls.Certificate, error)
json	infra/conf/json/reader.go	/^package json$/;"	p
json	main/json/config_json.go	/^package json$/;"	p
json	main/json/errors.generated.go	/^package json$/;"	p
jsonCert	common/protocol/tls/cert/cert_test.go	/^type jsonCert struct {$/;"	s	package:cert
jsonCert	infra/control/cert.go	/^type jsonCert struct {$/;"	s	package:control
json_reader	infra/conf/serial/loader.go	/^	json_reader "v2ray.com\/core\/infra\/conf\/json"$/;"	P	package:v2ray.com/core/infra/conf/json
json_test	infra/conf/json/reader_test.go	/^package json_test$/;"	p
jsonem	main/jsonem/errors.generated.go	/^package jsonem$/;"	p
jsonem	main/jsonem/jsonem.go	/^package jsonem$/;"	p
kcp	transport/internet/kcp/config.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/config.pb.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/connection.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/crypt.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/cryptreal.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/dialer.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/errors.generated.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/io.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/kcp.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/listener.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/output.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/receiving.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/segment.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/sending.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/xor.go	/^package kcp$/;"	p
kcp	transport/internet/kcp/xor_amd64.go	/^package kcp$/;"	p
kcpHeaderLoader	infra/conf/transport_internet.go	/^	kcpHeaderLoader = NewJSONConfigLoader(ConfigCreatorCache{$/;"	v	package:conf
kcp_test	transport/internet/kcp/connection_test.go	/^package kcp_test$/;"	p
kcp_test	transport/internet/kcp/crypt_test.go	/^package kcp_test$/;"	p
kcp_test	transport/internet/kcp/io_test.go	/^package kcp_test$/;"	p
kcp_test	transport/internet/kcp/kcp_test.go	/^package kcp_test$/;"	p
kcp_test	transport/internet/kcp/segment_test.go	/^package kcp_test$/;"	p
keepAccepting	transport/internet/quic/hub.go	/^func (l *Listener) keepAccepting() {$/;"	f	struct:quic.Listener
keepAccepting	transport/internet/tcp/hub.go	/^func (v *Listener) keepAccepting() {$/;"	f	struct:tcp.Listener
key	app/router/config.proto	/^    string key = 1;$/;"	f	message:v2ray.core.app.router.Domain.Attribute	typeref:typename:string
key	common/protocol/context.go	/^type key int$/;"	t	package:protocol	typeref:typename:int
key	proxy/vmess/encoding/server.go	/^	key   [16]byte$/;"	m	struct:encoding.sessionId	typeref:typename:[16]byte
key	transport/internet/quic/config.proto	/^  string key = 1;$/;"	f	message:v2ray.core.transport.internet.quic.Config	typeref:typename:string
key	transport/internet/websocket/config.proto	/^  string key = 1;$/;"	f	message:v2ray.core.transport.internet.websocket.Header	typeref:typename:string
lastActivityTime	app/proxyman/inbound/worker.go	/^	lastActivityTime int64 \/\/ in seconds$/;"	m	struct:inbound.udpConn	typeref:typename:int64
lastIncomingTime	transport/internet/kcp/connection.go	/^	lastIncomingTime uint32$/;"	m	struct:kcp.Connection	typeref:typename:uint32
lastPingTime	transport/internet/kcp/connection.go	/^	lastPingTime     uint32$/;"	m	struct:kcp.Connection	typeref:typename:uint32
lastRefresh	app/proxyman/inbound/dynamic.go	/^	lastRefresh    time.Time$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:time.Time
lastSec	proxy/vmess/validator.go	/^	lastSec protocol.Timestamp$/;"	m	struct:vmess.user	typeref:typename:protocol.Timestamp
lastSwapTime	common/antireplay/antireplay.go	/^	lastSwapTime   int64$/;"	m	struct:antireplay.AntiReplayWindow	typeref:typename:int64
leftOver	transport/internet/kcp/receiving.go	/^	leftOver   buf.MultiBuffer$/;"	m	struct:kcp.ReceivingWorker	typeref:typename:buf.MultiBuffer
leftOverSize	common/crypto/chunk.go	/^	leftOverSize int32$/;"	m	struct:crypto.ChunkStreamReader	typeref:typename:int32
length	transport/internet/headers/tls/dtls.go	/^	length   uint16$/;"	m	struct:tls.DTLS	typeref:typename:uint16
less6	app/router/condition_geoip.go	/^func less6(a ipv6, b ipv6) bool {$/;"	f	package:router	typeref:typename:bool
level	app/policy/config.proto	/^  map<uint32, Policy> level = 1;$/;"	f	message:v2ray.core.app.policy.Config	typeref:typename:map<uint32,Policy>
level	common/protocol/user.proto	/^  uint32 level = 1;$/;"	f	message:v2ray.core.common.protocol.User	typeref:typename:uint32
level	proxy/vmess/inbound/config.proto	/^  uint32 level = 2;$/;"	f	message:v2ray.core.proxy.vmess.inbound.DefaultConfig	typeref:typename:uint32
level	release/config/vpoint_vmess_freedom.json	/^          "level": 1,$/;"	n	object:inbounds.0.settings.clients.0
levels	app/policy/manager.go	/^	levels map[uint32]*Policy$/;"	m	struct:policy.Instance	typeref:typename:map[uint32]*Policy
levels	release/config/vpoint_socks_vmess.json	/^    "levels": {$/;"	o	object:policy
limit	transport/pipe/impl.go	/^	limit           int32 \/\/ maximum buffer size in bytes$/;"	m	struct:pipe.pipeOption	typeref:typename:int32
line	infra/conf/serial/loader.go	/^	line int$/;"	m	struct:serial.offset	typeref:typename:int
link	common/mux/client.go	/^	link           transport.Link$/;"	m	struct:mux.ClientWorker	typeref:typename:transport.Link
link	common/mux/server.go	/^	link           *transport.Link$/;"	m	struct:mux.ServerWorker	typeref:typename:*transport.Link
link	transport/internet/udp/dispatcher.go	/^	link   *transport.Link$/;"	m	struct:udp.connEntry	typeref:typename:*transport.Link
linux	Makefile	/^linux:$/;"	t
list	app/router/condition.go	/^	list [8]bool$/;"	m	struct:router.NetworkMatcher	typeref:typename:[8]bool
listen	app/proxyman/config.proto	/^  v2ray.core.common.net.IPOrDomain listen = 2;$/;"	f	message:v2ray.core.app.proxyman.ReceiverConfig	typeref:typename:v2ray.core.common.net.IPOrDomain
listen	release/config/vpoint_socks_vmess.json	/^    "listen": "127.0.0.1",$/;"	s	object:inbounds.0
listener	app/commander/outbound.go	/^	listener *OutboundListener$/;"	m	struct:commander.Outbound	typeref:typename:*OutboundListener
listener	testing/servers/tcp/tcp.go	/^	listener     net.Listener$/;"	m	struct:tcp.Server	typeref:typename:net.Listener
listener	transport/internet/kcp/listener.go	/^	listener *Listener$/;"	m	struct:kcp.Writer	typeref:typename:*Listener
listener	transport/internet/quic/hub.go	/^	listener quic.Listener$/;"	m	struct:quic.Listener	typeref:typename:quic.Listener
listener	transport/internet/tcp/hub.go	/^	listener   net.Listener$/;"	m	struct:tcp.Listener	typeref:typename:net.Listener
listener	transport/internet/websocket/hub.go	/^	listener net.Listener$/;"	m	struct:websocket.Listener	typeref:typename:net.Listener
ln	transport/internet/domainsocket/listener.go	/^	ln         net.Listener$/;"	m	struct:domainsocket.Listener	typeref:typename:net.Listener
ln	transport/internet/websocket/hub.go	/^	ln   *Listener$/;"	m	struct:websocket.requestHandler	typeref:typename:*Listener
load	transport/internet/tls/config_other.go	/^func (c *rootCertsCache) load() (*x509.CertPool, error) {$/;"	f	struct:tls.rootCertsCache	typeref:typename:(*x509.CertPool, error)
load	transport/internet/xtls/config_other.go	/^func (c *rootCertsCache) load() (*x509.CertPool, error) {$/;"	f	struct:xtls.rootCertsCache	typeref:typename:(*x509.CertPool, error)
loadGeoIP	app/router/condition_geoip_test.go	/^func loadGeoIP(country string) ([]*router.CIDR, error) {$/;"	f	package:router_test	typeref:typename:([]*router.CIDR, error)
loadGeoIP	infra/conf/router.go	/^func loadGeoIP(country string) ([]*router.CIDR, error) {$/;"	f	package:conf	typeref:typename:([]*router.CIDR, error)
loadGeoSite	app/router/condition_test.go	/^func loadGeoSite(country string) ([]*Domain, error) {$/;"	f	package:router_test	typeref:typename:([]*Domain, error)
loadGeositeWithAttr	infra/conf/router.go	/^func loadGeositeWithAttr(file string, siteWithAttr string) ([]*router.Domain, error) {$/;"	f	package:conf	typeref:typename:([]*router.Domain, error)
loadIP	infra/conf/router.go	/^func loadIP(filename, country string) ([]*router.CIDR, error) {$/;"	f	package:conf	typeref:typename:([]*router.CIDR, error)
loadJSON	infra/conf/general_test.go	/^func loadJSON(creator func() Buildable) func(string) (proto.Message, error) {$/;"	f	package:conf_test	typeref:typename:func(string) (proto.Message, error)
loadProtobufConfig	config.go	/^func loadProtobufConfig(data []byte) (*Config, error) {$/;"	f	package:core	typeref:typename:(*Config, error)
loadSelfCertPool	transport/internet/tls/config.go	/^func (c *Config) loadSelfCertPool() (*x509.CertPool, error) {$/;"	f	unknown:tls.Config	typeref:typename:(*x509.CertPool, error)
loadSelfCertPool	transport/internet/xtls/config.go	/^func (c *Config) loadSelfCertPool() (*x509.CertPool, error) {$/;"	f	unknown:xtls.Config	typeref:typename:(*x509.CertPool, error)
loadSite	infra/conf/router.go	/^func loadSite(filename, country string) ([]*router.Domain, error) {$/;"	f	package:conf	typeref:typename:([]*router.Domain, error)
local	app/proxyman/inbound/worker.go	/^	local            net.Addr$/;"	m	struct:inbound.udpConn	typeref:typename:net.Addr
local	common/net/connection.go	/^	local   Addr$/;"	m	struct:net.connection	typeref:typename:Addr
local	transport/internet/http/hub.go	/^	local   net.Addr$/;"	m	struct:http.Listener	typeref:typename:net.Addr
local	transport/internet/quic/conn.go	/^	local  net.Addr$/;"	m	struct:quic.interConn	typeref:typename:net.Addr
localNameServer	app/dns/nameserver.go	/^type localNameServer struct {$/;"	s	package:dns
localdns	features/dns/localdns/client.go	/^package localdns$/;"	p
lock	common/antireplay/antireplay.go	/^	lock           sync.Mutex$/;"	m	struct:antireplay.AntiReplayWindow	typeref:typename:sync.Mutex
locker	transport/internet/domainsocket/listener.go	/^	locker     *fileLocker$/;"	m	struct:domainsocket.Listener	typeref:typename:*fileLocker
log	app/log/config.pb.go	/^	log "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
log	app/log/config.pb.go	/^package log$/;"	p
log	app/log/errors.generated.go	/^package log$/;"	p
log	app/log/log.go	/^package log$/;"	p
log	app/log/log_creator.go	/^package log$/;"	p
log	bin/config/config-client-prod.json	/^  "log":{$/;"	o
log	bin/config/config-client.json	/^  "log":{$/;"	o
log	bin/config/config-server.json	/^  "log":{$/;"	o
log	bin/config/ss-client.json	/^  "log":{$/;"	o
log	bin/config/ss-server.json	/^  "log":{$/;"	o
log	common/log/access.go	/^package log$/;"	p
log	common/log/log.go	/^package log \/\/ import "v2ray.com\/core\/common\/log"$/;"	p
log	common/log/log.pb.go	/^package log$/;"	p
log	common/log/logger.go	/^package log$/;"	p
log	release/config/config.json	/^  "log": {$/;"	o
log	release/config/vpoint_socks_vmess.json	/^  "log": {$/;"	o
log	testing/mocks/log.go	/^	log "v2ray.com\/core\/common\/log"$/;"	P	package:v2ray.com/core/common/log
logHandler	common/log/log.go	/^	logHandler syncHandler$/;"	v	package:log	typeref:typename:syncHandler
logKey	common/log/access.go	/^type logKey int$/;"	t	package:log	typeref:typename:int
logService	infra/control/api.go	/^	logService "v2ray.com\/core\/app\/log\/command"$/;"	P	package:v2ray.com/core/app/log/command
log_test	app/log/log_test.go	/^package log_test$/;"	p
log_test	common/log/log_test.go	/^package log_test$/;"	p
log_test	common/log/logger_test.go	/^package log_test$/;"	p
logger	common/log/logger.go	/^	logger *log.Logger$/;"	m	struct:log.consoleLogWriter	typeref:typename:*log.Logger
logger	common/log/logger.go	/^	logger *log.Logger$/;"	m	struct:log.fileLogWriter	typeref:typename:*log.Logger
loggerServiceClient	app/log/command/config_grpc.pb.go	/^type loggerServiceClient struct {$/;"	s	package:command
loggerservice	infra/conf/api.go	/^	loggerservice "v2ray.com\/core\/app\/log\/command"$/;"	P	package:v2ray.com/core/app/log/command
loglevel	bin/config/config-client-prod.json	/^    "loglevel":"info",$/;"	s	object:log
loglevel	bin/config/config-client.json	/^    "loglevel":"debug",$/;"	s	object:log
loglevel	bin/config/config-server.json	/^    "loglevel":"debug",$/;"	s	object:log
loglevel	bin/config/ss-client.json	/^    "loglevel":"debug",$/;"	s	object:log
loglevel	bin/config/ss-server.json	/^    "loglevel":"info",$/;"	s	object:log
loglevel	release/config/vpoint_socks_vmess.json	/^    "loglevel": "warning"$/;"	s	object:log
lookupIPInternal	app/dns/server.go	/^func (s *Server) lookupIPInternal(domain string, option IPOption) ([]net.IP, error) {$/;"	f	struct:dns.Server	typeref:typename:([]net.IP, error)
lookupStatic	app/dns/server.go	/^func (s *Server) lookupStatic(domain string, option IPOption, depth int32) []net.Address {$/;"	f	struct:dns.Server	typeref:typename:[]net.Address
m	common/strmatcher/strmatcher.go	/^	m  Matcher$/;"	m	struct:strmatcher.matcherEntry	typeref:typename:Matcher
macos	Makefile	/^macos:$/;"	t
main	common/crypto/internal/chacha_core_gen.go	/^func main() {$/;"	f	package:main
main	common/crypto/internal/chacha_core_gen.go	/^package main$/;"	p
main	common/errors/errorgen/main.go	/^func main() {$/;"	f	package:main
main	common/errors/errorgen/main.go	/^package main$/;"	p
main	infra/control/main/main.go	/^func main() {$/;"	f	package:main
main	infra/control/main/main.go	/^package main$/;"	p
main	infra/vprotogen/main.go	/^func main() {$/;"	f	package:main
main	infra/vprotogen/main.go	/^package main$/;"	p
main	main/errors.generated.go	/^package main$/;"	p
main	main/main.go	/^func main() {$/;"	f	package:main
main	main/main.go	/^package main$/;"	p
main	main/main_test.go	/^package main$/;"	p
mapBytesToIPs	app/router/command/config.go	/^func mapBytesToIPs(bytes [][]byte) []net.IP {$/;"	f	package:command	typeref:typename:[]net.IP
mapIPsToBytes	app/router/command/config.go	/^func mapIPsToBytes(ips []net.IP) [][]byte {$/;"	f	package:command	typeref:typename:[][]byte
mark	transport/internet/config.proto	/^  int32 mark = 1;$/;"	f	message:v2ray.core.transport.internet.SocketConfig	typeref:typename:int32
marker	transport/internet/headers/srtp/config.proto	/^	bool marker     = 5;$/;"	f	message:v2ray.core.transport.internet.headers.srtp.Config	typeref:typename:bool
match4	app/router/condition_geoip.go	/^func (m *GeoIPMatcher) match4(ip uint32) bool {$/;"	f	struct:router.GeoIPMatcher	typeref:typename:bool
match6	app/router/condition_geoip.go	/^func (m *GeoIPMatcher) match6(ip ipv6) bool {$/;"	f	struct:router.GeoIPMatcher	typeref:typename:bool
matcher	infra/conf/router.go	/^	matcher []AttributeMatcher$/;"	m	struct:conf.AttributeList	typeref:typename:[]AttributeMatcher
matcherEntry	common/strmatcher/strmatcher.go	/^type matcherEntry struct {$/;"	s	package:strmatcher
matcherInfos	app/dns/server.go	/^	matcherInfos  []DomainMatcherInfo \/\/ matcherIdx -> DomainMatcherInfo$/;"	m	struct:dns.Server	typeref:typename:[]DomainMatcherInfo
matcherTypeMap	app/router/condition.go	/^var matcherTypeMap = map[Domain_Type]strmatcher.Type{$/;"	v	package:router
matchers	app/dns/hosts.go	/^	matchers *strmatcher.MatcherGroup$/;"	m	struct:dns.StaticHosts	typeref:typename:*strmatcher.MatcherGroup
matchers	app/dns/server.go	/^	matchers []*router.GeoIPMatcher$/;"	m	struct:dns.MultiGeoIPMatcher	typeref:typename:[]*router.GeoIPMatcher
matchers	app/router/condition.go	/^	matchers []*GeoIPMatcher$/;"	m	struct:router.MultiGeoIPMatcher	typeref:typename:[]*GeoIPMatcher
matchers	app/router/condition.go	/^	matchers strmatcher.IndexMatcher$/;"	m	struct:router.DomainMatcher	typeref:typename:strmatcher.IndexMatcher
matchers	app/router/condition_geoip.go	/^	matchers []*GeoIPMatcher$/;"	m	struct:router.GeoIPMatcherContainer	typeref:typename:[]*GeoIPMatcher
matchers	common/strmatcher/full_matcher.go	/^	matchers map[string][]uint32$/;"	m	struct:strmatcher.FullMatcherGroup	typeref:typename:map[string][]uint32
math	app/p2p/config.pb.go	/^	math "math"$/;"	P	package:math
math	app/p2p/wire/seedlist.pb.go	/^import math "math"$/;"	P	package:math
math	proxy/vless/encoding/addons.pb.go	/^	math "math"$/;"	P	package:math
math_bits	proxy/vless/encoding/addons.pb.go	/^	math_bits "math\/bits"$/;"	P	package:math/bits
maxHeaderLength	transport/internet/headers/http/http.go	/^	maxHeaderLength = 8192$/;"	c	package:http
maxLength	proxy/trojan/protocol.go	/^	maxLength = 8192$/;"	c	package:trojan
maxNumChunk	common/crypto/chunk.go	/^	maxNumChunk  uint32$/;"	m	struct:crypto.ChunkStreamReader	typeref:typename:uint32
maybeIPPrefix	common/protocol/address.go	/^func maybeIPPrefix(b byte) bool {$/;"	f	package:protocol	typeref:typename:bool
message	app/p2p/wire/notifier.proto	/^  string message = 1;$/;"	f	message:wire.HelloReply	typeref:typename:string
message	app/p2p/wire/seedlist.proto	/^    string message = 2;$/;"	f	message:wire.SeedListRequest	typeref:typename:string
message	app/p2p/wire/seedlist.proto	/^    string message = 2;$/;"	f	message:wire.SeedListResponse	typeref:typename:string
message	app/stats/channel.go	/^	message interface{}$/;"	m	struct:stats.channelMessage	typeref:typename:interface{}
message	common/errors/errors.go	/^	message  []interface{}$/;"	m	struct:errors.Error	typeref:typename:[]interface{}
messageData	app/p2p/wire/seedlist.proto	/^    MessageData messageData = 1;$/;"	f	message:wire.SeedListRequest	typeref:typename:MessageData
messageData	app/p2p/wire/seedlist.proto	/^    MessageData messageData = 1;$/;"	f	message:wire.SeedListResponse	typeref:typename:MessageData
meta	transport/internet/kcp/connection.go	/^	meta       ConnMetadata$/;"	m	struct:kcp.Connection	typeref:typename:ConnMetadata
method	bin/config/ss-server.json	/^        "method": "aes-128-gcm",$/;"	s	object:inbounds.0.settings
method	transport/internet/headers/http/config.proto	/^  Method method = 2;$/;"	f	message:v2ray.core.transport.internet.headers.http.RequestConfig	typeref:typename:Method
methods	common/protocol/http/sniff.go	/^	methods = [...]string{"get", "post", "head", "put", "delete", "options", "connect"}$/;"	v	package:http
minRtt	transport/internet/kcp/connection.go	/^	minRtt           uint32$/;"	m	struct:kcp.RoundTripInfo	typeref:typename:uint32
mock	testing/mocks/dns.go	/^	mock *DNSClient$/;"	m	struct:mocks.DNSClientMockRecorder	typeref:typename:*DNSClient
mock	testing/mocks/io.go	/^	mock *Reader$/;"	m	struct:mocks.ReaderMockRecorder	typeref:typename:*Reader
mock	testing/mocks/io.go	/^	mock *Writer$/;"	m	struct:mocks.WriterMockRecorder	typeref:typename:*Writer
mock	testing/mocks/log.go	/^	mock *LogHandler$/;"	m	struct:mocks.LogHandlerMockRecorder	typeref:typename:*LogHandler
mock	testing/mocks/mux.go	/^	mock *MuxClientWorkerFactory$/;"	m	struct:mocks.MuxClientWorkerFactoryMockRecorder	typeref:typename:*MuxClientWorkerFactory
mock	testing/mocks/outbound.go	/^	mock *OutboundHandlerSelector$/;"	m	struct:mocks.OutboundHandlerSelectorMockRecorder	typeref:typename:*OutboundHandlerSelector
mock	testing/mocks/outbound.go	/^	mock *OutboundManager$/;"	m	struct:mocks.OutboundManagerMockRecorder	typeref:typename:*OutboundManager
mock	testing/mocks/proxy.go	/^	mock *ProxyInbound$/;"	m	struct:mocks.ProxyInboundMockRecorder	typeref:typename:*ProxyInbound
mock	testing/mocks/proxy.go	/^	mock *ProxyOutbound$/;"	m	struct:mocks.ProxyOutboundMockRecorder	typeref:typename:*ProxyOutbound
mockOutboundManager	app/router/router_test.go	/^type mockOutboundManager struct {$/;"	s	package:router_test
mocks	testing/mocks/dns.go	/^package mocks$/;"	p
mocks	testing/mocks/io.go	/^package mocks$/;"	p
mocks	testing/mocks/log.go	/^package mocks$/;"	p
mocks	testing/mocks/mux.go	/^package mocks$/;"	p
mocks	testing/mocks/outbound.go	/^package mocks$/;"	p
mocks	testing/mocks/proxy.go	/^package mocks$/;"	p
monitor	app/reverse/bridge.go	/^func (b *Bridge) monitor() error {$/;"	f	struct:reverse.Bridge	typeref:typename:error
monitor	common/mux/client.go	/^func (m *ClientWorker) monitor() {$/;"	f	struct:mux.ClientWorker
monitorTask	app/reverse/bridge.go	/^	monitorTask *task.Periodic$/;"	m	struct:reverse.Bridge	typeref:typename:*task.Periodic
mplex	app/p2p/api.go	/^	mplex "github.com\/libp2p\/go-libp2p-mplex"$/;"	P	package:github.com/libp2p/go-libp2p-mplex
mr	common/buf/readv_reader.go	/^	mr      multiReader$/;"	m	struct:buf.ReadVReader	typeref:typename:multiReader
msg	app/dns/dnscommon.go	/^	msg     *dnsmessage.Message$/;"	m	struct:dns.dnsRequest	typeref:typename:*dnsmessage.Message
mss	transport/internet/kcp/connection.go	/^	mss       uint32$/;"	m	struct:kcp.Connection	typeref:typename:uint32
mtproto	proxy/mtproto/auth.go	/^package mtproto$/;"	p
mtproto	proxy/mtproto/client.go	/^package mtproto$/;"	p
mtproto	proxy/mtproto/config.go	/^package mtproto$/;"	p
mtproto	proxy/mtproto/config.pb.go	/^package mtproto$/;"	p
mtproto	proxy/mtproto/errors.generated.go	/^package mtproto$/;"	p
mtproto	proxy/mtproto/mtproto.go	/^package mtproto$/;"	p
mtproto	proxy/mtproto/server.go	/^package mtproto$/;"	p
mtproto_test	proxy/mtproto/auth_test.go	/^package mtproto_test$/;"	p
mtu	transport/internet/kcp/config.proto	/^  MTU mtu = 1;$/;"	f	message:v2ray.core.transport.internet.kcp.Config	typeref:typename:MTU
multiError	common/errors/multi_error.go	/^type multiError []error$/;"	t	package:errors	typeref:typename:[]error
multiReader	common/buf/readv_reader.go	/^type multiReader interface {$/;"	i	package:buf
multiplex_settings	app/proxyman/config.proto	/^  MultiplexingConfig multiplex_settings = 4;$/;"	f	message:v2ray.core.app.proxyman.SenderConfig	typeref:typename:MultiplexingConfig
mustDecodeHex	common/crypto/chacha20_test.go	/^func mustDecodeHex(s string) []byte {$/;"	f	package:crypto_test	typeref:typename:[]byte
mustEmbedUnimplementedHandlerServiceServer	app/proxyman/command/command.go	/^func (s *handlerServer) mustEmbedUnimplementedHandlerServiceServer() {}$/;"	f	struct:command.handlerServer
mustEmbedUnimplementedHandlerServiceServer	app/proxyman/command/command_grpc.pb.go	/^	mustEmbedUnimplementedHandlerServiceServer()$/;"	n	interface:command.HandlerServiceServer
mustEmbedUnimplementedHandlerServiceServer	app/proxyman/command/command_grpc.pb.go	/^	mustEmbedUnimplementedHandlerServiceServer()$/;"	n	interface:command.UnsafeHandlerServiceServer
mustEmbedUnimplementedHandlerServiceServer	app/proxyman/command/command_grpc.pb.go	/^func (UnimplementedHandlerServiceServer) mustEmbedUnimplementedHandlerServiceServer() {}$/;"	f	struct:command.UnimplementedHandlerServiceServer
mustEmbedUnimplementedLoggerServiceServer	app/log/command/command.go	/^func (s *LoggerServer) mustEmbedUnimplementedLoggerServiceServer() {}$/;"	f	struct:command.LoggerServer
mustEmbedUnimplementedLoggerServiceServer	app/log/command/config_grpc.pb.go	/^	mustEmbedUnimplementedLoggerServiceServer()$/;"	n	interface:command.LoggerServiceServer
mustEmbedUnimplementedLoggerServiceServer	app/log/command/config_grpc.pb.go	/^	mustEmbedUnimplementedLoggerServiceServer()$/;"	n	interface:command.UnsafeLoggerServiceServer
mustEmbedUnimplementedLoggerServiceServer	app/log/command/config_grpc.pb.go	/^func (UnimplementedLoggerServiceServer) mustEmbedUnimplementedLoggerServiceServer() {}$/;"	f	struct:command.UnimplementedLoggerServiceServer
mustEmbedUnimplementedRoutingServiceServer	app/router/command/command.go	/^func (s *routingServer) mustEmbedUnimplementedRoutingServiceServer() {}$/;"	f	struct:command.routingServer
mustEmbedUnimplementedRoutingServiceServer	app/router/command/command_grpc.pb.go	/^	mustEmbedUnimplementedRoutingServiceServer()$/;"	n	interface:command.RoutingServiceServer
mustEmbedUnimplementedRoutingServiceServer	app/router/command/command_grpc.pb.go	/^	mustEmbedUnimplementedRoutingServiceServer()$/;"	n	interface:command.UnsafeRoutingServiceServer
mustEmbedUnimplementedRoutingServiceServer	app/router/command/command_grpc.pb.go	/^func (UnimplementedRoutingServiceServer) mustEmbedUnimplementedRoutingServiceServer() {}$/;"	f	struct:command.UnimplementedRoutingServiceServer
mustEmbedUnimplementedStatsServiceServer	app/stats/command/command.go	/^func (s *statsServer) mustEmbedUnimplementedStatsServiceServer() {}$/;"	f	struct:command.statsServer
mustEmbedUnimplementedStatsServiceServer	app/stats/command/command_grpc.pb.go	/^	mustEmbedUnimplementedStatsServiceServer()$/;"	n	interface:command.StatsServiceServer
mustEmbedUnimplementedStatsServiceServer	app/stats/command/command_grpc.pb.go	/^	mustEmbedUnimplementedStatsServiceServer()$/;"	n	interface:command.UnsafeStatsServiceServer
mustEmbedUnimplementedStatsServiceServer	app/stats/command/command_grpc.pb.go	/^func (UnimplementedStatsServiceServer) mustEmbedUnimplementedStatsServiceServer() {}$/;"	f	struct:command.UnimplementedStatsServiceServer
mux	app/proxyman/inbound/always.go	/^	mux     *mux.Server$/;"	m	struct:inbound.AlwaysOnInboundHandler	typeref:typename:*mux.Server
mux	app/proxyman/inbound/dynamic.go	/^	mux            *mux.Server$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:*mux.Server
mux	app/proxyman/outbound/handler.go	/^	mux             *mux.ClientManager$/;"	m	struct:outbound.Handler	typeref:typename:*mux.ClientManager
mux	common/mux/client.go	/^package mux$/;"	p
mux	common/mux/errors.generated.go	/^package mux$/;"	p
mux	common/mux/frame.go	/^package mux$/;"	p
mux	common/mux/mux.go	/^package mux$/;"	p
mux	common/mux/reader.go	/^package mux$/;"	p
mux	common/mux/server.go	/^package mux$/;"	p
mux	common/mux/session.go	/^package mux$/;"	p
mux	common/mux/writer.go	/^package mux$/;"	p
mux	testing/mocks/mux.go	/^	mux "v2ray.com\/core\/common\/mux"$/;"	P	package:v2ray.com/core/common/mux
muxCoolAddress	common/mux/client.go	/^var muxCoolAddress = net.DomainAddress("v1.mux.cool")$/;"	v	package:mux
muxCoolPort	common/mux/client.go	/^var muxCoolPort = net.Port(9527)$/;"	v	package:mux
muxPreferedSessionKey	common/session/context.go	/^	muxPreferedSessionKey$/;"	c	package:session
mux_test	common/mux/client_test.go	/^package mux_test$/;"	p
mux_test	common/mux/frame_test.go	/^package mux_test$/;"	p
mux_test	common/mux/mux_test.go	/^package mux_test$/;"	p
mux_test	common/mux/session_test.go	/^package mux_test$/;"	p
name	app/dns/dohdns.go	/^	name       string$/;"	m	struct:dns.DoHNameServer	typeref:typename:string
name	app/dns/udpns.go	/^	name      string$/;"	m	struct:dns.ClassicNameServer	typeref:typename:string
name	app/p2p/wire/notifier.proto	/^  string name = 1;$/;"	f	message:wire.HelloRequest	typeref:typename:string
name	app/stats/command/command.proto	/^  string name = 1;$/;"	f	message:v2ray.core.app.stats.command.GetStatsRequest	typeref:typename:string
name	app/stats/command/command.proto	/^  string name = 1;$/;"	f	message:v2ray.core.app.stats.command.Stat	typeref:typename:string
name	transport/internet/headers/http/config.proto	/^  string name = 1;$/;"	f	message:v2ray.core.transport.internet.headers.http.Header	typeref:typename:string
name_server	app/dns/config.proto	/^  repeated NameServer name_server = 5;$/;"	f	message:v2ray.core.app.dns.Config	typeref:typename:NameServer
net	app/dns/config.pb.go	/^	net "v2ray.com\/core\/common\/net"$/;"	P	package:v2ray.com/core/common/net
net	app/proxyman/config.pb.go	/^	net "v2ray.com\/core\/common\/net"$/;"	P	package:v2ray.com/core/common/net
net	app/router/command/command.pb.go	/^	net "v2ray.com\/core\/common\/net"$/;"	P	package:v2ray.com/core/common/net
net	app/router/config.pb.go	/^	net "v2ray.com\/core\/common\/net"$/;"	P	package:v2ray.com/core/common/net
net	common/net/address.go	/^package net$/;"	p
net	common/net/address.pb.go	/^package net$/;"	p
net	common/net/connection.go	/^package net$/;"	p
net	common/net/destination.go	/^package net$/;"	p
net	common/net/destination.pb.go	/^package net$/;"	p
net	common/net/errors.generated.go	/^package net$/;"	p
net	common/net/net.go	/^package net \/\/ import "v2ray.com\/core\/common\/net"$/;"	p
net	common/net/network.go	/^package net$/;"	p
net	common/net/network.pb.go	/^package net$/;"	p
net	common/net/port.go	/^package net$/;"	p
net	common/net/port.pb.go	/^package net$/;"	p
net	common/net/system.go	/^package net$/;"	p
net	common/protocol/server_spec.pb.go	/^	net "v2ray.com\/core\/common\/net"$/;"	P	package:v2ray.com/core/common/net
net	proxy/dns/config.pb.go	/^	net "v2ray.com\/core\/common\/net"$/;"	P	package:v2ray.com/core/common/net
net	proxy/dokodemo/config.pb.go	/^	net "v2ray.com\/core\/common\/net"$/;"	P	package:v2ray.com/core/common/net
net	proxy/shadowsocks/config.pb.go	/^	net "v2ray.com\/core\/common\/net"$/;"	P	package:v2ray.com/core/common/net
net	proxy/socks/config.pb.go	/^	net "v2ray.com\/core\/common\/net"$/;"	P	package:v2ray.com/core/common/net
net	testing/mocks/dns.go	/^	net "net"$/;"	P	package:net
net	testing/mocks/proxy.go	/^	net "v2ray.com\/core\/common\/net"$/;"	P	package:v2ray.com/core/common/net
net_test	common/net/address_test.go	/^package net_test$/;"	p
net_test	common/net/destination_test.go	/^package net_test$/;"	p
net_test	common/net/port_test.go	/^package net_test$/;"	p
network	common/net/destination.proto	/^  Network network = 1;$/;"	f	message:v2ray.core.common.net.Endpoint	typeref:typename:Network
network	common/net/network.proto	/^  repeated Network network = 1;$/;"	f	message:v2ray.core.common.net.NetworkList	typeref:typename:Network
network	proxy/shadowsocks/config.proto	/^  repeated v2ray.core.common.net.Network network = 3;$/;"	f	message:v2ray.core.proxy.shadowsocks.ServerConfig	typeref:typename:v2ray.core.common.net.Network
network_list	app/router/config.proto	/^  v2ray.core.common.net.NetworkList network_list = 5 [deprecated = true];$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:v2ray.core.common.net.NetworkList
network_list	proxy/dokodemo/config.proto	/^  v2ray.core.common.net.NetworkList network_list = 3 [deprecated = true];$/;"	f	message:v2ray.core.proxy.dokodemo.Config	typeref:typename:v2ray.core.common.net.NetworkList
networks	app/router/config.proto	/^  repeated v2ray.core.common.net.Network networks = 13;$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:v2ray.core.common.net.Network
networks	proxy/dokodemo/config.proto	/^  repeated v2ray.core.common.net.Network networks = 7;$/;"	f	message:v2ray.core.proxy.dokodemo.Config	typeref:typename:v2ray.core.common.net.Network
newConnection	transport/internet/websocket/connection.go	/^func newConnection(conn *websocket.Conn, remoteAddr net.Addr) *connection {$/;"	f	package:websocket	typeref:typename:*connection
newError	app/commander/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:commander	typeref:typename:*errors.Error
newError	app/dispatcher/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:dispatcher	typeref:typename:*errors.Error
newError	app/dns/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:dns	typeref:typename:*errors.Error
newError	app/log/command/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:command	typeref:typename:*errors.Error
newError	app/log/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:log	typeref:typename:*errors.Error
newError	app/p2p/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:p2p	typeref:typename:*errors.Error
newError	app/policy/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:policy	typeref:typename:*errors.Error
newError	app/proxyman/command/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:command	typeref:typename:*errors.Error
newError	app/proxyman/inbound/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:inbound	typeref:typename:*errors.Error
newError	app/proxyman/outbound/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:outbound	typeref:typename:*errors.Error
newError	app/reverse/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:reverse	typeref:typename:*errors.Error
newError	app/router/command/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:command	typeref:typename:*errors.Error
newError	app/router/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:router	typeref:typename:*errors.Error
newError	app/stats/command/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:command	typeref:typename:*errors.Error
newError	app/stats/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:stats	typeref:typename:*errors.Error
newError	common/buf/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:buf	typeref:typename:*errors.Error
newError	common/crypto/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:crypto	typeref:typename:*errors.Error
newError	common/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:common	typeref:typename:*errors.Error
newError	common/mux/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:mux	typeref:typename:*errors.Error
newError	common/net/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:net	typeref:typename:*errors.Error
newError	common/platform/ctlcmd/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:ctlcmd	typeref:typename:*errors.Error
newError	common/protocol/dns/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:dns	typeref:typename:*errors.Error
newError	common/protocol/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:protocol	typeref:typename:*errors.Error
newError	common/protocol/tls/cert/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:cert	typeref:typename:*errors.Error
newError	common/retry/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:retry	typeref:typename:*errors.Error
newError	errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:core	typeref:typename:*errors.Error
newError	features/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:features	typeref:typename:*errors.Error
newError	features/routing/dns/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:dns	typeref:typename:*errors.Error
newError	features/stats/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:stats	typeref:typename:*errors.Error
newError	infra/conf/command/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:command	typeref:typename:*errors.Error
newError	infra/conf/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:conf	typeref:typename:*errors.Error
newError	infra/conf/serial/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:serial	typeref:typename:*errors.Error
newError	infra/control/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:control	typeref:typename:*errors.Error
newError	main/confloader/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:confloader	typeref:typename:*errors.Error
newError	main/confloader/external/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:external	typeref:typename:*errors.Error
newError	main/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:main	typeref:typename:*errors.Error
newError	main/json/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:json	typeref:typename:*errors.Error
newError	main/jsonem/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:jsonem	typeref:typename:*errors.Error
newError	proxy/blackhole/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:blackhole	typeref:typename:*errors.Error
newError	proxy/dns/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:dns	typeref:typename:*errors.Error
newError	proxy/dokodemo/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:dokodemo	typeref:typename:*errors.Error
newError	proxy/freedom/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:freedom	typeref:typename:*errors.Error
newError	proxy/http/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:http	typeref:typename:*errors.Error
newError	proxy/mtproto/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:mtproto	typeref:typename:*errors.Error
newError	proxy/shadowsocks/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:shadowsocks	typeref:typename:*errors.Error
newError	proxy/socks/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:socks	typeref:typename:*errors.Error
newError	proxy/trojan/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:trojan	typeref:typename:*errors.Error
newError	proxy/vless/encoding/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:encoding	typeref:typename:*errors.Error
newError	proxy/vless/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:vless	typeref:typename:*errors.Error
newError	proxy/vless/inbound/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:inbound	typeref:typename:*errors.Error
newError	proxy/vless/outbound/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:outbound	typeref:typename:*errors.Error
newError	proxy/vmess/encoding/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:encoding	typeref:typename:*errors.Error
newError	proxy/vmess/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:vmess	typeref:typename:*errors.Error
newError	proxy/vmess/inbound/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:inbound	typeref:typename:*errors.Error
newError	proxy/vmess/outbound/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:outbound	typeref:typename:*errors.Error
newError	transport/internet/domainsocket/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:domainsocket	typeref:typename:*errors.Error
newError	transport/internet/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:internet	typeref:typename:*errors.Error
newError	transport/internet/headers/http/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:http	typeref:typename:*errors.Error
newError	transport/internet/http/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:http	typeref:typename:*errors.Error
newError	transport/internet/kcp/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:kcp	typeref:typename:*errors.Error
newError	transport/internet/quic/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:quic	typeref:typename:*errors.Error
newError	transport/internet/tcp/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:tcp	typeref:typename:*errors.Error
newError	transport/internet/tls/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:tls	typeref:typename:*errors.Error
newError	transport/internet/udp/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:udp	typeref:typename:*errors.Error
newError	transport/internet/websocket/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:websocket	typeref:typename:*errors.Error
newError	transport/internet/xtls/errors.generated.go	/^func newError(values ...interface{}) *errors.Error {$/;"	f	package:xtls	typeref:typename:*errors.Error
newHTTP2Conn	proxy/http/client.go	/^func newHTTP2Conn(c net.Conn, pipedReqBody *io.PipeWriter, respBody io.ReadCloser) net.Conn {$/;"	f	package:http	typeref:typename:net.Conn
newMultiReader	common/buf/readv_posix.go	/^func newMultiReader() multiReader {$/;"	f	package:buf	typeref:typename:multiReader
newMultiReader	common/buf/readv_unix.go	/^func newMultiReader() multiReader {$/;"	f	package:buf	typeref:typename:multiReader
newMultiReader	common/buf/readv_windows.go	/^func newMultiReader() multiReader {$/;"	f	package:buf	typeref:typename:multiReader
newReqID	app/dns/dohdns.go	/^func (s *DoHNameServer) newReqID() uint16 {$/;"	f	struct:dns.DoHNameServer	typeref:typename:uint16
newReqID	app/dns/udpns.go	/^func (s *ClassicNameServer) newReqID() uint16 {$/;"	f	struct:dns.ClassicNameServer	typeref:typename:uint16
newSeed	app/p2p/protocol/seedlist/seedlist.go	/^	newSeed     []Seed \/\/ new seed from neighbor node sent$/;"	m	struct:seedlist.SeedListProtocol	typeref:typename:[]Seed
newUserByEmail	proxy/vmess/inbound/inbound.go	/^func newUserByEmail(config *DefaultConfig) *userByEmail {$/;"	f	package:inbound	typeref:typename:*userByEmail
next	proxy/vmess/encoding/auth.go	/^func (s *ShakeSizeParser) next() uint16 {$/;"	f	struct:encoding.ShakeSizeParser	typeref:typename:uint16
nextDelay	common/retry/retry.go	/^	nextDelay    func() uint32$/;"	m	struct:retry.retryer	typeref:typename:func() uint32
nextFlush	transport/internet/kcp/receiving.go	/^	nextFlush  []uint32$/;"	m	struct:kcp.AckList	typeref:typename:[]uint32
nextID	common/protocol/id.go	/^func nextID(u *uuid.UUID) uuid.UUID {$/;"	f	package:protocol	typeref:typename:uuid.UUID
nextIndex	common/protocol/server_picker.go	/^	nextIndex  uint32$/;"	m	struct:protocol.RoundRobinServerPicker	typeref:typename:uint32
nextNumber	transport/internet/kcp/receiving.go	/^	nextNumber uint32$/;"	m	struct:kcp.ReceivingWorker	typeref:typename:uint32
nextNumber	transport/internet/kcp/sending.go	/^	nextNumber                 uint32$/;"	m	struct:kcp.SendingWorker	typeref:typename:uint32
next_protocol	transport/internet/tls/config.proto	/^  repeated string next_protocol = 4;$/;"	f	message:v2ray.core.transport.internet.tls.Config	typeref:typename:string
next_protocol	transport/internet/xtls/config.proto	/^  repeated string next_protocol = 4;$/;"	f	message:v2ray.core.transport.internet.xtls.Config	typeref:typename:string
noOpWriter	common/buf/writer.go	/^type noOpWriter byte$/;"	t	package:buf	typeref:typename:byte
node	app/p2p/protocol/seedlist/seedlist.go	/^	node        *SeedNode                        \/\/ local host$/;"	m	struct:seedlist.SeedListProtocol	typeref:typename:*SeedNode
node	common/strmatcher/domain_matcher.go	/^type node struct {$/;"	s	package:strmatcher
nodeId	app/p2p/wire/seedlist.proto	/^    string nodeId = 5;       \/\/ id of node that created the message (not the peer that may hav/;"	f	message:wire.MessageData	typeref:typename:string
nodePubKey	app/p2p/wire/seedlist.proto	/^    bytes nodePubKey = 6;    \/\/ Authoring node Secp256k1 public key (32bytes) - protobufs seri/;"	f	message:wire.MessageData	typeref:typename:bytes
nonce	app/p2p/wire/seedlist.proto	/^    string nonce = 3;$/;"	f	message:wire.HelloSeedList	typeref:typename:string
nonce	proxy/vmess/encoding/server.go	/^	nonce [16]byte$/;"	m	struct:encoding.sessionId	typeref:typename:[16]byte
none	release/config/config.json	/^    \/\/ Log level, one of "debug", "info", "warning", "error", "none"$/;"	s	object:log
noop	transport/internet/headers/noop/config.pb.go	/^package noop$/;"	p
noop	transport/internet/headers/noop/noop.go	/^package noop$/;"	p
normalize4	app/router/condition_geoip.go	/^func normalize4(ip uint32, prefix uint8) uint32 {$/;"	f	package:router	typeref:typename:uint32
normalize6	app/router/condition_geoip.go	/^func normalize6(ip ipv6, prefix uint8) ipv6 {$/;"	f	package:router	typeref:typename:ipv6
notifier	transport/internet/kcp/connection.go	/^	notifier        *semaphore.Instance$/;"	m	struct:kcp.Updater	typeref:typename:*semaphore.Instance
notifierClient	app/p2p/wire/notifier.pb.go	/^type notifierClient struct {$/;"	s	package:wire
nowMillisec	transport/internet/kcp/connection.go	/^func nowMillisec() int64 {$/;"	f	package:kcp	typeref:typename:int64
numChunk	common/crypto/chunk.go	/^	numChunk     uint32$/;"	m	struct:crypto.ChunkStreamReader	typeref:typename:uint32
numPools	common/bytespool/pool.go	/^	numPools  = 4$/;"	c	package:bytespool
number	transport/internet/headers/srtp/srtp.go	/^	number uint16$/;"	m	struct:srtp.SRTP	typeref:typename:uint16
numbers	transport/internet/kcp/receiving.go	/^	numbers    []uint32$/;"	m	struct:kcp.AckList	typeref:typename:[]uint32
offset	common/crypto/internal/chacha.go	/^	offset int               \/\/ the offset of used bytes in block$/;"	m	struct:internal.ChaCha20Stream	typeref:typename:int
offset	infra/conf/serial/loader.go	/^type offset struct {$/;"	s	package:serial
ohm	app/commander/commander.go	/^	ohm      outbound.Manager$/;"	m	struct:commander.Commander	typeref:typename:outbound.Manager
ohm	app/dispatcher/default.go	/^	ohm    outbound.Manager$/;"	m	struct:dispatcher.DefaultDispatcher	typeref:typename:outbound.Manager
ohm	app/proxyman/command/command.go	/^	ohm outbound.Manager$/;"	m	struct:command.handlerServer	typeref:typename:outbound.Manager
ohm	app/reverse/portal.go	/^	ohm    outbound.Manager$/;"	m	struct:reverse.Portal	typeref:typename:outbound.Manager
ohm	app/router/balancing.go	/^	ohm       outbound.Manager$/;"	m	struct:router.Balancer	typeref:typename:outbound.Manager
onClose	common/net/connection.go	/^	onClose io.Closer$/;"	m	struct:net.connection	typeref:typename:io.Closer
onData	common/buf/copy.go	/^	onData []dataHandler$/;"	m	struct:buf.copyHandler	typeref:typename:[]dataHandler
onPacketLoss	transport/internet/kcp/sending.go	/^	onPacketLoss      func(uint32)$/;"	m	struct:kcp.SendingWindow	typeref:typename:func(uint32)
onSeedListRequest	app/p2p/protocol/seedlist/seedlist.go	/^func (seed *SeedListProtocol) onSeedListRequest(s core.Stream) {$/;"	f	struct:seedlist.SeedListProtocol
onSeedListResponse	app/p2p/protocol/seedlist/seedlist.go	/^func (seed *SeedListProtocol) onSeedListResponse(s core.Stream) {$/;"	f	struct:seedlist.SeedListProtocol
onSource	app/router/condition.go	/^	onSource bool$/;"	m	struct:router.MultiGeoIPMatcher	typeref:typename:bool
onSource	app/router/condition.go	/^	onSource bool$/;"	m	struct:router.PortMatcher	typeref:typename:bool
onTimeout	common/signal/timer.go	/^	onTimeout func()$/;"	m	struct:signal.ActivityTimer	typeref:typename:func()
onceBootstrap	app/p2p/api.go	/^func (this *P2PNode) onceBootstrap(seed *Seed) peer.ID {$/;"	f	struct:p2p.P2PNode	typeref:typename:peer.ID
oneTimeReader	transport/internet/headers/http/http.go	/^	oneTimeReader       Reader$/;"	m	struct:http.HttpConn	typeref:typename:Reader
oneTimeWriter	transport/internet/headers/http/http.go	/^	oneTimeWriter       Writer$/;"	m	struct:http.HttpConn	typeref:typename:Writer
open	transport/pipe/impl.go	/^	open state = iota$/;"	c	package:pipe	typeref:type:state
openConnection	transport/internet/quic/dialer.go	/^func (s *clientSessions) openConnection(destAddr net.Addr, config *Config, tlsConfig *tls.Config/;"	f	struct:quic.clientSessions	typeref:typename:(internet.Connection, error)
openStream	transport/internet/quic/dialer.go	/^func (c *sessionContext) openStream(destAddr net.Addr) (*interConn, error) {$/;"	f	struct:quic.sessionContext	typeref:typename:(*interConn, error)
openStream	transport/internet/quic/dialer.go	/^func openStream(sessions []*sessionContext, destAddr net.Addr) *interConn {$/;"	f	package:quic	typeref:typename:*interConn
operation	app/proxyman/command/command.proto	/^  v2ray.core.common.serial.TypedMessage operation = 2;$/;"	f	message:v2ray.core.app.proxyman.command.AlterInboundRequest	typeref:typename:v2ray.core.common.serial.TypedMessage
operation	app/proxyman/command/command.proto	/^  v2ray.core.common.serial.TypedMessage operation = 2;$/;"	f	message:v2ray.core.app.proxyman.command.AlterOutboundRequest	typeref:typename:v2ray.core.common.serial.TypedMessage
option	common/protocol/address.go	/^type option struct {$/;"	s	package:protocol
option	transport/pipe/impl.go	/^	option      pipeOption$/;"	m	struct:pipe.pipe	typeref:typename:pipeOption
original_rules	app/dns/config.proto	/^  repeated OriginalRule original_rules = 4;$/;"	f	message:v2ray.core.app.dns.NameServer	typeref:typename:OriginalRule
ota	bin/config/ss-server.json	/^        "ota": true, \/\/ 是否开启 OTA$/;"	b	object:inbounds.0.settings
otherMatchers	common/strmatcher/strmatcher.go	/^	otherMatchers []matcherEntry$/;"	m	struct:strmatcher.MatcherGroup	typeref:typename:[]matcherEntry
out	proxy/http/client.go	/^	out io.ReadCloser$/;"	m	struct:http.http2Conn	typeref:typename:io.ReadCloser
outbound	app/proxyman/command/command.proto	/^  core.OutboundHandlerConfig outbound = 1;$/;"	f	message:v2ray.core.app.proxyman.command.AddOutboundRequest	typeref:typename:core.OutboundHandlerConfig
outbound	app/proxyman/outbound/errors.generated.go	/^package outbound$/;"	p
outbound	app/proxyman/outbound/handler.go	/^package outbound$/;"	p
outbound	app/proxyman/outbound/outbound.go	/^package outbound$/;"	p
outbound	config.proto	/^  repeated OutboundHandlerConfig outbound = 2;$/;"	f	message:v2ray.core.Config	typeref:typename:OutboundHandlerConfig
outbound	features/outbound/outbound.go	/^package outbound$/;"	p
outbound	proxy/vless/outbound/config.go	/^package outbound$/;"	p
outbound	proxy/vless/outbound/config.pb.go	/^package outbound$/;"	p
outbound	proxy/vless/outbound/errors.generated.go	/^package outbound$/;"	p
outbound	proxy/vless/outbound/outbound.go	/^package outbound$/;"	p
outbound	proxy/vmess/outbound/command.go	/^package outbound$/;"	p
outbound	proxy/vmess/outbound/config.go	/^package outbound$/;"	p
outbound	proxy/vmess/outbound/config.pb.go	/^package outbound$/;"	p
outbound	proxy/vmess/outbound/errors.generated.go	/^package outbound$/;"	p
outbound	proxy/vmess/outbound/outbound.go	/^package outbound$/;"	p
outbound	testing/mocks/outbound.go	/^	outbound "v2ray.com\/core\/features\/outbound"$/;"	P	package:v2ray.com/core/features/outbound
outboundConfigLoader	infra/conf/v2ray.go	/^	outboundConfigLoader = NewJSONConfigLoader(ConfigCreatorCache{$/;"	v	package:conf
outboundConn	proxy/dns/dns.go	/^type outboundConn struct {$/;"	s	package:dns
outboundGroupTags	app/router/router.go	/^	outboundGroupTags []string$/;"	m	struct:router.Route	typeref:typename:[]string
outboundManager	app/proxyman/outbound/handler.go	/^	outboundManager outbound.Manager$/;"	m	struct:outbound.Handler	typeref:typename:outbound.Manager
outboundSessionKey	common/session/context.go	/^	outboundSessionKey$/;"	c	package:session
outboundTag	app/router/router.go	/^	outboundTag       string$/;"	m	struct:router.Route	typeref:typename:string
outboundTag	release/config/vpoint_vmess_freedom.json	/^        "outboundTag": "blocked"$/;"	s	object:routing.rules.0
outbound_downlink	app/policy/config.proto	/^    bool outbound_downlink = 4;$/;"	f	message:v2ray.core.app.policy.SystemPolicy.Stats	typeref:typename:bool
outbound_selector	app/router/config.proto	/^  repeated string outbound_selector = 2;$/;"	f	message:v2ray.core.app.router.BalancingRule	typeref:typename:string
outbound_test	app/proxyman/outbound/handler_test.go	/^package outbound_test$/;"	p
outbound_uplink	app/policy/config.proto	/^    bool outbound_uplink = 3;$/;"	f	message:v2ray.core.app.policy.SystemPolicy.Stats	typeref:typename:bool
outbounds	bin/config/config-client-prod.json	/^  "outbounds": [$/;"	a
outbounds	bin/config/config-client.json	/^  "outbounds": [$/;"	a
outbounds	bin/config/ss-client.json	/^  "outbounds": [$/;"	a
outbounds	bin/config/ss-server.json	/^  "outbounds": [$/;"	a
outbounds	release/config/vpoint_socks_vmess.json	/^  "outbounds": [{$/;"	a
outbounds	release/config/vpoint_vmess_freedom.json	/^  "outbounds": [{$/;"	a
output	app/proxyman/inbound/worker.go	/^	output           func([]byte) (int, error)$/;"	m	struct:inbound.udpConn	typeref:typename:func([]byte) (int, error)
output	common/mux/session.go	/^	output       buf.Writer$/;"	m	struct:mux.Session	typeref:typename:buf.Writer
output	transport/internet/kcp/connection.go	/^	output SegmentWriter$/;"	m	struct:kcp.Connection	typeref:typename:SegmentWriter
overrideWith	app/policy/config.go	/^func (p *Policy) overrideWith(another *Policy) {$/;"	f	unknown:policy.Policy
overrideWith	app/policy/config.go	/^func (p *Policy_Timeout) overrideWith(another *Policy_Timeout) {$/;"	f	unknown:policy.Policy_Timeout
ownLinkVerifier	proxy/dns/dns.go	/^	ownLinkVerifier ownLinkVerifier$/;"	m	struct:dns.Handler	typeref:typename:ownLinkVerifier
ownLinkVerifier	proxy/dns/dns.go	/^type ownLinkVerifier interface {$/;"	i	package:dns
p2p	app/p2p/api.go	/^package p2p$/;"	p
p2p	app/p2p/config.pb.go	/^package p2p$/;"	p
p2p	app/p2p/errors.generated.go	/^package p2p$/;"	p
p2p	app/p2p/p2p.go	/^package p2p$/;"	p
p2p	bin/config/ss-server.json	/^  "p2p":{$/;"	o
packetConnWrapper	transport/internet/system_dialer.go	/^type packetConnWrapper struct {$/;"	s	package:internet
packtgz	release/user-package.sh	/^packtgz() {$/;"	f
packtgzAbPath	release/user-package.sh	/^packtgzAbPath() {$/;"	f
packzip	release/user-package.sh	/^packzip() {$/;"	f
padding	common/crypto/auth.go	/^	padding      PaddingLengthGenerator$/;"	m	struct:crypto.AuthenticationReader	typeref:typename:PaddingLengthGenerator
padding	common/crypto/auth.go	/^	padding      PaddingLengthGenerator$/;"	m	struct:crypto.AuthenticationWriter	typeref:typename:PaddingLengthGenerator
padding	transport/internet/domainsocket/config.proto	/^  bool padding = 3;$/;"	f	message:v2ray.core.transport.internet.domainsocket.Config	typeref:typename:bool
padding	transport/internet/headers/srtp/config.proto	/^	bool padding = 2;$/;"	f	message:v2ray.core.transport.internet.headers.srtp.Config	typeref:typename:bool
paddingLen	common/crypto/auth.go	/^	paddingLen   uint16$/;"	m	struct:crypto.AuthenticationReader	typeref:typename:uint16
parent	common/mux/session.go	/^	parent       *SessionManager$/;"	m	struct:mux.Session	typeref:typename:*SessionManager
parse	transport/internet/kcp/segment.go	/^	parse(conv uint16, cmd Command, opt SegmentOption, buf []byte) (bool, []byte)$/;"	n	interface:kcp.Segment	typeref:typename:(bool, []byte)
parse	transport/internet/kcp/segment.go	/^func (s *AckSegment) parse(conv uint16, cmd Command, opt SegmentOption, buf []byte) (bool, []byt/;"	f	struct:kcp.AckSegment	typeref:typename:(bool, []byte)
parse	transport/internet/kcp/segment.go	/^func (s *CmdOnlySegment) parse(conv uint16, cmd Command, opt SegmentOption, buf []byte) (bool, [/;"	f	struct:kcp.CmdOnlySegment	typeref:typename:(bool, []byte)
parse	transport/internet/kcp/segment.go	/^func (s *DataSegment) parse(conv uint16, cmd Command, opt SegmentOption, buf []byte) (bool, []by/;"	f	struct:kcp.DataSegment	typeref:typename:(bool, []byte)
parseAttrs	infra/conf/router.go	/^func parseAttrs(attrs []string) *AttributeList {$/;"	f	package:conf	typeref:typename:*AttributeList
parseBasicAuth	proxy/http/server.go	/^func parseBasicAuth(auth string) (username, password string, ok bool) {$/;"	f	package:http	typeref:typename:(username, password string, ok bool)
parseChinaIPRule	infra/conf/router.go	/^func parseChinaIPRule(data []byte) (*router.RoutingRule, error) {$/;"	f	package:conf	typeref:typename:(*router.RoutingRule, error)
parseChinaSitesRule	infra/conf/router.go	/^func parseChinaSitesRule(data []byte) (*router.RoutingRule, error) {$/;"	f	package:conf	typeref:typename:(*router.RoutingRule, error)
parseDomainRule	infra/conf/router.go	/^func parseDomainRule(domain string) ([]*router.Domain, error) {$/;"	f	package:conf	typeref:typename:([]*router.Domain, error)
parseFieldRule	infra/conf/router.go	/^func parseFieldRule(msg json.RawMessage) (*router.RoutingRule, error) {$/;"	f	package:conf	typeref:typename:(*router.RoutingRule, error)
parseIPQuery	proxy/dns/dns.go	/^func parseIPQuery(b []byte) (r bool, domain string, id uint16, qType dnsmessage.Type) {$/;"	f	package:dns	typeref:typename:(r bool, domain string, id uint16, qType dnsmessage.Type)
parseIntPort	infra/conf/common.go	/^func parseIntPort(data []byte) (net.Port, error) {$/;"	f	package:conf	typeref:typename:(net.Port, error)
parseJSONStringPort	infra/conf/common.go	/^func parseJSONStringPort(data []byte) (net.Port, net.Port, error) {$/;"	f	package:conf	typeref:typename:(net.Port, net.Port, error)
parseResponse	app/dns/dnscommon.go	/^func parseResponse(payload []byte) (*IPRecord, error) {$/;"	f	package:dns	typeref:typename:(*IPRecord, error)
parseSecurityType	proxy/vmess/encoding/server.go	/^func parseSecurityType(b byte) protocol.SecurityType {$/;"	f	package:encoding	typeref:typename:protocol.SecurityType
parseServerName	transport/internet/tls/config.go	/^func (c *Config) parseServerName() string {$/;"	f	unknown:tls.Config	typeref:typename:string
parseServerName	transport/internet/xtls/config.go	/^func (c *Config) parseServerName() string {$/;"	f	unknown:xtls.Config	typeref:typename:string
parseStringPort	infra/conf/common.go	/^func parseStringPort(s string) (net.Port, net.Port, error) {$/;"	f	package:conf	typeref:typename:(net.Port, net.Port, error)
password	proxy/http/config.proto	/^  string password = 2;$/;"	f	message:v2ray.core.proxy.http.Account	typeref:typename:string
password	proxy/shadowsocks/config.proto	/^  string password = 1;$/;"	f	message:v2ray.core.proxy.shadowsocks.Account	typeref:typename:string
password	proxy/socks/config.proto	/^  string password = 2;$/;"	f	message:v2ray.core.proxy.socks.Account	typeref:typename:string
password	proxy/trojan/config.proto	/^  string password = 1;$/;"	f	message:v2ray.core.proxy.trojan.Account	typeref:typename:string
passwordToCipherKey	proxy/shadowsocks/config.go	/^func passwordToCipherKey(password []byte, keySize int32) []byte {$/;"	f	package:shadowsocks	typeref:typename:[]byte
path	proxy/trojan/config.proto	/^  string path = 2;$/;"	f	message:v2ray.core.proxy.trojan.Fallback	typeref:typename:string
path	proxy/vless/inbound/config.proto	/^  string path = 2;$/;"	f	message:v2ray.core.proxy.vless.inbound.Fallback	typeref:typename:string
path	transport/internet/domainsocket/config.proto	/^  string path = 1;$/;"	f	message:v2ray.core.transport.internet.domainsocket.Config	typeref:typename:string
path	transport/internet/domainsocket/listener.go	/^	path string$/;"	m	struct:domainsocket.fileLocker	typeref:typename:string
path	transport/internet/http/config.proto	/^  string path = 2;$/;"	f	message:v2ray.core.transport.internet.http.Config	typeref:typename:string
path	transport/internet/websocket/config.proto	/^  string path = 2;$/;"	f	message:v2ray.core.transport.internet.websocket.Config	typeref:typename:string
path	transport/internet/websocket/hub.go	/^	path string$/;"	m	struct:websocket.requestHandler	typeref:typename:string
pathObj	common/errors/errors.go	/^	pathObj  interface{}$/;"	m	struct:errors.Error	typeref:typename:interface{}
pattern	app/stats/command/command.proto	/^  string pattern = 1;$/;"	f	message:v2ray.core.app.stats.command.QueryStatsRequest	typeref:typename:string
pattern	common/strmatcher/matchers.go	/^	pattern *regexp.Regexp$/;"	m	struct:strmatcher.regexMatcher	typeref:typename:*regexp.Regexp
payload	transport/internet/kcp/segment.go	/^	payload  *buf.Buffer$/;"	m	struct:kcp.DataSegment	typeref:typename:*buf.Buffer
payload_type	transport/internet/headers/srtp/config.proto	/^	uint32 payload_type = 6;$/;"	f	message:v2ray.core.transport.internet.headers.srtp.Config	typeref:typename:uint32
peer	common/peer/latency.go	/^package peer$/;"	p
peer	common/peer/peer.go	/^package peer$/;"	p
pfiocNatlook	transport/internet/sockopt_freebsd.go	/^type pfiocNatlook struct {$/;"	s	package:internet
pickInternal	common/mux/client.go	/^func (p *IncrementalWorkerPicker) pickInternal() (*ClientWorker, bool, error) {$/;"	f	struct:mux.IncrementalWorkerPicker	typeref:typename:(*ClientWorker, bool, error)
pickRouteInternal	app/router/router.go	/^func (r *Router) pickRouteInternal(ctx routing.Context) (*Rule, routing.Context, error) {$/;"	f	struct:router.Router	typeref:typename:(*Rule, routing.Context, error)
pickString	transport/internet/headers/http/config.go	/^func pickString(arr []string) string {$/;"	f	package:http	typeref:typename:string
picker	app/reverse/portal.go	/^	picker *StaticMuxPicker$/;"	m	struct:reverse.Portal	typeref:typename:*StaticMuxPicker
pingUpdater	transport/internet/kcp/connection.go	/^	pingUpdater *Updater$/;"	m	struct:kcp.Connection	typeref:typename:*Updater
pipe	transport/pipe/impl.go	/^package pipe$/;"	p
pipe	transport/pipe/impl.go	/^type pipe struct {$/;"	s	package:pipe
pipe	transport/pipe/pipe.go	/^package pipe$/;"	p
pipe	transport/pipe/reader.go	/^	pipe *pipe$/;"	m	struct:pipe.Reader	typeref:typename:*pipe
pipe	transport/pipe/reader.go	/^package pipe$/;"	p
pipe	transport/pipe/writer.go	/^	pipe *pipe$/;"	m	struct:pipe.Writer	typeref:typename:*pipe
pipe	transport/pipe/writer.go	/^package pipe$/;"	p
pipeOption	transport/pipe/impl.go	/^type pipeOption struct {$/;"	s	package:pipe
pipe_test	transport/pipe/pipe_test.go	/^package pipe_test$/;"	p
pkcs1AdditionalRSAPrime	common/protocol/tls/cert/privateKey.go	/^type pkcs1AdditionalRSAPrime struct {$/;"	s	package:cert
pkcs1PrivateKey	common/protocol/tls/cert/privateKey.go	/^type pkcs1PrivateKey struct {$/;"	s	package:cert
pkcs8	common/protocol/tls/cert/privateKey.go	/^type pkcs8 struct {$/;"	s	package:cert
pkgPath	common/errors/errors.go	/^func (err *Error) pkgPath() string {$/;"	f	struct:errors.Error	typeref:typename:string
platform	common/platform/others.go	/^package platform$/;"	p
platform	common/platform/platform.go	/^package platform \/\/ import "v2ray.com\/core\/common\/platform"$/;"	p
platform	common/platform/windows.go	/^package platform$/;"	p
platform_test	common/platform/platform_test.go	/^package platform_test$/;"	p
policy	app/dispatcher/default.go	/^	policy policy.Manager$/;"	m	struct:dispatcher.DefaultDispatcher	typeref:typename:policy.Manager
policy	app/policy/config.go	/^package policy$/;"	p
policy	app/policy/config.pb.go	/^package policy$/;"	p
policy	app/policy/errors.generated.go	/^package policy$/;"	p
policy	app/policy/manager.go	/^package policy$/;"	p
policy	app/policy/policy.go	/^package policy$/;"	p
policy	features/policy/default.go	/^package policy$/;"	p
policy	features/policy/policy.go	/^package policy$/;"	p
policy	proxy/dokodemo/dokodemo.go	/^func (d *DokodemoDoor) policy() policy.Session {$/;"	f	struct:dokodemo.DokodemoDoor	typeref:typename:policy.Session
policy	proxy/freedom/freedom.go	/^func (h *Handler) policy() policy.Session {$/;"	f	struct:freedom.Handler	typeref:typename:policy.Session
policy	proxy/http/server.go	/^func (s *Server) policy() policy.Session {$/;"	f	struct:http.Server	typeref:typename:policy.Session
policy	proxy/mtproto/server.go	/^	policy  policy.Manager$/;"	m	struct:mtproto.Server	typeref:typename:policy.Manager
policy	proxy/socks/server.go	/^func (s *Server) policy() policy.Session {$/;"	f	struct:socks.Server	typeref:typename:policy.Session
policy	release/config/vpoint_socks_vmess.json	/^  "policy": {$/;"	o
policyKey	features/policy/policy.go	/^type policyKey int32$/;"	t	package:policy	typeref:typename:int32
policyManager	proxy/dokodemo/dokodemo.go	/^	policyManager policy.Manager$/;"	m	struct:dokodemo.DokodemoDoor	typeref:typename:policy.Manager
policyManager	proxy/freedom/freedom.go	/^	policyManager policy.Manager$/;"	m	struct:freedom.Handler	typeref:typename:policy.Manager
policyManager	proxy/http/client.go	/^	policyManager policy.Manager$/;"	m	struct:http.Client	typeref:typename:policy.Manager
policyManager	proxy/http/server.go	/^	policyManager policy.Manager$/;"	m	struct:http.Server	typeref:typename:policy.Manager
policyManager	proxy/shadowsocks/client.go	/^	policyManager policy.Manager$/;"	m	struct:shadowsocks.Client	typeref:typename:policy.Manager
policyManager	proxy/shadowsocks/server.go	/^	policyManager policy.Manager$/;"	m	struct:shadowsocks.Server	typeref:typename:policy.Manager
policyManager	proxy/socks/client.go	/^	policyManager policy.Manager$/;"	m	struct:socks.Client	typeref:typename:policy.Manager
policyManager	proxy/socks/server.go	/^	policyManager policy.Manager$/;"	m	struct:socks.Server	typeref:typename:policy.Manager
policyManager	proxy/trojan/client.go	/^	policyManager policy.Manager$/;"	m	struct:trojan.Client	typeref:typename:policy.Manager
policyManager	proxy/trojan/server.go	/^	policyManager policy.Manager$/;"	m	struct:trojan.Server	typeref:typename:policy.Manager
policyManager	proxy/vless/inbound/inbound.go	/^	policyManager         policy.Manager$/;"	m	struct:inbound.Handler	typeref:typename:policy.Manager
policyManager	proxy/vless/outbound/outbound.go	/^	policyManager policy.Manager$/;"	m	struct:outbound.Handler	typeref:typename:policy.Manager
policyManager	proxy/vmess/inbound/inbound.go	/^	policyManager         policy.Manager$/;"	m	struct:inbound.Handler	typeref:typename:policy.Manager
policyManager	proxy/vmess/outbound/outbound.go	/^	policyManager policy.Manager$/;"	m	struct:outbound.Handler	typeref:typename:policy.Manager
policy_test	app/policy/manager_test.go	/^package policy_test$/;"	p
pool	common/buf/buffer.go	/^var pool = bytespool.GetPool(Size)$/;"	v	package:buf
pool	common/bytespool/pool.go	/^	pool     [numPools]sync.Pool$/;"	v	package:bytespool	typeref:typename:[numPools]sync.Pool
pool	transport/internet/quic/pool.go	/^var pool *sync.Pool$/;"	v	package:quic	typeref:typename:*sync.Pool
pool	transport/internet/tls/config_other.go	/^	pool *x509.CertPool$/;"	m	struct:tls.rootCertsCache	typeref:typename:*x509.CertPool
pool	transport/internet/xtls/config_other.go	/^	pool *x509.CertPool$/;"	m	struct:xtls.rootCertsCache	typeref:typename:*x509.CertPool
poolA	common/antireplay/antireplay.go	/^	poolA          *cuckoo.Filter$/;"	m	struct:antireplay.AntiReplayWindow	typeref:typename:*cuckoo.Filter
poolB	common/antireplay/antireplay.go	/^	poolB          *cuckoo.Filter$/;"	m	struct:antireplay.AntiReplayWindow	typeref:typename:*cuckoo.Filter
poolSize	common/bytespool/pool.go	/^	poolSize [numPools]int32$/;"	v	package:bytespool	typeref:typename:[numPools]int32
port	app/p2p/config.proto	/^    int32 port = 3;$/;"	f	message:v2ray.core.app.p2p.Config	typeref:typename:int32
port	app/p2p/config.proto	/^    int32 port = 3;$/;"	f	message:v2ray.core.app.p2p.seed	typeref:typename:int32
port	app/p2p/wire/seedlist.proto	/^    int32 port = 3;$/;"	f	message:wire.SeedInfo	typeref:typename:int32
port	app/proxyman/inbound/worker.go	/^	port            net.Port$/;"	m	struct:inbound.tcpWorker	typeref:typename:net.Port
port	app/proxyman/inbound/worker.go	/^	port            net.Port$/;"	m	struct:inbound.udpWorker	typeref:typename:net.Port
port	app/router/condition.go	/^	port     net.MemoryPortList$/;"	m	struct:router.PortMatcher	typeref:typename:net.MemoryPortList
port	bin/config/config-client-prod.json	/^      "port": 1080, \/\/ 监听端口$/;"	n	object:inbounds.0
port	bin/config/config-client.json	/^      "port": 1080, \/\/ 监听端口$/;"	n	object:inbounds.0
port	bin/config/ss-client.json	/^      "port": 1080, \/\/ 监听端口$/;"	n	object:inbounds.0
port	bin/config/ss-server.json	/^        "port": 55155,$/;"	n	object:p2p.seedlist.0
port	bin/config/ss-server.json	/^      "port": 1024, \/\/ 监听端口$/;"	n	object:inbounds.0
port	bin/config/ss-server.json	/^    "port": 55156,$/;"	n	object:p2p
port	common/net/destination.proto	/^  uint32 port = 3;$/;"	f	message:v2ray.core.common.net.Endpoint	typeref:typename:uint32
port	common/protocol/server_spec.proto	/^  uint32 port = 2;$/;"	f	message:v2ray.core.common.protocol.ServerEndpoint	typeref:typename:uint32
port	proxy/dokodemo/config.proto	/^  uint32 port = 2;$/;"	f	message:v2ray.core.proxy.dokodemo.Config	typeref:typename:uint32
port	proxy/dokodemo/dokodemo.go	/^	port          net.Port$/;"	m	struct:dokodemo.DokodemoDoor	typeref:typename:net.Port
port	proxy/socks/protocol.go	/^	port   net.Port$/;"	m	struct:socks.ServerSession	typeref:typename:net.Port
port	release/config/vpoint_socks_vmess.json	/^    "port": 1080,$/;"	n	object:inbounds.0
port	release/config/vpoint_vmess_freedom.json	/^    "port": 10086,$/;"	n	object:inbounds.0
portFirst	common/protocol/address.go	/^	portFirst   bool$/;"	m	struct:protocol.option	typeref:typename:bool
portFirstAddressParser	common/protocol/address.go	/^type portFirstAddressParser struct {$/;"	s	package:protocol
portLastAddressParser	common/protocol/address.go	/^type portLastAddressParser struct {$/;"	s	package:protocol
portMutex	app/proxyman/inbound/dynamic.go	/^	portMutex      sync.Mutex$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:sync.Mutex
port_list	app/router/config.proto	/^  v2ray.core.common.net.PortList port_list = 14;$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:v2ray.core.common.net.PortList
port_range	app/proxyman/config.proto	/^  v2ray.core.common.net.PortRange port_range = 1;$/;"	f	message:v2ray.core.app.proxyman.ReceiverConfig	typeref:typename:v2ray.core.common.net.PortRange
port_range	app/router/config.proto	/^  v2ray.core.common.net.PortRange port_range = 4 [deprecated = true];$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:v2ray.core.common.net.PortRange
portal	app/reverse/portal.go	/^	portal *Portal$/;"	m	struct:reverse.Outbound	typeref:typename:*Portal
portal_config	app/reverse/config.proto	/^  repeated PortalConfig portal_config = 2;$/;"	f	message:v2ray.core.app.reverse.Config	typeref:typename:PortalConfig
portals	app/reverse/reverse.go	/^	portals []*Portal$/;"	m	struct:reverse.Reverse	typeref:typename:[]*Portal
porter	bin/config/config-server.json	/^  "porter":{$/;"	o
portsInUse	app/proxyman/inbound/dynamic.go	/^	portsInUse     map[net.Port]bool$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:map[net.Port]bool
posixReader	common/buf/readv_posix.go	/^type posixReader struct {$/;"	s	package:buf
prefix	app/router/config.proto	/^  uint32 prefix = 2;$/;"	f	message:v2ray.core.app.router.CIDR	typeref:typename:uint32
prefix	common/errors/errors.go	/^	prefix   []interface{}$/;"	m	struct:errors.Error	typeref:typename:[]interface{}
prefix4	app/router/condition_geoip.go	/^	prefix4     []uint8$/;"	m	struct:router.GeoIPMatcher	typeref:typename:[]uint8
prefix6	app/router/condition_geoip.go	/^	prefix6     []uint8$/;"	m	struct:router.GeoIPMatcher	typeref:typename:[]uint8
printCertificates	infra/control/tlsping.go	/^func printCertificates(certs []*x509.Certificate) {$/;"	f	package:control
printFile	common/protocol/tls/cert/cert_test.go	/^func printFile(certificate *Certificate, name string) error {$/;"	f	package:cert	typeref:typename:error
printFile	infra/control/cert.go	/^func (c *CertificateCommand) printFile(certificate *cert.Certificate, name string) error {$/;"	f	struct:control.CertificateCommand	typeref:typename:error
printJSON	common/protocol/tls/cert/cert_test.go	/^func printJSON(certificate *Certificate) {$/;"	f	package:cert
printJson	infra/control/cert.go	/^func (c *CertificateCommand) printJson(certificate *cert.Certificate) {$/;"	f	struct:control.CertificateCommand
printVersion	main/main.go	/^func printVersion() {$/;"	f	package:main
prioritized_domain	app/dns/config.proto	/^  repeated PriorityDomain prioritized_domain = 2;$/;"	f	message:v2ray.core.app.dns.NameServer	typeref:typename:PriorityDomain
privKey	app/p2p/account/account.go	/^	privKey []byte$/;"	m	struct:account.Account	typeref:typename:[]byte
processAck	transport/internet/kcp/sending.go	/^func (w *SendingWorker) processAck(number uint32) bool {$/;"	f	struct:kcp.SendingWorker	typeref:typename:bool
processTCP	proxy/socks/server.go	/^func (s *Server) processTCP(ctx context.Context, conn internet.Connection, dispatcher routing.Di/;"	f	struct:socks.Server	typeref:typename:error
program	app/router/condition.go	/^	program *starlark.Program$/;"	m	struct:router.AttributeMatcher	typeref:typename:*starlark.Program
proto	app/commander/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/dispatcher/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/dns/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/log/command/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/log/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/p2p/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/p2p/wire/seedlist.pb.go	/^import proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/policy/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/proxyman/command/command.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/proxyman/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/reverse/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/router/command/command.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/router/condition_geoip_test.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/router/condition_test.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/router/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/stats/command/command.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	app/stats/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	common/log/log.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	common/net/address.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	common/net/destination.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	common/net/network.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	common/net/port.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	common/protocol/headers.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	common/protocol/server_spec.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	common/protocol/user.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	common/serial/typed_message.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/blackhole/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/dns/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/dokodemo/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/freedom/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/http/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/mtproto/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/shadowsocks/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/socks/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/trojan/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/vless/account.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/vless/encoding/addons.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/vless/inbound/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/vless/outbound/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/vmess/account.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/vmess/inbound/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	proxy/vmess/outbound/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/domainsocket/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/headers/http/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/headers/noop/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/headers/srtp/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/headers/tls/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/headers/utp/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/headers/wechat/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/headers/wireguard/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/http/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/kcp/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/quic/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/tcp/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/tls/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/udp/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/websocket/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	transport/internet/xtls/config.pb.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
proto	v2ray_test.go	/^	proto "github.com\/golang\/protobuf\/proto"$/;"	P	package:github.com/golang/protobuf/proto
protobufCodec	app/p2p/protocol/seedlist/message.go	/^	protobufCodec "github.com\/multiformats\/go-multicodec\/protobuf"$/;"	P	package:github.com/multiformats/go-multicodec/protobuf
protobufCodec	app/p2p/protocol/seedlist/seedlist.go	/^	protobufCodec "github.com\/multiformats\/go-multicodec\/protobuf"$/;"	P	package:github.com/multiformats/go-multicodec/protobuf
protocol	app/p2p/config.proto	/^    string protocol = 1;$/;"	f	message:v2ray.core.app.p2p.Config	typeref:typename:string
protocol	app/p2p/config.proto	/^    string protocol = 1;$/;"	f	message:v2ray.core.app.p2p.seed	typeref:typename:string
protocol	app/p2p/protocol/protocol.go	/^package protocol$/;"	p
protocol	app/p2p/wire/seedlist.proto	/^    string protocol = 1;$/;"	f	message:wire.SeedInfo	typeref:typename:string
protocol	app/proxyman/command/command.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	app/router/config.proto	/^  repeated string protocol = 9;$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:string
protocol	bin/config/config-client-prod.json	/^      "protocol": "vmess", \/\/ 出口协议$/;"	s	object:outbounds.0
protocol	bin/config/config-client.json	/^      "protocol": "vmess", \/\/ 出口协议$/;"	s	object:outbounds.0
protocol	bin/config/ss-client.json	/^      "protocol": "shadowsocks",$/;"	s	object:outbounds.0
protocol	bin/config/ss-server.json	/^        "protocol": "tcp",$/;"	s	object:p2p.seedlist.0
protocol	bin/config/ss-server.json	/^      "protocol": "freedom",$/;"	s	object:outbounds.0
protocol	bin/config/ss-server.json	/^    "protocol": "tcp",$/;"	s	object:p2p
protocol	common/protocol/account.go	/^package protocol$/;"	p
protocol	common/protocol/address.go	/^package protocol$/;"	p
protocol	common/protocol/context.go	/^package protocol$/;"	p
protocol	common/protocol/errors.generated.go	/^package protocol$/;"	p
protocol	common/protocol/headers.go	/^package protocol$/;"	p
protocol	common/protocol/headers.pb.go	/^package protocol$/;"	p
protocol	common/protocol/id.go	/^package protocol$/;"	p
protocol	common/protocol/payload.go	/^package protocol$/;"	p
protocol	common/protocol/protocol.go	/^package protocol \/\/ import "v2ray.com\/core\/common\/protocol"$/;"	p
protocol	common/protocol/server_picker.go	/^package protocol$/;"	p
protocol	common/protocol/server_spec.go	/^package protocol$/;"	p
protocol	common/protocol/server_spec.pb.go	/^package protocol$/;"	p
protocol	common/protocol/time.go	/^package protocol$/;"	p
protocol	common/protocol/user.go	/^package protocol$/;"	p
protocol	common/protocol/user.pb.go	/^package protocol$/;"	p
protocol	proxy/freedom/config.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	proxy/http/config.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	proxy/mtproto/config.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	proxy/shadowsocks/config.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	proxy/socks/config.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	proxy/trojan/config.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	proxy/vless/inbound/config.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	proxy/vless/outbound/config.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	proxy/vmess/account.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	proxy/vmess/inbound/config.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	proxy/vmess/outbound/config.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocol	release/config/vpoint_socks_vmess.json	/^    "protocol": "freedom",$/;"	s	object:outbounds.0
protocol	release/config/vpoint_socks_vmess.json	/^    "protocol": "socks",$/;"	s	object:inbounds.0
protocol	release/config/vpoint_vmess_freedom.json	/^    "protocol": "blackhole",$/;"	s	object:outbounds.1
protocol	release/config/vpoint_vmess_freedom.json	/^    "protocol": "freedom",$/;"	s	object:outbounds.0
protocol	release/config/vpoint_vmess_freedom.json	/^    "protocol": "vmess",$/;"	s	object:inbounds.0
protocol	transport/internet/config.proto	/^  TransportProtocol protocol = 1 [deprecated = true];$/;"	f	message:v2ray.core.transport.internet.StreamConfig	typeref:typename:TransportProtocol
protocol	transport/internet/config.proto	/^  TransportProtocol protocol = 1;$/;"	f	message:v2ray.core.transport.internet.TransportConfig	typeref:typename:TransportProtocol
protocol	transport/internet/quic/config.pb.go	/^	protocol "v2ray.com\/core\/common\/protocol"$/;"	P	package:v2ray.com/core/common/protocol
protocolName	transport/internet/domainsocket/config.go	/^const protocolName = "domainsocket"$/;"	c	package:domainsocket
protocolName	transport/internet/http/config.go	/^const protocolName = "http"$/;"	c	package:http
protocolName	transport/internet/kcp/config.go	/^const protocolName = "mkcp"$/;"	c	package:kcp
protocolName	transport/internet/quic/quic.go	/^const protocolName = "quic"$/;"	c	package:quic
protocolName	transport/internet/tcp/config.go	/^const protocolName = "tcp"$/;"	c	package:tcp
protocolName	transport/internet/udp/udp.go	/^const protocolName = "udp"$/;"	c	package:udp
protocolName	transport/internet/websocket/config.go	/^const protocolName = "websocket"$/;"	c	package:websocket
protocolSniffer	app/dispatcher/sniffer.go	/^type protocolSniffer func([]byte) (SniffResult, error)$/;"	t	package:dispatcher	typeref:typename:func([]byte) (SniffResult, error)
protocol_name	transport/internet/config.proto	/^  string protocol_name = 3;$/;"	f	message:v2ray.core.transport.internet.TransportConfig	typeref:typename:string
protocol_name	transport/internet/config.proto	/^  string protocol_name = 5;$/;"	f	message:v2ray.core.transport.internet.StreamConfig	typeref:typename:string
protocol_test	common/protocol/address_test.go	/^package protocol_test$/;"	p
protocol_test	common/protocol/id_test.go	/^package protocol_test$/;"	p
protocol_test	common/protocol/server_picker_test.go	/^package protocol_test$/;"	p
protocol_test	common/protocol/server_spec_test.go	/^package protocol_test$/;"	p
protocol_test	common/protocol/time_test.go	/^package protocol_test$/;"	p
protocols	app/router/condition.go	/^	protocols []string$/;"	m	struct:router.ProtocolMatcher	typeref:typename:[]string
protoimpl	app/commander/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/dispatcher/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/dns/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/log/command/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/log/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/policy/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/proxyman/command/command.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/proxyman/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/reverse/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/router/command/command.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/router/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/stats/command/command.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	app/stats/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	common/log/log.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	common/net/address.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	common/net/destination.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	common/net/network.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	common/net/port.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	common/protocol/headers.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	common/protocol/server_spec.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	common/protocol/user.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	common/serial/typed_message.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/blackhole/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/dns/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/dokodemo/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/freedom/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/http/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/mtproto/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/shadowsocks/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/socks/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/trojan/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/vless/account.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/vless/inbound/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/vless/outbound/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/vmess/account.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/vmess/inbound/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	proxy/vmess/outbound/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/domainsocket/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/headers/http/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/headers/noop/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/headers/srtp/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/headers/tls/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/headers/utp/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/headers/wechat/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/headers/wireguard/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/http/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/kcp/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/quic/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/tcp/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/tls/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/udp/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/websocket/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoimpl	transport/internet/xtls/config.pb.go	/^	protoimpl "google.golang.org\/protobuf\/runtime\/protoimpl"$/;"	P	package:google.golang.org/protobuf/runtime/protoimpl
protoreflect	app/commander/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/dispatcher/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/dns/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/log/command/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/log/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/policy/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/proxyman/command/command.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/proxyman/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/reverse/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/router/command/command.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/router/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/stats/command/command.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	app/stats/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	common/log/log.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	common/net/address.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	common/net/destination.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	common/net/network.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	common/net/port.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	common/protocol/headers.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	common/protocol/server_spec.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	common/protocol/user.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	common/serial/typed_message.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/blackhole/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/dns/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/dokodemo/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/freedom/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/http/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/mtproto/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/shadowsocks/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/socks/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/trojan/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/vless/account.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/vless/inbound/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/vless/outbound/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/vmess/account.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/vmess/inbound/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	proxy/vmess/outbound/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/domainsocket/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/headers/http/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/headers/noop/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/headers/srtp/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/headers/tls/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/headers/utp/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/headers/wechat/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/headers/wireguard/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/http/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/kcp/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/quic/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/tcp/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/tls/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/udp/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/websocket/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
protoreflect	transport/internet/xtls/config.pb.go	/^	protoreflect "google.golang.org\/protobuf\/reflect\/protoreflect"$/;"	P	package:google.golang.org/protobuf/reflect/protoreflect
proxied_domain	app/dns/config.proto	/^    string proxied_domain = 4;$/;"	f	message:v2ray.core.app.dns.Config.HostMapping	typeref:typename:string
proxy	app/proxyman/inbound/always.go	/^	proxy   proxy.Inbound$/;"	m	struct:inbound.AlwaysOnInboundHandler	typeref:typename:proxy.Inbound
proxy	app/proxyman/inbound/worker.go	/^	proxy           proxy.Inbound$/;"	m	struct:inbound.tcpWorker	typeref:typename:proxy.Inbound
proxy	app/proxyman/inbound/worker.go	/^	proxy           proxy.Inbound$/;"	m	struct:inbound.udpWorker	typeref:typename:proxy.Inbound
proxy	app/proxyman/outbound/handler.go	/^	proxy           proxy.Outbound$/;"	m	struct:outbound.Handler	typeref:typename:proxy.Outbound
proxy	proxy/proxy.go	/^package proxy$/;"	p
proxyConfig	app/proxyman/inbound/dynamic.go	/^	proxyConfig    interface{}$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:interface{}
proxy_settings	app/proxyman/config.proto	/^  v2ray.core.common.serial.TypedMessage proxy_settings = 3;$/;"	f	message:v2ray.core.app.proxyman.InboundHandlerConfig	typeref:typename:v2ray.core.common.serial.TypedMessage
proxy_settings	app/proxyman/config.proto	/^  v2ray.core.transport.internet.ProxyConfig proxy_settings = 3;$/;"	f	message:v2ray.core.app.proxyman.SenderConfig	typeref:typename:v2ray.core.transport.internet.ProxyConfig
proxy_settings	config.proto	/^  v2ray.core.common.serial.TypedMessage proxy_settings = 3;$/;"	f	message:v2ray.core.InboundHandlerConfig	typeref:typename:v2ray.core.common.serial.TypedMessage
proxy_settings	config.proto	/^  v2ray.core.common.serial.TypedMessage proxy_settings = 3;$/;"	f	message:v2ray.core.OutboundHandlerConfig	typeref:typename:v2ray.core.common.serial.TypedMessage
proxyman	app/proxyman/config.go	/^package proxyman$/;"	p
proxyman	app/proxyman/config.pb.go	/^package proxyman$/;"	p
proxyman	app/proxyman/proxyman.go	/^package proxyman$/;"	p
pub	app/dns/dohdns.go	/^	pub        *pubsub.Service$/;"	m	struct:dns.DoHNameServer	typeref:typename:*pubsub.Service
pub	app/dns/udpns.go	/^	pub       *pubsub.Service$/;"	m	struct:dns.ClassicNameServer	typeref:typename:*pubsub.Service
pubKey	app/p2p/account/account.go	/^	pubKey  []byte$/;"	m	struct:account.Account	typeref:typename:[]byte
pub_id	app/p2p/config.proto	/^    string pub_id = 4;$/;"	f	message:v2ray.core.app.p2p.Config	typeref:typename:string
pub_id	app/p2p/config.proto	/^    string pub_id = 4;$/;"	f	message:v2ray.core.app.p2p.seed	typeref:typename:string
pub_id	bin/config/ss-server.json	/^        "pub_id": "12345"$/;"	s	object:p2p.seedlist.0
pub_id	bin/config/ss-server.json	/^    "pub_id": "12345",$/;"	s	object:p2p
publicKey	common/protocol/tls/cert/cert.go	/^func publicKey(priv interface{}) interface{} {$/;"	f	package:cert	typeref:typename:interface{}
publish	app/stats/channel.go	/^func (c channelMessage) publish(publisher chan channelMessage) {$/;"	f	struct:stats.channelMessage
publishNonBlocking	app/stats/channel.go	/^func (c channelMessage) publishNonBlocking(publisher chan channelMessage) {$/;"	f	struct:stats.channelMessage
pubsub	common/signal/pubsub/pubsub.go	/^package pubsub$/;"	p
pubsub_test	common/signal/pubsub/pubsub_test.go	/^package pubsub_test$/;"	p
push	common/signal/pubsub/pubsub.go	/^func (s *Subscriber) push(msg interface{}) {$/;"	f	struct:pubsub.Subscriber
putAuthenticationObject	proxy/mtproto/auth.go	/^func putAuthenticationObject(auth *Authentication) {$/;"	f	package:mtproto
putBuffer	transport/internet/quic/pool.go	/^func putBuffer(p []byte) {$/;"	f	package:quic
queryIPTimeout	app/dns/server.go	/^func (s *Server) queryIPTimeout(idx int, client Client, domain string, option IPOption) ([]net.I/;"	f	struct:dns.Server	typeref:typename:([]net.IP, error)
quic	transport/internet/quic/config.go	/^package quic$/;"	p
quic	transport/internet/quic/config.pb.go	/^package quic$/;"	p
quic	transport/internet/quic/conn.go	/^package quic$/;"	p
quic	transport/internet/quic/dialer.go	/^package quic$/;"	p
quic	transport/internet/quic/errors.generated.go	/^package quic$/;"	p
quic	transport/internet/quic/hub.go	/^package quic$/;"	p
quic	transport/internet/quic/pool.go	/^package quic$/;"	p
quic	transport/internet/quic/quic.go	/^package quic$/;"	p
quic_test	transport/internet/quic/quic_test.go	/^package quic_test$/;"	p
quit	app/p2p/protocol/seedlist/seedlist.go	/^	quit        chan struct{}$/;"	m	struct:seedlist.SeedListProtocol	typeref:typename:chan struct{}
rand3	proxy/vmess/aead/authid.go	/^	rand3 "crypto\/rand"$/;"	P	package:crypto/rand
randFieldSeedlist	app/p2p/wire/seedlist.pb.go	/^func randFieldSeedlist(dAtA []byte, r randySeedlist, fieldNumber int, wire int) []byte {$/;"	f	package:wire	typeref:typename:[]byte
randStringSeedlist	app/p2p/wire/seedlist.pb.go	/^func randStringSeedlist(r randySeedlist) string {$/;"	f	package:wire	typeref:typename:string
randUTF8RuneSeedlist	app/p2p/wire/seedlist.pb.go	/^func randUTF8RuneSeedlist(r randySeedlist) rune {$/;"	f	package:wire	typeref:typename:rune
randUnrecognizedSeedlist	app/p2p/wire/seedlist.pb.go	/^func randUnrecognizedSeedlist(r randySeedlist, maxFieldNumber int) (dAtA []byte) {$/;"	f	package:wire	typeref:typename:(dAtA []byte)
random	app/reverse/config.proto	/^  bytes random = 99;$/;"	f	message:v2ray.core.app.reverse.Control	typeref:typename:bytes
randySeedlist	app/p2p/wire/seedlist.pb.go	/^type randySeedlist interface {$/;"	i	package:wire
range	common/net/port.proto	/^  repeated PortRange range = 1;$/;"	f	message:v2ray.core.common.net.PortList	typeref:typename:PortRange
rawConn	common/buf/readv_reader.go	/^	rawConn syscall.RawConn$/;"	m	struct:buf.ReadVReader	typeref:typename:syscall.RawConn
rawConn	proxy/http/client.go	/^	rawConn net.Conn$/;"	m	struct:http.h2Conn	typeref:typename:net.Conn
rawConn	transport/internet/quic/dialer.go	/^	rawConn *sysConn$/;"	m	struct:quic.sessionContext	typeref:typename:*sysConn
rawConn	transport/internet/quic/hub.go	/^	rawConn  *sysConn$/;"	m	struct:quic.Listener	typeref:typename:*sysConn
rd	transport/internet/kcp/connection.go	/^	rd         time.Time$/;"	m	struct:kcp.Connection	typeref:typename:time.Time
rdPort	transport/internet/sockopt_freebsd.go	/^func (nl *pfiocNatlook) rdPort() int {$/;"	f	struct:internet.pfiocNatlook	typeref:typename:int
readAddress	common/protocol/address.go	/^func (p *addressParser) readAddress(b *buf.Buffer, reader io.Reader) (net.Address, error) {$/;"	f	struct:protocol.addressParser	typeref:typename:(net.Address, error)
readAll	common/mux/mux_test.go	/^func readAll(reader buf.Reader) (buf.MultiBuffer, error) {$/;"	f	package:mux_test	typeref:typename:(buf.MultiBuffer, error)
readBuffer	common/crypto/auth.go	/^func (r *AuthenticationReader) readBuffer(size int32, padding int32) (*buf.Buffer, error) {$/;"	f	struct:crypto.AuthenticationReader	typeref:typename:(*buf.Buffer, error)
readBuffer	transport/internet/headers/http/http.go	/^	readBuffer          *buf.Buffer$/;"	m	struct:http.HttpConn	typeref:typename:*buf.Buffer
readCache	common/protocol/dns/io.go	/^func (r *UDPReader) readCache() *buf.Buffer {$/;"	f	struct:dns.UDPReader	typeref:typename:*buf.Buffer
readConfDir	main/main.go	/^func readConfDir(dirPath string) {$/;"	f	package:main
readError	common/buf/copy.go	/^type readError struct {$/;"	s	package:buf
readFileOrString	infra/conf/transport_internet.go	/^func readFileOrString(f string, s []string) ([]byte, error) {$/;"	f	package:conf	typeref:typename:([]byte, error)
readFrom	testing/scenarios/common.go	/^func readFrom(conn net.Conn, timeout time.Duration, length int) []byte {$/;"	f	package:scenarios	typeref:typename:[]byte
readFrom2	testing/scenarios/common.go	/^func readFrom2(conn net.Conn, timeout time.Duration, length int) ([]byte, error) {$/;"	f	package:scenarios	typeref:typename:([]byte, error)
readFromInternal	transport/internet/quic/conn.go	/^func (c *sysConn) readFromInternal(p []byte) (int, net.Addr, error) {$/;"	f	struct:quic.sysConn	typeref:typename:(int, net.Addr, error)
readInternal	app/dispatcher/default.go	/^func (r *cachedReader) readInternal() buf.MultiBuffer {$/;"	f	struct:dispatcher.cachedReader	typeref:typename:buf.MultiBuffer
readInternal	common/crypto/auth.go	/^func (r *AuthenticationReader) readInternal(soft bool, mb *buf.MultiBuffer) error {$/;"	f	struct:crypto.AuthenticationReader	typeref:typename:error
readMulti	common/buf/readv_reader.go	/^func (r *ReadVReader) readMulti() (MultiBuffer, error) {$/;"	f	struct:buf.ReadVReader	typeref:typename:(MultiBuffer, error)
readMultiBufferInternal	transport/pipe/impl.go	/^func (p *pipe) readMultiBufferInternal() (buf.MultiBuffer, error) {$/;"	f	struct:pipe.pipe	typeref:typename:(buf.MultiBuffer, error)
readOneUDP	common/buf/reader.go	/^func readOneUDP(r io.Reader) (*Buffer, error) {$/;"	f	package:buf	typeref:typename:(*Buffer, error)
readPort	common/protocol/address.go	/^func readPort(b *buf.Buffer, reader io.Reader) (net.Port, error) {$/;"	f	package:protocol	typeref:typename:(net.Port, error)
readRequest	transport/internet/headers/http/linkedreadRequest.go	/^func readRequest(b *bufio.Reader, deleteHostHeader bool) (req *http.Request, err error)$/;"	f	package:http	typeref:typename:(req *http.Request, err error);
readSignal	transport/pipe/impl.go	/^	readSignal  *signal.Notifier$/;"	m	struct:pipe.pipe	typeref:typename:*signal.Notifier
readSize	common/crypto/auth.go	/^func (r *AuthenticationReader) readSize() (uint16, uint16, error) {$/;"	f	struct:crypto.AuthenticationReader	typeref:typename:(uint16, uint16, error)
readSize	common/crypto/chunk.go	/^func (r *ChunkStreamReader) readSize() (uint16, error) {$/;"	f	struct:crypto.ChunkStreamReader	typeref:typename:(uint16, error)
read_buffer	transport/internet/kcp/config.proto	/^  ReadBuffer read_buffer = 7;$/;"	f	message:v2ray.core.transport.internet.kcp.Config	typeref:typename:ReadBuffer
reader	app/dispatcher/default.go	/^	reader *pipe.Reader$/;"	m	struct:dispatcher.cachedReader	typeref:typename:*pipe.Reader
reader	app/proxyman/inbound/worker.go	/^	reader           buf.Reader$/;"	m	struct:inbound.udpConn	typeref:typename:buf.Reader
reader	app/reverse/portal.go	/^	reader   buf.Reader$/;"	m	struct:reverse.PortalWorker	typeref:typename:buf.Reader
reader	common/crypto/auth.go	/^	reader       *buf.BufferedReader$/;"	m	struct:crypto.AuthenticationReader	typeref:typename:*buf.BufferedReader
reader	common/crypto/chunk.go	/^	reader      *buf.BufferedReader$/;"	m	struct:crypto.ChunkStreamReader	typeref:typename:*buf.BufferedReader
reader	common/crypto/io.go	/^	reader io.Reader$/;"	m	struct:crypto.CryptionReader	typeref:typename:io.Reader
reader	common/mux/reader.go	/^	reader io.Reader$/;"	m	struct:mux.PacketReader	typeref:typename:io.Reader
reader	common/net/connection.go	/^	reader  *buf.BufferedReader$/;"	m	struct:net.connection	typeref:typename:*buf.BufferedReader
reader	common/protocol/dns/io.go	/^	reader *buf.BufferedReader$/;"	m	struct:dns.TCPReader	typeref:typename:*buf.BufferedReader
reader	proxy/socks/protocol.go	/^	reader io.Reader$/;"	m	struct:socks.UDPReader	typeref:typename:io.Reader
reader	transport/internet/kcp/listener.go	/^	reader     PacketReader$/;"	m	struct:kcp.Listener	typeref:typename:PacketReader
reader	transport/internet/websocket/connection.go	/^	reader     io.Reader$/;"	m	struct:websocket.connection	typeref:typename:io.Reader
readerOnly	proxy/http/server.go	/^type readerOnly struct {$/;"	s	package:http
reason	transport/internet/headers/http/config.proto	/^  string reason = 2;$/;"	f	message:v2ray.core.transport.internet.headers.http.Status	typeref:typename:string
receive_original_dest_address	transport/internet/config.proto	/^  bool receive_original_dest_address = 4;$/;"	f	message:v2ray.core.transport.internet.SocketConfig	typeref:typename:bool
receive_original_destination	app/proxyman/config.proto	/^  bool receive_original_destination = 5;$/;"	f	message:v2ray.core.app.proxyman.ReceiverConfig	typeref:typename:bool
receiverConfig	app/proxyman/inbound/dynamic.go	/^	receiverConfig *proxyman.ReceiverConfig$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:*proxyman.ReceiverConfig
receiver_settings	app/proxyman/config.proto	/^  v2ray.core.common.serial.TypedMessage receiver_settings = 2;$/;"	f	message:v2ray.core.app.proxyman.InboundHandlerConfig	typeref:typename:v2ray.core.common.serial.TypedMessage
receiver_settings	config.proto	/^  v2ray.core.common.serial.TypedMessage receiver_settings = 2;$/;"	f	message:v2ray.core.InboundHandlerConfig	typeref:typename:v2ray.core.common.serial.TypedMessage
receivingWorker	transport/internet/kcp/connection.go	/^	receivingWorker *ReceivingWorker$/;"	m	struct:kcp.Connection	typeref:typename:*ReceivingWorker
record	app/dns/dnscommon.go	/^type record struct {$/;"	s	package:dns
recorder	testing/mocks/dns.go	/^	recorder *DNSClientMockRecorder$/;"	m	struct:mocks.DNSClient	typeref:typename:*DNSClientMockRecorder
recorder	testing/mocks/io.go	/^	recorder *ReaderMockRecorder$/;"	m	struct:mocks.Reader	typeref:typename:*ReaderMockRecorder
recorder	testing/mocks/io.go	/^	recorder *WriterMockRecorder$/;"	m	struct:mocks.Writer	typeref:typename:*WriterMockRecorder
recorder	testing/mocks/log.go	/^	recorder *LogHandlerMockRecorder$/;"	m	struct:mocks.LogHandler	typeref:typename:*LogHandlerMockRecorder
recorder	testing/mocks/mux.go	/^	recorder *MuxClientWorkerFactoryMockRecorder$/;"	m	struct:mocks.MuxClientWorkerFactory	typeref:typename:*MuxClientWorkerFactoryMockRecorder
recorder	testing/mocks/outbound.go	/^	recorder *OutboundHandlerSelectorMockRecorder$/;"	m	struct:mocks.OutboundHandlerSelector	typeref:typename:*OutboundHandlerSelectorMockRecorder
recorder	testing/mocks/outbound.go	/^	recorder *OutboundManagerMockRecorder$/;"	m	struct:mocks.OutboundManager	typeref:typename:*OutboundManagerMockRecorder
recorder	testing/mocks/proxy.go	/^	recorder *ProxyInboundMockRecorder$/;"	m	struct:mocks.ProxyInbound	typeref:typename:*ProxyInboundMockRecorder
recorder	testing/mocks/proxy.go	/^	recorder *ProxyOutboundMockRecorder$/;"	m	struct:mocks.ProxyOutbound	typeref:typename:*ProxyOutboundMockRecorder
recvOrigDest	app/proxyman/inbound/worker.go	/^	recvOrigDest    bool$/;"	m	struct:inbound.tcpWorker	typeref:typename:bool
recvOrigDest	transport/internet/udp/hub.go	/^	recvOrigDest bool$/;"	m	struct:udp.Hub	typeref:typename:bool
refill	common/protocol/dns/io.go	/^func (r *UDPReader) refill() error {$/;"	f	struct:dns.UDPReader	typeref:typename:error
reflect	app/commander/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/dispatcher/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/dns/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/log/command/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/log/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/p2p/wire/seedlist.pb.go	/^import reflect "reflect"$/;"	P	package:reflect
reflect	app/policy/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/proxyman/command/command.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/proxyman/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/reverse/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/router/command/command.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/router/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/stats/command/command.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	app/stats/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	common/log/log.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	common/net/address.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	common/net/destination.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	common/net/network.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	common/net/port.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	common/protocol/headers.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	common/protocol/server_spec.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	common/protocol/user.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	common/serial/typed_message.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/blackhole/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/dns/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/dokodemo/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/freedom/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/http/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/mtproto/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/shadowsocks/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/socks/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/trojan/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/vless/account.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/vless/inbound/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/vless/outbound/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/vmess/account.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/vmess/inbound/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	proxy/vmess/outbound/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	testing/mocks/dns.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	testing/mocks/io.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	testing/mocks/log.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	testing/mocks/mux.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	testing/mocks/outbound.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	testing/mocks/proxy.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/domainsocket/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/headers/http/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/headers/noop/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/headers/srtp/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/headers/tls/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/headers/utp/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/headers/wechat/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/headers/wireguard/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/http/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/kcp/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/quic/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/tcp/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/tls/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/udp/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/websocket/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
reflect	transport/internet/xtls/config.pb.go	/^	reflect "reflect"$/;"	P	package:reflect
refresh	app/proxyman/config.proto	/^  AllocationStrategyRefresh refresh = 3;$/;"	f	message:v2ray.core.app.proxyman.AllocationStrategy	typeref:typename:AllocationStrategyRefresh
refresh	app/proxyman/inbound/dynamic.go	/^func (h *DynamicInboundHandler) refresh() error {$/;"	f	struct:inbound.DynamicInboundHandler	typeref:typename:error
regexMatcher	common/strmatcher/matchers.go	/^type regexMatcher struct {$/;"	s	package:strmatcher
remote	app/proxyman/inbound/worker.go	/^	remote           net.Addr$/;"	m	struct:inbound.udpConn	typeref:typename:net.Addr
remote	common/net/connection.go	/^	remote  Addr$/;"	m	struct:net.connection	typeref:typename:Addr
remote	transport/internet/quic/conn.go	/^	remote net.Addr$/;"	m	struct:quic.interConn	typeref:typename:net.Addr
remoteAddr	transport/internet/websocket/connection.go	/^	remoteAddr net.Addr$/;"	m	struct:websocket.connection	typeref:typename:net.Addr
remoteNextNumber	transport/internet/kcp/sending.go	/^	remoteNextNumber           uint32$/;"	m	struct:kcp.SendingWorker	typeref:typename:uint32
removeConn	app/proxyman/inbound/worker.go	/^func (w *udpWorker) removeConn(id connID) {$/;"	f	struct:inbound.udpWorker
removeExpiredEntries	proxy/vmess/encoding/server.go	/^func (h *SessionHistory) removeExpiredEntries() error {$/;"	f	struct:encoding.SessionHistory	typeref:typename:error
removeExpiredHashes	proxy/vmess/validator.go	/^func (v *TimedUserValidator) removeExpiredHashes(expire uint32) {$/;"	f	struct:vmess.TimedUserValidator
removeInactiveSessions	transport/internet/quic/dialer.go	/^func removeInactiveSessions(sessions []*sessionContext) []*sessionContext {$/;"	f	package:quic	typeref:typename:[]*sessionContext
removeServer	common/protocol/server_picker.go	/^func (sl *ServerList) removeServer(idx uint32) {$/;"	f	struct:protocol.ServerList
req	transport/internet/headers/http/http.go	/^	req            *http.Request$/;"	m	struct:http.HeaderReader	typeref:typename:*http.Request
reqID	app/dns/dohdns.go	/^	reqID      uint32$/;"	m	struct:dns.DoHNameServer	typeref:typename:uint32
reqID	app/dns/udpns.go	/^	reqID     uint32$/;"	m	struct:dns.ClassicNameServer	typeref:typename:uint32
reqType	app/dns/dnscommon.go	/^	reqType dnsmessage.Type$/;"	m	struct:dns.dnsRequest	typeref:typename:dnsmessage.Type
request	proxy/socks/protocol.go	/^	request *protocol.RequestHeader$/;"	m	struct:socks.UDPWriter	typeref:typename:*protocol.RequestHeader
request	transport/internet/headers/http/config.proto	/^  RequestConfig request = 1;$/;"	f	message:v2ray.core.transport.internet.headers.http.Config	typeref:typename:RequestConfig
requestBodyIV	proxy/vmess/encoding/client.go	/^	requestBodyIV   [16]byte$/;"	m	struct:encoding.ClientSession	typeref:typename:[16]byte
requestBodyIV	proxy/vmess/encoding/server.go	/^	requestBodyIV   [16]byte$/;"	m	struct:encoding.ServerSession	typeref:typename:[16]byte
requestBodyKey	proxy/vmess/encoding/client.go	/^	requestBodyKey  [16]byte$/;"	m	struct:encoding.ClientSession	typeref:typename:[16]byte
requestBodyKey	proxy/vmess/encoding/server.go	/^	requestBodyKey  [16]byte$/;"	m	struct:encoding.ServerSession	typeref:typename:[16]byte
requestHandler	transport/internet/websocket/hub.go	/^type requestHandler struct {$/;"	s	package:websocket
requestKey	common/protocol/context.go	/^	requestKey key = iota$/;"	c	package:protocol	typeref:type:key
requests	app/dns/udpns.go	/^	requests  map[uint16]dnsRequest$/;"	m	struct:dns.ClassicNameServer	typeref:typename:map[uint16]dnsRequest
requests	app/p2p/protocol/seedlist/seedlist.go	/^	requests    map[string]*wire.SeedListRequest \/\/ used to access request data from response han/;"	m	struct:seedlist.SeedListProtocol	typeref:typename:map[string]*wire.SeedListRequest
reset	app/stats/command/command.proto	/^  bool reset = 2;$/;"	f	message:v2ray.core.app.stats.command.GetStatsRequest	typeref:typename:bool
reset	app/stats/command/command.proto	/^  bool reset = 2;$/;"	f	message:v2ray.core.app.stats.command.QueryStatsRequest	typeref:typename:bool
resolution	v2ray.go	/^type resolution struct {$/;"	s	package:core
resolve	v2ray.go	/^func (r *resolution) resolve(allFeatures []features.Feature) (bool, error) {$/;"	f	struct:core.resolution	typeref:typename:(bool, error)
resolveIP	proxy/freedom/freedom.go	/^func (h *Handler) resolveIP(ctx context.Context, domain string, localAddr net.Address) net.Addre/;"	f	struct:freedom.Handler	typeref:typename:net.Address
resolveSrcAddr	transport/internet/system_dialer.go	/^func resolveSrcAddr(network net.Network, src net.Address) net.Addr {$/;"	f	package:internet	typeref:typename:net.Addr
resolvedIPs	features/routing/dns/context.go	/^	resolvedIPs []net.IP$/;"	m	struct:dns.ResolvableContext	typeref:typename:[]net.IP
resp400	transport/internet/headers/http/resp.go	/^var resp400 = &ResponseConfig{$/;"	v	package:http
resp404	transport/internet/headers/http/resp.go	/^var resp404 = &ResponseConfig{$/;"	v	package:http
response	proxy/blackhole/blackhole.go	/^	response ResponseConfig$/;"	m	struct:blackhole.Handler	typeref:typename:ResponseConfig
response	proxy/blackhole/config.proto	/^  v2ray.core.common.serial.TypedMessage response = 1;$/;"	f	message:v2ray.core.proxy.blackhole.Config	typeref:typename:v2ray.core.common.serial.TypedMessage
response	transport/internet/headers/http/config.proto	/^  ResponseConfig response = 2;$/;"	f	message:v2ray.core.transport.internet.headers.http.Config	typeref:typename:ResponseConfig
responseBodyIV	proxy/vmess/encoding/client.go	/^	responseBodyIV  [16]byte$/;"	m	struct:encoding.ClientSession	typeref:typename:[16]byte
responseBodyIV	proxy/vmess/encoding/server.go	/^	responseBodyIV  [16]byte$/;"	m	struct:encoding.ServerSession	typeref:typename:[16]byte
responseBodyKey	proxy/vmess/encoding/client.go	/^	responseBodyKey [16]byte$/;"	m	struct:encoding.ClientSession	typeref:typename:[16]byte
responseBodyKey	proxy/vmess/encoding/server.go	/^	responseBodyKey [16]byte$/;"	m	struct:encoding.ServerSession	typeref:typename:[16]byte
responseHeader	proxy/vmess/encoding/client.go	/^	responseHeader  byte$/;"	m	struct:encoding.ClientSession	typeref:typename:byte
responseHeader	proxy/vmess/encoding/server.go	/^	responseHeader  byte$/;"	m	struct:encoding.ServerSession	typeref:typename:byte
responseReader	proxy/vmess/encoding/client.go	/^	responseReader  io.Reader$/;"	m	struct:encoding.ClientSession	typeref:typename:io.Reader
responseWriter	proxy/vmess/encoding/server.go	/^	responseWriter  io.Writer$/;"	m	struct:encoding.ServerSession	typeref:typename:io.Writer
retry	common/retry/errors.generated.go	/^package retry$/;"	p
retry	common/retry/retry.go	/^package retry \/\/ import "v2ray.com\/core\/common\/retry"$/;"	p
retry_test	common/retry/retry_test.go	/^package retry_test$/;"	p
retryer	common/retry/retry.go	/^type retryer struct {$/;"	s	package:retry
reverse	app/reverse/bridge.go	/^package reverse$/;"	p
reverse	app/reverse/config.go	/^package reverse$/;"	p
reverse	app/reverse/config.pb.go	/^package reverse$/;"	p
reverse	app/reverse/errors.generated.go	/^package reverse$/;"	p
reverse	app/reverse/portal.go	/^package reverse$/;"	p
reverse	app/reverse/reverse.go	/^package reverse$/;"	p
reverse_test	app/reverse/portal_test.go	/^package reverse_test$/;"	p
root	common/strmatcher/domain_matcher.go	/^	root *node$/;"	m	struct:strmatcher.DomainMatcherGroup	typeref:typename:*node
rootCerts	transport/internet/tls/config_other.go	/^var rootCerts rootCertsCache$/;"	v	package:tls	typeref:struct:rootCertsCache
rootCerts	transport/internet/xtls/config_other.go	/^var rootCerts rootCertsCache$/;"	v	package:xtls	typeref:struct:rootCertsCache
rootCertsCache	transport/internet/tls/config_other.go	/^type rootCertsCache struct {$/;"	s	package:tls
rootCertsCache	transport/internet/xtls/config_other.go	/^type rootCertsCache struct {$/;"	s	package:xtls
roundTrip	transport/internet/kcp/connection.go	/^	roundTrip *RoundTripInfo$/;"	m	struct:kcp.Connection	typeref:typename:*RoundTripInfo
rounds	common/crypto/internal/chacha.go	/^	rounds int$/;"	m	struct:internal.ChaCha20Stream	typeref:typename:int
routedDispatch	app/dispatcher/default.go	/^func (d *DefaultDispatcher) routedDispatch(ctx context.Context, link *transport.Link, destinatio/;"	f	struct:dispatcher.DefaultDispatcher
router	app/dispatcher/default.go	/^	router routing.Router$/;"	m	struct:dispatcher.DefaultDispatcher	typeref:typename:routing.Router
router	app/dns/config.pb.go	/^	router "v2ray.com\/core\/app\/router"$/;"	P	package:v2ray.com/core/app/router
router	app/router/balancing.go	/^package router$/;"	p
router	app/router/command/command.go	/^	router       routing.Router$/;"	m	struct:command.routingServer	typeref:typename:routing.Router
router	app/router/condition.go	/^package router$/;"	p
router	app/router/condition_geoip.go	/^package router$/;"	p
router	app/router/config.go	/^package router$/;"	p
router	app/router/config.pb.go	/^package router$/;"	p
router	app/router/errors.generated.go	/^package router$/;"	p
router	app/router/router.go	/^package router$/;"	p
router_test	app/router/condition_geoip_test.go	/^package router_test$/;"	p
router_test	app/router/condition_test.go	/^package router_test$/;"	p
router_test	app/router/router_test.go	/^package router_test$/;"	p
routing	features/routing/context.go	/^package routing$/;"	p
routing	features/routing/dispatcher.go	/^package routing$/;"	p
routing	features/routing/router.go	/^package routing$/;"	p
routing	release/config/vpoint_vmess_freedom.json	/^  "routing": {$/;"	o
routing	testing/mocks/proxy.go	/^	routing "v2ray.com\/core\/features\/routing"$/;"	P	package:v2ray.com/core/features/routing
routingContext	app/router/command/config.go	/^type routingContext struct {$/;"	s	package:command
routingServer	app/router/command/command.go	/^type routingServer struct {$/;"	s	package:command
routingServiceClient	app/router/command/command_grpc.pb.go	/^type routingServiceClient struct {$/;"	s	package:command
routingServiceSubscribeRoutingStatsClient	app/router/command/command_grpc.pb.go	/^type routingServiceSubscribeRoutingStatsClient struct {$/;"	s	package:command
routingServiceSubscribeRoutingStatsServer	app/router/command/command_grpc.pb.go	/^type routingServiceSubscribeRoutingStatsServer struct {$/;"	s	package:command
routingStats	app/router/command/command.go	/^	routingStats stats.Channel$/;"	m	struct:command.routingServer	typeref:typename:stats.Channel
routing_dns	app/router/router.go	/^	routing_dns "v2ray.com\/core\/features\/routing\/dns"$/;"	P	package:v2ray.com/core/features/routing/dns
routing_session	app/dispatcher/default.go	/^	routing_session "v2ray.com\/core\/features\/routing\/session"$/;"	P	package:v2ray.com/core/features/routing/session
routing_session	app/router/condition_test.go	/^	routing_session "v2ray.com\/core\/features\/routing\/session"$/;"	P	package:v2ray.com/core/features/routing/session
routing_session	app/router/router_test.go	/^	routing_session "v2ray.com\/core\/features\/routing\/session"$/;"	P	package:v2ray.com/core/features/routing/session
rto	transport/internet/kcp/connection.go	/^	rto              uint32$/;"	m	struct:kcp.RoundTripInfo	typeref:typename:uint32
rule	app/dns/config.proto	/^    string rule = 1;$/;"	f	message:v2ray.core.app.dns.NameServer.OriginalRule	typeref:typename:string
rule	app/router/config.proto	/^  repeated RoutingRule rule = 2;$/;"	f	message:v2ray.core.app.router.Config	typeref:typename:RoutingRule
rules	app/router/router.go	/^	rules          []*Rule$/;"	m	struct:router.Router	typeref:typename:[]*Rule
rules	release/config/vpoint_vmess_freedom.json	/^    "rules": [$/;"	a	object:routing
run	common/log/logger.go	/^func (l *generalLogger) run() {$/;"	f	struct:log.generalLogger
run	common/mux/server.go	/^func (w *ServerWorker) run(ctx context.Context) {$/;"	f	struct:mux.ServerWorker
run	transport/internet/domainsocket/listener.go	/^func (ln *Listener) run() {$/;"	f	struct:domainsocket.Listener
run	transport/internet/kcp/connection.go	/^func (u *Updater) run() {$/;"	f	struct:kcp.Updater
runMultiTestCase	infra/conf/general_test.go	/^func runMultiTestCase(t *testing.T, testCases []TestCase) {$/;"	f	package:conf_test
running	app/proxyman/inbound/inbound.go	/^	running         bool$/;"	m	struct:inbound.Manager	typeref:typename:bool
running	app/proxyman/outbound/outbound.go	/^	running          bool$/;"	m	struct:outbound.Manager	typeref:typename:bool
running	app/stats/stats.go	/^	running  bool$/;"	m	struct:stats.Manager	typeref:typename:bool
running	common/task/periodic.go	/^	running bool$/;"	m	struct:task.Periodic	typeref:typename:bool
running	v2ray.go	/^	running            bool$/;"	m	struct:core.Instance	typeref:typename:bool
s	app/proxyman/command/command.go	/^	s   *core.Instance$/;"	m	struct:command.handlerServer	typeref:typename:*core.Instance
s	proxy/vmess/aead/authid.go	/^	s cipher.Block$/;"	m	struct:aead.AuthIDDecoder	typeref:typename:cipher.Block
scenarios	testing/scenarios/command_test.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/common.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/common_coverage.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/common_regular.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/dns_test.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/dokodemo_test.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/feature_test.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/http_test.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/policy_test.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/reverse_test.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/shadowsocks_test.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/socks_test.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/tls_test.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/transport_test.go	/^package scenarios$/;"	p
scenarios	testing/scenarios/vmess_test.go	/^package scenarios$/;"	p
seal	common/crypto/auth.go	/^func (w *AuthenticationWriter) seal(b []byte) (*buf.Buffer, error) {$/;"	f	struct:crypto.AuthenticationWriter	typeref:typename:(*buf.Buffer, error)
secret	proxy/mtproto/config.proto	/^  bytes secret = 1;$/;"	f	message:v2ray.core.proxy.mtproto.Account	typeref:typename:bytes
secure	proxy/vmess/inbound/inbound.go	/^	secure                bool$/;"	m	struct:inbound.Handler	typeref:typename:bool
secure_encryption_only	proxy/vmess/inbound/config.proto	/^  bool secure_encryption_only = 4;$/;"	f	message:v2ray.core.proxy.vmess.inbound.Config	typeref:typename:bool
security	transport/internet/kcp/listener.go	/^	security   cipher.AEAD$/;"	m	struct:kcp.Listener	typeref:typename:cipher.AEAD
security	transport/internet/quic/config.proto	/^  v2ray.core.common.protocol.SecurityConfig security = 2;$/;"	f	message:v2ray.core.transport.internet.quic.Config	typeref:typename:v2ray.core.common.protocol.SecurityConfig
security_settings	proxy/vmess/account.proto	/^  v2ray.core.common.protocol.SecurityConfig security_settings = 3;$/;"	f	message:v2ray.core.proxy.vmess.Account	typeref:typename:v2ray.core.common.protocol.SecurityConfig
security_settings	transport/internet/config.proto	/^  repeated v2ray.core.common.serial.TypedMessage security_settings = 4;$/;"	f	message:v2ray.core.transport.internet.StreamConfig	typeref:typename:v2ray.core.common.serial.TypedMessage
security_type	transport/internet/config.proto	/^  string security_type = 3;$/;"	f	message:v2ray.core.transport.internet.StreamConfig	typeref:typename:string
seed	app/p2p/config.proto	/^message seed{$/;"	m	package:v2ray.core.app.p2p
seed	app/p2p/wire/seedlist.proto	/^    SeedInfo  seed = 2;$/;"	f	message:wire.HelloSeedList	typeref:typename:SeedInfo
seed	infra/conf/p2p.go	/^type seed struct {$/;"	s	package:conf
seed	transport/internet/kcp/config.proto	/^  EncryptionSeed seed = 10;$/;"	f	message:v2ray.core.transport.internet.kcp.Config	typeref:typename:EncryptionSeed
seed	transport/internet/kcp/config.proto	/^  string seed = 1;$/;"	f	message:v2ray.core.transport.internet.kcp.EncryptionSeed	typeref:typename:string
seedRequest	app/p2p/protocol/seedlist/seedlist.go	/^const seedRequest = "\/seedlist\/request\/0.0.1"$/;"	c	package:seedlist
seedResponse	app/p2p/protocol/seedlist/seedlist.go	/^const seedResponse = "\/seedlist\/response\/0.0.1"$/;"	c	package:seedlist
seedlist	app/p2p/config.proto	/^    repeated seed seedlist=5;$/;"	f	message:v2ray.core.app.p2p.Config	typeref:typename:seed
seedlist	app/p2p/protocol/seedlist/message.go	/^package seedlist$/;"	p
seedlist	app/p2p/protocol/seedlist/pubsub.go	/^package seedlist$/;"	p
seedlist	app/p2p/protocol/seedlist/seedlist.go	/^package seedlist$/;"	p
seedlist	bin/config/ss-server.json	/^    "seedlist": [$/;"	a	object:p2p
seedlistPublishHandle	app/p2p/protocol/seedlist/pubsub.go	/^func seedlistPublishHandle(ctx context.Context, ps *pubsub.PubSub) {$/;"	f	package:seedlist
seedlistSubscribeHandle	app/p2p/protocol/seedlist/pubsub.go	/^func seedlistSubscribeHandle(ctx context.Context, sub *pubsub.Subscription) {$/;"	f	package:seedlist
seedlistTopic	app/p2p/protocol/seedlist/pubsub.go	/^const seedlistTopic = "\/seedlist\/pubsub\/0.0.1\/notice"$/;"	c	package:seedlist
selectors	app/router/balancing.go	/^	selectors []string$/;"	m	struct:router.Balancer	typeref:typename:[]string
semaphore	common/signal/semaphore/semaphore.go	/^package semaphore$/;"	p
sendQuery	app/dns/dohdns.go	/^func (s *DoHNameServer) sendQuery(ctx context.Context, domain string, option IPOption) {$/;"	f	struct:dns.DoHNameServer
sendQuery	app/dns/udpns.go	/^func (s *ClassicNameServer) sendQuery(ctx context.Context, domain string, option IPOption) {$/;"	f	struct:dns.ClassicNameServer
senderSettings	app/proxyman/outbound/handler.go	/^	senderSettings  *proxyman.SenderConfig$/;"	m	struct:outbound.Handler	typeref:typename:*proxyman.SenderConfig
sender_settings	config.proto	/^  v2ray.core.common.serial.TypedMessage sender_settings = 2;$/;"	f	message:v2ray.core.OutboundHandlerConfig	typeref:typename:v2ray.core.common.serial.TypedMessage
sendingWorker	transport/internet/kcp/connection.go	/^	sendingWorker   *SendingWorker$/;"	m	struct:kcp.Connection	typeref:typename:*SendingWorker
sequence	transport/internet/headers/tls/dtls.go	/^	sequence uint32$/;"	m	struct:tls.DTLS	typeref:typename:uint32
serial	app/commander/config.pb.go	/^	serial "v2ray.com\/core\/common\/serial"$/;"	P	package:v2ray.com/core/common/serial
serial	app/proxyman/command/command.pb.go	/^	serial "v2ray.com\/core\/common\/serial"$/;"	P	package:v2ray.com/core/common/serial
serial	app/proxyman/config.pb.go	/^	serial "v2ray.com\/core\/common\/serial"$/;"	P	package:v2ray.com/core/common/serial
serial	common/protocol/user.pb.go	/^	serial "v2ray.com\/core\/common\/serial"$/;"	P	package:v2ray.com/core/common/serial
serial	common/serial/serial.go	/^package serial$/;"	p
serial	common/serial/string.go	/^package serial$/;"	p
serial	common/serial/typed_message.go	/^package serial$/;"	p
serial	common/serial/typed_message.pb.go	/^package serial$/;"	p
serial	config.pb.go	/^	serial "v2ray.com\/core\/common\/serial"$/;"	P	package:v2ray.com/core/common/serial
serial	infra/conf/serial/errors.generated.go	/^package serial$/;"	p
serial	infra/conf/serial/loader.go	/^package serial$/;"	p
serial	infra/conf/serial/serial.go	/^package serial$/;"	p
serial	proxy/blackhole/config.pb.go	/^	serial "v2ray.com\/core\/common\/serial"$/;"	P	package:v2ray.com/core/common/serial
serial	transport/internet/config.pb.go	/^	serial "v2ray.com\/core\/common\/serial"$/;"	P	package:v2ray.com/core/common/serial
serial	transport/internet/kcp/config.pb.go	/^	serial "v2ray.com\/core\/common\/serial"$/;"	P	package:v2ray.com/core/common/serial
serial	transport/internet/quic/config.pb.go	/^	serial "v2ray.com\/core\/common\/serial"$/;"	P	package:v2ray.com/core/common/serial
serial	transport/internet/tcp/config.pb.go	/^	serial "v2ray.com\/core\/common\/serial"$/;"	P	package:v2ray.com/core/common/serial
serial_test	common/serial/serial_test.go	/^package serial_test$/;"	p
serial_test	common/serial/string_test.go	/^package serial_test$/;"	p
serial_test	common/serial/typed_message_test.go	/^package serial_test$/;"	p
serial_test	infra/conf/serial/loader_test.go	/^package serial_test$/;"	p
serivceHandlerMap	infra/control/api.go	/^var serivceHandlerMap = map[string]serviceHandler{$/;"	v	package:control
server	app/commander/commander.go	/^	server   *grpc.Server$/;"	m	struct:commander.Commander	typeref:typename:*grpc.Server
server	proxy/dns/config.proto	/^  v2ray.core.common.net.Endpoint server = 1;$/;"	f	message:v2ray.core.proxy.dns.Config	typeref:typename:v2ray.core.common.net.Endpoint
server	proxy/dns/dns.go	/^	server          net.Destination$/;"	m	struct:dns.Handler	typeref:typename:net.Destination
server	proxy/freedom/config.proto	/^  v2ray.core.common.protocol.ServerEndpoint server = 1;$/;"	f	message:v2ray.core.proxy.freedom.DestinationOverride	typeref:typename:v2ray.core.common.protocol.ServerEndpoint
server	proxy/http/config.proto	/^  repeated v2ray.core.common.protocol.ServerEndpoint server = 1;$/;"	f	message:v2ray.core.proxy.http.ClientConfig	typeref:typename:v2ray.core.common.protocol.ServerEndpoint
server	proxy/shadowsocks/config.proto	/^  repeated v2ray.core.common.protocol.ServerEndpoint server = 1;$/;"	f	message:v2ray.core.proxy.shadowsocks.ClientConfig	typeref:typename:v2ray.core.common.protocol.ServerEndpoint
server	proxy/socks/config.proto	/^  repeated v2ray.core.common.protocol.ServerEndpoint server = 1;$/;"	f	message:v2ray.core.proxy.socks.ClientConfig	typeref:typename:v2ray.core.common.protocol.ServerEndpoint
server	proxy/trojan/config.proto	/^  repeated v2ray.core.common.protocol.ServerEndpoint server = 1;$/;"	f	message:v2ray.core.proxy.trojan.ClientConfig	typeref:typename:v2ray.core.common.protocol.ServerEndpoint
server	testing/servers/http/http.go	/^	server      *http.Server$/;"	m	struct:tcp.Server	typeref:typename:*http.Server
server	transport/internet/http/hub.go	/^	server  *http.Server$/;"	m	struct:http.Listener	typeref:typename:*http.Server
server	transport/internet/websocket/hub.go	/^	server   http.Server$/;"	m	struct:websocket.Listener	typeref:typename:http.Server
serverList	proxy/vless/outbound/outbound.go	/^	serverList    *protocol.ServerList$/;"	m	struct:outbound.Handler	typeref:typename:*protocol.ServerList
serverList	proxy/vmess/outbound/outbound.go	/^	serverList    *protocol.ServerList$/;"	m	struct:outbound.Handler	typeref:typename:*protocol.ServerList
serverPicker	proxy/http/client.go	/^	serverPicker  protocol.ServerPicker$/;"	m	struct:http.Client	typeref:typename:protocol.ServerPicker
serverPicker	proxy/shadowsocks/client.go	/^	serverPicker  protocol.ServerPicker$/;"	m	struct:shadowsocks.Client	typeref:typename:protocol.ServerPicker
serverPicker	proxy/socks/client.go	/^	serverPicker  protocol.ServerPicker$/;"	m	struct:socks.Client	typeref:typename:protocol.ServerPicker
serverPicker	proxy/trojan/client.go	/^	serverPicker  protocol.ServerPicker$/;"	m	struct:trojan.Client	typeref:typename:protocol.ServerPicker
serverPicker	proxy/vless/outbound/outbound.go	/^	serverPicker  protocol.ServerPicker$/;"	m	struct:outbound.Handler	typeref:typename:protocol.ServerPicker
serverPicker	proxy/vmess/outbound/outbound.go	/^	serverPicker  protocol.ServerPicker$/;"	m	struct:outbound.Handler	typeref:typename:protocol.ServerPicker
server_name	transport/internet/tls/config.proto	/^  string server_name = 3;$/;"	f	message:v2ray.core.transport.internet.tls.Config	typeref:typename:string
server_name	transport/internet/xtls/config.proto	/^  string server_name = 3;$/;"	f	message:v2ray.core.transport.internet.xtls.Config	typeref:typename:string
serverlist	common/protocol/server_picker.go	/^	serverlist *ServerList$/;"	m	struct:protocol.RoundRobinServerPicker	typeref:typename:*ServerList
servers	bin/config/ss-client.json	/^        "servers": [$/;"	a	object:outbounds.0.settings
servers	common/protocol/server_picker.go	/^	servers []*ServerSpec$/;"	m	struct:protocol.ServerList	typeref:typename:[]*ServerSpec
service	app/commander/config.proto	/^  repeated v2ray.core.common.serial.TypedMessage service = 2;$/;"	f	message:v2ray.core.app.commander.Config	typeref:typename:v2ray.core.common.serial.TypedMessage
service	app/log/command/command.go	/^type service struct {$/;"	s	package:command
service	app/proxyman/command/command.go	/^type service struct {$/;"	s	package:command
service	app/router/command/command.go	/^type service struct {$/;"	s	package:command
service	app/stats/command/command.go	/^type service struct {$/;"	s	package:command
serviceHandler	infra/control/api.go	/^type serviceHandler func(ctx context.Context, conn *grpc.ClientConn, method string, request stri/;"	t	package:control	typeref:typename:func(ctx context.Context, conn *grpc.ClientConn, method string, request string) (string, error)
services	app/commander/commander.go	/^	services []Service$/;"	m	struct:commander.Commander	typeref:typename:[]Service
session	common/session/context.go	/^package session$/;"	p
session	common/session/session.go	/^package session \/\/ import "v2ray.com\/core\/common\/session"$/;"	p
session	features/routing/session/context.go	/^package session$/;"	p
session	transport/internet/quic/dialer.go	/^	session quic.Session$/;"	m	struct:quic.sessionContext	typeref:typename:quic.Session
sessionContext	transport/internet/quic/dialer.go	/^type sessionContext struct {$/;"	s	package:quic
sessionContextKey	proxy/mtproto/auth.go	/^	sessionContextKey contextKey = iota$/;"	c	package:mtproto	typeref:type:contextKey
sessionHistory	proxy/vmess/encoding/server.go	/^	sessionHistory  *SessionHistory$/;"	m	struct:encoding.ServerSession	typeref:typename:*SessionHistory
sessionHistory	proxy/vmess/inbound/inbound.go	/^	sessionHistory        *encoding.SessionHistory$/;"	m	struct:inbound.Handler	typeref:typename:*encoding.SessionHistory
sessionId	proxy/vmess/encoding/server.go	/^type sessionId struct {$/;"	s	package:encoding
sessionKey	common/session/context.go	/^type sessionKey int$/;"	t	package:session	typeref:typename:int
sessionManager	common/mux/client.go	/^	sessionManager *SessionManager$/;"	m	struct:mux.ClientWorker	typeref:typename:*SessionManager
sessionManager	common/mux/server.go	/^	sessionManager *SessionManager$/;"	m	struct:mux.ServerWorker	typeref:typename:*SessionManager
sessions	common/mux/session.go	/^	sessions map[uint16]*Session$/;"	m	struct:mux.SessionManager	typeref:typename:map[uint16]*Session
sessions	transport/internet/kcp/listener.go	/^	sessions   map[ConnectionID]*Connection$/;"	m	struct:kcp.Listener	typeref:typename:map[ConnectionID]*Connection
sessions	transport/internet/quic/dialer.go	/^	sessions map[net.Destination][]*sessionContext$/;"	m	struct:quic.clientSessions	typeref:typename:map[net.Destination][]*sessionContext
setPort	transport/internet/sockopt_freebsd.go	/^func (nl *pfiocNatlook) setPort(remote, local int) {$/;"	f	struct:internet.pfiocNatlook
setProxyBasicAuth	testing/scenarios/http_test.go	/^func setProxyBasicAuth(req *http.Request, user, pass string) {$/;"	f	package:scenarios
setReuseAddr	transport/internet/sockopt_darwin.go	/^func setReuseAddr(fd uintptr) error {$/;"	f	package:internet	typeref:typename:error
setReuseAddr	transport/internet/sockopt_freebsd.go	/^func setReuseAddr(fd uintptr) error {$/;"	f	package:internet	typeref:typename:error
setReuseAddr	transport/internet/sockopt_linux.go	/^func setReuseAddr(fd uintptr) error {$/;"	f	package:internet	typeref:typename:error
setReuseAddr	transport/internet/sockopt_other.go	/^func setReuseAddr(fd uintptr) error {$/;"	f	package:internet	typeref:typename:error
setReuseAddr	transport/internet/sockopt_windows.go	/^func setReuseAddr(fd uintptr) error {$/;"	f	package:internet	typeref:typename:error
setReusePort	transport/internet/sockopt_darwin.go	/^func setReusePort(fd uintptr) error {$/;"	f	package:internet	typeref:typename:error
setReusePort	transport/internet/sockopt_freebsd.go	/^func setReusePort(fd uintptr) error {$/;"	f	package:internet	typeref:typename:error
setReusePort	transport/internet/sockopt_linux.go	/^func setReusePort(fd uintptr) error {$/;"	f	package:internet	typeref:typename:error
setReusePort	transport/internet/sockopt_other.go	/^func setReusePort(fd uintptr) error {$/;"	f	package:internet	typeref:typename:error
setReusePort	transport/internet/sockopt_windows.go	/^func setReusePort(fd uintptr) error {$/;"	f	package:internet	typeref:typename:error
setTFO	transport/internet/sockopt_windows.go	/^func setTFO(fd syscall.Handle, settings SocketConfig_TCPFastOpenState) error {$/;"	f	package:internet	typeref:typename:error
setUpHTTPTunnel	proxy/http/client.go	/^func setUpHTTPTunnel(ctx context.Context, dest net.Destination, target string, user *protocol.Me/;"	f	package:http	typeref:typename:(net.Conn, error)
settings	app/dispatcher/config.proto	/^  SessionConfig settings = 1;$/;"	f	message:v2ray.core.app.dispatcher.Config	typeref:typename:SessionConfig
settings	bin/config/config-client-prod.json	/^      "settings": {$/;"	o	object:inbounds.0
settings	bin/config/config-client.json	/^      "settings": {$/;"	o	object:inbounds.0
settings	bin/config/ss-client.json	/^      "settings": {$/;"	o	object:inbounds.0
settings	bin/config/ss-client.json	/^      "settings": {$/;"	o	object:outbounds.0
settings	bin/config/ss-server.json	/^      "settings": {$/;"	o	object:inbounds.0
settings	bin/config/ss-server.json	/^      "settings": {}$/;"	o	object:outbounds.0
settings	release/config/vpoint_socks_vmess.json	/^    "settings": {$/;"	o	object:inbounds.0
settings	release/config/vpoint_socks_vmess.json	/^    "settings": {},$/;"	o	object:outbounds.0
settings	release/config/vpoint_vmess_freedom.json	/^    "settings": {$/;"	o	object:inbounds.0
settings	release/config/vpoint_vmess_freedom.json	/^    "settings": {}$/;"	o	object:outbounds.0
settings	release/config/vpoint_vmess_freedom.json	/^    "settings": {},$/;"	o	object:outbounds.1
settings	transport/internet/config.proto	/^  v2ray.core.common.serial.TypedMessage settings = 2;$/;"	f	message:v2ray.core.transport.internet.TransportConfig	typeref:typename:v2ray.core.common.serial.TypedMessage
severity	common/errors/errors.go	/^	severity log.Severity$/;"	m	struct:errors.Error	typeref:typename:log.Severity
shadowsocks	proxy/shadowsocks/client.go	/^package shadowsocks$/;"	p
shadowsocks	proxy/shadowsocks/config.go	/^package shadowsocks$/;"	p
shadowsocks	proxy/shadowsocks/config.pb.go	/^package shadowsocks$/;"	p
shadowsocks	proxy/shadowsocks/errors.generated.go	/^package shadowsocks$/;"	p
shadowsocks	proxy/shadowsocks/protocol.go	/^package shadowsocks$/;"	p
shadowsocks	proxy/shadowsocks/server.go	/^package shadowsocks$/;"	p
shadowsocks	proxy/shadowsocks/shadowsocks.go	/^package shadowsocks$/;"	p
shadowsocks_test	proxy/shadowsocks/config_test.go	/^package shadowsocks_test$/;"	p
shadowsocks_test	proxy/shadowsocks/protocol_test.go	/^package shadowsocks_test$/;"	p
shake	proxy/vmess/encoding/auth.go	/^	shake  sha3.ShakeHash$/;"	m	struct:encoding.ShakeSizeParser	typeref:typename:sha3.ShakeHash
shouldContinue	transport/internet/kcp/connection.go	/^	shouldContinue  func() bool$/;"	m	struct:kcp.Updater	typeref:typename:func() bool
shouldEnablePadding	proxy/vmess/outbound/outbound.go	/^func shouldEnablePadding(s protocol.SecurityType) bool {$/;"	f	package:outbound	typeref:typename:bool
shouldOverride	app/dispatcher/default.go	/^func shouldOverride(result SniffResult, domainOverride []string) bool {$/;"	f	package:dispatcher	typeref:typename:bool
shouldTerminate	transport/internet/kcp/connection.go	/^	shouldTerminate func() bool$/;"	m	struct:kcp.Updater	typeref:typename:func() bool
sign	app/p2p/wire/seedlist.proto	/^    bytes sign = 7;         \/\/ signature of message data + method specific data by message aut/;"	f	message:wire.MessageData	typeref:typename:bytes
signal	common/signal/notifier.go	/^package signal$/;"	p
signal	common/signal/timer.go	/^package signal$/;"	p
signal_test	common/signal/notifier_test.go	/^package signal_test$/;"	p
signal_test	common/signal/timer_test.go	/^package signal_test$/;"	p
since	transport/internet/kcp/connection.go	/^	since      int64$/;"	m	struct:kcp.Connection	typeref:typename:int64
size	app/dns/config.proto	/^    uint32 size = 2;$/;"	f	message:v2ray.core.app.dns.NameServer.OriginalRule	typeref:typename:uint32
size	common/crypto/auth.go	/^	size         uint16$/;"	m	struct:crypto.AuthenticationReader	typeref:typename:uint16
size	transport/internet/kcp/config.proto	/^  uint32 size = 1;$/;"	f	message:v2ray.core.transport.internet.kcp.ReadBuffer	typeref:typename:uint32
size	transport/internet/kcp/config.proto	/^  uint32 size = 1;$/;"	f	message:v2ray.core.transport.internet.kcp.WriteBuffer	typeref:typename:uint32
sizeBytes	common/crypto/auth.go	/^	sizeBytes    []byte$/;"	m	struct:crypto.AuthenticationReader	typeref:typename:[]byte
sizeCache	app/commander/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:commander.Config	typeref:typename:protoimpl.SizeCache
sizeCache	app/dispatcher/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:dispatcher.Config	typeref:typename:protoimpl.SizeCache
sizeCache	app/dispatcher/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:dispatcher.SessionConfig	typeref:typename:protoimpl.SizeCache
sizeCache	app/dns/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:dns.Config	typeref:typename:protoimpl.SizeCache
sizeCache	app/dns/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:dns.Config_HostMapping	typeref:typename:protoimpl.SizeCache
sizeCache	app/dns/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:dns.NameServer	typeref:typename:protoimpl.SizeCache
sizeCache	app/dns/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:dns.NameServer_OriginalRule	typeref:typename:protoimpl.SizeCache
sizeCache	app/dns/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:dns.NameServer_PriorityDomain	typeref:typename:protoimpl.SizeCache
sizeCache	app/log/command/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.Config	typeref:typename:protoimpl.SizeCache
sizeCache	app/log/command/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.RestartLoggerRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/log/command/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.RestartLoggerResponse	typeref:typename:protoimpl.SizeCache
sizeCache	app/log/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:log.Config	typeref:typename:protoimpl.SizeCache
sizeCache	app/policy/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:policy.Config	typeref:typename:protoimpl.SizeCache
sizeCache	app/policy/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:policy.Policy	typeref:typename:protoimpl.SizeCache
sizeCache	app/policy/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:policy.Policy_Buffer	typeref:typename:protoimpl.SizeCache
sizeCache	app/policy/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:policy.Policy_Stats	typeref:typename:protoimpl.SizeCache
sizeCache	app/policy/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:policy.Policy_Timeout	typeref:typename:protoimpl.SizeCache
sizeCache	app/policy/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:policy.Second	typeref:typename:protoimpl.SizeCache
sizeCache	app/policy/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:policy.SystemPolicy	typeref:typename:protoimpl.SizeCache
sizeCache	app/policy/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:policy.SystemPolicy_Stats	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.AddInboundRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.AddInboundResponse	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.AddOutboundRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.AddOutboundResponse	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.AddUserOperation	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.AlterInboundRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.AlterInboundResponse	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.AlterOutboundRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.AlterOutboundResponse	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.Config	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.RemoveInboundRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.RemoveInboundResponse	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.RemoveOutboundRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.RemoveOutboundResponse	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.RemoveUserOperation	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:proxyman.AllocationStrategy	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:proxyman.AllocationStrategy_AllocationStrategyConcurrency	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:proxyman.AllocationStrategy_AllocationStrategyRefresh	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:proxyman.InboundConfig	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:proxyman.InboundHandlerConfig	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:proxyman.MultiplexingConfig	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:proxyman.OutboundConfig	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:proxyman.ReceiverConfig	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:proxyman.SenderConfig	typeref:typename:protoimpl.SizeCache
sizeCache	app/proxyman/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:proxyman.SniffingConfig	typeref:typename:protoimpl.SizeCache
sizeCache	app/reverse/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:reverse.BridgeConfig	typeref:typename:protoimpl.SizeCache
sizeCache	app/reverse/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:reverse.Config	typeref:typename:protoimpl.SizeCache
sizeCache	app/reverse/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:reverse.Control	typeref:typename:protoimpl.SizeCache
sizeCache	app/reverse/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:reverse.PortalConfig	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.Config	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.RoutingContext	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.SubscribeRoutingStatsRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.TestRouteRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:router.BalancingRule	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:router.CIDR	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:router.Config	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:router.Domain	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:router.Domain_Attribute	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:router.GeoIP	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:router.GeoIPList	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:router.GeoSite	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:router.GeoSiteList	typeref:typename:protoimpl.SizeCache
sizeCache	app/router/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:router.RoutingRule	typeref:typename:protoimpl.SizeCache
sizeCache	app/stats/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.Config	typeref:typename:protoimpl.SizeCache
sizeCache	app/stats/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.GetStatsRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/stats/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.GetStatsResponse	typeref:typename:protoimpl.SizeCache
sizeCache	app/stats/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.QueryStatsRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/stats/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.QueryStatsResponse	typeref:typename:protoimpl.SizeCache
sizeCache	app/stats/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.Stat	typeref:typename:protoimpl.SizeCache
sizeCache	app/stats/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.SysStatsRequest	typeref:typename:protoimpl.SizeCache
sizeCache	app/stats/command/command.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:command.SysStatsResponse	typeref:typename:protoimpl.SizeCache
sizeCache	app/stats/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:stats.ChannelConfig	typeref:typename:protoimpl.SizeCache
sizeCache	app/stats/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:stats.Config	typeref:typename:protoimpl.SizeCache
sizeCache	common/net/address.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:net.IPOrDomain	typeref:typename:protoimpl.SizeCache
sizeCache	common/net/destination.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:net.Endpoint	typeref:typename:protoimpl.SizeCache
sizeCache	common/net/network.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:net.NetworkList	typeref:typename:protoimpl.SizeCache
sizeCache	common/net/port.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:net.PortList	typeref:typename:protoimpl.SizeCache
sizeCache	common/net/port.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:net.PortRange	typeref:typename:protoimpl.SizeCache
sizeCache	common/protocol/headers.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:protocol.SecurityConfig	typeref:typename:protoimpl.SizeCache
sizeCache	common/protocol/server_spec.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:protocol.ServerEndpoint	typeref:typename:protoimpl.SizeCache
sizeCache	common/protocol/user.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:protocol.User	typeref:typename:protoimpl.SizeCache
sizeCache	common/serial/typed_message.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:serial.TypedMessage	typeref:typename:protoimpl.SizeCache
sizeCache	config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:core.Config	typeref:typename:protoimpl.SizeCache
sizeCache	config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:core.InboundHandlerConfig	typeref:typename:protoimpl.SizeCache
sizeCache	config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:core.OutboundHandlerConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/blackhole/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:blackhole.Config	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/blackhole/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:blackhole.HTTPResponse	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/blackhole/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:blackhole.NoneResponse	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/dns/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:dns.Config	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/dokodemo/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:dokodemo.Config	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/freedom/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:freedom.Config	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/freedom/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:freedom.DestinationOverride	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/http/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:http.Account	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/http/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:http.ClientConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/http/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:http.ServerConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/mtproto/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:mtproto.Account	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/mtproto/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:mtproto.ClientConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/mtproto/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:mtproto.ServerConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/shadowsocks/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:shadowsocks.Account	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/shadowsocks/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:shadowsocks.ClientConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/shadowsocks/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:shadowsocks.ServerConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/socks/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:socks.Account	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/socks/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:socks.ClientConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/socks/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:socks.ServerConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/trojan/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:trojan.Account	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/trojan/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:trojan.ClientConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/trojan/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:trojan.Fallback	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/trojan/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:trojan.ServerConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/vless/account.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:vless.Account	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/vless/inbound/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:inbound.Config	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/vless/inbound/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:inbound.Fallback	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/vless/outbound/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:outbound.Config	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/vmess/account.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:vmess.Account	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/vmess/inbound/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:inbound.Config	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/vmess/inbound/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:inbound.DefaultConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/vmess/inbound/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:inbound.DetourConfig	typeref:typename:protoimpl.SizeCache
sizeCache	proxy/vmess/outbound/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:outbound.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:transport.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:internet.ProxyConfig	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:internet.SocketConfig	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:internet.StreamConfig	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:internet.TransportConfig	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/domainsocket/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:domainsocket.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/http/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:http.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/http/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:http.Header	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/http/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:http.Method	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/http/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:http.RequestConfig	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/http/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:http.ResponseConfig	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/http/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:http.Status	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/http/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:http.Version	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/noop/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:noop.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/noop/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:noop.ConnectionConfig	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/srtp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:srtp.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/tls/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:tls.PacketConfig	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/utp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:utp.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/wechat/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:wechat.VideoConfig	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/headers/wireguard/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:wireguard.WireguardConfig	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/http/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:http.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/kcp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:kcp.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/kcp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:kcp.ConnectionReuse	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/kcp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:kcp.DownlinkCapacity	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/kcp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:kcp.EncryptionSeed	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/kcp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:kcp.MTU	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/kcp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:kcp.ReadBuffer	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/kcp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:kcp.TTI	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/kcp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:kcp.UplinkCapacity	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/kcp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:kcp.WriteBuffer	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/quic/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:quic.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/tcp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:tcp.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/tls/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:tls.Certificate	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/tls/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:tls.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/udp/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:udp.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/websocket/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:websocket.Config	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/websocket/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:websocket.Header	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/xtls/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:xtls.Certificate	typeref:typename:protoimpl.SizeCache
sizeCache	transport/internet/xtls/config.pb.go	/^	sizeCache     protoimpl.SizeCache$/;"	m	struct:xtls.Config	typeref:typename:protoimpl.SizeCache
sizeDecoder	common/crypto/chunk.go	/^	sizeDecoder ChunkSizeDecoder$/;"	m	struct:crypto.ChunkStreamReader	typeref:typename:ChunkSizeDecoder
sizeEncoder	common/crypto/chunk.go	/^	sizeEncoder ChunkSizeEncoder$/;"	m	struct:crypto.ChunkStreamWriter	typeref:typename:ChunkSizeEncoder
sizeMulti	common/bytespool/pool.go	/^	sizeMulti = 4$/;"	c	package:bytespool
sizeParser	common/crypto/auth.go	/^	sizeParser   ChunkSizeDecoder$/;"	m	struct:crypto.AuthenticationReader	typeref:typename:ChunkSizeDecoder
sizeParser	common/crypto/auth.go	/^	sizeParser   ChunkSizeEncoder$/;"	m	struct:crypto.AuthenticationWriter	typeref:typename:ChunkSizeEncoder
sizeofPfiocNatlook	transport/internet/sockopt_freebsd.go	/^	sizeofPfiocNatlook = 0x4c$/;"	c	package:internet
sizeofSunPath	transport/internet/domainsocket/config.go	/^const sizeofSunPath = 108$/;"	c	package:domainsocket
skipAddons	proxy/vless/encoding/addons.pb.go	/^func skipAddons(dAtA []byte) (n int, err error) {$/;"	f	package:encoding	typeref:typename:(n int, err error)
skipSeedlist	app/p2p/wire/seedlist.pb.go	/^func skipSeedlist(dAtA []byte) (n int, err error) {$/;"	f	package:wire	typeref:typename:(n int, err error)
sn	transport/internet/headers/wechat/wechat.go	/^	sn uint32$/;"	m	struct:wechat.VideoChat	typeref:typename:uint32
sniffer	app/dispatcher/default.go	/^func sniffer(ctx context.Context, cReader *cachedReader) (SniffResult, error) {$/;"	f	package:dispatcher	typeref:typename:(SniffResult, error)
sniffer	app/dispatcher/sniffer.go	/^	sniffer []protocolSniffer$/;"	m	struct:dispatcher.Sniffer	typeref:typename:[]protocolSniffer
sniffingConfig	app/proxyman/inbound/worker.go	/^	sniffingConfig  *proxyman.SniffingConfig$/;"	m	struct:inbound.tcpWorker	typeref:typename:*proxyman.SniffingConfig
sniffing_settings	app/proxyman/config.proto	/^  SniffingConfig sniffing_settings = 8;$/;"	f	message:v2ray.core.app.proxyman.ReceiverConfig	typeref:typename:SniffingConfig
soReUsePort	transport/internet/sockopt_freebsd.go	/^	soReUsePort        = 0x00000200$/;"	c	package:internet
soReUsePortLB	transport/internet/sockopt_freebsd.go	/^	soReUsePortLB      = 0x00010000$/;"	c	package:internet
socket_settings	transport/internet/config.proto	/^  SocketConfig socket_settings = 6;$/;"	f	message:v2ray.core.transport.internet.StreamConfig	typeref:typename:SocketConfig
sockopt	proxy/dokodemo/dokodemo.go	/^	sockopt       *session.Sockopt$/;"	m	struct:dokodemo.DokodemoDoor	typeref:typename:*session.Sockopt
sockoptSessionKey	common/session/context.go	/^	sockoptSessionKey$/;"	c	package:session
socks	proxy/socks/client.go	/^package socks$/;"	p
socks	proxy/socks/config.go	/^package socks$/;"	p
socks	proxy/socks/config.pb.go	/^package socks$/;"	p
socks	proxy/socks/errors.generated.go	/^package socks$/;"	p
socks	proxy/socks/protocol.go	/^package socks$/;"	p
socks	proxy/socks/server.go	/^package socks$/;"	p
socks	proxy/socks/socks.go	/^package socks$/;"	p
socks4	testing/scenarios/socks_test.go	/^	socks4 "h12.io\/socks"$/;"	P	package:h12.io/socks
socks4RequestGranted	proxy/socks/protocol.go	/^	socks4RequestGranted  = 90$/;"	c	package:socks
socks4RequestRejected	proxy/socks/protocol.go	/^	socks4RequestRejected = 91$/;"	c	package:socks
socks4Version	proxy/socks/protocol.go	/^	socks4Version = 0x04$/;"	c	package:socks
socks5Version	proxy/socks/protocol.go	/^	socks5Version = 0x05$/;"	c	package:socks
socks_test	proxy/socks/protocol_test.go	/^package socks_test$/;"	p
sortMapKeys	infra/conf/transport_authenticators.go	/^func sortMapKeys(m map[string]*StringList) []string {$/;"	f	package:conf	typeref:typename:[]string
source_cidr	app/router/config.proto	/^  repeated CIDR source_cidr = 6 [deprecated = true];$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:CIDR
source_geoip	app/router/config.proto	/^  repeated GeoIP source_geoip = 11;$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:GeoIP
source_port_list	app/router/config.proto	/^  v2ray.core.common.net.PortList source_port_list = 16;$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:v2ray.core.common.net.PortList
sovAddons	proxy/vless/encoding/addons.pb.go	/^func sovAddons(x uint64) (n int) {$/;"	f	package:encoding	typeref:typename:(n int)
sovSeedlist	app/p2p/wire/seedlist.pb.go	/^func sovSeedlist(x uint64) (n int) {$/;"	f	package:wire	typeref:typename:(n int)
sozAddons	proxy/vless/encoding/addons.pb.go	/^func sozAddons(x uint64) (n int) {$/;"	f	package:encoding	typeref:typename:(n int)
sozSeedlist	app/p2p/wire/seedlist.pb.go	/^func sozSeedlist(x uint64) (n int) {$/;"	f	package:wire	typeref:typename:(n int)
src	app/proxyman/inbound/worker.go	/^	src  net.Destination$/;"	m	struct:inbound.connID	typeref:typename:net.Destination
srtp	transport/internet/headers/srtp/config.pb.go	/^package srtp$/;"	p
srtp	transport/internet/headers/srtp/srtp.go	/^package srtp$/;"	p
srtp_test	transport/internet/headers/srtp/srtp_test.go	/^package srtp_test$/;"	p
srtt	transport/internet/kcp/connection.go	/^	srtt             uint32$/;"	m	struct:kcp.RoundTripInfo	typeref:typename:uint32
stack	common/stack/bytes.go	/^package stack$/;"	p
start	app/dns/dnscommon.go	/^	start   time.Time$/;"	m	struct:dns.dnsRequest	typeref:typename:time.Time
start	common/buf/buffer.go	/^	start int32$/;"	m	struct:buf.Buffer	typeref:typename:int32
start	transport/internet/udp/hub.go	/^func (h *Hub) start() {$/;"	f	struct:udp.Hub
startInternal	app/log/log.go	/^func (g *Instance) startInternal() error {$/;"	f	struct:log.Instance	typeref:typename:error
startQuickClosingTCPServer	testing/scenarios/policy_test.go	/^func startQuickClosingTCPServer() (net.Listener, error) {$/;"	f	package:scenarios	typeref:typename:(net.Listener, error)
startTime	app/stats/command/command.go	/^	startTime time.Time$/;"	m	struct:command.statsServer	typeref:typename:time.Time
startV2Ray	main/main.go	/^func startV2Ray() (core.Server, error) {$/;"	f	package:main	typeref:typename:(core.Server, error)
stat	app/stats/command/command.proto	/^  Stat stat = 1;$/;"	f	message:v2ray.core.app.stats.command.GetStatsResponse	typeref:typename:Stat
stat	app/stats/command/command.proto	/^  repeated Stat stat = 1;$/;"	f	message:v2ray.core.app.stats.command.QueryStatsResponse	typeref:typename:Stat
state	app/commander/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:commander.Config	typeref:typename:protoimpl.MessageState
state	app/dispatcher/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:dispatcher.Config	typeref:typename:protoimpl.MessageState
state	app/dispatcher/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:dispatcher.SessionConfig	typeref:typename:protoimpl.MessageState
state	app/dns/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:dns.Config	typeref:typename:protoimpl.MessageState
state	app/dns/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:dns.Config_HostMapping	typeref:typename:protoimpl.MessageState
state	app/dns/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:dns.NameServer	typeref:typename:protoimpl.MessageState
state	app/dns/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:dns.NameServer_OriginalRule	typeref:typename:protoimpl.MessageState
state	app/dns/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:dns.NameServer_PriorityDomain	typeref:typename:protoimpl.MessageState
state	app/log/command/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.Config	typeref:typename:protoimpl.MessageState
state	app/log/command/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.RestartLoggerRequest	typeref:typename:protoimpl.MessageState
state	app/log/command/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.RestartLoggerResponse	typeref:typename:protoimpl.MessageState
state	app/log/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:log.Config	typeref:typename:protoimpl.MessageState
state	app/policy/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:policy.Config	typeref:typename:protoimpl.MessageState
state	app/policy/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:policy.Policy	typeref:typename:protoimpl.MessageState
state	app/policy/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:policy.Policy_Buffer	typeref:typename:protoimpl.MessageState
state	app/policy/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:policy.Policy_Stats	typeref:typename:protoimpl.MessageState
state	app/policy/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:policy.Policy_Timeout	typeref:typename:protoimpl.MessageState
state	app/policy/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:policy.Second	typeref:typename:protoimpl.MessageState
state	app/policy/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:policy.SystemPolicy	typeref:typename:protoimpl.MessageState
state	app/policy/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:policy.SystemPolicy_Stats	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.AddInboundRequest	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.AddInboundResponse	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.AddOutboundRequest	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.AddOutboundResponse	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.AddUserOperation	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.AlterInboundRequest	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.AlterInboundResponse	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.AlterOutboundRequest	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.AlterOutboundResponse	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.Config	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.RemoveInboundRequest	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.RemoveInboundResponse	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.RemoveOutboundRequest	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.RemoveOutboundResponse	typeref:typename:protoimpl.MessageState
state	app/proxyman/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.RemoveUserOperation	typeref:typename:protoimpl.MessageState
state	app/proxyman/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:proxyman.AllocationStrategy	typeref:typename:protoimpl.MessageState
state	app/proxyman/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:proxyman.AllocationStrategy_AllocationStrategyConcurrency	typeref:typename:protoimpl.MessageState
state	app/proxyman/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:proxyman.AllocationStrategy_AllocationStrategyRefresh	typeref:typename:protoimpl.MessageState
state	app/proxyman/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:proxyman.InboundConfig	typeref:typename:protoimpl.MessageState
state	app/proxyman/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:proxyman.InboundHandlerConfig	typeref:typename:protoimpl.MessageState
state	app/proxyman/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:proxyman.MultiplexingConfig	typeref:typename:protoimpl.MessageState
state	app/proxyman/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:proxyman.OutboundConfig	typeref:typename:protoimpl.MessageState
state	app/proxyman/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:proxyman.ReceiverConfig	typeref:typename:protoimpl.MessageState
state	app/proxyman/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:proxyman.SenderConfig	typeref:typename:protoimpl.MessageState
state	app/proxyman/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:proxyman.SniffingConfig	typeref:typename:protoimpl.MessageState
state	app/reverse/bridge.go	/^	state      Control_State$/;"	m	struct:reverse.BridgeWorker	typeref:typename:Control_State
state	app/reverse/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:reverse.BridgeConfig	typeref:typename:protoimpl.MessageState
state	app/reverse/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:reverse.Config	typeref:typename:protoimpl.MessageState
state	app/reverse/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:reverse.Control	typeref:typename:protoimpl.MessageState
state	app/reverse/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:reverse.PortalConfig	typeref:typename:protoimpl.MessageState
state	app/reverse/config.proto	/^  State state = 1;$/;"	f	message:v2ray.core.app.reverse.Control	typeref:typename:State
state	app/router/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.Config	typeref:typename:protoimpl.MessageState
state	app/router/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.RoutingContext	typeref:typename:protoimpl.MessageState
state	app/router/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.SubscribeRoutingStatsRequest	typeref:typename:protoimpl.MessageState
state	app/router/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.TestRouteRequest	typeref:typename:protoimpl.MessageState
state	app/router/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:router.BalancingRule	typeref:typename:protoimpl.MessageState
state	app/router/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:router.CIDR	typeref:typename:protoimpl.MessageState
state	app/router/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:router.Config	typeref:typename:protoimpl.MessageState
state	app/router/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:router.Domain	typeref:typename:protoimpl.MessageState
state	app/router/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:router.Domain_Attribute	typeref:typename:protoimpl.MessageState
state	app/router/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:router.GeoIP	typeref:typename:protoimpl.MessageState
state	app/router/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:router.GeoIPList	typeref:typename:protoimpl.MessageState
state	app/router/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:router.GeoSite	typeref:typename:protoimpl.MessageState
state	app/router/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:router.GeoSiteList	typeref:typename:protoimpl.MessageState
state	app/router/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:router.RoutingRule	typeref:typename:protoimpl.MessageState
state	app/stats/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.Config	typeref:typename:protoimpl.MessageState
state	app/stats/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.GetStatsRequest	typeref:typename:protoimpl.MessageState
state	app/stats/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.GetStatsResponse	typeref:typename:protoimpl.MessageState
state	app/stats/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.QueryStatsRequest	typeref:typename:protoimpl.MessageState
state	app/stats/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.QueryStatsResponse	typeref:typename:protoimpl.MessageState
state	app/stats/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.Stat	typeref:typename:protoimpl.MessageState
state	app/stats/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.SysStatsRequest	typeref:typename:protoimpl.MessageState
state	app/stats/command/command.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:command.SysStatsResponse	typeref:typename:protoimpl.MessageState
state	app/stats/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:stats.ChannelConfig	typeref:typename:protoimpl.MessageState
state	app/stats/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:stats.Config	typeref:typename:protoimpl.MessageState
state	common/crypto/internal/chacha.go	/^	state  [stateSize]uint32 \/\/ the state as an array of 16 32-bit words$/;"	m	struct:internal.ChaCha20Stream	typeref:typename:[stateSize]uint32
state	common/net/address.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:net.IPOrDomain	typeref:typename:protoimpl.MessageState
state	common/net/destination.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:net.Endpoint	typeref:typename:protoimpl.MessageState
state	common/net/network.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:net.NetworkList	typeref:typename:protoimpl.MessageState
state	common/net/port.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:net.PortList	typeref:typename:protoimpl.MessageState
state	common/net/port.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:net.PortRange	typeref:typename:protoimpl.MessageState
state	common/protocol/headers.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:protocol.SecurityConfig	typeref:typename:protoimpl.MessageState
state	common/protocol/server_spec.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:protocol.ServerEndpoint	typeref:typename:protoimpl.MessageState
state	common/protocol/user.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:protocol.User	typeref:typename:protoimpl.MessageState
state	common/serial/typed_message.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:serial.TypedMessage	typeref:typename:protoimpl.MessageState
state	config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:core.Config	typeref:typename:protoimpl.MessageState
state	config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:core.InboundHandlerConfig	typeref:typename:protoimpl.MessageState
state	config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:core.OutboundHandlerConfig	typeref:typename:protoimpl.MessageState
state	infra/conf/json/reader.go	/^	state State$/;"	m	struct:json.Reader	typeref:typename:State
state	proxy/blackhole/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:blackhole.Config	typeref:typename:protoimpl.MessageState
state	proxy/blackhole/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:blackhole.HTTPResponse	typeref:typename:protoimpl.MessageState
state	proxy/blackhole/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:blackhole.NoneResponse	typeref:typename:protoimpl.MessageState
state	proxy/dns/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:dns.Config	typeref:typename:protoimpl.MessageState
state	proxy/dokodemo/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:dokodemo.Config	typeref:typename:protoimpl.MessageState
state	proxy/freedom/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:freedom.Config	typeref:typename:protoimpl.MessageState
state	proxy/freedom/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:freedom.DestinationOverride	typeref:typename:protoimpl.MessageState
state	proxy/http/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:http.Account	typeref:typename:protoimpl.MessageState
state	proxy/http/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:http.ClientConfig	typeref:typename:protoimpl.MessageState
state	proxy/http/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:http.ServerConfig	typeref:typename:protoimpl.MessageState
state	proxy/mtproto/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:mtproto.Account	typeref:typename:protoimpl.MessageState
state	proxy/mtproto/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:mtproto.ClientConfig	typeref:typename:protoimpl.MessageState
state	proxy/mtproto/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:mtproto.ServerConfig	typeref:typename:protoimpl.MessageState
state	proxy/shadowsocks/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:shadowsocks.Account	typeref:typename:protoimpl.MessageState
state	proxy/shadowsocks/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:shadowsocks.ClientConfig	typeref:typename:protoimpl.MessageState
state	proxy/shadowsocks/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:shadowsocks.ServerConfig	typeref:typename:protoimpl.MessageState
state	proxy/socks/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:socks.Account	typeref:typename:protoimpl.MessageState
state	proxy/socks/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:socks.ClientConfig	typeref:typename:protoimpl.MessageState
state	proxy/socks/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:socks.ServerConfig	typeref:typename:protoimpl.MessageState
state	proxy/trojan/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:trojan.Account	typeref:typename:protoimpl.MessageState
state	proxy/trojan/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:trojan.ClientConfig	typeref:typename:protoimpl.MessageState
state	proxy/trojan/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:trojan.Fallback	typeref:typename:protoimpl.MessageState
state	proxy/trojan/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:trojan.ServerConfig	typeref:typename:protoimpl.MessageState
state	proxy/vless/account.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:vless.Account	typeref:typename:protoimpl.MessageState
state	proxy/vless/inbound/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:inbound.Config	typeref:typename:protoimpl.MessageState
state	proxy/vless/inbound/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:inbound.Fallback	typeref:typename:protoimpl.MessageState
state	proxy/vless/outbound/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:outbound.Config	typeref:typename:protoimpl.MessageState
state	proxy/vmess/account.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:vmess.Account	typeref:typename:protoimpl.MessageState
state	proxy/vmess/inbound/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:inbound.Config	typeref:typename:protoimpl.MessageState
state	proxy/vmess/inbound/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:inbound.DefaultConfig	typeref:typename:protoimpl.MessageState
state	proxy/vmess/inbound/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:inbound.DetourConfig	typeref:typename:protoimpl.MessageState
state	proxy/vmess/outbound/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:outbound.Config	typeref:typename:protoimpl.MessageState
state	transport/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:transport.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:internet.ProxyConfig	typeref:typename:protoimpl.MessageState
state	transport/internet/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:internet.SocketConfig	typeref:typename:protoimpl.MessageState
state	transport/internet/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:internet.StreamConfig	typeref:typename:protoimpl.MessageState
state	transport/internet/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:internet.TransportConfig	typeref:typename:protoimpl.MessageState
state	transport/internet/domainsocket/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:domainsocket.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/http/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:http.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/http/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:http.Header	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/http/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:http.Method	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/http/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:http.RequestConfig	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/http/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:http.ResponseConfig	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/http/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:http.Status	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/http/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:http.Version	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/noop/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:noop.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/noop/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:noop.ConnectionConfig	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/srtp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:srtp.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/tls/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:tls.PacketConfig	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/utp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:utp.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/wechat/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:wechat.VideoConfig	typeref:typename:protoimpl.MessageState
state	transport/internet/headers/wireguard/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:wireguard.WireguardConfig	typeref:typename:protoimpl.MessageState
state	transport/internet/http/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:http.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/kcp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:kcp.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/kcp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:kcp.ConnectionReuse	typeref:typename:protoimpl.MessageState
state	transport/internet/kcp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:kcp.DownlinkCapacity	typeref:typename:protoimpl.MessageState
state	transport/internet/kcp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:kcp.EncryptionSeed	typeref:typename:protoimpl.MessageState
state	transport/internet/kcp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:kcp.MTU	typeref:typename:protoimpl.MessageState
state	transport/internet/kcp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:kcp.ReadBuffer	typeref:typename:protoimpl.MessageState
state	transport/internet/kcp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:kcp.TTI	typeref:typename:protoimpl.MessageState
state	transport/internet/kcp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:kcp.UplinkCapacity	typeref:typename:protoimpl.MessageState
state	transport/internet/kcp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:kcp.WriteBuffer	typeref:typename:protoimpl.MessageState
state	transport/internet/kcp/connection.go	/^	state            State$/;"	m	struct:kcp.Connection	typeref:typename:State
state	transport/internet/quic/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:quic.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/tcp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:tcp.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/tls/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:tls.Certificate	typeref:typename:protoimpl.MessageState
state	transport/internet/tls/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:tls.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/udp/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:udp.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/websocket/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:websocket.Config	typeref:typename:protoimpl.MessageState
state	transport/internet/websocket/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:websocket.Header	typeref:typename:protoimpl.MessageState
state	transport/internet/xtls/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:xtls.Certificate	typeref:typename:protoimpl.MessageState
state	transport/internet/xtls/config.pb.go	/^	state         protoimpl.MessageState$/;"	m	struct:xtls.Config	typeref:typename:protoimpl.MessageState
state	transport/pipe/impl.go	/^	state       state$/;"	m	struct:pipe.pipe	typeref:typename:state
state	transport/pipe/impl.go	/^type state byte$/;"	t	package:pipe	typeref:typename:byte
stateBeginTime	transport/internet/kcp/connection.go	/^	stateBeginTime   uint32$/;"	m	struct:kcp.Connection	typeref:typename:uint32
stateSize	common/crypto/internal/chacha.go	/^	stateSize = 16                   \/\/ the size of ChaCha20's state, in words$/;"	c	package:internal
staticHandler	app/dns/server_test.go	/^type staticHandler struct {$/;"	s	package:dns_test
staticHandler	proxy/dns/dns_test.go	/^type staticHandler struct {$/;"	s	package:dns_test
static_hosts	app/dns/config.proto	/^  repeated HostMapping static_hosts = 4;$/;"	f	message:v2ray.core.app.dns.Config	typeref:typename:HostMapping
stats	app/dispatcher/default.go	/^	stats  stats.Manager$/;"	m	struct:dispatcher.DefaultDispatcher	typeref:typename:stats.Manager
stats	app/policy/config.proto	/^  Stats stats = 1;$/;"	f	message:v2ray.core.app.policy.SystemPolicy	typeref:typename:Stats
stats	app/policy/config.proto	/^  Stats stats = 2;$/;"	f	message:v2ray.core.app.policy.Policy	typeref:typename:Stats
stats	app/stats/channel.go	/^package stats$/;"	p
stats	app/stats/command/command.go	/^	stats     feature_stats.Manager$/;"	m	struct:command.statsServer	typeref:typename:feature_stats.Manager
stats	app/stats/config.pb.go	/^package stats$/;"	p
stats	app/stats/counter.go	/^package stats$/;"	p
stats	app/stats/errors.generated.go	/^package stats$/;"	p
stats	app/stats/stats.go	/^package stats$/;"	p
stats	features/stats/errors.generated.go	/^package stats$/;"	p
stats	features/stats/stats.go	/^package stats$/;"	p
statsManager	app/stats/command/command.go	/^	statsManager feature_stats.Manager$/;"	m	struct:command.service	typeref:typename:feature_stats.Manager
statsServer	app/stats/command/command.go	/^type statsServer struct {$/;"	s	package:command
statsService	infra/control/api.go	/^	statsService "v2ray.com\/core\/app\/stats\/command"$/;"	P	package:v2ray.com/core/app/stats/command
statsServiceClient	app/stats/command/command_grpc.pb.go	/^type statsServiceClient struct {$/;"	s	package:command
stats_test	app/stats/channel_test.go	/^package stats_test$/;"	p
stats_test	app/stats/counter_test.go	/^package stats_test$/;"	p
stats_test	app/stats/stats_test.go	/^package stats_test$/;"	p
statscmd	testing/scenarios/command_test.go	/^	statscmd "v2ray.com\/core\/app\/stats\/command"$/;"	P	package:v2ray.com/core/app/stats/command
statsservice	infra/conf/api.go	/^	statsservice "v2ray.com\/core\/app\/stats\/command"$/;"	P	package:v2ray.com/core/app/stats/command
status	app/log/command/config_grpc.pb.go	/^	status "google.golang.org\/grpc\/status"$/;"	P	package:google.golang.org/grpc/status
status	app/proxyman/command/command_grpc.pb.go	/^	status "google.golang.org\/grpc\/status"$/;"	P	package:google.golang.org/grpc/status
status	app/router/command/command_grpc.pb.go	/^	status "google.golang.org\/grpc\/status"$/;"	P	package:google.golang.org/grpc/status
status	app/stats/command/command_grpc.pb.go	/^	status "google.golang.org\/grpc\/status"$/;"	P	package:google.golang.org/grpc/status
status	transport/internet/headers/http/config.proto	/^  Status status = 2;$/;"	f	message:v2ray.core.transport.internet.headers.http.ResponseConfig	typeref:typename:Status
statusCmdNotSupport	proxy/socks/protocol.go	/^	statusCmdNotSupport = 0x07$/;"	c	package:socks
statusSuccess	proxy/socks/protocol.go	/^	statusSuccess       = 0x00$/;"	c	package:socks
store	store/db.go	/^package store$/;"	p
store	store/leveldb.go	/^package store$/;"	p
store	store/sqlite.go	/^package store$/;"	p
store	store/task.go	/^package store$/;"	p
store	store/utils.go	/^package store$/;"	p
strategy	app/router/balancing.go	/^	strategy  BalancingStrategy$/;"	m	struct:router.Balancer	typeref:typename:BalancingStrategy
strategy	common/mux/client.go	/^	strategy       ClientStrategy$/;"	m	struct:mux.ClientWorker	typeref:typename:ClientStrategy
stream	app/proxyman/inbound/worker.go	/^	stream          *internet.MemoryStreamConfig$/;"	m	struct:inbound.tcpWorker	typeref:typename:*internet.MemoryStreamConfig
stream	app/proxyman/inbound/worker.go	/^	stream          *internet.MemoryStreamConfig$/;"	m	struct:inbound.udpWorker	typeref:typename:*internet.MemoryStreamConfig
stream	common/crypto/io.go	/^	stream    cipher.Stream$/;"	m	struct:crypto.CryptionWriter	typeref:typename:cipher.Stream
stream	common/crypto/io.go	/^	stream cipher.Stream$/;"	m	struct:crypto.CryptionReader	typeref:typename:cipher.Stream
stream	transport/internet/quic/conn.go	/^	stream quic.Stream$/;"	m	struct:quic.interConn	typeref:typename:quic.Stream
streamSettings	app/proxyman/inbound/dynamic.go	/^	streamSettings *internet.MemoryStreamConfig$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:*internet.MemoryStreamConfig
streamSettings	app/proxyman/outbound/handler.go	/^	streamSettings  *internet.MemoryStreamConfig$/;"	m	struct:outbound.Handler	typeref:typename:*internet.MemoryStreamConfig
stream_settings	app/proxyman/config.proto	/^  v2ray.core.transport.internet.StreamConfig stream_settings = 2;$/;"	f	message:v2ray.core.app.proxyman.SenderConfig	typeref:typename:v2ray.core.transport.internet.StreamConfig
stream_settings	app/proxyman/config.proto	/^  v2ray.core.transport.internet.StreamConfig stream_settings = 4;$/;"	f	message:v2ray.core.app.proxyman.ReceiverConfig	typeref:typename:v2ray.core.transport.internet.StreamConfig
stringList	infra/control/cert.go	/^type stringList []string$/;"	t	package:control	typeref:typename:[]string
strings	app/p2p/wire/seedlist.pb.go	/^import strings "strings"$/;"	P	package:strings
strmatcher	common/strmatcher/domain_matcher.go	/^package strmatcher$/;"	p
strmatcher	common/strmatcher/full_matcher.go	/^package strmatcher$/;"	p
strmatcher	common/strmatcher/matchers.go	/^package strmatcher$/;"	p
strmatcher	common/strmatcher/strmatcher.go	/^package strmatcher$/;"	p
strmatcher_test	common/strmatcher/benchmark_test.go	/^package strmatcher_test$/;"	p
strmatcher_test	common/strmatcher/domain_matcher_test.go	/^package strmatcher_test$/;"	p
strmatcher_test	common/strmatcher/full_matcher_test.go	/^package strmatcher_test$/;"	p
strmatcher_test	common/strmatcher/matchers_test.go	/^package strmatcher_test$/;"	p
strmatcher_test	common/strmatcher/strmatcher_test.go	/^package strmatcher_test$/;"	p
sub	common/strmatcher/domain_matcher.go	/^	sub    map[string]*node$/;"	m	struct:strmatcher.node	typeref:typename:map[string]*node
subs	common/signal/pubsub/pubsub.go	/^	subs  map[string][]*Subscriber$/;"	m	struct:pubsub.Service	typeref:typename:map[string][]*Subscriber
subsLimit	app/stats/channel.go	/^	subsLimit  int  \/\/ Set to 0 as no subscriber limit$/;"	m	struct:stats.Channel	typeref:typename:int
subscribers	app/stats/channel.go	/^	subscribers []chan interface{}$/;"	m	struct:stats.Channel	typeref:typename:[]chan interface{}
substrMatcher	common/strmatcher/matchers.go	/^type substrMatcher string$/;"	t	package:strmatcher	typeref:typename:string
sync	app/commander/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/dispatcher/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/dns/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/log/command/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/log/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/policy/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/proxyman/command/command.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/proxyman/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/reverse/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/router/command/command.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/router/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/stats/command/command.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	app/stats/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	common/log/log.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	common/net/address.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	common/net/destination.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	common/net/network.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	common/net/port.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	common/protocol/headers.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	common/protocol/server_spec.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	common/protocol/user.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	common/serial/typed_message.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/blackhole/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/dns/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/dokodemo/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/freedom/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/http/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/mtproto/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/shadowsocks/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/socks/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/trojan/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/vless/account.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/vless/inbound/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/vless/outbound/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/vmess/account.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/vmess/inbound/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	proxy/vmess/outbound/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/domainsocket/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/headers/http/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/headers/noop/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/headers/srtp/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/headers/tls/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/headers/utp/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/headers/wechat/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/headers/wireguard/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/http/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/kcp/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/quic/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/tcp/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/tls/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/udp/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/websocket/config.pb.go	/^	sync "sync"$/;"	P	package:sync
sync	transport/internet/xtls/config.pb.go	/^	sync "sync"$/;"	P	package:sync
syncHandler	common/log/log.go	/^type syncHandler struct {$/;"	s	package:log
sysConn	transport/internet/quic/conn.go	/^type sysConn struct {$/;"	s	package:quic
sysDIOCNATLOOK	transport/internet/sockopt_freebsd.go	/^	sysDIOCNATLOOK = 0xc04c4417$/;"	c	package:internet
sysPFFWD	transport/internet/sockopt_freebsd.go	/^	sysPFFWD       = 0x3$/;"	c	package:internet
sysPFIN	transport/internet/sockopt_freebsd.go	/^	sysPFIN        = 0x1$/;"	c	package:internet
sysPFINOUT	transport/internet/sockopt_freebsd.go	/^	sysPFINOUT     = 0x0$/;"	c	package:internet
sysPFOUT	transport/internet/sockopt_freebsd.go	/^	sysPFOUT       = 0x2$/;"	c	package:internet
system	app/policy/config.proto	/^  SystemPolicy system = 2;$/;"	f	message:v2ray.core.app.policy.Config	typeref:typename:SystemPolicy
system	app/policy/manager.go	/^	system *SystemPolicy$/;"	m	struct:policy.Instance	typeref:typename:*SystemPolicy
tag	app/commander/commander.go	/^	tag      string$/;"	m	struct:commander.Commander	typeref:typename:string
tag	app/commander/config.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.app.commander.Config	typeref:typename:string
tag	app/commander/outbound.go	/^	tag      string$/;"	m	struct:commander.Outbound	typeref:typename:string
tag	app/dns/config.proto	/^  string tag = 6;$/;"	f	message:v2ray.core.app.dns.Config	typeref:typename:string
tag	app/dns/server.go	/^	tag           string$/;"	m	struct:dns.Server	typeref:typename:string
tag	app/proxyman/command/command.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.app.proxyman.command.AlterInboundRequest	typeref:typename:string
tag	app/proxyman/command/command.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.app.proxyman.command.AlterOutboundRequest	typeref:typename:string
tag	app/proxyman/command/command.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.app.proxyman.command.RemoveInboundRequest	typeref:typename:string
tag	app/proxyman/command/command.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.app.proxyman.command.RemoveOutboundRequest	typeref:typename:string
tag	app/proxyman/config.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.app.proxyman.InboundHandlerConfig	typeref:typename:string
tag	app/proxyman/inbound/always.go	/^	tag     string$/;"	m	struct:inbound.AlwaysOnInboundHandler	typeref:typename:string
tag	app/proxyman/inbound/dynamic.go	/^	tag            string$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:string
tag	app/proxyman/inbound/worker.go	/^	tag             string$/;"	m	struct:inbound.tcpWorker	typeref:typename:string
tag	app/proxyman/inbound/worker.go	/^	tag             string$/;"	m	struct:inbound.udpWorker	typeref:typename:string
tag	app/proxyman/outbound/handler.go	/^	tag             string$/;"	m	struct:outbound.Handler	typeref:typename:string
tag	app/reverse/bridge.go	/^	tag         string$/;"	m	struct:reverse.Bridge	typeref:typename:string
tag	app/reverse/bridge.go	/^	tag        string$/;"	m	struct:reverse.BridgeWorker	typeref:typename:string
tag	app/reverse/config.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.app.reverse.BridgeConfig	typeref:typename:string
tag	app/reverse/config.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.app.reverse.PortalConfig	typeref:typename:string
tag	app/reverse/portal.go	/^	tag    string$/;"	m	struct:reverse.Outbound	typeref:typename:string
tag	app/reverse/portal.go	/^	tag    string$/;"	m	struct:reverse.Portal	typeref:typename:string
tag	app/router/config.proto	/^    string tag = 1;$/;"	f	oneof:v2ray.core.app.router.RoutingRule.target_tag	typeref:typename:string
tag	app/router/config.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.app.router.BalancingRule	typeref:typename:string
tag	config.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.InboundHandlerConfig	typeref:typename:string
tag	config.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.OutboundHandlerConfig	typeref:typename:string
tag	release/config/vpoint_socks_vmess.json	/^    "tag": "direct"$/;"	s	object:outbounds.0
tag	release/config/vpoint_vmess_freedom.json	/^    "tag": "blocked"$/;"	s	object:outbounds.1
tag	transport/internet/config.proto	/^  string tag = 1;$/;"	f	message:v2ray.core.transport.internet.ProxyConfig	typeref:typename:string
taggedHandler	app/proxyman/outbound/outbound.go	/^	taggedHandler    map[string]outbound.Handler$/;"	m	struct:outbound.Manager	typeref:typename:map[string]outbound.Handler
taggedHandlers	app/proxyman/inbound/inbound.go	/^	taggedHandlers  map[string]inbound.Handler$/;"	m	struct:inbound.Manager	typeref:typename:map[string]inbound.Handler
tags	app/router/condition.go	/^	tags []string$/;"	m	struct:router.InboundTagMatcher	typeref:typename:[]string
taintedFuse	proxy/vmess/validator.go	/^	taintedFuse *uint32$/;"	m	struct:vmess.indexTimePair	typeref:typename:*uint32
target_tag	app/router/config.proto	/^  oneof target_tag {$/;"	o	message:v2ray.core.app.router.RoutingRule
task	app/proxyman/inbound/dynamic.go	/^	task           *task.Periodic$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:*task.Periodic
task	common/task/common.go	/^package task$/;"	p
task	common/task/periodic.go	/^package task$/;"	p
task	common/task/task.go	/^package task$/;"	p
task	proxy/vmess/encoding/server.go	/^	task  *task.Periodic$/;"	m	struct:encoding.SessionHistory	typeref:typename:*task.Periodic
task	proxy/vmess/validator.go	/^	task     *task.Periodic$/;"	m	struct:vmess.TimedUserValidator	typeref:typename:*task.Periodic
task_test	common/task/periodic_test.go	/^package task_test$/;"	p
task_test	common/task/task_test.go	/^package task_test$/;"	p
tcp	testing/servers/http/http.go	/^package tcp$/;"	p
tcp	testing/servers/tcp/port.go	/^package tcp$/;"	p
tcp	testing/servers/tcp/tcp.go	/^package tcp$/;"	p
tcp	transport/internet/tcp/config.go	/^package tcp$/;"	p
tcp	transport/internet/tcp/config.pb.go	/^package tcp$/;"	p
tcp	transport/internet/tcp/dialer.go	/^package tcp$/;"	p
tcp	transport/internet/tcp/errors.generated.go	/^package tcp$/;"	p
tcp	transport/internet/tcp/hub.go	/^package tcp$/;"	p
tcp	transport/internet/tcp/sockopt_freebsd.go	/^package tcp$/;"	p
tcp	transport/internet/tcp/sockopt_linux.go	/^package tcp$/;"	p
tcp	transport/internet/tcp/sockopt_other.go	/^package tcp$/;"	p
tcp	transport/internet/tcp/tcp.go	/^package tcp$/;"	p
tcpHeaderLoader	infra/conf/transport_internet.go	/^	tcpHeaderLoader = NewJSONConfigLoader(ConfigCreatorCache{$/;"	v	package:conf
tcpWorker	app/proxyman/inbound/worker.go	/^type tcpWorker struct {$/;"	s	package:inbound
tcp_test	transport/internet/tcp/sockopt_linux_test.go	/^package tcp_test$/;"	p
tcptransport	testing/scenarios/transport_test.go	/^	tcptransport "v2ray.com\/core\/transport\/internet\/tcp"$/;"	P	package:v2ray.com/core/transport/internet/tcp
test	main/main.go	/^	test        = flag.Bool("test", false, "Test config file only, without launching V2Ray server."/;"	v	package:main
testBinaryPath	testing/scenarios/common.go	/^	testBinaryPath    string$/;"	v	package:scenarios	typeref:typename:string
testBinaryPathGen	testing/scenarios/common.go	/^	testBinaryPathGen sync.Once$/;"	v	package:scenarios	typeref:typename:sync.Once
testLogger	common/log/log_test.go	/^type testLogger struct {$/;"	s	package:log_test
testTCPConn	testing/scenarios/common.go	/^func testTCPConn(port net.Port, payloadSize int, timeout time.Duration) func() error {$/;"	f	package:scenarios	typeref:typename:func() error
testTCPConn2	testing/scenarios/common.go	/^func testTCPConn2(conn net.Conn, payloadSize int, timeout time.Duration) func() error {$/;"	f	package:scenarios	typeref:typename:func() error
testUDPConn	testing/scenarios/common.go	/^func testUDPConn(port net.Port, payloadSize int, timeout time.Duration) func() error {$/;"	f	package:scenarios	typeref:typename:func() error
test_package	testing/coverage/coverall	/^function test_package {$/;"	f
test_package	testing/coverage/coverall2	/^function test_package {$/;"	f
tests_enabled	proxy/vmess/account.proto	/^  string tests_enabled = 4;$/;"	f	message:v2ray.core.proxy.vmess.Account	typeref:typename:string
tfo	transport/internet/config.proto	/^  TCPFastOpenState tfo = 2;$/;"	f	message:v2ray.core.transport.internet.SocketConfig	typeref:typename:TCPFastOpenState
ticket	proxy/vmess/aead/authid.go	/^	ticket interface{}$/;"	m	struct:aead.AuthIDDecoderItem	typeref:typename:interface{}
timeInc	proxy/vmess/validator.go	/^	timeInc uint32$/;"	m	struct:vmess.indexTimePair	typeref:typename:uint32
timeout	app/policy/config.proto	/^  Timeout timeout = 1;$/;"	f	message:v2ray.core.app.policy.Policy	typeref:typename:Timeout
timeout	proxy/dokodemo/config.proto	/^  uint32 timeout = 4 [deprecated = true];$/;"	f	message:v2ray.core.proxy.dokodemo.Config	typeref:typename:uint32
timeout	proxy/freedom/config.proto	/^  uint32 timeout = 2 [deprecated = true];$/;"	f	message:v2ray.core.proxy.freedom.Config	typeref:typename:uint32
timeout	proxy/http/config.proto	/^  uint32 timeout = 1 [deprecated = true];$/;"	f	message:v2ray.core.proxy.http.ServerConfig	typeref:typename:uint32
timeout	proxy/socks/config.proto	/^  uint32 timeout = 5 [deprecated = true];$/;"	f	message:v2ray.core.proxy.socks.ServerConfig	typeref:typename:uint32
timeout	transport/internet/kcp/segment.go	/^	timeout  uint32$/;"	m	struct:kcp.DataSegment	typeref:typename:uint32
timeoutValidStrategy	common/protocol/server_spec.go	/^type timeoutValidStrategy struct {$/;"	s	package:protocol
timer	common/task/periodic.go	/^	timer   *time.Timer$/;"	m	struct:task.Periodic	typeref:typename:*time.Timer
timer	transport/internet/udp/dispatcher.go	/^	timer  signal.ActivityUpdater$/;"	m	struct:udp.connEntry	typeref:typename:signal.ActivityUpdater
timestamp	app/p2p/wire/seedlist.proto	/^    int64 timestamp = 2;     \/\/ unix time$/;"	f	message:wire.MessageData	typeref:typename:int64
timestamps	transport/internet/kcp/receiving.go	/^	timestamps []uint32$/;"	m	struct:kcp.AckList	typeref:typename:[]uint32
tls	common/protocol/tls/sniff.go	/^package tls$/;"	p
tls	transport/internet/headers/tls/config.pb.go	/^package tls$/;"	p
tls	transport/internet/headers/tls/dtls.go	/^package tls$/;"	p
tls	transport/internet/tls/config.go	/^package tls$/;"	p
tls	transport/internet/tls/config.pb.go	/^package tls$/;"	p
tls	transport/internet/tls/config_other.go	/^package tls$/;"	p
tls	transport/internet/tls/config_windows.go	/^package tls$/;"	p
tls	transport/internet/tls/errors.generated.go	/^package tls$/;"	p
tls	transport/internet/tls/tls.go	/^package tls$/;"	p
tlsConfig	transport/internet/domainsocket/listener.go	/^	tlsConfig  *gotls.Config$/;"	m	struct:domainsocket.Listener	typeref:typename:*gotls.Config
tlsConfig	transport/internet/kcp/listener.go	/^	tlsConfig  *gotls.Config$/;"	m	struct:kcp.Listener	typeref:typename:*gotls.Config
tlsConfig	transport/internet/tcp/hub.go	/^	tlsConfig  *gotls.Config$/;"	m	struct:tcp.Listener	typeref:typename:*gotls.Config
tls_test	common/protocol/tls/sniff_test.go	/^package tls_test$/;"	p
tls_test	transport/internet/headers/tls/dtls_test.go	/^package tls_test$/;"	p
tls_test	transport/internet/tls/config_test.go	/^package tls_test$/;"	p
to	proxy/vmess/inbound/config.proto	/^  string to = 1;$/;"	f	message:v2ray.core.proxy.vmess.inbound.DetourConfig	typeref:typename:string
toAccount	proxy/shadowsocks/protocol_test.go	/^func toAccount(a *Account) protocol.Account {$/;"	f	package:shadowsocks_test	typeref:typename:protocol.Account
toAccount	proxy/trojan/protocol_test.go	/^func toAccount(a *Account) protocol.Account {$/;"	f	package:trojan_test	typeref:typename:protocol.Account
toAccount	proxy/vless/encoding/encoding_test.go	/^func toAccount(a *vless.Account) protocol.Account {$/;"	f	package:encoding_test	typeref:typename:protocol.Account
toAccount	proxy/vmess/encoding/encoding_test.go	/^func toAccount(a *vmess.Account) protocol.Account {$/;"	f	package:encoding_test	typeref:typename:protocol.Account
toAccount	proxy/vmess/validator_test.go	/^func toAccount(a *Account) protocol.Account {$/;"	f	package:vmess_test	typeref:typename:protocol.Account
toCidrList	infra/conf/router.go	/^func toCidrList(ips StringList) ([]*router.GeoIP, error) {$/;"	f	package:conf	typeref:typename:([]*router.GeoIP, error)
toDomainMatchingType	infra/conf/dns.go	/^func toDomainMatchingType(t router.Domain_Type) dns.DomainMatchingType {$/;"	f	package:conf	typeref:typename:dns.DomainMatchingType
toNetIP	app/dns/server.go	/^func toNetIP(ips []net.Address) []net.IP {$/;"	f	package:dns	typeref:typename:[]net.IP
toProtocolList	infra/conf/v2ray.go	/^func toProtocolList(s []string) ([]proxyman.KnownProtocols, error) {$/;"	f	package:conf	typeref:typename:([]proxyman.KnownProtocols, error)
toStrMatcher	app/dns/hosts.go	/^func toStrMatcher(t DomainMatchingType, domain string) (strmatcher.Matcher, error) {$/;"	f	package:dns	typeref:typename:(strmatcher.Matcher, error)
token	common/signal/semaphore/semaphore.go	/^	token chan struct{}$/;"	m	struct:semaphore.Instance	typeref:typename:chan struct{}
totalAttempt	common/retry/retry.go	/^	totalAttempt int$/;"	m	struct:retry.retryer	typeref:typename:int
totalInFlightSize	transport/internet/kcp/sending.go	/^	totalInFlightSize uint32$/;"	m	struct:kcp.SendingWindow	typeref:typename:uint32
tproxy	transport/internet/config.proto	/^  TProxyMode tproxy = 3;$/;"	f	message:v2ray.core.transport.internet.SocketConfig	typeref:typename:TProxyMode
transferResponse	proxy/vmess/inbound/inbound.go	/^func transferResponse(timer signal.ActivityUpdater, session *encoding.ServerSession, request *pr/;"	f	package:inbound	typeref:typename:error
transferType	common/crypto/auth.go	/^	transferType protocol.TransferType$/;"	m	struct:crypto.AuthenticationReader	typeref:typename:protocol.TransferType
transferType	common/crypto/auth.go	/^	transferType protocol.TransferType$/;"	m	struct:crypto.AuthenticationWriter	typeref:typename:protocol.TransferType
transferType	common/mux/session.go	/^	transferType protocol.TransferType$/;"	m	struct:mux.Session	typeref:typename:protocol.TransferType
transferType	common/mux/writer.go	/^	transferType protocol.TransferType$/;"	m	struct:mux.Writer	typeref:typename:protocol.TransferType
transmit	transport/internet/kcp/segment.go	/^	transmit uint32$/;"	m	struct:kcp.DataSegment	typeref:typename:uint32
transport	config.pb.go	/^	transport "v2ray.com\/core\/transport"$/;"	P	package:v2ray.com/core/transport
transport	config.proto	/^  v2ray.core.transport.Config transport = 5 [deprecated = true];$/;"	f	message:v2ray.core.Config	typeref:typename:v2ray.core.transport.Config
transport	proxy/socks/server.go	/^func (s *Server) transport(ctx context.Context, reader io.Reader, writer io.Writer, dest net.Des/;"	f	struct:socks.Server	typeref:typename:error
transport	testing/mocks/proxy.go	/^	transport "v2ray.com\/core\/transport"$/;"	P	package:v2ray.com/core/transport
transport	transport/config.go	/^package transport$/;"	p
transport	transport/config.pb.go	/^package transport$/;"	p
transport	transport/link.go	/^package transport$/;"	p
transportDialerCache	transport/internet/dialer.go	/^	transportDialerCache = make(map[string]dialFunc)$/;"	v	package:internet
transportListenerCache	transport/internet/tcp_hub.go	/^	transportListenerCache = make(map[string]ListenFunc)$/;"	v	package:internet
transportProtocolToString	transport/internet/config.go	/^func transportProtocolToString(protocol TransportProtocol) string {$/;"	f	package:internet	typeref:typename:string
transport_settings	transport/config.proto	/^  repeated v2ray.core.transport.internet.TransportConfig transport_settings = 1;$/;"	f	message:v2ray.core.transport.Config	typeref:typename:v2ray.core.transport.internet.TransportConfig
transport_settings	transport/internet/config.proto	/^  repeated TransportConfig transport_settings = 2;$/;"	f	message:v2ray.core.transport.internet.StreamConfig	typeref:typename:TransportConfig
trojan	proxy/trojan/client.go	/^package trojan$/;"	p
trojan	proxy/trojan/config.go	/^package trojan$/;"	p
trojan	proxy/trojan/config.pb.go	/^package trojan$/;"	p
trojan	proxy/trojan/errors.generated.go	/^package trojan$/;"	p
trojan	proxy/trojan/protocol.go	/^package trojan$/;"	p
trojan	proxy/trojan/server.go	/^package trojan$/;"	p
trojan	proxy/trojan/trojan.go	/^package trojan$/;"	p
trojan	proxy/trojan/validator.go	/^package trojan$/;"	p
trojan_test	proxy/trojan/protocol_test.go	/^package trojan_test$/;"	p
tti	transport/internet/kcp/config.proto	/^  TTI tti = 2;$/;"	f	message:v2ray.core.transport.internet.kcp.Config	typeref:typename:TTI
type	app/dns/config.proto	/^    DomainMatchingType type = 1;$/;"	f	message:v2ray.core.app.dns.Config.HostMapping	typeref:typename:DomainMatchingType
type	app/dns/config.proto	/^    DomainMatchingType type = 1;$/;"	f	message:v2ray.core.app.dns.NameServer.PriorityDomain	typeref:typename:DomainMatchingType
type	app/proxyman/config.proto	/^  Type type = 1;$/;"	f	message:v2ray.core.app.proxyman.AllocationStrategy	typeref:typename:Type
type	app/router/config.proto	/^  Type type = 1;$/;"	f	message:v2ray.core.app.router.Domain	typeref:typename:Type
type	common/protocol/headers.proto	/^  SecurityType type = 1;$/;"	f	message:v2ray.core.common.protocol.SecurityConfig	typeref:typename:SecurityType
type	common/serial/typed_message.proto	/^  string type = 1;$/;"	f	message:v2ray.core.common.serial.TypedMessage	typeref:typename:string
type	proxy/trojan/config.proto	/^  string type = 3;$/;"	f	message:v2ray.core.proxy.trojan.Fallback	typeref:typename:string
type	proxy/vless/inbound/config.proto	/^  string type = 3;$/;"	f	message:v2ray.core.proxy.vless.inbound.Fallback	typeref:typename:string
type	release/config/vpoint_vmess_freedom.json	/^        "type": "field",$/;"	s	object:routing.rules.0
typeCreatorRegistry	common/type.go	/^	typeCreatorRegistry = make(map[reflect.Type]ConfigCreator)$/;"	v	package:common
typeMap	app/dns/hosts.go	/^var typeMap = map[DomainMatchingType]strmatcher.Type{$/;"	v	package:dns
typeMap	infra/conf/dns.go	/^var typeMap = map[router.Domain_Type]dns.DomainMatchingType{$/;"	v	package:conf
typeParser	common/protocol/address.go	/^	typeParser  AddressTypeParser$/;"	m	struct:protocol.addressParser	typeref:typename:AddressTypeParser
typeParser	common/protocol/address.go	/^	typeParser  AddressTypeParser$/;"	m	struct:protocol.option	typeref:typename:AddressTypeParser
typed_value	app/router/config.proto	/^    oneof typed_value {$/;"	o	message:v2ray.core.app.router.Domain.Attribute
udp	common/protocol/udp/packet.go	/^package udp$/;"	p
udp	common/protocol/udp/udp.go	/^package udp$/;"	p
udp	release/config/vpoint_socks_vmess.json	/^      "udp": false,$/;"	b	object:inbounds.0.settings
udp	testing/servers/udp/port.go	/^package udp$/;"	p
udp	testing/servers/udp/udp.go	/^package udp$/;"	p
udp	transport/internet/udp/config.go	/^package udp$/;"	p
udp	transport/internet/udp/config.pb.go	/^package udp$/;"	p
udp	transport/internet/udp/dialer.go	/^package udp$/;"	p
udp	transport/internet/udp/dispatcher.go	/^package udp$/;"	p
udp	transport/internet/udp/errors.generated.go	/^package udp$/;"	p
udp	transport/internet/udp/hub.go	/^package udp$/;"	p
udp	transport/internet/udp/hub_freebsd.go	/^package udp$/;"	p
udp	transport/internet/udp/hub_linux.go	/^package udp$/;"	p
udp	transport/internet/udp/hub_other.go	/^package udp$/;"	p
udp	transport/internet/udp/udp.go	/^package udp$/;"	p
udpConn	app/proxyman/inbound/worker.go	/^type udpConn struct {$/;"	s	package:inbound
udpServer	app/dns/udpns.go	/^	udpServer *udp.Dispatcher$/;"	m	struct:dns.ClassicNameServer	typeref:typename:*udp.Dispatcher
udpWorker	app/proxyman/inbound/worker.go	/^type udpWorker struct {$/;"	s	package:inbound
udp_enabled	proxy/shadowsocks/config.proto	/^  bool udp_enabled = 1 [deprecated = true];$/;"	f	message:v2ray.core.proxy.shadowsocks.ServerConfig	typeref:typename:bool
udp_enabled	proxy/socks/config.proto	/^  bool udp_enabled = 4;$/;"	f	message:v2ray.core.proxy.socks.ServerConfig	typeref:typename:bool
udp_proto	app/dns/udpns.go	/^	udp_proto "v2ray.com\/core\/common\/protocol\/udp"$/;"	P	package:v2ray.com/core/common/protocol/udp
udp_proto	proxy/shadowsocks/server.go	/^	udp_proto "v2ray.com\/core\/common\/protocol\/udp"$/;"	P	package:v2ray.com/core/common/protocol/udp
udp_proto	proxy/socks/server.go	/^	udp_proto "v2ray.com\/core\/common\/protocol\/udp"$/;"	P	package:v2ray.com/core/common/protocol/udp
udp_proto	proxy/trojan/server.go	/^	udp_proto "v2ray.com\/core\/common\/protocol\/udp"$/;"	P	package:v2ray.com/core/common/protocol/udp
udp_test	transport/internet/udp/dispatcher_test.go	/^package udp_test$/;"	p
unixReader	common/buf/readv_unix.go	/^type unixReader struct {$/;"	s	package:buf
unknownFields	app/commander/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:commander.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	app/dispatcher/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:dispatcher.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	app/dispatcher/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:dispatcher.SessionConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	app/dns/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:dns.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	app/dns/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:dns.Config_HostMapping	typeref:typename:protoimpl.UnknownFields
unknownFields	app/dns/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:dns.NameServer	typeref:typename:protoimpl.UnknownFields
unknownFields	app/dns/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:dns.NameServer_OriginalRule	typeref:typename:protoimpl.UnknownFields
unknownFields	app/dns/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:dns.NameServer_PriorityDomain	typeref:typename:protoimpl.UnknownFields
unknownFields	app/log/command/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	app/log/command/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.RestartLoggerRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/log/command/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.RestartLoggerResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	app/log/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:log.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	app/policy/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:policy.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	app/policy/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:policy.Policy	typeref:typename:protoimpl.UnknownFields
unknownFields	app/policy/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:policy.Policy_Buffer	typeref:typename:protoimpl.UnknownFields
unknownFields	app/policy/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:policy.Policy_Stats	typeref:typename:protoimpl.UnknownFields
unknownFields	app/policy/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:policy.Policy_Timeout	typeref:typename:protoimpl.UnknownFields
unknownFields	app/policy/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:policy.Second	typeref:typename:protoimpl.UnknownFields
unknownFields	app/policy/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:policy.SystemPolicy	typeref:typename:protoimpl.UnknownFields
unknownFields	app/policy/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:policy.SystemPolicy_Stats	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.AddInboundRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.AddInboundResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.AddOutboundRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.AddOutboundResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.AddUserOperation	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.AlterInboundRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.AlterInboundResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.AlterOutboundRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.AlterOutboundResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.RemoveInboundRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.RemoveInboundResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.RemoveOutboundRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.RemoveOutboundResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.RemoveUserOperation	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:proxyman.AllocationStrategy	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:proxyman.AllocationStrategy_AllocationStrategyConcurrency	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:proxyman.AllocationStrategy_AllocationStrategyRefresh	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:proxyman.InboundConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:proxyman.InboundHandlerConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:proxyman.MultiplexingConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:proxyman.OutboundConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:proxyman.ReceiverConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:proxyman.SenderConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	app/proxyman/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:proxyman.SniffingConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	app/reverse/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:reverse.BridgeConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	app/reverse/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:reverse.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	app/reverse/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:reverse.Control	typeref:typename:protoimpl.UnknownFields
unknownFields	app/reverse/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:reverse.PortalConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.RoutingContext	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.SubscribeRoutingStatsRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.TestRouteRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:router.BalancingRule	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:router.CIDR	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:router.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:router.Domain	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:router.Domain_Attribute	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:router.GeoIP	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:router.GeoIPList	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:router.GeoSite	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:router.GeoSiteList	typeref:typename:protoimpl.UnknownFields
unknownFields	app/router/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:router.RoutingRule	typeref:typename:protoimpl.UnknownFields
unknownFields	app/stats/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	app/stats/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.GetStatsRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/stats/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.GetStatsResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	app/stats/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.QueryStatsRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/stats/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.QueryStatsResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	app/stats/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.Stat	typeref:typename:protoimpl.UnknownFields
unknownFields	app/stats/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.SysStatsRequest	typeref:typename:protoimpl.UnknownFields
unknownFields	app/stats/command/command.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:command.SysStatsResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	app/stats/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:stats.ChannelConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	app/stats/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:stats.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	common/net/address.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:net.IPOrDomain	typeref:typename:protoimpl.UnknownFields
unknownFields	common/net/destination.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:net.Endpoint	typeref:typename:protoimpl.UnknownFields
unknownFields	common/net/network.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:net.NetworkList	typeref:typename:protoimpl.UnknownFields
unknownFields	common/net/port.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:net.PortList	typeref:typename:protoimpl.UnknownFields
unknownFields	common/net/port.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:net.PortRange	typeref:typename:protoimpl.UnknownFields
unknownFields	common/protocol/headers.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:protocol.SecurityConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	common/protocol/server_spec.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:protocol.ServerEndpoint	typeref:typename:protoimpl.UnknownFields
unknownFields	common/protocol/user.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:protocol.User	typeref:typename:protoimpl.UnknownFields
unknownFields	common/serial/typed_message.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:serial.TypedMessage	typeref:typename:protoimpl.UnknownFields
unknownFields	config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:core.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:core.InboundHandlerConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:core.OutboundHandlerConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/blackhole/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:blackhole.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/blackhole/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:blackhole.HTTPResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/blackhole/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:blackhole.NoneResponse	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/dns/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:dns.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/dokodemo/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:dokodemo.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/freedom/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:freedom.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/freedom/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:freedom.DestinationOverride	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/http/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:http.Account	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/http/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:http.ClientConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/http/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:http.ServerConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/mtproto/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:mtproto.Account	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/mtproto/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:mtproto.ClientConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/mtproto/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:mtproto.ServerConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/shadowsocks/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:shadowsocks.Account	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/shadowsocks/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:shadowsocks.ClientConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/shadowsocks/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:shadowsocks.ServerConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/socks/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:socks.Account	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/socks/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:socks.ClientConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/socks/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:socks.ServerConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/trojan/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:trojan.Account	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/trojan/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:trojan.ClientConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/trojan/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:trojan.Fallback	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/trojan/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:trojan.ServerConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/vless/account.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:vless.Account	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/vless/inbound/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:inbound.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/vless/inbound/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:inbound.Fallback	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/vless/outbound/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:outbound.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/vmess/account.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:vmess.Account	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/vmess/inbound/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:inbound.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/vmess/inbound/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:inbound.DefaultConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/vmess/inbound/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:inbound.DetourConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	proxy/vmess/outbound/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:outbound.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:transport.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:internet.ProxyConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:internet.SocketConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:internet.StreamConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:internet.TransportConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/domainsocket/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:domainsocket.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/http/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:http.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/http/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:http.Header	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/http/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:http.Method	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/http/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:http.RequestConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/http/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:http.ResponseConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/http/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:http.Status	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/http/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:http.Version	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/noop/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:noop.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/noop/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:noop.ConnectionConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/srtp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:srtp.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/tls/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:tls.PacketConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/utp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:utp.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/wechat/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:wechat.VideoConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/headers/wireguard/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:wireguard.WireguardConfig	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/http/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:http.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/kcp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:kcp.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/kcp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:kcp.ConnectionReuse	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/kcp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:kcp.DownlinkCapacity	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/kcp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:kcp.EncryptionSeed	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/kcp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:kcp.MTU	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/kcp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:kcp.ReadBuffer	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/kcp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:kcp.TTI	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/kcp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:kcp.UplinkCapacity	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/kcp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:kcp.WriteBuffer	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/quic/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:quic.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/tcp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:tcp.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/tls/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:tls.Certificate	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/tls/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:tls.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/udp/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:udp.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/websocket/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:websocket.Config	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/websocket/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:websocket.Header	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/xtls/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:xtls.Certificate	typeref:typename:protoimpl.UnknownFields
unknownFields	transport/internet/xtls/config.pb.go	/^	unknownFields protoimpl.UnknownFields$/;"	m	struct:xtls.Config	typeref:typename:protoimpl.UnknownFields
unknownProtocol	transport/internet/config.go	/^const unknownProtocol = "unknown"$/;"	c	package:internet
untaggedHandler	app/proxyman/inbound/inbound.go	/^	untaggedHandler []inbound.Handler$/;"	m	struct:inbound.Manager	typeref:typename:[]inbound.Handler
untaggedHandlers	app/proxyman/outbound/outbound.go	/^	untaggedHandlers []outbound.Handler$/;"	m	struct:outbound.Manager	typeref:typename:[]outbound.Handler
until	common/protocol/server_spec.go	/^	until time.Time$/;"	m	struct:protocol.timeoutValidStrategy	typeref:typename:time.Time
updateActivity	app/proxyman/inbound/worker.go	/^func (c *udpConn) updateActivity() {$/;"	f	struct:inbound.udpConn
updateFunc	transport/internet/kcp/connection.go	/^	updateFunc      func()$/;"	m	struct:kcp.Updater	typeref:typename:func()
updateIP	app/dns/dohdns.go	/^func (s *DoHNameServer) updateIP(req *dnsRequest, ipRec *IPRecord) {$/;"	f	struct:dns.DoHNameServer
updateIP	app/dns/udpns.go	/^func (s *ClassicNameServer) updateIP(domain string, newRec record) {$/;"	f	struct:dns.ClassicNameServer
updateInterval	proxy/vmess/validator.go	/^	updateInterval   = 10 * time.Second$/;"	c	package:vmess
updateTask	transport/internet/kcp/connection.go	/^func (c *Connection) updateTask() {$/;"	f	struct:kcp.Connection
updateUserHash	proxy/vmess/validator.go	/^func (v *TimedUserValidator) updateUserHash() {$/;"	f	struct:vmess.TimedUserValidator
updated	common/signal/timer.go	/^	updated   chan struct{}$/;"	m	struct:signal.ActivityTimer	typeref:typename:chan struct{}
updatedTimestamp	transport/internet/kcp/connection.go	/^	updatedTimestamp uint32$/;"	m	struct:kcp.RoundTripInfo	typeref:typename:uint32
upgrader	transport/internet/websocket/hub.go	/^var upgrader = &websocket.Upgrader{$/;"	v	package:websocket
uplink	app/proxyman/inbound/worker.go	/^	uplink           stats.Counter$/;"	m	struct:inbound.udpConn	typeref:typename:stats.Counter
uplinkCounter	app/proxyman/inbound/worker.go	/^	uplinkCounter   stats.Counter$/;"	m	struct:inbound.tcpWorker	typeref:typename:stats.Counter
uplinkCounter	app/proxyman/inbound/worker.go	/^	uplinkCounter   stats.Counter$/;"	m	struct:inbound.udpWorker	typeref:typename:stats.Counter
uplinkCounter	app/proxyman/outbound/handler.go	/^	uplinkCounter   stats.Counter$/;"	m	struct:outbound.Handler	typeref:typename:stats.Counter
uplinkOnly	release/config/vpoint_socks_vmess.json	/^      "0": {"uplinkOnly": 0}$/;"	n	object:policy.levels.0
uplink_capacity	transport/internet/kcp/config.proto	/^  UplinkCapacity uplink_capacity = 3;$/;"	f	message:v2ray.core.transport.internet.kcp.Config	typeref:typename:UplinkCapacity
uplink_only	app/policy/config.proto	/^    Second uplink_only = 3;$/;"	f	message:v2ray.core.app.policy.Policy.Timeout	typeref:typename:Second
upload	release/bleedingrelease.sh	/^function upload() {$/;"	f
upload	release/requestsign.sh	/^function upload() {$/;"	f
upload	release/tagrelease.sh	/^function upload() {$/;"	f
uploadfile	release/bleedingrelease.sh	/^function uploadfile() {$/;"	f
uploadfile	release/requestsign.sh	/^function uploadfile() {$/;"	f
uploadfile	release/tagrelease.sh	/^function uploadfile() {$/;"	f
uri	transport/internet/headers/http/config.proto	/^  repeated string uri = 3;$/;"	f	message:v2ray.core.transport.internet.headers.http.RequestConfig	typeref:typename:string
usage	transport/internet/tls/config.proto	/^  Usage usage = 3;$/;"	f	message:v2ray.core.transport.internet.tls.Certificate	typeref:typename:Usage
usage	transport/internet/xtls/config.proto	/^  Usage usage = 3;$/;"	f	message:v2ray.core.transport.internet.xtls.Certificate	typeref:typename:Usage
useIP	proxy/freedom/config.go	/^func (c *Config) useIP() bool {$/;"	f	unknown:freedom.Config	typeref:typename:bool
useReadv	common/buf/readv_reader.go	/^var useReadv = false$/;"	v	package:buf
useReadv	common/buf/readv_reader_wasm.go	/^const useReadv = false$/;"	c	package:buf
user	app/proxyman/command/command.proto	/^  v2ray.core.common.protocol.User user = 1;$/;"	f	message:v2ray.core.app.proxyman.command.AddUserOperation	typeref:typename:v2ray.core.common.protocol.User
user	app/router/condition.go	/^	user []string$/;"	m	struct:router.UserMatcher	typeref:typename:[]string
user	common/protocol/server_spec.proto	/^  repeated v2ray.core.common.protocol.User user = 3;$/;"	f	message:v2ray.core.common.protocol.ServerEndpoint	typeref:typename:v2ray.core.common.protocol.User
user	proxy/mtproto/config.proto	/^  repeated v2ray.core.common.protocol.User user = 1;$/;"	f	message:v2ray.core.proxy.mtproto.ServerConfig	typeref:typename:v2ray.core.common.protocol.User
user	proxy/mtproto/server.go	/^	user    *protocol.User$/;"	m	struct:mtproto.Server	typeref:typename:*protocol.User
user	proxy/shadowsocks/config.proto	/^  v2ray.core.common.protocol.User user = 2;$/;"	f	message:v2ray.core.proxy.shadowsocks.ServerConfig	typeref:typename:v2ray.core.common.protocol.User
user	proxy/shadowsocks/server.go	/^	user          *protocol.MemoryUser$/;"	m	struct:shadowsocks.Server	typeref:typename:*protocol.MemoryUser
user	proxy/vmess/encoding/server.go	/^	user  [16]byte$/;"	m	struct:encoding.sessionId	typeref:typename:[16]byte
user	proxy/vmess/inbound/config.proto	/^  repeated v2ray.core.common.protocol.User user = 1;$/;"	f	message:v2ray.core.proxy.vmess.inbound.Config	typeref:typename:v2ray.core.common.protocol.User
user	proxy/vmess/validator.go	/^	user    *user$/;"	m	struct:vmess.indexTimePair	typeref:typename:*user
user	proxy/vmess/validator.go	/^	user    protocol.MemoryUser$/;"	m	struct:vmess.user	typeref:typename:protocol.MemoryUser
user	proxy/vmess/validator.go	/^type user struct {$/;"	s	package:vmess
userByEmail	proxy/vmess/inbound/inbound.go	/^type userByEmail struct {$/;"	s	package:inbound
userHash	proxy/vmess/validator.go	/^	userHash map[[16]byte]indexTimePair$/;"	m	struct:vmess.TimedUserValidator	typeref:typename:map[[16]byte]indexTimePair
userValidator	proxy/vmess/encoding/server.go	/^	userValidator   *vmess.TimedUserValidator$/;"	m	struct:encoding.ServerSession	typeref:typename:*vmess.TimedUserValidator
user_downlink	app/policy/config.proto	/^    bool user_downlink = 2;$/;"	f	message:v2ray.core.app.policy.Policy.Stats	typeref:typename:bool
user_email	app/router/config.proto	/^  repeated string user_email = 7;$/;"	f	message:v2ray.core.app.router.RoutingRule	typeref:typename:string
user_level	proxy/dokodemo/config.proto	/^  uint32 user_level = 6;$/;"	f	message:v2ray.core.proxy.dokodemo.Config	typeref:typename:uint32
user_level	proxy/freedom/config.proto	/^  uint32 user_level = 4;$/;"	f	message:v2ray.core.proxy.freedom.Config	typeref:typename:uint32
user_level	proxy/http/config.proto	/^  uint32 user_level = 4;$/;"	f	message:v2ray.core.proxy.http.ServerConfig	typeref:typename:uint32
user_level	proxy/socks/config.proto	/^  uint32 user_level = 6;$/;"	f	message:v2ray.core.proxy.socks.ServerConfig	typeref:typename:uint32
user_uplink	app/policy/config.proto	/^    bool user_uplink = 1;$/;"	f	message:v2ray.core.app.policy.Policy.Stats	typeref:typename:bool
username	proxy/http/config.proto	/^  string username = 1;$/;"	f	message:v2ray.core.proxy.http.Account	typeref:typename:string
username	proxy/socks/config.proto	/^  string username = 1;$/;"	f	message:v2ray.core.proxy.socks.Account	typeref:typename:string
users	common/protocol/server_spec.go	/^	users []*MemoryUser$/;"	m	struct:protocol.ServerSpec	typeref:typename:[]*MemoryUser
users	proxy/trojan/config.proto	/^  repeated v2ray.core.common.protocol.User users = 1;$/;"	f	message:v2ray.core.proxy.trojan.ServerConfig	typeref:typename:v2ray.core.common.protocol.User
users	proxy/trojan/validator.go	/^	users sync.Map$/;"	m	struct:trojan.Validator	typeref:typename:sync.Map
users	proxy/vless/validator.go	/^	users sync.Map$/;"	m	struct:vless.Validator	typeref:typename:sync.Map
users	proxy/vmess/validator.go	/^	users    []*user$/;"	m	struct:vmess.TimedUserValidator	typeref:typename:[]*user
usersByEmail	proxy/vmess/inbound/inbound.go	/^	usersByEmail          *userByEmail$/;"	m	struct:inbound.Handler	typeref:typename:*userByEmail
utp	transport/internet/headers/utp/config.pb.go	/^package utp$/;"	p
utp	transport/internet/headers/utp/utp.go	/^package utp$/;"	p
utp_test	transport/internet/headers/utp/utp_test.go	/^package utp_test$/;"	p
uuid	common/protocol/id.go	/^	uuid   uuid.UUID$/;"	m	struct:protocol.ID	typeref:typename:uuid.UUID
uuid	common/uuid/uuid.go	/^package uuid \/\/ import "v2ray.com\/core\/common\/uuid"$/;"	p
uuid_test	common/uuid/uuid_test.go	/^package uuid_test$/;"	p
v	app/log/command/command.go	/^	v *core.Instance$/;"	m	struct:command.service	typeref:typename:*core.Instance
v	app/proxyman/command/command.go	/^	v *core.Instance$/;"	m	struct:command.service	typeref:typename:*core.Instance
v	app/proxyman/inbound/dynamic.go	/^	v              *core.Instance$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:*core.Instance
v	app/router/command/command.go	/^	v *core.Instance$/;"	m	struct:command.service	typeref:typename:*core.Instance
v	common/buf/buffer.go	/^	v     []byte$/;"	m	struct:buf.Buffer	typeref:typename:[]byte
v2http	testing/scenarios/feature_test.go	/^	v2http "v2ray.com\/core\/proxy\/http"$/;"	P	package:v2ray.com/core/proxy/http
v2http	testing/scenarios/http_test.go	/^	v2http "v2ray.com\/core\/proxy\/http"$/;"	P	package:v2ray.com/core/proxy/http
v2httptest	testing/scenarios/http_test.go	/^	v2httptest "v2ray.com\/core\/testing\/servers\/http"$/;"	P	package:v2ray.com/core/testing/servers/http
v2net	infra/conf/freedom.go	/^	v2net "v2ray.com\/core\/common\/net"$/;"	P	package:v2ray.com/core/common/net
v2ray.core	config.proto	/^package v2ray.core;$/;"	p
v2ray.core.app.commander	app/commander/config.proto	/^package v2ray.core.app.commander;$/;"	p
v2ray.core.app.dispatcher	app/dispatcher/config.proto	/^package v2ray.core.app.dispatcher;$/;"	p
v2ray.core.app.dns	app/dns/config.proto	/^package v2ray.core.app.dns;$/;"	p
v2ray.core.app.log	app/log/config.proto	/^package v2ray.core.app.log;$/;"	p
v2ray.core.app.log.command	app/log/command/config.proto	/^package v2ray.core.app.log.command;$/;"	p
v2ray.core.app.p2p	app/p2p/config.proto	/^package v2ray.core.app.p2p;$/;"	p
v2ray.core.app.policy	app/policy/config.proto	/^package v2ray.core.app.policy;$/;"	p
v2ray.core.app.proxyman	app/proxyman/config.proto	/^package v2ray.core.app.proxyman;$/;"	p
v2ray.core.app.proxyman.command	app/proxyman/command/command.proto	/^package v2ray.core.app.proxyman.command;$/;"	p
v2ray.core.app.reverse	app/reverse/config.proto	/^package v2ray.core.app.reverse;$/;"	p
v2ray.core.app.router	app/router/config.proto	/^package v2ray.core.app.router;$/;"	p
v2ray.core.app.router.command	app/router/command/command.proto	/^package v2ray.core.app.router.command;$/;"	p
v2ray.core.app.stats	app/stats/config.proto	/^package v2ray.core.app.stats;$/;"	p
v2ray.core.app.stats.command	app/stats/command/command.proto	/^package v2ray.core.app.stats.command;$/;"	p
v2ray.core.common.log	common/log/log.proto	/^package v2ray.core.common.log;$/;"	p
v2ray.core.common.net	common/net/address.proto	/^package v2ray.core.common.net;$/;"	p
v2ray.core.common.net	common/net/destination.proto	/^package v2ray.core.common.net;$/;"	p
v2ray.core.common.net	common/net/network.proto	/^package v2ray.core.common.net;$/;"	p
v2ray.core.common.net	common/net/port.proto	/^package v2ray.core.common.net;$/;"	p
v2ray.core.common.protocol	common/protocol/headers.proto	/^package v2ray.core.common.protocol;$/;"	p
v2ray.core.common.protocol	common/protocol/server_spec.proto	/^package v2ray.core.common.protocol;$/;"	p
v2ray.core.common.protocol	common/protocol/user.proto	/^package v2ray.core.common.protocol;$/;"	p
v2ray.core.common.serial	common/serial/typed_message.proto	/^package v2ray.core.common.serial;$/;"	p
v2ray.core.proxy.blackhole	proxy/blackhole/config.proto	/^package v2ray.core.proxy.blackhole;$/;"	p
v2ray.core.proxy.dns	proxy/dns/config.proto	/^package v2ray.core.proxy.dns;$/;"	p
v2ray.core.proxy.dokodemo	proxy/dokodemo/config.proto	/^package v2ray.core.proxy.dokodemo;$/;"	p
v2ray.core.proxy.freedom	proxy/freedom/config.proto	/^package v2ray.core.proxy.freedom;$/;"	p
v2ray.core.proxy.http	proxy/http/config.proto	/^package v2ray.core.proxy.http;$/;"	p
v2ray.core.proxy.mtproto	proxy/mtproto/config.proto	/^package v2ray.core.proxy.mtproto;$/;"	p
v2ray.core.proxy.shadowsocks	proxy/shadowsocks/config.proto	/^package v2ray.core.proxy.shadowsocks;$/;"	p
v2ray.core.proxy.socks	proxy/socks/config.proto	/^package v2ray.core.proxy.socks;$/;"	p
v2ray.core.proxy.trojan	proxy/trojan/config.proto	/^package v2ray.core.proxy.trojan;$/;"	p
v2ray.core.proxy.vless	proxy/vless/account.proto	/^package v2ray.core.proxy.vless;$/;"	p
v2ray.core.proxy.vless.encoding	proxy/vless/encoding/addons.proto	/^package v2ray.core.proxy.vless.encoding;$/;"	p
v2ray.core.proxy.vless.inbound	proxy/vless/inbound/config.proto	/^package v2ray.core.proxy.vless.inbound;$/;"	p
v2ray.core.proxy.vless.outbound	proxy/vless/outbound/config.proto	/^package v2ray.core.proxy.vless.outbound;$/;"	p
v2ray.core.proxy.vmess	proxy/vmess/account.proto	/^package v2ray.core.proxy.vmess;$/;"	p
v2ray.core.proxy.vmess.inbound	proxy/vmess/inbound/config.proto	/^package v2ray.core.proxy.vmess.inbound;$/;"	p
v2ray.core.proxy.vmess.outbound	proxy/vmess/outbound/config.proto	/^package v2ray.core.proxy.vmess.outbound;$/;"	p
v2ray.core.transport	transport/config.proto	/^package v2ray.core.transport;$/;"	p
v2ray.core.transport.internet	transport/internet/config.proto	/^package v2ray.core.transport.internet;$/;"	p
v2ray.core.transport.internet.domainsocket	transport/internet/domainsocket/config.proto	/^package v2ray.core.transport.internet.domainsocket;$/;"	p
v2ray.core.transport.internet.headers.http	transport/internet/headers/http/config.proto	/^package v2ray.core.transport.internet.headers.http;$/;"	p
v2ray.core.transport.internet.headers.noop	transport/internet/headers/noop/config.proto	/^package v2ray.core.transport.internet.headers.noop;$/;"	p
v2ray.core.transport.internet.headers.srtp	transport/internet/headers/srtp/config.proto	/^package v2ray.core.transport.internet.headers.srtp;$/;"	p
v2ray.core.transport.internet.headers.tls	transport/internet/headers/tls/config.proto	/^package v2ray.core.transport.internet.headers.tls;$/;"	p
v2ray.core.transport.internet.headers.utp	transport/internet/headers/utp/config.proto	/^package v2ray.core.transport.internet.headers.utp;$/;"	p
v2ray.core.transport.internet.headers.wechat	transport/internet/headers/wechat/config.proto	/^package v2ray.core.transport.internet.headers.wechat;$/;"	p
v2ray.core.transport.internet.headers.wireguard	transport/internet/headers/wireguard/config.proto	/^package v2ray.core.transport.internet.headers.wireguard;$/;"	p
v2ray.core.transport.internet.http	transport/internet/http/config.proto	/^package v2ray.core.transport.internet.http;$/;"	p
v2ray.core.transport.internet.kcp	transport/internet/kcp/config.proto	/^package v2ray.core.transport.internet.kcp;$/;"	p
v2ray.core.transport.internet.quic	transport/internet/quic/config.proto	/^package v2ray.core.transport.internet.quic;$/;"	p
v2ray.core.transport.internet.tcp	transport/internet/tcp/config.proto	/^package v2ray.core.transport.internet.tcp;$/;"	p
v2ray.core.transport.internet.tls	transport/internet/tls/config.proto	/^package v2ray.core.transport.internet.tls;$/;"	p
v2ray.core.transport.internet.udp	transport/internet/udp/config.proto	/^package v2ray.core.transport.internet.udp;$/;"	p
v2ray.core.transport.internet.websocket	transport/internet/websocket/config.proto	/^package v2ray.core.transport.internet.websocket;$/;"	p
v2ray.core.transport.internet.xtls	transport/internet/xtls/config.proto	/^package v2ray.core.transport.internet.xtls;$/;"	p
v2rayKey	app/proxyman/outbound/handler_test.go	/^const v2rayKey core.V2rayKey = 1$/;"	c	package:outbound_test	typeref:typename:core.V2rayKey
v2rayKey	context.go	/^const v2rayKey V2rayKey = 1$/;"	c	package:core	typeref:type:V2rayKey
v2tls	transport/internet/websocket/hub.go	/^	v2tls "v2ray.com\/core\/transport\/internet\/tls"$/;"	P	package:v2ray.com/core/transport/internet/tls
valid	common/protocol/server_spec.go	/^	valid ValidationStrategy$/;"	m	struct:protocol.ServerSpec	typeref:typename:ValidationStrategy
validator	proxy/trojan/server.go	/^	validator     *Validator$/;"	m	struct:trojan.Server	typeref:typename:*Validator
validator	proxy/vless/inbound/inbound.go	/^	validator             *vless.Validator$/;"	m	struct:inbound.Handler	typeref:typename:*vless.Validator
value	app/policy/config.proto	/^  uint32 value = 1;$/;"	f	message:v2ray.core.app.policy.Second	typeref:typename:uint32
value	app/proxyman/config.proto	/^    uint32 value = 1;$/;"	f	message:v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyConcurrency	typeref:typename:uint32
value	app/proxyman/config.proto	/^    uint32 value = 1;$/;"	f	message:v2ray.core.app.proxyman.AllocationStrategy.AllocationStrategyRefresh	typeref:typename:uint32
value	app/router/config.proto	/^  string value = 2;$/;"	f	message:v2ray.core.app.router.Domain	typeref:typename:string
value	app/stats/command/command.proto	/^  int64 value = 2;$/;"	f	message:v2ray.core.app.stats.command.Stat	typeref:typename:int64
value	app/stats/counter.go	/^	value int64$/;"	m	struct:stats.Counter	typeref:typename:int64
value	common/log/log_test.go	/^	value string$/;"	m	struct:log_test.testLogger	typeref:typename:string
value	common/peer/latency.go	/^	value  uint64$/;"	m	struct:peer.AverageLatency	typeref:typename:uint64
value	common/serial/typed_message.proto	/^  bytes value = 2;$/;"	f	message:v2ray.core.common.serial.TypedMessage	typeref:typename:bytes
value	common/type_test.go	/^	value int$/;"	m	struct:common_test.TConfig	typeref:typename:int
value	common/type_test.go	/^	value string$/;"	m	struct:common_test.YConfig	typeref:typename:string
value	transport/internet/headers/http/config.proto	/^  repeated string value = 2;$/;"	f	message:v2ray.core.transport.internet.headers.http.Header	typeref:typename:string
value	transport/internet/headers/http/config.proto	/^  string value = 1;$/;"	f	message:v2ray.core.transport.internet.headers.http.Method	typeref:typename:string
value	transport/internet/headers/http/config.proto	/^  string value = 1;$/;"	f	message:v2ray.core.transport.internet.headers.http.Version	typeref:typename:string
value	transport/internet/kcp/config.proto	/^  uint32 value = 1;$/;"	f	message:v2ray.core.transport.internet.kcp.DownlinkCapacity	typeref:typename:uint32
value	transport/internet/kcp/config.proto	/^  uint32 value = 1;$/;"	f	message:v2ray.core.transport.internet.kcp.MTU	typeref:typename:uint32
value	transport/internet/kcp/config.proto	/^  uint32 value = 1;$/;"	f	message:v2ray.core.transport.internet.kcp.TTI	typeref:typename:uint32
value	transport/internet/kcp/config.proto	/^  uint32 value = 1;$/;"	f	message:v2ray.core.transport.internet.kcp.UplinkCapacity	typeref:typename:uint32
value	transport/internet/websocket/config.proto	/^  string value = 2;$/;"	f	message:v2ray.core.transport.internet.websocket.Header	typeref:typename:string
valueToGoStringSeedlist	app/p2p/wire/seedlist.pb.go	/^func valueToGoStringSeedlist(v interface{}, typ string) string {$/;"	f	package:wire	typeref:typename:string
valueToStringSeedlist	app/p2p/wire/seedlist.pb.go	/^func valueToStringSeedlist(v interface{}) string {$/;"	f	package:wire	typeref:typename:string
values	common/strmatcher/domain_matcher.go	/^	values []uint32$/;"	m	struct:strmatcher.node	typeref:typename:[]uint32
variation	transport/internet/kcp/connection.go	/^	variation        uint32$/;"	m	struct:kcp.RoundTripInfo	typeref:typename:uint32
version	common/protocol/http/sniff.go	/^	version version$/;"	m	struct:http.SniffHeader	typeref:typename:version
version	common/protocol/http/sniff.go	/^type version byte$/;"	t	package:http	typeref:typename:byte
version	core.go	/^	version  = "4.31.0"$/;"	v	package:core
version	main/main.go	/^	version     = flag.Bool("version", false, "Show current version of V2Ray.")$/;"	v	package:main
version	transport/internet/headers/http/config.proto	/^  Version version = 1;$/;"	f	message:v2ray.core.transport.internet.headers.http.RequestConfig	typeref:typename:Version
version	transport/internet/headers/http/config.proto	/^  Version version = 1;$/;"	f	message:v2ray.core.transport.internet.headers.http.ResponseConfig	typeref:typename:Version
version	transport/internet/headers/srtp/config.proto	/^  uint32 version = 1;$/;"	f	message:v2ray.core.transport.internet.headers.srtp.Config	typeref:typename:uint32
version	transport/internet/headers/utp/config.proto	/^  uint32 version = 1;$/;"	f	message:v2ray.core.transport.internet.headers.utp.Config	typeref:typename:uint32
via	app/proxyman/config.proto	/^  v2ray.core.common.net.IPOrDomain via = 1;$/;"	f	message:v2ray.core.app.proxyman.SenderConfig	typeref:typename:v2ray.core.common.net.IPOrDomain
vless	proxy/vless/account.go	/^package vless$/;"	p
vless	proxy/vless/account.pb.go	/^package vless$/;"	p
vless	proxy/vless/errors.generated.go	/^package vless$/;"	p
vless	proxy/vless/validator.go	/^package vless$/;"	p
vless	proxy/vless/vless.go	/^package vless$/;"	p
vmess	proxy/vmess/account.go	/^package vmess$/;"	p
vmess	proxy/vmess/account.pb.go	/^package vmess$/;"	p
vmess	proxy/vmess/errors.generated.go	/^package vmess$/;"	p
vmess	proxy/vmess/validator.go	/^package vmess$/;"	p
vmess	proxy/vmess/vmess.go	/^package vmess$/;"	p
vmess	proxy/vmess/vmessCtxInterface.go	/^package vmess$/;"	p
vmess_test	proxy/vmess/validator_test.go	/^package vmess_test$/;"	p
vmessaead	proxy/vmess/encoding/client.go	/^	vmessaead "v2ray.com\/core\/proxy\/vmess\/aead"$/;"	P	package:v2ray.com/core/proxy/vmess/aead
vmessaead	proxy/vmess/encoding/server.go	/^	vmessaead "v2ray.com\/core\/proxy\/vmess\/aead"$/;"	P	package:v2ray.com/core/proxy/vmess/aead
vnext	proxy/vless/outbound/config.proto	/^  repeated v2ray.core.common.protocol.ServerEndpoint vnext = 1;$/;"	f	message:v2ray.core.proxy.vless.outbound.Config	typeref:typename:v2ray.core.common.protocol.ServerEndpoint
w	transport/internet/http/hub.go	/^	w io.Writer$/;"	m	struct:http.flushWriter	typeref:typename:io.Writer
waitForDataInput	transport/internet/kcp/connection.go	/^func (c *Connection) waitForDataInput() error {$/;"	f	struct:kcp.Connection	typeref:typename:error
waitForDataOutput	transport/internet/kcp/connection.go	/^func (c *Connection) waitForDataOutput() error {$/;"	f	struct:kcp.Connection	typeref:typename:error
warning	release/config/config.json	/^    \/\/ Log level, one of "debug", "info", "warning", "error", "none"$/;"	z	object:log
wd	transport/internet/kcp/connection.go	/^	wd         time.Time \/\/ write deadline$/;"	m	struct:kcp.Connection	typeref:typename:time.Time
websocket	transport/internet/websocket/config.go	/^package websocket$/;"	p
websocket	transport/internet/websocket/config.pb.go	/^package websocket$/;"	p
websocket	transport/internet/websocket/connection.go	/^package websocket$/;"	p
websocket	transport/internet/websocket/dialer.go	/^package websocket$/;"	p
websocket	transport/internet/websocket/errors.generated.go	/^package websocket$/;"	p
websocket	transport/internet/websocket/hub.go	/^package websocket$/;"	p
websocket	transport/internet/websocket/ws.go	/^package websocket$/;"	p
websocket_test	transport/internet/websocket/ws_test.go	/^package websocket_test$/;"	p
wechat	transport/internet/headers/wechat/config.pb.go	/^package wechat$/;"	p
wechat	transport/internet/headers/wechat/wechat.go	/^package wechat$/;"	p
wechat_test	transport/internet/headers/wechat/wechat_test.go	/^package wechat_test$/;"	p
window	transport/internet/kcp/receiving.go	/^	window     *ReceivingWindow$/;"	m	struct:kcp.ReceivingWorker	typeref:typename:*ReceivingWindow
window	transport/internet/kcp/sending.go	/^	window                     *SendingWindow$/;"	m	struct:kcp.SendingWorker	typeref:typename:*SendingWindow
windowSize	transport/internet/kcp/receiving.go	/^	windowSize uint32$/;"	m	struct:kcp.ReceivingWorker	typeref:typename:uint32
windowSize	transport/internet/kcp/sending.go	/^	windowSize                 uint32$/;"	m	struct:kcp.SendingWorker	typeref:typename:uint32
windows	Makefile	/^windows:$/;"	t
windowsReader	common/buf/readv_windows.go	/^type windowsReader struct {$/;"	s	package:buf
wire	app/p2p/wire/init.go	/^package wire$/;"	p
wire	app/p2p/wire/notifier.pb.go	/^package wire$/;"	p
wire	app/p2p/wire/notifier.proto	/^package wire;$/;"	p
wire	app/p2p/wire/seedlist.pb.go	/^package wire$/;"	p
wire	app/p2p/wire/seedlist.proto	/^package wire;$/;"	p
wireguard	transport/internet/headers/wireguard/config.pb.go	/^package wireguard$/;"	p
wireguard	transport/internet/headers/wireguard/wireguard.go	/^package wireguard$/;"	p
withBackground	app/router/condition_test.go	/^func withBackground() routing.Context {$/;"	f	package:router_test	typeref:typename:routing.Context
withContent	app/router/condition_test.go	/^func withContent(content *session.Content) routing.Context {$/;"	f	package:router_test	typeref:typename:routing.Context
withDefaultApps	testing/scenarios/common.go	/^func withDefaultApps(config *core.Config) *core.Config {$/;"	f	package:scenarios	typeref:typename:*core.Config
withInbound	app/router/condition_test.go	/^func withInbound(inbound *session.Inbound) routing.Context {$/;"	f	package:router_test	typeref:typename:routing.Context
withOutbound	app/router/condition_test.go	/^func withOutbound(outbound *session.Outbound) routing.Context {$/;"	f	package:router_test	typeref:typename:routing.Context
wordSize	common/crypto/internal/chacha.go	/^	wordSize  = 4                    \/\/ the size of ChaCha20's words$/;"	c	package:internal
workSeed	app/p2p/protocol/seedlist/seedlist.go	/^	workSeed    []Seed \/\/read from local seedlist file and add from newSeed slic$/;"	m	struct:seedlist.SeedListProtocol	typeref:typename:[]Seed
worker	app/proxyman/inbound/dynamic.go	/^	worker         []worker$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:[]worker
worker	app/proxyman/inbound/worker.go	/^type worker interface {$/;"	i	package:inbound
worker	app/reverse/bridge.go	/^	worker     *mux.ServerWorker$/;"	m	struct:reverse.BridgeWorker	typeref:typename:*mux.ServerWorker
workerMutex	app/proxyman/inbound/dynamic.go	/^	workerMutex    sync.RWMutex$/;"	m	struct:inbound.DynamicInboundHandler	typeref:typename:sync.RWMutex
workers	app/proxyman/inbound/always.go	/^	workers []worker$/;"	m	struct:inbound.AlwaysOnInboundHandler	typeref:typename:[]worker
workers	app/reverse/bridge.go	/^	workers     []*BridgeWorker$/;"	m	struct:reverse.Bridge	typeref:typename:[]*BridgeWorker
workers	app/reverse/portal.go	/^	workers []*PortalWorker$/;"	m	struct:reverse.StaticMuxPicker	typeref:typename:[]*PortalWorker
workers	common/mux/client.go	/^	workers     []*ClientWorker$/;"	m	struct:mux.IncrementalWorkerPicker	typeref:typename:[]*ClientWorker
wrapSysConn	transport/internet/quic/conn.go	/^func wrapSysConn(rawConn net.PacketConn, config *Config) (*sysConn, error) {$/;"	f	package:quic	typeref:typename:(*sysConn, error)
writeAddress	common/protocol/address.go	/^func (p *addressParser) writeAddress(writer io.Writer, address net.Address) error {$/;"	f	struct:protocol.addressParser	typeref:typename:error
writeChacha20Block	common/crypto/internal/chacha_core_gen.go	/^func writeChacha20Block(file *os.File) {$/;"	f	package:main
writeDBLock	store/sqlite.go	/^	writeDBLock sync.Mutex$/;"	m	struct:store.SQLiteStorage	typeref:typename:sync.Mutex
writeData	common/mux/writer.go	/^func (w *Writer) writeData(mb buf.MultiBuffer) error {$/;"	f	struct:mux.Writer	typeref:typename:error
writeError	common/buf/copy.go	/^type writeError struct {$/;"	s	package:buf
writeFile	common/protocol/tls/cert/cert_test.go	/^func writeFile(content []byte, name string) error {$/;"	f	package:cert	typeref:typename:error
writeFile	infra/control/cert.go	/^func (c *CertificateCommand) writeFile(content []byte, name string) error {$/;"	f	struct:control.CertificateCommand	typeref:typename:error
writeFirstPayload	common/mux/client.go	/^func writeFirstPayload(reader buf.Reader, writer *Writer) error {$/;"	f	package:mux	typeref:typename:error
writeHeader	proxy/trojan/protocol.go	/^func (c *ConnWriter) writeHeader() error {$/;"	f	struct:trojan.ConnWriter	typeref:typename:error
writeMetaOnly	common/mux/writer.go	/^func (w *Writer) writeMetaOnly() error {$/;"	f	struct:mux.Writer	typeref:typename:error
writeMetaWithFrame	common/mux/writer.go	/^func writeMetaWithFrame(writer buf.Writer, meta FrameMetadata, data buf.MultiBuffer) error {$/;"	f	package:mux	typeref:typename:error
writeMultiBufferInternal	transport/internet/kcp/connection.go	/^func (c *Connection) writeMultiBufferInternal(reader io.Reader) error {$/;"	f	struct:kcp.Connection	typeref:typename:error
writeMultiBufferInternal	transport/pipe/impl.go	/^func (p *pipe) writeMultiBufferInternal(mb buf.MultiBuffer) error {$/;"	f	struct:pipe.pipe	typeref:typename:error
writePacket	common/crypto/auth.go	/^func (w *AuthenticationWriter) writePacket(mb buf.MultiBuffer) error {$/;"	f	struct:crypto.AuthenticationWriter	typeref:typename:error
writePacket	proxy/trojan/protocol.go	/^func (w *PacketWriter) writePacket(payload []byte, dest net.Destination) (int, error) { \/\/ nol/;"	f	struct:trojan.PacketWriter	typeref:typename:(int, error)
writePort	common/protocol/address.go	/^func writePort(writer io.Writer, port net.Port) error {$/;"	f	package:protocol	typeref:typename:error
writeQuarterRound	common/crypto/internal/chacha_core_gen.go	/^func writeQuarterRound(file *os.File, a, b, c, d int) {$/;"	f	package:main
writeSignal	transport/pipe/impl.go	/^	writeSignal *signal.Notifier$/;"	m	struct:pipe.pipe	typeref:typename:*signal.Notifier
writeSocks4Response	proxy/socks/protocol.go	/^func writeSocks4Response(writer io.Writer, errCode byte, address net.Address, port net.Port) err/;"	f	package:socks	typeref:typename:error
writeSocks5AuthenticationResponse	proxy/socks/protocol.go	/^func writeSocks5AuthenticationResponse(writer io.Writer, version byte, auth byte) error {$/;"	f	package:socks	typeref:typename:error
writeSocks5Response	proxy/socks/protocol.go	/^func writeSocks5Response(writer io.Writer, errCode byte, address net.Address, port net.Port) err/;"	f	package:socks	typeref:typename:error
writeStream	common/crypto/auth.go	/^func (w *AuthenticationWriter) writeStream(mb buf.MultiBuffer) error {$/;"	f	struct:crypto.AuthenticationWriter	typeref:typename:error
writeToInternal	common/buf/reader.go	/^func (r *BufferedReader) writeToInternal(writer io.Writer) (int64, error) {$/;"	f	struct:buf.BufferedReader	typeref:typename:(int64, error)
write_buffer	transport/internet/kcp/config.proto	/^  WriteBuffer write_buffer = 6;$/;"	f	message:v2ray.core.transport.internet.kcp.Config	typeref:typename:WriteBuffer
writer	app/proxyman/inbound/worker.go	/^	writer           buf.Writer$/;"	m	struct:inbound.udpConn	typeref:typename:buf.Writer
writer	app/reverse/portal.go	/^	writer   buf.Writer$/;"	m	struct:reverse.PortalWorker	typeref:typename:buf.Writer
writer	common/buf/writer.go	/^	writer   Writer$/;"	m	struct:buf.BufferedWriter	typeref:typename:Writer
writer	common/crypto/auth.go	/^	writer       buf.Writer$/;"	m	struct:crypto.AuthenticationWriter	typeref:typename:buf.Writer
writer	common/crypto/chunk.go	/^	writer      buf.Writer$/;"	m	struct:crypto.ChunkStreamWriter	typeref:typename:buf.Writer
writer	common/crypto/io.go	/^	writer    io.Writer$/;"	m	struct:crypto.CryptionWriter	typeref:typename:io.Writer
writer	common/mux/writer.go	/^	writer       buf.Writer$/;"	m	struct:mux.Writer	typeref:typename:buf.Writer
writer	common/net/connection.go	/^	writer  buf.Writer$/;"	m	struct:net.connection	typeref:typename:buf.Writer
writer	proxy/socks/protocol.go	/^	writer  io.Writer$/;"	m	struct:socks.UDPWriter	typeref:typename:io.Writer
writer	transport/internet/kcp/output.go	/^	writer SegmentWriter$/;"	m	struct:kcp.RetryableWriter	typeref:typename:SegmentWriter
writer	transport/internet/kcp/output.go	/^	writer io.Writer$/;"	m	struct:kcp.SimpleSegmentWriter	typeref:typename:io.Writer
writer	transport/internet/kcp/receiving.go	/^	writer     SegmentWriter$/;"	m	struct:kcp.AckList	typeref:typename:SegmentWriter
writer	transport/internet/kcp/sending.go	/^	writer            SegmentWriter$/;"	m	struct:kcp.SendingWindow	typeref:typename:SegmentWriter
ws	app/p2p/api.go	/^	ws "github.com\/libp2p\/go-ws-transport"$/;"	P	package:github.com/libp2p/go-ws-transport
xor	functions_test.go	/^func xor(b []byte) []byte {$/;"	f	package:core_test	typeref:typename:[]byte
xor	testing/scenarios/common.go	/^func xor(b []byte) []byte {$/;"	f	package:scenarios	typeref:typename:[]byte
xor2	functions_test.go	/^func xor2(b []byte) []byte {$/;"	f	package:core_test	typeref:typename:[]byte
xorbkd	transport/internet/kcp/xor.go	/^func xorbkd(x []byte) {$/;"	f	package:kcp
xorbkd	transport/internet/kcp/xor_amd64.go	/^func xorbkd(x []byte)$/;"	f	package:kcp	typeref:typename:;
xorbkddone	transport/internet/kcp/xor_amd64.s	/^xorbkddone:        $/;"	l
xorbkdloop	transport/internet/kcp/xor_amd64.s	/^xorbkdloop:$/;"	l
xorfwd	transport/internet/kcp/xor.go	/^func xorfwd(x []byte) {$/;"	f	package:kcp
xorfwd	transport/internet/kcp/xor_amd64.go	/^func xorfwd(x []byte)$/;"	f	package:kcp	typeref:typename:;
xorfwddone	transport/internet/kcp/xor_amd64.s	/^xorfwddone:        $/;"	l
xorfwdloop	transport/internet/kcp/xor_amd64.s	/^xorfwdloop:$/;"	l
xproxy	testing/scenarios/dns_test.go	/^	xproxy "golang.org\/x\/net\/proxy"$/;"	P	package:golang.org/x/net/proxy
xproxy	testing/scenarios/feature_test.go	/^	xproxy "golang.org\/x\/net\/proxy"$/;"	P	package:golang.org/x/net/proxy
xproxy	testing/scenarios/socks_test.go	/^	xproxy "golang.org\/x\/net\/proxy"$/;"	P	package:golang.org/x/net/proxy
xtls	transport/internet/xtls/config.go	/^	xtls "github.com\/xtls\/go"$/;"	P	package:github.com/xtls/go
xtls	transport/internet/xtls/config.go	/^package xtls$/;"	p
xtls	transport/internet/xtls/config.pb.go	/^package xtls$/;"	p
xtls	transport/internet/xtls/config_other.go	/^package xtls$/;"	p
xtls	transport/internet/xtls/config_test.go	/^	xtls "github.com\/xtls\/go"$/;"	P	package:github.com/xtls/go
xtls	transport/internet/xtls/config_windows.go	/^package xtls$/;"	p
xtls	transport/internet/xtls/errors.generated.go	/^package xtls$/;"	p
xtls	transport/internet/xtls/xtls.go	/^	xtls "github.com\/xtls\/go"$/;"	P	package:github.com/xtls/go
xtls	transport/internet/xtls/xtls.go	/^package xtls$/;"	p
xtlsConfig	transport/internet/domainsocket/listener.go	/^	xtlsConfig *goxtls.Config$/;"	m	struct:domainsocket.Listener	typeref:typename:*goxtls.Config
xtlsConfig	transport/internet/kcp/listener.go	/^	xtlsConfig *goxtls.Config$/;"	m	struct:kcp.Listener	typeref:typename:*goxtls.Config
xtlsConfig	transport/internet/tcp/hub.go	/^	xtlsConfig *goxtls.Config$/;"	m	struct:tcp.Listener	typeref:typename:*goxtls.Config
xtls_show	proxy/vless/inbound/inbound.go	/^	xtls_show = false$/;"	v	package:inbound
xtls_show	proxy/vless/outbound/outbound.go	/^	xtls_show = false$/;"	v	package:outbound
xtls_test	transport/internet/xtls/config_test.go	/^package xtls_test$/;"	p
xver	proxy/trojan/config.proto	/^  uint64 xver = 5;$/;"	f	message:v2ray.core.proxy.trojan.Fallback	typeref:typename:uint64
xver	proxy/vless/inbound/config.proto	/^  uint64 xver = 5;$/;"	f	message:v2ray.core.proxy.vless.inbound.Fallback	typeref:typename:uint64
xxx_messageInfo_Addons	proxy/vless/encoding/addons.pb.go	/^var xxx_messageInfo_Addons proto.InternalMessageInfo$/;"	v	package:encoding	typeref:typename:proto.InternalMessageInfo
xxx_messageInfo_Config	app/p2p/config.pb.go	/^var xxx_messageInfo_Config proto.InternalMessageInfo$/;"	v	package:p2p	typeref:typename:proto.InternalMessageInfo
xxx_messageInfo_HelloReply	app/p2p/wire/notifier.pb.go	/^var xxx_messageInfo_HelloReply proto.InternalMessageInfo$/;"	v	package:wire	typeref:typename:proto.InternalMessageInfo
xxx_messageInfo_HelloRequest	app/p2p/wire/notifier.pb.go	/^var xxx_messageInfo_HelloRequest proto.InternalMessageInfo$/;"	v	package:wire	typeref:typename:proto.InternalMessageInfo
xxx_messageInfo_HelloSeedList	app/p2p/wire/seedlist.pb.go	/^var xxx_messageInfo_HelloSeedList proto.InternalMessageInfo$/;"	v	package:wire	typeref:typename:proto.InternalMessageInfo
xxx_messageInfo_MessageData	app/p2p/wire/seedlist.pb.go	/^var xxx_messageInfo_MessageData proto.InternalMessageInfo$/;"	v	package:wire	typeref:typename:proto.InternalMessageInfo
xxx_messageInfo_Seed	app/p2p/config.pb.go	/^var xxx_messageInfo_Seed proto.InternalMessageInfo$/;"	v	package:p2p	typeref:typename:proto.InternalMessageInfo
xxx_messageInfo_SeedInfo	app/p2p/wire/seedlist.pb.go	/^var xxx_messageInfo_SeedInfo proto.InternalMessageInfo$/;"	v	package:wire	typeref:typename:proto.InternalMessageInfo
xxx_messageInfo_SeedListRequest	app/p2p/wire/seedlist.pb.go	/^var xxx_messageInfo_SeedListRequest proto.InternalMessageInfo$/;"	v	package:wire	typeref:typename:proto.InternalMessageInfo
xxx_messageInfo_SeedListResponse	app/p2p/wire/seedlist.pb.go	/^var xxx_messageInfo_SeedListResponse proto.InternalMessageInfo$/;"	v	package:wire	typeref:typename:proto.InternalMessageInfo
yamux	app/p2p/api.go	/^	yamux "github.com\/libp2p\/go-libp2p-yamux"$/;"	P	package:github.com/libp2p/go-libp2p-yamux
受支持的版本 Supported Versions	SECURITY.md	/^## 受支持的版本 Supported Versions$/;"	s	chapter:安全策略 Security Policy
安全策略 Security Policy	SECURITY.md	/^# 安全策略 Security Policy$/;"	c
汇报安全风险 Reporting a Vulnerability	SECURITY.md	/^## 汇报安全风险 Reporting a Vulnerability$/;"	s	chapter:安全策略 Security Policy
